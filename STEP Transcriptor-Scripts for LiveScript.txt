
## LiveCode Scripts driving STEP Transcriptor 2.6.1 (Peirce Edition Project, IUPUI, 2017)

## A. Scripts embedded in the main stack and usable by any component of the software


## STACK STEP Transcription Module


global gAllCustomCombinKeys

## Stack opening and closing routines

on preOpenStack
   if the platform is "MacOS" then
      if the systemversion contains "10.10" then resetRectYosemite "no revCache"
      else resetRect "no revCache"
   end if
   set the loc of this stack to the screenLoc
   populateAllWindowMenus
end preOpenStack

on openStack
   local gRevAppIcon
   put "1190" into gRevAppIcon
   set the raiseWindows to true
   readInSTEPTranscriptorPreferences
   put the cAllCombinationKeys of stack "Customize Keyboard Shortcuts" into gAllCustomCombinKeys
   if "Show Tooltips" is in btn "Help" of group "STEP Menu 1" of cd 1 of stack "STEP Transcription Module" then set the toolTipDelay to 0 else set the toolTipDelay to 200
   if "Show Tag Tips" is in btn "Help" of group "STEP Menu 1" of cd 1 of stack "STEP Transcription Module" then set the cTagTip of stack "STEP Transcription Module" to "off" else set the cTagTip of stack "STEP Transcription Module" to "on"
   set the uWordsToSkipReSpelling of cd 1 of stack "STEP Transcription Module" to collectCustomEnglishDictionary()
   set the uMotsAEviterReOrthographe  of cd 1 of stack "STEP Transcription Module" to collectCustomFrenchDictionary()
   pass openStack
end openStack

function getPath tStack
   local tPath
   set the itemDel to slash
   put the effective filename of this stack into tPath
   set the defaultFolder to item 1 to -2 of tPath
   put tStack into item -1 of tPath
   return tPath
end getPath

on saveStack
   local ut
   get the effective filename of stack "STEP Transcription Module"
   set the itemDelimiter to "/"
   put item 1 to -1 of it into ut
   save stack "STEP Transcription Module" as ut
end saveStack

on readjustStack
   set the height of this stack to the minHeight of this stack
   set the width of this stack to the minWidth of this stack
   repeat with j = 1 to the number of cards of this stack
      repeat with i = 1 to the number of controls of cd j of this stack
         if the id of control i of cd 1 is among the items of "1903,1193,1194,1195" then next repeat
         if the platform is "MacOS" and the systemversion contains "10.10" then set the rect of control i of cd j of this stack to the cRectYosemite of control i of cd j of this stack
         else set the rect of control i of cd j of this stack to the cRect of control i of cd j of this stack
      end repeat
   end repeat
   if the visible of group id 1931 of cd 1 and the cLineMarkTop of cd 1 <> empty and the cLineMarkTop of cd 1 <> 0 then set the top of group id 1931 of cd 1 to the cLineMarkTop of cd 1
   saveStack
end readjustStack

on resumeStack
   populateAllWindowMenus
   gatheringGlyphSetsAndContractions
end resumeStack

on gatheringGlyphSetsAndContractions
   local tKeyList,tCharInfos,tListOfChars,tLN
   put the customKeys of fld id 1020 of cd 1 of stack "Special Font Characters" into tKeyList
   filter tKeyList without "cRect*"
   filter tKeyList without "cellFormatting"
   set the itemDel to "|"
   repeat for each line tKey in tKeyList
      put the tKey of fld id 1020 of cd 1 of stack "Special Font Characters" into tCharInfos
      if tCharInfos is empty then next repeat
      put line 1 of tCharInfos & cr after tListOfChars
      delete line 1 of tCharInfos
      if tCharInfos is empty then
         delete line -1 of tListOfChars
         next repeat
      end if
      repeat for each line tLine in tCharInfos
         put tab & item 2 of tLine & cr after tListOfChars
      end repeat
   end repeat
   delete char -1 of tListOfChars
   filter tListOfChars without empty
   put lineOffset("Insert Special Font Character...",the text of btn "Font" of group "STEP Menu 1" of cd 1 of stack "STEP Transcription Module") into tLN
   if tab is in tListOfChars then
      put "Insert Special Font Character..."& cr & tListOfChars into line tLN to -1 of btn "Font" of group "STEP Menu 1" of cd 1 of stack "STEP Transcription Module"
   else
      put "Insert Special Font Character..." into line tLN to -1 of btn "Font" of group "STEP Menu 1" of cd 1 of stack "STEP Transcription Module"
   end if
end gatheringGlyphSetsAndContractions

on openCard
   pass openCard
end openCard

on closeStack
   if "wordlib.rev" is among the lines of the stacksInUse then release library stack "wordlib.rev"
   stuffToDoBeforeClosingOrQuitting
   pass closeStack
end closeStack

on stuffToDoBeforeClosingOrQuitting
   local  tSubStackList,tOpenStackList,tListSubStacks,tPhrase,ut
   if the short name of this stack is not "STEP Transcription Module" then exit stuffToDoBeforeClosingOrQuitting
   put the subStacks of this stack into tSubStackList
   if tSubStackList is not empty then
      put the openStacks into tOpenStackList
      put empty into tListSubStacks
      repeat with k = 1 to the number of lines of tSubStackList
         if line k of tSubStackList is among the lines of tOpenStackList then
            put line k of tSubStackList & comma & space after tListSubStacks
         end if         
      end repeat
      if tListSubStacks is not empty then
         delete char -2 to -1 of tListSubStacks
         if the number of items of tListSubStacks is 1 then put "window that is" into tPhrase else put "windows that are" into tPhrase
         answer "Closing STEP Transcriptor’s main window will close the associated "& tPhrase & " still open: "&tListSubStacks&". STEP Transcriptor will then quit. Do you want to proceed?" with "Cancel" or "Quit"
         if it is "Cancel" then exit to top
         replace comma&space with cr in tListSubStacks
         repeat with k = 1 to the number of lines of tListSubStacks
            if there is a stack (line k of tListSubStacks) then close stack (line k of tListSubStacks)
         end repeat
      end if
   end if
   deleteUndoCustomKeys
   storeSTEPTranscriptorPreferences
   if the hilite of btn "Example" of cd 1 of stack "STEP Transcription Module" is false
   then send "mouseUp" to btn id 1073 of cd 1 of stack "STEP Transcription Module"
   saveStack
end stuffToDoBeforeClosingOrQuitting

on shutDownRequest
   if "wordlib.rev" is among the lines of the stacksInUse then release library stack "wordlib.rev"
   stuffToDoBeforeClosingOrQuitting
   pass shutDownRequest
end shutDownRequest

## Stack geometry preservation

on resizeStack
   if the short name of this stack is "STEP Transcription Module" then
      if the visible of group id 1931 of cd 1 of stack "STEP Transcription Module" then
         if the cLineMarkTop of cd 1 of stack "STEP Transcription Module" <> empty and the cLineMarkTop of cd 1 of stack "STEP Transcription Module" <> 0 then set the top of group id 1931 of cd 1 of stack "STEP Transcription Module" to the cLineMarkTop of cd 1 of stack "STEP Transcription Module"
         if the cLineMarkTop of cd 1 of stack "STEP Transcription Module" > (the bottom of fld id 1004 of cd 1 of stack "STEP Transcription Module")-26 then 
            set the cLineMarkTop of cd 1 of stack "STEP Transcription Module" to (the bottom of fld id 1004 of cd 1 of stack "STEP Transcription Module")-30
            set the top of group id 1931 of cd 1 of stack "STEP Transcription Module" to the cLineMarkTop of cd 1 of stack "STEP Transcription Module"
            set the left of group id 1931 of cd 1 of stack "STEP Transcription Module" to 35
         end if
         setLocLineMark
      end if
   end if
   pass resizeStack
end resizeStack

on setLocLineMark
   local tBot
   put the bottom of group id 1931 of cd 1 of stack "STEP Transcription Module" into tBot
   set the bottom of graphic id 1903 of cd 1 of stack "STEP Transcription Module" to tBot-10
   set the bottom of graphic id 1193 of cd 1 of stack "STEP Transcription Module" to tBot-4
   set the bottom of graphic id 1194 of cd 1 of stack "STEP Transcription Module" to tBot-4
   set the left of graphic id 1903 of cd 1 of stack "STEP Transcription Module" to 54
   set the left of graphic id 1193 of cd 1 of stack "STEP Transcription Module" to 39
   set the left of graphic id 1194 of cd 1 of stack "STEP Transcription Module" to (the right of graphic id 1903 of cd 1 of stack "STEP Transcription Module")-19
end setLocLineMark

on recordLinemarkMove
   set the cLineMarkTop of cd 1 of stack "STEP Transcription Module" to the top of group id 1931 of cd 1 of stack "STEP Transcription Module"
   if the platform is "MacOS" and the systemversion contains "10.10" then set the cRectYosemite of group id 1931 of cd 1 of stack "STEP Transcription Module" to the rect of group id 1931 of cd 1 of stack "STEP Transcription Module"
   else set the cRect of group id 1931 of cd 1 of stack "STEP Transcription Module" to the rect of group id 1931 of cd 1 of stack "STEP Transcription Module"
end recordLinemarkMove

on resetRect pCache
   local ut
   lock screen
   set the width of this stack to the minWidth of this stack
   set the height of this stack to the minHeight of this stack
   repeat with j = 1 to the number of cards of this stack
      repeat with i = 1 to the number of controls of cd j of this stack
         set the rect of control i of cd j of this stack to the cRect of control i of cd j of this stack
      end repeat
   end repeat
   if pCache <> "no revCache" then revCacheGeometry
   get the filename of this stack
   set the itemDelimiter to "/"
   put item 1 to -1 of it into ut
   save this stack as ut
end resetRect

on resetCRect
   lock screen
   set the width of this stack to the minWidth of this stack
   set the height of this stack to the minHeight of this stack
   repeat with j = 1 to the number of cards of this stack
      repeat with i = 1 to the number of controls of cd j of this stack
         set the cRect of control i of cd j of this stack to the rect of control i of cd j of this stack
      end repeat
   end repeat
   revCacheGeometry
   saveStack
end resetCRect

on resetRectYosemite pCache
   lock screen
   set the width of this stack to the minWidth of this stack
   set the height of this stack to the minHeight of this stack
   repeat with j = 1 to the number of cards of this stack
      repeat with i = 1 to the number of controls of cd j of this stack
         set the rect of control i of cd j of this stack to the cRectYosemite of control i of cd j of this stack
      end repeat
   end repeat
   if pCache <> "no revCache" then revCacheGeometry
   saveStack
end resetRectYosemite

on resetCRectYosemite
   lock screen
   set the width of this stack to the minWidth of this stack
   set the height of this stack to the minHeight of this stack
   repeat with j = 1 to the number of cards of this stack
      repeat with i = 1 to the number of controls of cd j of this stack
         set the cRectYosemite of control i of cd j of this stack to the rect of control i of cd j of this stack
      end repeat
   end repeat
   revCacheGeometry
   saveStack
end resetCRectYosemite

## Stack menu bar administration

on populateInsertMenu
   local tMenuList,tFullMenu,tHyphen,tStackName,someError
   try
      put the cVisibleSpecialCharactersSubMenus of btn id 1106 of cd 1 of stack "STEP Transcription Module" into tMenuList
      put empty into tFullMenu
      put "-" into tHyphen
      put "STEP Transcription Module" into tStackName
      repeat for each line tSubMenu in tMenuList
         do "put the "&tSubMenu& " of btn id 1106 of cd 1 of stack tStackName & cr & tHyphen & cr after tFullMenu"
      end repeat
      put "Add or Manage Unicode Characters..." & cr & "Edit Unicode Characters Menu..." after tFullMenu
      replace cr&cr with cr in tFullMenu
      put tFullMenu into btn "Insert" of group "STEP Menu 1" of cd 1 of stack "STEP Transcription Module"
   catch someError
      if someError is not empty then answer "Sorry, an error occurred. Please report it to the developer:"&&someError
   end try
end populateInsertMenu

on populateAllWindowMenus
   populateMenuWindow "Window","STEP Menu 1","STEP Transcription Module"
   populateInsertMenu
   if there is a stack "STEP Tools" then populateLauncherMenuWindow "Window","Launcher Menu","STEP Tools"
end populateAllWindowMenus

on checkLauncherWindow tStackName
   local theStacks
   if there is a stack "STEP Tools" then 
      put the openStacks into theStacks
      filter theStacks without empty
      get lineOffset(tStackName,theStacks)
      if it <> 0 then put "!c" before line it of theStacks
      put theStacks into button "Window" of group "Launcher Menu" of stack "STEP Tools"
   end if
end checkLauncherWindow

on populateMenuWindow tMenuName,tGroupName,tStackName
   local tBackDropMode,theStacks,someError
   try
      put (line 1 of button tMenuName of group tGroupName of stack tStackName)&cr&"-"&cr into tBackDropMode
      if "Image Browser" is in tStackName then
         if the systemWindow of stack "STEP Image Browser" is true then
            put "Stop Window From Floating Above Others"&cr&"-"&cr after tBackDropMode
         else if the systemWindow of stack "STEP Image Browser" is false then
            put "Make Window Float Above All Others"&cr&"-"&cr after tBackDropMode
         end if
      end if
      put the openStacks into theStacks
      filter theStacks without empty
      get lineOffset(tStackName,theStacks)
      if it <> 0 then put "!c" before line it of theStacks
      put tBackDropMode & theStacks into button tMenuName of group tGroupName of stack tStackName
   catch someError
      if someError is not empty then answer "Sorry, an error occurred. Please report it to the developer:"&&someError
   end try
end populateMenuWindow

on populateLauncherMenuWindow tMenuName,tGroupName,tStackName
   local theStacks
   put the openStacks into theStacks
   filter theStacks without empty
   get lineOffset(tStackName,theStacks)
   if it <> 0 then put "!c" before line it of theStacks
   put theStacks into button tMenuName of group tGroupName of stack tStackName
end populateLauncherMenuWindow

## Folder functions

function getAppDataFolderPath
   local appDataFolder
   if the platform = "MacOS" then
      if item 1 of the systemVersion >= 10 then 
         put specialFolderPath("Support") into appDataFolder 
      else 
         put specialFolderPath("Preferences") into appDataFolder
      end if
   else if the platform = "Win32" then
      put specialFolderPath("0x001a") into appDataFolder
   else if the platform = "Linux" then
      put specialFolderPath("Home") into appDataFolder
   end if
   return appDataFolder
end getAppDataFolderPath

function getDocumentsFolderPath
   local DocumentsFolder
   if the platform = "MacOS" then
      if the platform is "MacOS" and item 1 of the systemVersion >= 10 then 
         put specialFolderPath("Documents") into DocumentsFolder
      else 
         put the defaultFolder into DocumentsFolder
      end if
   else if the platform = "Win32" then
      put specialFolderPath("Documents") into DocumentsFolder
   else if the platform = "Linux" then
      put specialFolderPath("Home") into DocumentsFolder
   end if
   if char -1 of DocumentsFolder is not "/" then put "/" after DocumentsFolder
   return DocumentsFolder
end getDocumentsFolderPath

function getHomeFolderPath
   local DocumentsFolder
   if the platform = "MacOS" then
      if the platform is "MacOS" and item 1 of the systemVersion >= 10 then 
         put specialFolderPath("Home") into DocumentsFolder
      else 
         put the defaultFolder into DocumentsFolder
      end if
   else if the platform = "Win32" then
      put specialFolderPath("Home") into DocumentsFolder
   else if the platform = "Linux" then
      put specialFolderPath("Home") into DocumentsFolder
   end if
   if char -1 of DocumentsFolder is not "/" then put "/" after DocumentsFolder
   return DocumentsFolder
end getHomeFolderPath

function getPreferencesFolderPath
   local tPreferenceFolder 
   if the platform = "MacOS" then
      put specialFolderPath("preferences") into tPreferenceFolder
   else if the platform = "Win32" then
      put specialFolderPath("0x0023") into tPreferenceFolder
   else if the platform = "Linux" then
      put specialFolderPath("home") into tPreferenceFolder
   end if
   return tPreferenceFolder
end getPreferencesFolderPath

function customPreferencesFolder
   local ot,tPath
   put the effective filename of this stack into ot
   set the defaultFolder to getPreferencesFolderPath()
   if not (there is a folder "STEP Transcriptor") then create folder "STEP Transcriptor"
   put getPreferencesFolderPath() & "/STEP Transcriptor" into tPath
   set the defaultFolder to tPath
   if not (there is a folder "Custom Preferences Data") then create folder "Custom Preferences Data"
   set the defaultFolder to item 1 to -2 of ot
   return tPath & "/Custom Preferences Data"
end customPreferencesFolder

function importedFilesFolder
   local ot,tPath
   put the effective filename of this stack into ot
   set the defaultFolder to getAppDataFolderPath()
   if not (there is a folder "STEP Files") then create folder "STEP Files"
   put getAppDataFolderPath() & "/STEP Files" into tPath
   set the defaultFolder to tPath
   if not (there is a folder "STEP Imported Files") then create folder "STEP Imported Files"
   set the defaultFolder to item 1 to -2 of ot
   return tPath & "/STEP Imported Files"
end importedFilesFolder

## Recording Preferences re special character data, graphics, custom dictionaries, tags

on storeSpecialCharacterDataIntoPrefFile
   local tFileName,ot
   put "STEPTranscriptorSpecialCharacterData.html" into tFileName
   put the effective filename of this stack into ot
   set the defaultFolder to customPreferencesFolder()
   put gatherSpecialCharacterData() into URL ("file:"&tFileName)
   set the defaultFolder to item 1 to -2 of ot
end storeSpecialCharacterDataIntoPrefFile

function gatherSpecialCharacterData
   local tKeys,tCustKey,tArchive
   put the customKeys of btn id 1106 of cd 1 of stack "STEP Transcription Module" into tKeys
   filter lines of tKeys without "cHidden*"
   filter lines of tKeys without "cVisible*"
   filter lines of tKeys without "*Yosemite"
   filter lines of tKeys without "cRect*"
   filter lines of tKeys without "cDefault*"
   sort lines of tKeys ascending
   repeat for each line tCustKey in tKeys
      put tCustKey&" of btn id 1106"&cr & the tCustKey of btn id 1106 of cd 1 & cr &"//"&tCustKey&" of btn id 1106//"&cr after tArchive
   end repeat
   put tArchive into fld id 1014 of cd 1 of stack "STEP Transcription Module"
   put the HTMLText of fld id 1014 of cd 1 of stack "STEP Transcription Module" into tArchive
   put empty into fld id 1014 of cd 1 of stack "STEP Transcription Module"
   return tArchive
end gatherSpecialCharacterData

on storeTEITagCustomPreferences
   local tFileName,ot
   put "STEPTranscriptorTEITagCustomPreferences.html" into tFileName
   put the effective filename of this stack into ot
   set the defaultFolder to customPreferencesFolder()
   put gatherTEITagCustomPreferences() into URL ("file:"&tFileName)
   set the defaultFolder to item 1 to -2 of ot
end storeTEITagCustomPreferences

function getGraphicsFolderPath
   local tPath
   set the itemDelimiter to slash
   get the effective filename of this stack
   put item 1 to -2 of it into tPath
   set the defaultFolder to tPath
   if there is no folder "STEP Graphics" then create folder "STEP Graphics"
   return tPath&"/STEP Graphics"
end getGraphicsFolderPath

on copyGraphicFileIntoStepGraphicsFolder
   local tFilePath,tNewPath
   answer file "Select the graphic file to be stored into STEP’s Graphics folder."
   if it is empty or the result is "Cancel" then exit copyGraphicFileIntoStepGraphicsFolder
   put it into tFilePath
   set the itemDelimiter to slash
   put getGraphicsFolderPath() into tNewPath
   revCopyFile tFilePath,tNewPath
   answer "Graphic file “"&item -1 of tFilePath&"” has been copied into STEP’s graphics folder." as sheet
end copyGraphicFileIntoStepGraphicsFolder

function gatherCustomEnglishDictionary
   return the uWordsToSkipReSpelling of cd 1 of stack "STEP Transcription Module"
end gatherCustomEnglishDictionary

function gatherCustomFrenchDictionary
      return the uMotsAEviterReOrthographe of cd 1 of stack "STEP Transcription Module"
end gatherCustomFrenchDictionary

on storeCustomEnglishDictionary
   local tFileName,ot
   put "STEPCustomEnglishDictionary.txt" into tFileName
   put the effective filename of this stack into ot
   set the defaultFolder to customPreferencesFolder()
   put gatherCustomEnglishDictionary() into URL ("file:"&tFileName)
   set the defaultFolder to item 1 to -2 of ot
end storeCustomEnglishDictionary

on storeCustomFrenchDictionary
   local tFileName,ot
   put "STEPCustomFrenchDictionary.txt" into tFileName
   put the effective filename of this stack into ot
   set the defaultFolder to customPreferencesFolder()
   put gatherCustomFrenchDictionary() into URL ("file:"&tFileName)
   set the defaultFolder to item 1 to -2 of ot
end storeCustomFrenchDictionary

on storeSTEPTranscriptorPreferences
   storeSpecialCharacterDataIntoPrefFile
   storeTEITagCustomPreferences
   storeCustomEnglishDictionary
   storeCustomFrenchDictionary
end storeSTEPTranscriptorPreferences

function gatherTEITagCustomPreferences
   local tKeys,tCustKey,tArchive,tStackName,tCList
   put "STEP Transcription Module" into tStackName
   put the customKeys of stack tStackName into tKeys
   filter lines of tKeys with "*TEI"
   sort lines of tKeys ascending
   put cr&"cPagebreakHistory" after tKeys
   repeat for each line tCustKey in tKeys
      put tCustKey &" of stack "&quote&tStackName&quote&cr & the tCustKey of stack tStackName & cr &"//"&tCustKey&" of stack "&quote&tStackName&quote&"//"&cr after tArchive
   end repeat
   
   put "TEI Tag Customization" into tStackName
   put "cTranscriptionTags,cAllTags,cDescriptionTags,cStructureTags" into tCList
   repeat for each item tCustKey in tCList
      put tCustKey &" of btn id 1005 of cd 1 of stack "&quote&tStackName& quote &cr & the tCustKey of btn id 1005 of cd 1 of stack tStackName &cr &"//"&tCustKey&" of btn id 1005 of cd 1 of stack "&quote&tStackName&quote &"//"&cr after tArchive
   end repeat
   
   put "TEI Tag Custom Colors" into tStackName
   put the customKeys of stack tStackName into tKeys
   sort lines of tKeys ascending
   repeat for each line tCustKey in tKeys
      put tCustKey &" of stack "&quote&tStackName&quote&cr & the tCustKey of stack tStackName & cr &"//"&tCustKey&" of stack "&quote&tStackName&quote&"//"&cr after tArchive
   end repeat
   
   put "Customize Pull-Down Tag Menus" into tStackName
   put "cTranscriptionMenu,cStructureMenu,cDescriptionMenu" into tCList
   repeat for each item tCustKey in tCList
      put tCustKey &" of btn id 1015 of cd 1 of stack "&quote&tStackName& quote &cr & the tCustKey of btn id 1015 of cd 1 of stack tStackName &cr &"//"&tCustKey&" of btn id 1015 of cd 1 of stack "&quote&tStackName&quote &"//"&cr after tArchive
   end repeat
   put "Customize Pop-Up Tag Menus" into tStackName
   repeat for each item tCustKey in tCList
      put tCustKey &" of btn id 1003 of cd 1 of stack "&quote&tStackName& quote &cr & the tCustKey of btn id 1003 of cd 1 of stack tStackName &cr &"//"&tCustKey&" of btn id 1003 of cd 1 of stack "&quote&tStackName&quote &"//"&cr after tArchive
   end repeat
   
   put "Customize Keyboard Shortcuts" into tStackName
   put "cAllCombinationKeys,cAllCommands,cAlltags" into tCList
   repeat for each item tCustKey in tCList
      put tCustKey &" of stack "&quote&tStackName&quote&cr & the tCustKey of stack tStackName & cr &"//"&tCustKey&" of stack "&quote&tStackName&quote&"//"&cr after tArchive
   end repeat
   
   put "Assign Tags to Function Keys" into tStackName
   put "uF1,uF2,uF3,uF4,uF5,uF6,uF7,uF8,uF9,uF10,uF11,uF12,uF13,uF14,uF15,cAllAssignments" into tCList
   repeat for each item tCustKey in tCList
      put tCustKey &" of stack "&quote&tStackName&quote&cr & the tCustKey of stack tStackName & cr &"//"&tCustKey&" of stack "&quote&tStackName&quote&"//"&cr after tArchive
   end repeat
   
   put tArchive into fld id 1014 of cd 1 of stack "STEP Transcription Module"
   put the HTMLText of fld id 1014 of cd 1 of stack "STEP Transcription Module" into tArchive
   put empty into fld id 1014 of cd 1 of stack "STEP Transcription Module"
   return tArchive
end gatherTEITagCustomPreferences

function collectSpecialCharacterDataFromPrefFile
   local tFileName,ot,ut
   put "STEPTranscriptorSpecialCharacterData.html" into tFileName
   put the effective filename of this stack into ot
   set the defaultFolder to customPreferencesFolder()
   put URL("file:"&tFileName) into ut
   return ut
end collectSpecialCharacterDataFromPrefFile

function collectCustomEnglishDictionary
   local tFileName,ot,ut
   put "STEPCustomEnglishDictionary.txt" into tFileName
   put the effective filename of this stack into ot
   set the defaultFolder to customPreferencesFolder()
   put URL("file:"&tFileName) into ut
   return ut
end collectCustomEnglishDictionary

function collectCustomFrenchDictionary
   local tFileName,ot,ut
   put "STEPCustomFrenchDictionary.txt" into tFileName
   put the effective filename of this stack into ot
   set the defaultFolder to customPreferencesFolder()
   put URL("file:"&tFileName) into ut
   return ut
end collectCustomFrenchDictionary

on readInSTEPTranscriptorPreferences
   local tText,tText2,tCustomPrefList,tKeys,tCust,tProp,tControlID,tPC,tToLocate1,tToLocate2,tStart,tStop,tStackName
   put "STEP Transcription Module" into tStackName
   put collectSpecialCharacterDataFromPrefFile() into tText
   put cr&collectTEITagCustomPreferencesFromPrefFile() after tText
   put collectAllCustomKeyNamesAndLoc(tText) into tCustomPrefList
   delete char -1 of tCustomPrefList
   repeat for each item tCust in tCustomPrefList
      set the itemDel to "|"
      put item 1 of tCust into tProp
      put item 2 of tCust into tControlID
      set the itemDel to comma
      put tProp&&"of"&&tControlID into tPC
      put "<p>"&tPC&"</p>" into tToLocate1
      put "<p>//"&tPC&"//</p>" into tToLocate2
      set the wholeMatches to true
      put lineOffset(tToLocate1,tText) into tStart
      if tStart is 0 then next repeat
      set the wholeMatches to true
      put lineOffset(tToLocate2,tText) into tStop
      if tStop is 0 then next repeat
      put line tStart+1 to tStop-1 of tText into tText2
      if (tText is not empty) and (tText is not cr) and (tText is not "<p></p>") then
         if "stack" is not in tControlID then
            if "fld" is in tPC then
               if (there is a fld id (word -1 of tControlID) of cd 1 of stack tStackName) then 
                  set the tProp of fld id (word -1 of tControlID) of cd 1 of stack tStackName to HTMLtoText(tText2)
               end if
            else if "btn" is in tPC then
               if (there is a btn id (word -1 of tControlID) of cd 1 of stack tStackName) then 
                  set the tProp of btn id (word -1 of tControlID) of cd 1 of stack tStackName to HTMLtoText(tText2)
               end if
            end if
         else
            if "fld" is in tPC then
               if (there is a fld id (segment 3 of tControlID) of cd 1 of stack (char 2 to -2 of segment -1 of tControlID)) then 
                  set the tProp of fld id(segment 3 of tControlID) of cd 1 of stack (char 2 to -2 of segment -1 of tControlID) to HTMLtoText(tText2)
               end if
            else if "btn" is in tPC then
               if (there is a btn id (segment 3 of tControlID) of cd 1 of stack (char 2 to -2 of segment -1 of tControlID)) then 
                  set the tProp of btn id (segment 3 of tControlID) of cd 1 of stack (char 2 to -2 of segment -1 of tControlID) to HTMLtoText(tText2)
               end if
            else if ("btn" is not in tPC and "fld" is not in tPC) then
               if "cd 1" is in tPC then
                  set the tProp of cd 1 of stack (char 2 to -2 of segment -1 of tControlID) to HTMLtoText(tText2)
               else
                  set the tProp of stack (char 2 to -2 of segment -1 of tControlID) to HTMLtoText(tText2)
               end if
            end if
         end if
      end if
   end repeat
end readInSTEPTranscriptorPreferences

function collectTEITagCustomPreferencesFromPrefFile
   local tFileName,ot,ut
   put "STEPTranscriptorTEITagCustomPreferences.html" into tFileName
   put the effective filename of this stack into ot
   set the defaultFolder to customPreferencesFolder()
   put URL("file:"&tFileName) into ut
   return ut
end collectTEITagCustomPreferencesFromPrefFile

function collectAllCustomKeyNamesAndLoc pHTMList
   local uts,ots,x,y,tCustNameAndLoc,tCustList
   put offsets("<p>//",pHTMList) into uts
   put offsets("//</p>",pHTMList) into ots
   repeat with i = 1 to the number of items of uts
      put item i of uts into x
      put item i of ots into y
      put char (x+5) to (y-1) of pHTMList into tCustNameAndLoc
      put segment 1 of tCustNameAndLoc & "|" & segment 3 to -1 of tCustNameAndLoc & comma after tCustList
   end repeat
   return tCustList
end collectAllCustomKeyNamesAndLoc

## Transformational functions

function HTMLtoText pHTMText
   set the HTMLText of fld id 1014 of cd 1 of stack "STEP Transcription Module" to pHTMText
   return the text of fld id 1014 of cd 1 of stack "STEP Transcription Module"
end HTMLtoText

function replaceDownDashWithSpace tString
   replace "_" with space in tString
   return tString
end replaceDownDashWithSpace

function replaceSpaceWithDownDash tString
   replace space with "_" in tString
   return tString
end replaceSpaceWithDownDash

function stripDuplicates2 tListToStrip
   local tKeys,tCount,tArray
   repeat for each line tCount in tListToStrip
      put 1 into tArray[tCount]
   end repeat
   put the keys of tArray into tKeys
   sort tKeys ascending international
   return tKeys
end stripDuplicates2

function stripDuplicates tListToStrip
   local tStrippedList
   repeat for each line tCount in tListToStrip
      if tCount is not among the lines of tStrippedList then 
         put tCount & cr after tStrippedList
      end if
   end repeat
   if char -1 of tStrippedList is cr then delete char -1 of tStrippedList
   return tStrippedList
end stripDuplicates

function stripDuplicateItems tListToStrip
   local tStrippedList
   if the number of items of line 1 of tListToStrip = 1 then return tListToStrip
   put empty into tStrippedList
   repeat for each item tCount in line 1 of tListToStrip
      if tCount is not among the items of tStrippedList then 
         put tCount & comma after tStrippedList
      end if
   end repeat
   if char -1 of tStrippedList is comma then delete char -1 of tStrippedList
   return tStrippedList
end stripDuplicateItems

function reverseItemList pItemList
   local tReverseList
   repeat for each item pItem in pItemList
      put comma & pItem before tReverseList
   end repeat
   delete char 1 of tReverseList
   return tReverseList
end reverseItemList

function reverseLineList pLineList
   local tReverseList
   repeat for each line pLine in pLineList
      put cr & pLine before tReverseList
   end repeat
   delete char 1 of tReverseList
   return tReverseList
end reverseLineList

function deleteZero pNum
   repeat until not(pNum begins with "0")
      delete char 1 of pNum
   end repeat
   return pNum
end deleteZero

function singleSpace pString
   replace space&space with space in pString
   return pString
end singleSpace

function removeSomeZeroes pNum,pLength
   repeat until length(pNum) = pLength
      if char 1 of pNum = 0 then delete char 1 of pNum
      else exit repeat
   end repeat
   return pNum
end removeSomeZeroes


function removeExtraCodeUnits pHText
   local tReg
   put ";&#[\d]+;" into tReg
   put replaceText(pHText,tReg,";") into pHText
   return pHText
end removeExtraCodeUnits

function deleteNonPrintingCharacters pString
   repeat for each item theNum in "0,1,2,3,4,5,6,7,8"
      replace numToChar(theNum) with empty in pString
   end repeat
   return pString
end deleteNonPrintingCharacters

function singlequoteur tTextToCurl
   local tPuncts,tCount,tMinus,tWord,tChar
   if "'" is not in tTextToCurl then return tTextToCurl
   if char 1 of tTextToCurl is "'" then put "‘" into char 1 of tTextToCurl
   replace "''" with "’‘" in tTextToCurl
   replace " '" with " ‘" in tTextToCurl
   replace "'" with "’" in tTextToCurl
   put "([{¡¿" into tPuncts
   repeat for each char tChar in tPuncts
      replace tChar&"'" with tChar&"‘" in tTextToCurl
   end repeat
   put ")}]!?.,:;" into tPuncts
   repeat for each char tChar in tPuncts
      replace "'"&tChar with "’"&tChar in tTextToCurl
   end repeat
   put 0 into tCount
   repeat for each word tWord in tTextToCurl
      put 1 into tMinus
      add 1 to tCount
      if char -1 of tWord is in ",±;:)]}" then 
         delete char -1 of tWord
         put 2 into tMinus
      end if
      if char 1 of tWord is "‘" and char -1 of tWord is not "’" then
         if checkSingleQuoteAtEnd(word tCount+1 to -1 of tTextToCurl) is true then put "‘" into char 1 of word tCount of tTextToCurl else put "’" into char 1 of word tCount of tTextToCurl
      end if
      if char 1 of tWord is not in "'‘" and char -tMinus of tWord is "’" and char 1 to -2 of tWord is a number then put "'" into char -tMinus of word tCount of tTextToCurl
   end repeat
   return tTextToCurl
end singlequoteur

function checkSingleQuoteAtEnd tStrings
   repeat for each word tW in tStrings
      if char 1 of tW is in "([{>" then delete char 1 of tW
      if char -1 of tW is in ",±;:)]}<" then delete char -1 of tW
      if char 1 of tW is in "‘‚" then return false
      if (char 1 of tW is not in "‘‚") and (char -1 of tW is not "’") then next repeat
      if (char 1 of tW is not in "‘‚") and (char -1 of tW is "’") then return true
   end repeat
   return false
end checkSingleQuoteAtEnd

function deleteSpaceFromGuillemets pString
   if "«" is not in pString and "‹" is not in pString then return pString
   replace "« " with "«" in pString --regular space
   replace " »" with "»" in pString
   replace "‹ " with "‹" in pString
   replace " ›" with "›" in pString
   replace "« " with "«" in pString--hard space
   replace " »" with "»" in pString
   replace "‹ " with "‹" in pString
   replace " ›" with "›" in pString
   return pString
end deleteSpaceFromGuillemets
   
function doublequoteur tTextToCurl
   local tPuncts,tCount,tMinus,tWord,tChar
   if quote is not in tTextToCurl then return tTextToCurl
   if char 1 of tTextToCurl is quote then put "“" into char 1 of tTextToCurl
   replace quote&space&quote with "” “" in tTextToCurl
   replace space&quote with " “" in tTextToCurl
   put "([{¡¿>”" into tPuncts
   repeat for each char tChar in tPuncts
      replace tChar&quote with tChar&"“" in tTextToCurl
   end repeat
   put ")}]!?.,:;±<" into tPuncts
   repeat for each char tChar in tPuncts
      replace quote&tChar with "”"&tChar in tTextToCurl
   end repeat
   replace quote with "”" in tTextToCurl
   repeat for each word tWord in tTextToCurl
      put 1 into tMinus
      add 1 to tCount
      if char -1 of tWord is in ",±;:)]}" then 
         delete char -1 of tWord
         put 2 into tMinus
      end if
      if char 1 of tWord is not in "“„" and char -tMinus of tWord is "”" and char 1 to -2 of tWord is a number then put quote into char -tMinus of word tCount of tTextToCurl
   end repeat
   put 0 into tCount
   put uncurlyingClosingDoubleQuoteWithinTags(tTextToCurl) into tTextToCurl
   return tTextToCurl
end doublequoteur

function uncurlyingClosingDoubleQuoteWithinTags tTextToUncurl
   local ots
   put offsets("” ",tTextToUncurl) into ots
   if ots = 0 then return tTextToUncurl
   repeat for each item tItem in ots
      repeat with i = tItem-1 down to 1
         if char i of tTextToUncurl is ">" then exit repeat
         else if char i of tTextToUncurl is "<" then
            put quote into char tItem of tTextToUncurl
            exit repeat
         end if
      end repeat
   end repeat
   return tTextToUncurl
end uncurlyingClosingDoubleQuoteWithinTags


## Minimal TEI-XMLization of text file routine

on TEITagField
   local pTransc
   set cursor to watch
   lock screen
   put fld id 1004 of cd 1 of stack "STEP Transcription Module" into pTransc
   if "<filetype module="&quote&"Transcriptor"&quote&"/>" is in pTransc then replace "<filetype module="&quote&"Transcriptor"&quote&"/>" with empty in pTransc
   if word 1 of pTransc then delete word 1 of pTransc
   if word 1 of pTransc is "Emendator" or ("<filetype module="&quote&"Emendator"&quote&"/>" is in pTransc) then
      answer "Warning: it appears that the imported file was meant to be opened in STEP Emendator." as sheet
   end if
   if word 1 of pTransc is "Annotator" or ("<filetype module="&quote&"Annotator"&quote&"/>" is in pTransc) then
      answer "Warning: it appears that the imported file was meant to be opened in STEP Annotator." as sheet
   end if
   if "<body>" is not in line 1 to 3 of pTransc and "</body>" is not in line -3 to -1 of pTransc then
      put "<body>" & cr before pTransc
      put cr&"</body>" after pTransc
   end if
   repeat with x = 2 to (the number of lines of pTransc)-1
      if not (line x of pTransc begins with "<p") and not  (line x of pTransc ends with "</p>") then
         if char -1 of x = 0 then set cursor to busy
         put "<p>" before line x of pTransc
         put "</p>" after line x of pTransc
      end if
   end repeat
   set the caseSensitive to true
   replace "ZZQZZ" with "<lb/>" in pTransc
   replace "<lb/></p>" with "</p>" in pTransc
   filter pTransc without "<p></p>"
   put pTransc into fld id 1004 of cd 1 of stack "STEP Transcription Module"
   unlock screen
end TEITagField

on TEITagField2
   local pTransc
   lock screen
   put fld id 1004 of cd 1 of stack "STEP Transcription Module" into pTransc
   if "<filetype module="&quote&"Transcriptor"&quote&"/>" is in pTransc then replace "<filetype module="&quote&"Transcriptor"&quote&"/>" with empty in pTransc
   if word 1 of pTransc then delete word 1 of pTransc
   if word 1 of pTransc is "Emendator" or ("<filetype module="&quote&"Emendator"&quote&"/>" is in pTransc) then
      answer "Warning: it appears that the imported file was meant to be opened in STEP Emendator." as sheet
   end if
   if word 1 of pTransc is "Annotator" or ("<filetype module="&quote&"Annotator"&quote&"/>" is in pTransc) then
      answer "Warning: it appears that the imported file was meant to be opened in STEP Annotator." as sheet
   end if
   if "<body>" is not in line 1 to 3 of pTransc and "</body>" is not in line -3 to -1 of pTransc then
      put "<body>" & cr before fld id 1004 of cd 1 of stack "STEP Transcription Module"
      put cr&"</body>" after fld id 1004 of cd 1 of stack "STEP Transcription Module"
   end if
   put fld id 1004 of cd 1 of stack "STEP Transcription Module" into pTransc
   repeat with x = 2 to (the number of lines of pTransc)-1
      if not (line x of pTransc begins with "<p") and not  (line x of pTransc ends with "</p>") then
         put "<p>" before line x of fld id 1004 of cd 1 of stack "STEP Transcription Module"
         put "</p>" after line x of fld id 1004 of cd 1 of stack "STEP Transcription Module"
      end if
   end repeat
   set the caseSensitive to true
   replace "ZZQZZ" with "<lb/>" in fld id 1004 of cd 1 of stack "STEP Transcription Module"
   replace "<lb/></p>" with "</p>" in fld id 1004 of cd 1 of stack "STEP Transcription Module"
   filter fld id 1004 of cd 1 of stack "STEP Transcription Module" without "<p></p>"
end TEITagField2

## Backdrop management

on checkBackdrop
   get the backdrop
   if it is "none" then removeBackdrop else setBackdrop
end checkBackdrop

on setBackdrop
   set the backdrop to "black"
   put "Remove Backdrop" into line 1 of btn "Window" of group "STEP Menu 1" of cd 1 of stack "STEP Transcription Module"
end setBackdrop

on removeBackdrop
   set the backdrop to none
   put "Backdrop" into line 1 of btn "Window" of group "STEP Menu 1" of cd 1 of stack "STEP Transcription Module"
end removeBackdrop

## Use of function and command keys

on functionKey aka
   local tStackName,tAllFunctions,tAssignment,chunky,afld,tSta,tStoTemp,tBtnName,tFldID
   put the short name of this stack into tStackName
   if tStackName is "STEP Transcription Module" then
      put the cAllAssignments of stack "Assign Tags to Function Keys" into tAllFunctions
      if line aka of tAllFunctions is empty then pass functionKey
      put line aka of tAllFunctions into tAssignment
      if the selectedChunk is not "" and "<" is in tAssignment then
         put the selectedChunk into chunky
         put word -1 of chunky into afld
         put word 2 of chunky into tSta
         put word 4 of chunky into tStoTemp 
         if tStoTemp is (tSta-1) then put "Insert tag" into tBtnName
         else put "Encode selection" into tBtnName
         put the id of fld afld of cd 1 of stack tStackName into tFldID
         if tFldID is not among the items of "1004,1041,1151" then exit functionKey
         if "<" is in tAssignment then send "mouseUp"&&tFldID&comma&tAssignment to btn tBtnName of cd 1 of stack tStackName
         put tAssignment into fld id 1010 of cd 1 of stack tStackName
      else if "<" is not in tAssignment then
         if tAssignment is among the items of "Delete outer tags,Insert displayed tags,Delete all tags and attributes in selection,Copy tag,Replace tag with copied tag,Recolor selected tag" then
            put whichVisibleMainField() into tFldID
            if tFldID is 1004 then send "menuPick"&&tAssignment to btn id 1089 of cd 1 of stack "STEP Transcription Module"
            else if tFldID is among the items of "1041,1151" then 
               send "menuPick"&&tAssignment to btn id 1090 of cd 1 of stack "STEP Transcription Module"
            end if
         else
            put convertAssignmentToButtonNameOrMenuCommand(tAssignment) into tBtnName
            if there is a btn tBtnName  of cd 1 of stack tStackName then send "mouseUp" to btn convertAssignmentToButtonNameOrMenuCommand(tAssignment) of cd 1 of stack tStackName
            else obeyCommandKeyCombination whichVisibleMainField(),tBtnName
         end if
      end if
   end if
end functionKey

on commandKeyDown theKey
   local tFldID,tK,tlip,tCharTemp
   put the cAllCombinationKeys of stack "Customize Keyboard Shortcuts" into gAllCustomCombinKeys
   if the selectedField is not empty and the ID of the selectedField is among the items of "1004,1041,1151" then
      put the ID of the selectedField into tFldID
      if the platform is "MacOS" then
         if the optionKey is down then put "Command+Option+" into tK 
         else put "Command+" into tK
      else
         if the optionKey is down then put "Ctrl+Alt+" into tK else put "Ctrl+" into tK
      end if
      if the shiftKey is down then put "Shift+" after tK
      put the Keysdown into tlip
      put item 1 of the KeysDown into tCharTemp
      if isLitteral(theKey) is true then set the cCombinationKey of this stack to  tK&toUpper(theKey)
      else
         if numToNativeChar(tCharTemp) is a number then put numToNativeChar(tCharTemp) into theKey
         else if isLitteral(numToNativeChar(tCharTemp)) is true then put toUpper(numToNativeChar(tCharTemp)) into theKey
         set the cCombinationKey of this stack to  tK&toUpper(theKey)
      end if
      obeyCommandKeyCombination tFldID
      exit commandKeyDown
   else 
      pass commandKeyDown
   end if
end commandKeyDown

on obeyCommandKeyCombination pFldID,pWhatToDo
   local tStackName,tComb,ots,tLine,tWhatToDo,chunky,tSta,tStoTemp,tBtnName,tHelpmenu,ut,tCommand
   put "STEP Transcription Module" into tStackName
   if pWhatToDo is empty then
      put the cCombinationKey of this stack into tComb
      put lineOffsets(tComb&"|",gAllCustomCombinKeys) into ots
      if ots <> 0 then
         put empty into tWhatToDo
         repeat with r = 1 to the number of items of ots
            put line (item r of ots) of gAllCustomCombinKeys into tLine
            set the itemDel to "|"
            if tLine begins with tComb&"|" and the number of items of tLine > 1 then
               put item 2 of tLine into tWhatToDo
               set the itemDel to comma
               exit repeat
            end if
         end repeat
      end if
   else
      put pWhatToDo into tWhatToDo
   end if
   if tWhatToDo is not empty then
      if the selectedChunk is not "" and char 1 of tWhatToDo is "<" then
         put the selectedChunk into chunky
         put word 2 of chunky into tSta
         put word 4 of chunky into tStoTemp 
         if tStoTemp is (tSta-1) then put "Insert tag" into tBtnName
         else put "Encode selection" into tBtnName
         if "<" is in tWhatToDo then send "mouseUp"&&pFldID&comma&tWhatToDo to btn tBtnName of cd 1 of this stack
         put tWhatToDo into fld id 1010 of cd 1 of this stack
      else if "<" is not in tWhatToDo then
         if tWhatToDo is among the items of "copy,cut,paste,clear,quit" then 
            do tWhatToDo
         else if tWhatToDo is "Delete outer tags" or tWhatToDo is "Insert displayed tags" then
            if pFldID is 1004 then 
               send "menuPick"&&tWhatToDo to btn id 1089 of cd 1
            end if
         else if  tWhatToDo is "Use TEI Encoding Cursor Palette" then send "mouseUp" to btn id 1373 of cd 1 of stack "STEP Transcription Module"
         else if  tWhatToDo is "Use Palette to Insert Attributes and Values" then send "mouseUp" to btn id 1385 of cd 1 of stack "STEP Transcription Module"
         else if pFldID is among the items of "1041,1151" then send "menuPick"&&tWhatToDo to btn id 1090 of cd 1 of stack tStackName
         else if tWhatToDo is among the items of "Undo,Redo,Restore Last Save,Cut,Copy,Paste,Clear,Select All,Deselect All,Find...,Find Selected String...,List of Found Strings...,Replace...,Check English Spelling...,Check French Spelling...,Delete All <!--In-House Messages-->" then
            send "menuPick"&&tWhatToDo to btn "Edit" of group "STEP Menu 1" of cd 1 of stack tStackName
         else if tWhatToDo is among the items of "Export TEI-XML Transcription…,Export TEI-XML Description…,Upload STEP File to FTP Host…,Export HTML or XHTML Content of Any Field..." then
            send "menuPick"&&tWhatToDo to btn "Export" of group "STEP Menu 1" of cd 1 of stack tStackName
         else if tWhatToDo is among the lines of the cMenuList of btn "Font" of group "STEP Menu 1" of cd 1 of stack tStackName then
            send "menuPick"&&tWhatToDo to btn "Font" of group "STEP Menu 1" of cd 1 of stack tStackName
         else if tWhatToDo is among the lines of the cMenuList of btn "File" of group "STEP Menu 1" of cd 1 of stack tStackName then
            send "menuPick"&&tWhatToDo to btn "File" of group "STEP Menu 1" of cd 1 of stack tStackName
         else if tWhatToDo is among the items of "Backdrop,Remove Backdrop" then
            send "menuPick"&&tWhatToDo to btn "Window" of group "STEP Menu 1" of cd 1 of stack tStackName
         else if tWhatToDo is among the items of "Help,Reset Window Geometry" then
            send "menuPick"&&tWhatToDo to btn "Help" of group "STEP Menu 1" of cd 1 of stack tStackName
         else if tWhatToDo is among the items of "Nested Alterations Tagging Tool,Transposition Tagging Tool,Alternation Tagging Tool,TEI Encoding Cursor Palette" then
            send "menuPick"&&tWhatToDo to btn "Tools" of cd 1 of stack tStackName
         else if tWhatToDo is among the items of "Delete outer tags,Delete all tags and attributes in selection,Insert displayed tags,Copy tag,Replace tag with copied tag,Recolor selected tag" and pFldID is 1004 then
            send "menuPick"&&tWhatToDo to btn "XMLTagger1" of cd 1 of stack tStackName
         else if tWhatToDo is among the items of "Delete outer tags,Delete all tags and attributes in selection,Insert displayed tags,Copy tag,Replace tag with copied tag,Recolor selected tag" and pFldID is among the items of "1041,1151" then
            send "menuPick"&&tWhatToDo to btn "XMLTagger2" of cd 1 of stack tStackName
         else if tWhatToDo is among the lines of the cMenuList of  btn "Customize" of group "STEP Menu 1" of cd 1 of stack tStackName then
            send "menuPick"&&tWhatToDo to btn "Customize" of group "STEP Menu 1" of cd 1 of stack tStackName
         else if tWhatToDo is among the items of "Tooltips,Tag Tips,Show Tooltips,Hide Tooltips,Show Tag Tips,Hide Tag Tips" then
            put btn "Help" of group "STEP Menu 1" of cd 1 of stack tStackName into tHelpmenu
            put lineOffset(tWhatToDo,tHelpMenu) into ut
            if ut <> 0 then 
               put line ut of tHelpMenu into tCommand
               send "menuPick"&&tCommand to btn "Help" of group "STEP Menu 1" of cd 1 of stack tStackName
            end if
         else send "mouseUp" to btn convertAssignmentToButtonName(tWhatToDo) of cd 1 of stack tStackName
      end if
   end if
end obeyCommandKeyCombination

function convertAssignmentToButtonName pAssign
   if pAssign is "Move Base Text to TEI Fields" then return "Move Base Text to TEI"
   else if pAssign is "Restore Last Save" then return "Restore"
   return pAssign
end convertAssignmentToButtonName


function convertAssignmentToButtonNameOrMenuCommand pAssign
   if pAssign is "Move Base Text to TEI Fields" then return "Move Base Text to TEI"
   else if pAssign is "Restore Last Save" then return "Restore"
   return pAssign
end convertAssignmentToButtonNameOrMenuCommand

## Active Field recognition

function whichVisibleMainField
   local tFldList
   put "1004,1026,1029,1126,1163,1041,1139,1044,1151,1154,1157" into tFldList
   repeat for each item tFld in tFldLIst
      if the visible of fld id tFld of cd 1 of stack "STEP Transcription Module" then return tFld
   end repeat
end whichVisibleMainField

## Tags management

function desabbreviateSomeTags pTag
   local tTagAbbList,ots,y
   put the cTEITagsAndAbbrev of stack "TEI Tag Customization" into tTagAbbList
   put lineOffsets(pTag&"TEI",tTagAbbList) into ots
   if ots <> 0 then
      repeat with x = 1 to the number of items of ots
         if line (item x of ots) of tTagAbbList begins with pTag&"TEI" and "|" is in line (item x of ots) of tTagAbbList then 
            put item x of ots into y
            set the itemDel to "|"
            return item 2 of line y of tTagAbbList
         else 
            set the itemDel to comma
            next repeat
         end if
      end repeat
   end if
   return empty
end desabbreviateSomeTags

## Speed up routine

function isTypableFast pChar,pChar2
   if pChar is not in "</> " and pChar is not cr and pChar2 is not in "</> " and pChar2 is not cr then return true
   return false
end isTypableFast

## Routines to recognize letters

function isLitteral pChar
   local tItemCapList,tItemLowercaseList,tCharNum
   if the platform is "MacOS" then
      put "65,90,128,134,174,175,203,206,217,217,229,239,241,244" into tItemCapList
      put "97,122,135,159,190,191,207,207,216,216" into tItemLowercaseList
   else
      put "65,90,192,214,216,222" into tItemCapList
      put "97,122,223,246,248,255" into tItemLowercaseList
   end if
   put nativeCharToNum(pChar) into tCharNum
   return checkLetter(tCharNum,tItemCapList,tItemLowercaseList)
end isLitteral

function isLetter poc
   get charToNum(poc)
   if (it > 64 and it < 91) or (it > 96 and it < 123) or (it > 127 and it < 160) then
      return "yes"
   else return "no"
end isLetter

function isCapitalLetter pChar
   local pChar2
   set the caseSensitive to true
   if isLitteral(pChar) is false then return empty
   put toUpper(pChar) into pChar2
   if nativeCharToNum(pChar) = nativeCharToNum(pChar2) then return true else return false
end isCapitalLetter

function isCapitalLetter2 pChar
   set the caseSensitive to true
   if isLitteral(pChar) is false then return empty
   if pChar = toUpper(pChar) then return true else return false
end isCapitalLetter2

function isLowercaseLetter2 pChar
   set the caseSensitive to true
   if isLitteral(pChar) is false then return empty
   if pChar = toLower(pChar) then return true else return false
end isLowercaseLetter2

function isLowercaseLetter pChar
   local pChar2
   set the caseSensitive to true
   if isLitteral(pChar) is false then return empty
   put toLower(pChar) into pChar2
   if nativeCharToNum(pChar) = nativeCharToNum(pChar2) then return true else return false
end isLowercaseLetter

function isLitteral pChar
   local tItemCapList,tItemLowercaseList,tCharNum
   if the platform is "MacOS" then
      put "65,90,128,134,174,175,203,206,217,217,229,239,241,244" into tItemCapList
      put "97,122,135,159,190,191,207,207,216,216" into tItemLowercaseList
   else
      put "65,90,192,214,216,222" into tItemCapList
      put "97,122,223,246,248,255" into tItemLowercaseList
   end if
   put the nativeCharToNum of pChar into tCharNum
   return checkLetter(tCharNum,tItemCapList,tItemLowercaseList)
end isLitteral

function checkLetter @pCharNum,@pItemCapList,@pItemLowercaseList
   repeat with x = 1 to the number of items of pItemLowercaseList step 2
      if pCharNum >= item x of pItemLowercaseList and pCharNum <= item x+1 of pItemLowercaseList then return true else next repeat
   end repeat
   repeat with x = 1 to the number of items of pItemCapList step 2
      if pCharNum >= item x of pItemCapList and pCharNum <= item x+1 of pItemCapList then return true else next repeat
   end repeat
   return false
end checkLetter

## Routines for numerals

function commatizeNumber pNum --puts commas in numbers > 999
   get length(pNum)
   repeat with j = it-3 down to 1 step -3
      if j > 0 then put comma after char j of pNum
   end repeat
   return pNum
end commatizeNumber

function leadingZeroes pNum,pHowMany
   local tDiff
   get length(pNum)
   if it < pHowMany then
      repeat until length(pNum) = pHowMany
         put 0 before pNum
      end repeat
      return pNum
   else if it = pHowMany then return pNum
   else if it > pHowMany then 
      put (it - pHowMany) into tDiff
      repeat tDiff
         if pNum begins with 0 then delete char 1 of pNum else exit repeat
      end repeat
      return pNum
   end if
end leadingZeroes

## Transforming roman into arabic numbers and the reverse

function romToArab pRomNum
   local tArabNum,tRomLength,tRomChar,tRomLetter
   put length(pRomNum) into tRomLength
   put char -1 of pRomNum into tRomChar
   if tRomChar is not in "ivxlcdm" then
      return "Error in roman number <"&pRomNum&">."
   else
      if tRomChar = "i" then put 1 into tArabNum
      else if tRomChar = "v" then put 5 into tArabNum
      else if tRomChar = "x" then put 10 into tArabNum
      else if tRomChar = "l" then put 50 into tArabNum
      else if tRomChar = "c" then put 100 into tArabNum
      else if tRomChar = "d" then put 500 into tArabNum
      else if tRomChar = "m" then put 1000 into tArabNum
      if tRomLength >= 2 then
         repeat with tol = (tRomLength - 1) down to 1
            put char tol of pRomNum into tRomLetter
            if tRomLetter is in "ivxlcdm" then
               if tRomLetter = "v" then
                  add 5 to tArabNum
                  next repeat
               else if tRomLetter = "i" then
                  if char tol+1 of pRomNum = "i" then
                     add 1 to tArabNum
                  else subtract 1 from tArabNum
                  next repeat
               else if tRomLetter = "x" then
                  if char tol+1 of pRomNum is in "lc" then
                     subtract 10 from tArabNum
                  else add 10 to tArabNum
                  next repeat
               else if tRomLetter = "l" then
                  if char tol+1 of pRomNum is in "ivx" then
                     add 50 to tArabNum
                  else if char tol+1 of pRomNum is in "cdml" then
                     return "Error in roman number <"&pRomNum&">."
                  end if
                  next repeat
               else if tRomLetter = "c" then
                  if char tol+1 of pRomNum is not in "dm" then
                     add 100 to tArabNum
                  else subtract 100 from tArabNum
                  next repeat
               else if tRomLetter = "d" then
                  if char tol+1 of pRomNum is not in "dm" then
                     add 500 to tArabNum
                  else if char tol+1 of pRomNum is in "dm" then
                     return "Error in roman number <"&pRomNum&">."
                  end if
                  next repeat
               else if tRomLetter = "m" then
                  add 1000 to tArabNum
               end if
            else
               return "Error in roman number <"&pRomNum&">."
            end if
         end repeat
      end if
   end if
   return tArabNum
end romToArab

function arabToRom pArabNum
   local tRomNum,tArabLength,r,s,t
   if pArabNum is not a number then return pArabNum
   if pArabNum > 4999 then return "Error: arabic number <"&pArabNum&"> is greater than 4999 and cannot be converted into roman characters in LiveIndexer."
   put "" into tRomNum
   put length(pArabNum) into tArabLength
   if tArabLength <= 4 then
      repeat with i = 1 to tArabLength
         if tArabLength = 1 then
            put "i" into r
            put "v" into s
            put "x" into t
         else if tArabLength = 2 then
            put "x" into r
            put "l" into s
            put "c" into t
         else if tArabLength = 3 then
            put "c" into r
            put "d" into s
            put "m" into t
         else if tArabLength = 4 then
            if char i of pArabNum <= 4 then
               put "m" into r
               put "mmm" into s
            end if
         end if
         if char i of pArabNum is not in "0123456789" then
            return false
         else if char i of pArabNum = "9" then put r & t after tRomNum
         else if char i of pArabNum = "8" then put s & r & r & r after tRomNum
         else if char i of pArabNum = "7" then put s & r & r after tRomNum
         else if char i of pArabNum = "6" then put s & r after tRomNum
         else if char i of pArabNum = "5" then put s after tRomNum
         else if char i of pArabNum = "4" then put r & s after tRomNum
         else if char i of pArabNum = "3" then put r & r & r after tRomNum
         else if char i of pArabNum = "2" then put r & r after tRomNum
         else if char i of pArabNum = "1" then put r after tRomNum
         subtract 1 from tArabLength
      end repeat
   else
      return "Error in arabic number <"&pArabNum&">."
   end if
   return tRomNum
end arabToRom

function isRoman tNumber
   if "Error" is not in romToArab(tNumber) then return tNumber else return false
end isRoman


## Import/Export

on fileImport
   modal stack "File Import"
end fileImport

on fileExport pMessage
   put pMessage into fld id 1003 of cd 1 of stack "File Export"
   modal stack "File Export"
end fileExport

## Undo and Redo routines

on saveForUndoRedo pFldID
   local pTicks,pTicks2,pUndoCount,pBrUndoCount,tFldList,tStackName
   put "STEP Transcription Module" into tStackName
   if the hilite of btn "Example" of cd 1  of stack tStackName is true then exit saveForUndoRedo
   put the ticks into pTicks
   put "cUndo"&pTicks into pUndoCount
   put "cBrUndo"&pTicks into pBrUndoCount
   put "1004,1017,1026,1029,1041,1044,1049,1064,1067,1109,1112,1126,1139,1151,1154,1157,1163,1171,1174,1206,1207,1208,1209,1210,1211,1240" into tFldList
   repeat for each item tItem in tFldList
      do "set the "&pUndoCount&" of fld id tItem of cd 1 of stack tStackName to the HTMLText of fld id tItem of cd 1 of stack tStackName"
   end repeat   
   put "1026,1029,1041,1151" into tFldList
   repeat for each item tItem in tFldList
      do "set the "&pBrUndoCount&" of fld id tItem of cd 1 of stack tStackName to the cBrHTMLText of fld id tItem of cd 1 of stack tStackName"
   end repeat
   set the cUltimateClickField of cd 1 of stack tStackName to pFldID
   set the cUltimateTick of cd 1 of stack tStackName to pTicks
   set the cCurrentTick of cd 1 of stack tStackName to pTicks
   put the cListOfTicks of cd 1 of stack tStackName into pTicks2
   if pTicks2 = empty then put pTicks into pTicks2 else put cr & pTicks after pTicks2
   if the number of lines of pTicks2 > 110 then deleteExtraUndoCustomKeys
   set the cListOfTicks of cd 1 of stack tStackName to pTicks2
end saveForUndoRedo

on undoEdit
   local pTicksList,pCurrentTicks,tGoToTicks,tLN,tStackName
   put "STEP Transcription Module" into tStackName
   if the hilite of btn "Example" of cd 1 of stack tStackName is true then exit undoEdit
   put the cListOfTicks of cd 1 of stack tStackName into pTicksList
   if pTicksList is empty then exit undoEdit
   put the cCurrentTick of cd 1 of stack tStackName into pCurrentTicks
   put lineOffset(pCurrentTicks,pTicksList) into tLN
   if tLN < 2 then exit undoEdit
   put line tLN-1 of pTicksList into tGoToTicks
   set the cCurrentTick of cd 1 to tGoToTicks
   restoreAllFields tGoToTicks
end undoEdit

on restoreAllFields pGoToTicks
   local pUndoCount,pBrUndoCount,tFldList,tVsc,tStackName
   put "STEP Transcription Module" into tStackName
   lock screen
   put "cUndo"&pGoToTicks into pUndoCount
   put "cBrUndo"&pGoToTicks into pBrUndoCount
   put "1004,1014,1017,1026,1029,1041,1044,1049,1064,1067,1109,1112,1126,1139,1151,1154,1157,1163,1171,1174,1206,1207,1208,1209,1210,1211,1240" into tFldList
   repeat for each item tItem in tFldList
      put the vScroll of fld id tItem of cd 1 of stack tStackName into tVsc
      do "set the HTMLText of fld id tItem of cd 1 to the "&pUndoCount&" of fld id tItem of cd 1 of stack tStackName"
      set the vScroll of fld id tItem of cd 1 of stack tStackName to tVsc
   end repeat   
   put "1026,1029,1041,1151" into tFldList
   repeat for each item tItem in tFldList
      put the vScroll of fld id tItem of cd 1 of stack tStackName into tVsc
      do "set the cBrHTMLText of fld id tItem of cd 1 to the "&pBrUndoCount&" of fld id tItem of cd 1 of stack tStackName"
      set the vScroll of fld id tItem of cd 1 of stack tStackName to tVsc
   end repeat   
end restoreAllFields

on redoEdit
   local pTicksList,pCurrentTicks,tGoToTicks,tLN,tStackName
   put "STEP Transcription Module" into tStackName
   if the hilite of btn "Example" of cd 1 of stack tStackName is true then exit RedoEdit
   put the cListOfTicks of cd 1 of stack tStackName into pTicksList
   if pTicksList is empty then exit redoEdit
   put the cCurrentTick of cd 1 of stack tStackName into pCurrentTicks
   put lineOffset(pCurrentTicks,pTicksList) into tLN
   if tLN = 0 or tLN = the number of lines of pTicksList then exit redoEdit
   put line tLN+1 of pTicksList into tGoToTicks
   set the cCurrentTick of cd 1 to tGoToTicks
   restoreAllFields tGoToTicks
end redoEdit

on deleteUndoCustomKeys
   local tFldList,pCustomList,tStackName
   put "STEP Transcription Module" into tStackName
   put "1004,1014,1017,1026,1029,1041,1044,1049,1064,1067,1109,1112,1126,1139,1151,1154,1157,1163,1171,1174,1206,1207,1208,1209,1210,1211,1240" into tFldList
   repeat for each item tItem in tFldList
      put the customKeys of fld id tItem of cd 1 of stack tStackName into pCustomList
      repeat with i = the number of lines of pCustomList down to 1
         if line i of pCustomList begins with "cUndo" or line i of pCustomList begins with "cBrUndo" then delete line i of pCustomList
      end repeat
      set the customKeys of fld id tItem of cd 1 of stack tStackName to pCustomList
   end repeat
   set the cUltimateTick of cd 1 of stack tStackName to empty
   set the cCurrentTick of cd 1 of stack tStackName to empty
   set the cListOfTicks of cd 1 of stack tStackName to empty
   set the cUltimateClickField of cd 1 of stack tStackName to empty
end deleteUndoCustomKeys

on deleteExtraUndoCustomKeys
   local tFldList,pCustomList,tStackName,tTickList,tTickNumbers,ut
   put "STEP Transcription Module" into tStackName
   put the cListOfTicks of cd 1 of stack tStackName into tTickList
   get the number of lines of tTickList
   if it < 101 then exit deleteExtraUndoCustomKeys
   sort lines of tTickList ascending numeric
   put line 1 to (it-100) of tTickList into tTickNumbers
   put "1004,1014,1017,1026,1029,1041,1044,1049,1064,1067,1109,1112,1126,1139,1151,1154,1157,1163,1171,1174,1206,1207,1208,1209,1210,1211,1240" into tFldList
   set the wholeMatches to true
   repeat for each item tItem in tFldList
      put the customKeys of fld id tItem of cd 1 of stack tStackName into pCustomList
      repeat for each line tTickNum in tTickNumbers
         put lineOffset("cUndo"&tTickNum,pCustomList) into ut
         if ut <> 0 then delete line ut of pCustomList
         put lineOffset("cBrUndo"&tTickNum,pCustomList) into ut
         if ut <> 0 then delete line ut of pCustomList
      end repeat
      set the customKeys of fld id tItem of cd 1 of stack tStackName to pCustomList
   end repeat
   delete line 1 to (it-100) of tTickList
   set the cListOfTicks of cd 1 of stack tStackName to tTickList
   saveStack
end deleteExtraUndoCustomKeys

function checkUltimateTick pFldID
   local tT1,tT2,tT3,tT4,tUltima,pUndoCount,pBrUndoCount,tStackName
   put "STEP Transcription Module" into tStackName
   put the cUltimateTick of cd 1 of stack tStackName into tUltima
   put "cUndo"&tUltima into pUndoCount
   put "cBrUndo"&tUltima into pBrUndoCount
   put the HTMLText of fld id pFldID of cd 1 of stack tStackName into tT1
   do "put the "&pUndoCount&" of fld id pFldID of cd 1 of stack tStackName into tT2"
   if tT1 <> tT2 then
      put empty into tT1
      put empty into tT2
      return true
   end if
   if pFldID is among the items of "1026,1029,1041,1151" then
      put the cBrHTMLText of fld id pFldID of cd 1 of stack tStackName into tT3
      do "put the "&pBrUndoCount&" of fld id pFldID of cd 1 of stack tStackName into tT4"
      if tT3 <> tT4 then 
         put empty into tT3
         put empty into tT4
         return true
      end if
   end if
   put empty into tT1
   put empty into tT2
   put empty into tT3
   put empty into tT4
   return false
end checkUltimateTick

## Script to gather all scripts from the software and archive them in a text file

on collectAllScripts
   local pAllScripts,pStackName,pControlName,pControlID,tSubs,pFileType
   put "STEP Transcription Module" into pStackName
   put empty into pAllScripts
   collectScript pStackName,,,,pAllScripts
   collectCustomKeys pStackName,,,,pAllScripts
   repeat with i = 1 to the number of cards of stack pStackName
      collectScript pStackName,i,,,pAllScripts
      repeat with j = 1 to the number of controls of card i of stack pStackName
         put the long name of control j of card i of stack pStackName into pControlName
         put the id of control j of card i of stack pStackName into pControlID
         collectScript pStackName,i,pControlName,pControlID,pAllScripts
      end repeat
   end repeat
   put the substacks of stack pStackName into tSubs
   repeat for each line tSbs in tSubs
      collectScript pStackName,,,,pAllScripts,tSbs
      collectCustomKeys pStackName,,,,pAllScripts,tSbs
      repeat with i = 1 to the number of cards of stack tSbs of stack pStackName
         collectScript pStackName,i,,,pAllScripts,tSbs
         collectCustomKeys pStackName,i,,,pAllScripts,tSbs
         repeat with j = 1 to the number of controls of card i  of stack tSbs of stack pStackName
            put the long name of control j of card i  of stack tSbs of stack pStackName into pControlName
            put the id of control j of card i  of stack tSbs of stack pStackName into pControlID
            collectScript pStackName,i,pControlName,pControlID,pAllScripts,tSbs
            collectCustomKeys pStackName,i,pControlName,pControlID,pAllScripts,tSbs
         end repeat
      end repeat
   end repeat
   put "txt" into pFileType
   put cr&"++++++++++++++++++++++"&cr&"Number of chars: "&commatizeNumber(length(pAllScripts)) & cr & "Number of words: " & commatizeNumber(the number of words of pAllScripts) & cr & "Number of lines: " & commatizeNumber(the number of lines of pAllScripts) after pAllScripts
   ask file "Type the name of the file that will contain all the scripts." titled "Type the name of the text file"
   if (it is empty) or (the result is "Cancel") then exit to top
   if pFileType is "txt" and not(it ends with ".txt") then put ".txt" after it
   open file it for write
   write pAllScripts to file it
   close file it
end collectAllScripts

private function skipCollection pCustoms
   if (pCustoms begins with "!--") or (pCustoms begins with "u") or ("DTD" is in pCustoms) or ("UnicodeTableNames" is in pCustoms) or ("RNG" is in pCustoms) \
         or ("RelaxNG" is in pCustoms) or (pCustoms is an integer) then return true
   else return false
end skipCollection

on collectCustomKeys pStackName,pCardNumber,pControlName,pControlID,@pAllScripts,pSubName
   local pTitle,pCK,pPreCK,tCustList,pPreCust
   if pControlID = empty and pCardNumber = empty and pSubName is empty then
      put "CUSTOM KEYS of Stack" && pStackName &cr into pTitle
      put the customKeys of stack pStackName into pPreCK
      repeat for each line tL in pPreCK
         if the number of segments of tL > 1 then next repeat
         if "TEI" is not in tL and not(tL begins with "c") and not(tL begins with "!--") then next repeat
         put tL & cr after pCK       
      end repeat
      delete char -1 of pCK
      put sortKeys(pCK) into pCK
      filter pCK without empty
      if pStackName is "STEP Transcription Module" then set the customKeys of stack pStackName to pCK
      if pCK <> empty then
         put empty into tCustList
         repeat for each line tCust in pCK
            if skipCollection(tCust) is true then next repeat
            put cr& tCust & cr & cr into pPreCust
            do "put pPreCust & sortKeys(the "&tCust&" of stack pStackName) & cr after tCustList"
         end repeat
         put cr & pTitle & cr & tCustList after pAllScripts
      end if
   else if pControlID = empty and pCardNumber = empty and pSubName <> empty then
      put "CUSTOM KEYS of SUBSTACK" && pSubname && "of STACK" && pStackName &cr into pTitle
      put sortKeys(the customKeys of stack pSubName of stack pStackName) into pCK
      if pCK <> empty then
         put empty into tCustList
         repeat for each line tCust in pCK
            if skipCollection(tCust) is true then next repeat
            put cr& tCust & cr & cr into pPreCust
            do "put pPreCust & sortKeys(the "&tCust&" of stack pSubName of stack pStackName) & cr after tCustList"
         end repeat
         put cr & pTitle & cr & tCustList after pAllScripts
      end if
   else if pControlID = empty and pCardNumber <> empty then
      if pSubName is empty then
         put "CUSTOM KEYS of CARD" && pCardNumber && "of STACK" && pStackName into pTitle
         put sortKeys(the customKeys of cd pCardNumber of stack pStackName) into pCK
         if pCK <> empty then
            put empty into tCustList
            repeat for each line tCust in pCK
               if skipCollection(tCust) is true then next repeat
               put cr& tCust & cr & cr into pPreCust
               do "put pPreCust & sortKeys(the "&tCust&" of card pCardNumber of stack pStackName & cr after tCustList"
            end repeat
            put cr & pTitle & cr & tCustList after pAllScripts
         end if
      else if pSubName <> empty then
         put "CUSTOM KEYS of CARD" && pCardNumber && "of SUBSTACK" && pSubname && "of STACK" && pStackName into pTitle
         put sortKeys(the customKeys of cd pCardNumber of stack pSubName of stack pStackName) into pCK
         if pCK <> empty then
            put empty into tCustList
            repeat for each line tCust in pCK
               if skipCollection(tCust) is true then next repeat
               put cr& tCust & cr & cr into pPreCust
               do "put pPreCust & sortKeys(the "&tCust&" of card pCardNumber of stack pSubName of stack pStackName) & cr after tCustList"
            end repeat
            put cr & pTitle & cr & tCustList after pAllScripts
         end if
      end if
   else if (pControlName <> empty or pControlID <> empty) then
      if pSubName is empty then
         put "CUSTOM KEYS of" && pControlName && "ID" && pControlID && "of CARD" && pCardNumber && "of STACK" && pStackName into pTitle
         put sortKeys(the customKeys of control id pControlID of cd pCardNumber of stack pStackName) into pCK
         if pCK <> empty then
            put empty into tCustList
            repeat for each line tCust in pCK
               if skipCollection(tCust) is true then next repeat
               put cr& tCust & cr & cr into pPreCust
               do "put pPreCust & sortKeys(the "&tCust&" of control id pControlID of card pCardNumber of stack pStackName,tCust) & cr after tCustList"
            end repeat
            put cr & pTitle & cr & tCustList after pAllScripts
         end if
      else if pSubName <> empty then
         put  "CUSTOM KEYS of" && pControlName && "ID" && pControlID && "of CARD" && pCardNumber && "of SUBSTACK" && pSubname && "of STACK" && pStackName into pTitle
         put sortKeys(the customKeys of control id pControlID of cd pCardNumber of stack pSubName of stack pStackName) into pCK
         if pCK <> empty then
            put empty into tCustList
            repeat for each line tCust in pCK
               if skipCollection(tCust) is true then next repeat
               put cr& tCust & cr & cr into pPreCust
               do "put pPreCust & sortKeys(the "&tCust&" of control id pControlID of card pCardNumber of stack pSubName of stack pStackName,tCust) & cr after tCustList"
            end repeat
            put cr & pTitle & cr & tCustList after pAllScripts
         end if
      end if
   end if
end collectCustomKeys

function sortKeys pKeys,pCust
   if pKeys is empty then return empty
   if pCust <> "cExample" then sort lines of pKeys ascending international
   return pKeys
end sortKeys

on collectScript pStackName,pCardNumber,pControlName,pControlID,@pAllScripts,pSubName
   local ttp,pTitle,
   if pControlID = empty and pCardNumber = empty and pSubName is empty then
      put "STACK" && pStackName &cr into pTitle
      put pTitle &cr &cr & the script of stack pStackName after pAllScripts
   else if pControlID = empty and pCardNumber = empty and pSubName <> empty then
      put cr&"SUBSTACK" && pSubname && "of STACK" && pStackName &cr into pTitle
      put pTitle &cr &cr & the script of stack pSubName of stack pStackName after pAllScripts
   else if pControlID = empty and pCardNumber <> empty then
      if pSubName is empty then
         put "CARD" && pCardNumber && "of STACK" && pStackName into pTitle
         put cr&cr&pTitle&cr&cr&the script of card pCardNumber of stack pStackName after pAllScripts
      else if pSubName <> empty then
         put "CARD" && pCardNumber && "of SUBSTACK" && pSubname && "of STACK" && pStackName into pTitle
         put cr&cr&pTitle&cr&cr&the script of card pCardNumber of stack pSubName of stack pStackName after pAllScripts
      end if
   else if (pControlName <> empty or pControlID <> empty) then
      if pSubName is empty then
         put pControlName && "ID" && pControlID && "of CARD" && pCardNumber && "of STACK" && pStackName into pTitle
         put cr&cr&pTitle &cr&cr& the script of control id pControlID of card pCardNumber of stack pStackName after pAllScripts
         put the toolTip of control id pControlID of card pCardNumber of stack pStackName into ttp
      else if pSubName <> empty then
         put  pControlName && "ID" && pControlID && "of CARD" && pCardNumber && "of SUBSTACK" && pSubname && "of STACK" && pStackName into pTitle
         put cr&cr&pTitle&cr&cr&the script of control id pControlID of card pCardNumber of stack pSubName of stack pstackName after pAllScripts
         put the toolTip of control id pControlID of card pCardNumber of stack pSubName of stack pStackName into ttp
      end if
      if ttp <> empty then put cr&"TOOLTIP:"&cr&ttp&cr after pAllScripts
   end if
end collectScript

## Shortcut to describe alterations

on describeAlts
   if the hilite of btn id 1934 of cd 1 of stack "STEP Transcription Module" is true then send "mouseUp" to btn "Describe alterations" of cd 1 of stack "STEP Transcription Module"
end describeAlts

## Routines regarding TEI documentation

on updateTEIMSDescriptionDTD
   local tCurrentDTDDate,tCurrentRNGDate,tCurrentDTDVersion,tCurrentRNGVersion
   put segment 1 to -1 of line 6 of the cTEIforMSDescriptionDTD of this stack into tCurrentDTDDate
   put segment 1 to -1 of line 10 of the cTEIforMSDescriptionRelaxNG of this stack into tCurrentRNGDate
   put char -6 to -2 of segment 3 of line 5 of the cTEIforMSDescriptionDTD of this stack into tCurrentDTDVersion
   put char -6 to -2 of segment 3 of line 9 of the cTEIforMSDescriptionRelaxNG of this stack into tCurrentRNGVersion
   answer "STEP Transcriptor’s current version of the TEI MS Description DTD is "&char 1 to -1 of tCurrentDTDVersion && "("&tCurrentDTDDate & ")"&cr\
   &"and its current version of the Relax NG file is "&char 1 to -1 of tCurrentRNGVersion && "("&tCurrentRNGDate & "). Do you want to update them?" with "Update" or "Cancel"
   if it is "Cancel" then exit to top
   set cursor to busy
   set the cTEIforMSDescriptionDTD of this stack to URL (line 1 of (the cURLforTEIforMSDescriptionDTD of this stack))
   set cursor to busy
   set the cTEIforMSDescriptionRelaxNG of this stack to URL (line 2 of (the cURLforTEIforMSDescriptionDTD of this stack))
   answer "The latest TEI MS Description DTD ("&segment 1 to -1 of line 6 of the cTEIforMSDescriptionDTD of this stack &") and RelaxNG ("&segment 1 to -1 of line 10 of the cTEIforMSDescriptionRelaxNG of this stack &") files have been successfully imported into STEP Transcriptor."
end updateTEIMSDescriptionDTD

function getElementTEIExplanation pElement
   local tRNG,tElementName,ut,tElementDesc,ut1,ut2
   put the cTEIforMSDescriptionRelaxNG of stack "STEP Transcription Module" into tRNG
   put "<element name="&quote&pElement&quote&">" into tElementName
   set the wholematches to false
   put lineOffset(tElementName,tRNG) into ut
   if ut <> 0 then
      put line ut+1 to ut+2 of tRNG into tElementDesc
      put offset(". [",tElementDesc) into ut1
      if ut1 = 0 then put offset(" [",tElementDesc)-1 into ut1
      put char offset(quote&">",tElementDesc)+2 to ut1 of tElementDesc into ut2
      if char -1 of ut2 <> "." then put "." after ut2
      replace cr with empty in ut2
      replace "   )" with ")" in ut2
      return ut2
   end if
   return empty
end getElementTEIExplanation

function getAttributeTEIExplanation pAttr
   local tRNG,tAttName,ut,tAttDesc
   put the cTEIforMSDescriptionRelaxNG of stack "STEP Transcription Module" into tRNG
   put "<attribute name="&quote&pAttr&quote&">" into tAttName
   set the wholematches to false
   put lineOffset(tAttName,tRNG) into ut
   if ut <> 0 then
      put line ut+1 of tRNG into tAttDesc
      return char offset(quote&">",tAttDesc)+2 to offset("</a:",tAttDesc)-1 of tAttDesc
   end if
   return empty
end getAttributeTEIExplanation

## Character Count routines

function countAnything pContent,pAny,pCase
   local tAllChars
   if pCase is not empty then set the caseSensitive to pCase
   put length(pContent) into tAllChars
   replace pAny with empty in pContent
   return (tAllChars-length(pContent))/length(pAny)
end countAnything

function countCommas pText
   return length(replaceText(pText,"[^,]",""))
end countCommas

function countIndividualCharacters pText,tChars,pCase
   return length(replaceText(pText,pCase&"[^/"&tChars&"]",""))
end countIndividualCharacters

function countNumberOfCharacterOccurrences pText,tChars,pCaseSense
   local tList,tCase
   if pCaseSense is true then put empty into tCase else put "(?i)" into tCase
   put empty into tList
   repeat for each char tC in tChars
      put tC & comma& countIndividualCharacters(pText,tC,tCase)&cr after tList
   end repeat
   delete char -1 of tList
   return tList
end countNumberOfCharacterOccurrences

function countIndividualStringsOfCharacters pText,tString,pCase
   local tCase,tString2
   if pCase is true then put empty into tCase else put "(?i)" into tCase
   put empty into tString2
   repeat for each char tV in tString
      put "[/"&tV&"]" after tString2
   end repeat
   return (length(pText) - length(replaceText(pText,tCase & "(" & tString2 & ")","")))/length(tString)
end countIndividualStringsOfCharacters

function countOccurrences tContainer,tString,tExactly,tCaseSensitive
   local tStart,tCounter,tOffs
   put 0 into tStart
   put 0 into tCounter
   if tExactly is empty then put true into tExactly
   set the wholeMatches to tExactly
   if tCaseSensitive is empty then put true into tCaseSensitive
   set the caseSensitive to tCaseSensitive
   repeat
      put offset(tString,tContainer,tStart) into tOffS
      if tOffS = 0 then exit repeat
      add tOffS to tStart
      add 1 to tCounter
   end repeat
   return tCounter
end countOccurrences

function countInstances pInstance,pContainer,pCase,pExact,pChunkKind
   local tCountInstance,tFoundList
   if pExact is empty then put true into pExact
   set the wholeMatches to pExact
   if pCase is empty then put false into pCase
   if pChunkKind is empty then put "w" into pChunkKind
   if pChunkKind is among the items of "string,str" then 
      put stringOffsets(pInstance,pContainer,pCase) into tFoundList
   else if pChunkKind is among the items of "c,char,character,letter" then 
      put charOffsets(pInstance,pContainer,pCase) into tFoundList 
   else if pChunkKind is among the items of "w,word,seg,segment" then 
      put segment2Offsets(pInstance,pContainer,pCase,pExact) into tFoundList 
   else if pChunkKind is  among the items of "t,trueword" then 
      put truewordOffsets(pInstance,pContainer,pCase,pExact) into tFoundList 
   else  if pChunkKind is among the items of "i,item" then 
      put item2Offsets(pInstance,pContainer,pCase,pExact) into tFoundList
   else  if pChunkKind is among the items of "l,line" then 
      put line2Offsets(pInstance,pContainer,pCase,pExact) into tFoundList
   else  if pChunkKind is among the items of "p,para,paragraph" then 
      put paragraphOffsets(pInstance,pContainer,pCase,pExact) into tFoundList
   else  if pChunkKind is among the items of "s,sent,sentence" then 
      put sentenceOffsets(pInstance,pContainer,pCase,pExact) into tFoundList
   end if
   if tFoundList is not zero and tFoundList <> empty then 
      put the number of items of tFoundList into tCountInstance
      put tFoundList into line 2 of tCountInstance
   end if
   return tCountInstance
end countInstances


## Offsets routines

function lineOffsets str,ctr
   -- returns a comma-delimited list of the number of each line within which begins the str in ctr
   local tCharList,nbr,mlo
   put offsets(str,ctr) into tCharList
   if tCharList = 0 then return 0
   put the number of items of tCharList into nbr
   put "" into mlo
   repeat with n = 1 to nbr
      put the number of lines of (char 1 to (item n of tCharList) of ctr) & "," after mlo
   end repeat
   if char -1 of mlo = "," then delete char -1 of mlo
   return mlo
end lineOffsets

function line2Offsets str,ctr,pCase,pExact,startPoint
   -- returns a comma-delimited list of the number of each line, either within which begins the str in ctr, or which corresponds exactly to the string
   local ofs,mlo
   put "" into mlo
   if startPoint is empty then put 0 into startPoint
   repeat
      put lineOffset(str,ctr,startPoint) into ofs
      if ofs = 0 then exit repeat
      add ofs to startPoint
      put startPoint & comma after mlo
   end repeat
   if char -1 of mlo = comma then delete char -1 of mlo
   if mlo = "" then return 0
   if pCase is not empty then
      set the caseSensitive to pCase
      repeat with n = the number of items of mlo down to 1
         if str is not in line (item n of mlo) of ctr then
            delete item n of mlo
         end if
      end repeat
   end if
   if pExact is not empty then
      set the wholeMatches to pExact
      repeat with n = the number of items of mlo down to 1
         if pExact is true then
            if line (item n of mlo) of ctr <> str then
               delete item n of mlo
            end if
         else
            if str is not in line (item n of mlo) of ctr then
               delete item n of mlo
            end if
         end if
      end repeat
   end if
   if mlo <> empty then return mlo else return 0
end line2Offsets

function paragraphOffsets str,ctr,pCase,pExact,startPoint
   -- returns a comma-delimited list of the number of each paragraph, either within which begins the str in ctr, or which corresponds exactly to the string
   local mlo,ofs
   if startPoint is empty then put 0 into startPoint
   repeat
      put paragraphOffset(str,ctr,startPoint) into ofs
      if ofs = 0 then exit repeat
      add ofs to startPoint
      put startPoint & comma after mlo
   end repeat
   if char -1 of mlo = comma then delete char -1 of mlo
   if mlo = "" then return 0
   if pCase is not empty then
      set the caseSensitive to pCase
      repeat with n = the number of items of mlo down to 1
         if str is not in paragraph (item n of mlo) of ctr then
            delete item n of mlo
         end if
      end repeat
   end if
   if pExact is not empty then
      set the wholeMatches to pExact
      repeat with n = the number of items of mlo down to 1
         if pExact is true then
            if paragraph (item n of mlo) of ctr <> str then
               delete item n of mlo
            end if
         else
            if str is not in paragraph (item n of mlo) of ctr then
               delete item n of mlo
            end if
         end if
      end repeat
   end if
   if mlo <> empty then return mlo else return 0
end paragraphOffsets

function sentenceOffsets str,ctr,pCase,pExact,startPoint
   -- returns a comma-delimited list of the number of each sentence, either within which begins the str in ctr, or which corresponds exactly to the string
   local mlo,ofs
   if startPoint is empty then put 0 into startPoint
   repeat
      put sentenceOffset(str,ctr,startPoint) into ofs
      if ofs = 0 then exit repeat
      add ofs to startPoint
      put startPoint & comma after mlo
   end repeat
   if char -1 of mlo = comma then delete char -1 of mlo
   if mlo = "" then return 0
   if pCase is not empty then
      set the caseSensitive to pCase
      repeat with n = the number of items of mlo down to 1
         if str is not in sentence (item n of mlo) of ctr then
            delete item n of mlo
         end if
      end repeat
   end if
   if pExact is not empty then
      set the wholeMatches to pExact
      repeat with n = the number of items of mlo down to 1
         if pExact is true then
            if sentence (item n of mlo) of ctr <> str then
               delete item n of mlo
            end if
         else
            if str is not in sentence (item n of mlo) of ctr then
               delete item n of mlo
            end if
         end if
      end repeat
   end if
   if mlo <> empty then return mlo else return 0
end sentenceOffsets


function wordOffsets str,ctr
    -- returns a comma-delimited list of the number of each word within which begins the str in ctr
   local tCharList,mlo,nbr
   put offsets(str,ctr) into tCharList
   if tCharList = 0 then return 0
   put the number of items of tCharList into nbr
   put "" into mlo
   repeat with n = 1 to nbr
      put the number of segments of (char 1 to (item n of tCharList) of ctr) & "," after mlo
   end repeat
   if char -1 of mlo = "," then delete char -1 of mlo
   return mlo
end wordOffsets

function segmentOffsets str,ctr,pCase,pExact
   -- returns a comma-delimited list of the number of each segment, either within which begins the str in ctr, or which corresponds exactly to the string
   local tCharList,nbr,mlo
   put offsets(str,ctr) into tCharList
   if tCharList = "0" then return "0"
   put the number of items of tCharList into nbr
   put "" into mlo
   repeat with n = 1 to nbr
      put the number of segments of (char 1 to (item n of tCharList) of ctr) & "," after mlo
   end repeat
   if char -1 of mlo = "," then delete char -1 of mlo
   if pCase is true then
      set the caseSensitive to true
      repeat with n = the number of items of mlo down to 1
         if segment (item n of mlo) of ctr <> str then delete item n of mlo
      end repeat
   end if
   if pExact is true then
      set the wholeMatches to true
      repeat with n = the number of items of mlo down to 1
         if segment (item n of mlo) of ctr <> str then delete item n of mlo
      end repeat
   end if
   return mlo
end segmentOffsets

on segment2Offsets str,ctr,pCase,pExact
   -- returns a comma-delimited list of the number of each segment, either within which begins the str in ctr, or which corresponds exactly to the string
   local mlo,ofs,startPoint
   if startPoint is empty then put 0 into startPoint
   repeat
      put wordOffset(str,ctr,startPoint) into ofs
      if ofs = 0 then exit repeat
      add ofs to startPoint
      put startPoint & comma after mlo
   end repeat
   if char -1 of mlo = comma then delete char -1 of mlo
   if mlo = empty then return 0
   if pCase is not empty then
      set the caseSensitive to pCase
      repeat with n = the number of items of mlo down to 1
         if str is not in segment (item n of mlo) of ctr then
            delete item n of mlo
         end if
      end repeat
   end if
   if pExact is not empty then
      set the wholeMatches to pExact
      repeat with n = the number of items of mlo down to 1
         if pExact is true then
            if segment (item n of mlo) of ctr <> str then
               delete item n of mlo
            end if
         else
            if str is not in segment (item n of mlo) of ctr then
               delete item n of mlo
            end if
         end if
      end repeat
   end if
   if mlo <> empty then return mlo else return 0
end segment2Offsets

function itemOffsets str,ctr
    -- returns a comma-delimited list of the number of each item within which begins the str in ctr
   local tCharList,nbr,moslist
   put offsets(str,ctr) into tCharList
   if tCharList = 0 then return 0
   put the number of items of tCharList into nbr
   repeat with n = 1 to nbr
      put the number of items of (char 1 to (item n of tCharList) of ctr) & "," after moslist
   end repeat
   if char -1 of moslist = comma then delete char -1 of moslist
   return moslist
end itemOffsets

function item2Offsets str,ctr,pCase,pExact,startPoint
   -- returns a comma-delimited list of the number of each item, either within which begins the str in ctr, or which corresponds exactly to the string
   local moslist,tofs,n
   if startPoint is empty then put 0 into startPoint
   repeat
      put itemOffset(str,ctr,startPoint) into tofs
      if tofs = 0 then exit repeat
      add tofs to startPoint
      put startPoint & comma after moslist
   end repeat
   if char -1 of moslist = comma then delete char -1 of moslist
   if moslist is empty then return 0
   if pCase is not empty then
      set the caseSensitive to pCase
      repeat with n = the number of items of moslist down to 1
         if str is not in item (item n of moslist) of ctr then
            delete item n of moslist
         end if
      end repeat
   end if
   if pExact is not empty then
      set the wholeMatches to pExact
      repeat with n = the number of items of moslist down to 1
         if pExact is true then
            if item (item n of moslist) of ctr <> str then
               delete item n of moslist
            end if
         else
            if str is not in item (item n of moslist) of ctr then
               delete item n of moslist
            end if
         end if
      end repeat
   end if
   if moslist <> empty then return moslist else return 0
end item2Offsets

function offsets str,ctr,startPoint
   local mosList,tofs
   if startPoint is empty then put 0 into startPoint
   repeat
      put offset(str,ctr,startPoint) into tofs
      if tofs = 0 then exit repeat
      add tofs to startPoint
      put startPoint & comma after mosList
   end repeat
   if char -1 of mosList = comma then delete char -1 of mosList
   if mosList is empty then return 0
   return mosList
end offsets

function charOffsets str,ctr,pCase,startPoint -- returns a comma-delimited list of the location number of a given single character, which corresponds or not to its case, within a container
   local mosList,tofs
   if startPoint is empty then put 0 into startPoint
   repeat
      put offset(char 1of str,ctr,startPoint) into tofs
      if tofs = 0 then exit repeat
      add tofs to startPoint
      put startPoint & comma after mosList
   end repeat
   if char -1 of mosList = comma then delete char -1 of mosList
   if mosList is empty then return 0
   if pCase is not empty then
      set the caseSensitive to pCase
      repeat with n = the number of items of mosList down to 1
         if char 1 of str is not char (item n of mosList) of ctr then
            delete item n of mosList
         end if
      end repeat
   end if
   if mosList is empty then return 0
   return mosList
end charOffsets

function stringOffsets str,ctr,pCase,startPoint -- returns a comma-delimited list of the location number of a given string of characters, matching its case or not , within a container
   local mosList,tofs
   if startPoint is empty then put 0 into startPoint
   repeat
      put offset(str,ctr,startPoint) into tofs
      if tofs = 0 then exit repeat
      add tofs to startPoint
      put startPoint & comma after mosList
   end repeat
   if char -1 of mosList = comma then delete char -1 of mosList
   if mosList is empty then return 0
   if pCase is not empty then
      set the caseSensitive to pCase
      repeat with n = the number of items of mosList down to 1
         if str is not char (item n of mosList) to (item n of mosList)+length(str)-1 of ctr then
            delete item n of mosList
         end if
      end repeat
   end if
   if mosList is empty then return 0
   return mosList
end stringOffsets

function truewordOffsets str,ctr,pCase,pExact,startPoint
   -- returns a comma-delimited list of the number of each trueword, either within which begins the str in ctr, or which corresponds exactly to the string
   local mosList,tofs
   if startPoint is empty then put 0 into startPoint
   repeat
      put truewordOffset(str,ctr,startPoint) into tofs
      if tofs = 0 then exit repeat
      add tofs to startPoint
      put startPoint & comma after mosList
   end repeat
   if char -1 of mosList = comma then delete char -1 of mosList
   if mosList is empty then return 0
   if pCase is not empty then
      set the caseSensitive to pCase
      repeat with n = the number of items of mosList down to 1
         if str is not in trueword (item n of mosList) of ctr then
            delete item n of mosList
         end if
      end repeat
   end if
   if pExact is not empty then
      set the wholeMatches to pExact
      repeat with n = the number of items of mosList down to 1
         if pExact is true then
            if trueword (item n of mosList) of ctr <> str then
               delete item n of mosList
            end if
         else
            if str is not in trueword (item n of mosList) of ctr then
               delete item n of mosList
            end if
         end if
      end repeat
   end if
   if mosList <> empty then return mosList else return 0
end truewordOffsets

function offsetOfTwoPrecedingDistinctChars tContainer,pChar1,pChar2,pReduce
   local x,y,tContainer2,tChar,tcontL
   put length(tContainer) into tcontL
   if tcontL > 10000 and pReduce <> false then put char (tcontL-9999) to -1 of tContainer into tContainer
   repeat for each char tChar in tContainer
      put tChar before tContainer2
   end repeat
   get offset(pChar1,tContainer2)
   if it = 0 then put 0 into x
   else put tcontL-(it-1) into x
   get offset(pChar2,tContainer2)
   if it = 0 then put 0 into y
   else put tcontL-(it-1) into y
   return x,y
end OffsetOfTwoPrecedingDistinctChars

function offsetOfOnePrecedingString tContainer,pString,pReduce
   local tContainer2,tReverseString,tcontL
   put length(tContainer) into tcontL
   if tcontL > 10000 and pReduce <> false then put char (tcontL-9999) to -1 of tContainer into tContainer
   repeat for each char tChar in tContainer
      put tChar before tContainer2
   end repeat
   repeat for each char tChar in pString
      put tChar before tReverseString
   end repeat
   get offset(tReverseString,tContainer2)
   if it = 0 then return 0
   else return ((tcontL-(it-1)) - ((length(tReverseString))+1))
end offsetOfOnePrecedingString

function offsetOfOnePrecedingChar tContainer,pChar
   local tContainer2,tReverseString,tcontL
   put length(tContainer) into tcontL
   put char (tcontL-999) to -1 of tContainer into tContainer
   repeat for each char tChar in tContainer
      put tChar before tContainer2
   end repeat
   get offset(pChar,tContainer2)
   if it = 0 then return 0
   else return tcontL-(it-1)
end offsetOfOnePrecedingChar

## FIND/REPLACE functions

function findItemInLine twhatToFind,tContainer,tItemNumber,tLinesToSkip,tExactly
   if tExactly is true then set the wholeMatches to true else set the wholeMatches to false
   get lineOffsets(twhatToFind,tContainer)
   repeat for each item tItem in it
      if twhatToFind is in item tItemNumber of line tItem of tContainer then return tItem
   end repeat
   return empty
end findItemInLine

function findLine twhatToFind,tContainer,tLinesToSkip,tExactly
   if tExactly is true then set the wholeMatches to true else set the wholeMatches to false
   return lineOffset(twhatToFind,tContainer,tLinesToSkip)
end findLine

function findAllLines3 twhatToFind,tContainer,tExactly,tInitialCharacterInLine
   if tExactly is true then set the wholeMatches to true else set the wholeMatches to false
   filter tContainer with twhatToFind&"*"
   return the number of lines of tContainer
end findAllLines3

function findAllLines2 twhatToFind,tContainer,tContainer2,tExactly,tInitialCharacterInLine
   if tExactly is true then set the wholeMatches to true else set the wholeMatches to false
   filter tContainer with twhatToFind&",*"
   if "; " is in twhatToFind and tContainer is empty then
      replace "; " with ",," in twhatToFind
      filter tContainer2 with twhatToFind&",*"
   end if
   if tContainer2 is not empty and tContainer is empty then return the number of lines of tContainer2 else return the number of lines of tContainer
end findAllLines2

function findAllLines twhatToFind,tContainer,tLinesToSkip,tExactly,tInitialCharacterInLine
   local tListLines
   if tExactly is true then set the wholeMatches to true else set the wholeMatches to false
   put empty into tListLines
   if tLinesToSkip is empty then put 0 into tLinesToSkip
   repeat
      get lineOffset(twhatToFind,tContainer,tLinesToSkip)
      if it = 0 then exit repeat
      if tInitialCharacterInLine is not empty and tInitialCharacterInLine is not 0 and tInitialCharacterInLine is not "tInitialCharacterInLine" then
         if tWhatToFind is not in char tInitialCharacterInLine to (tInitialCharacterInLine+length(tWhatToFind)-1) of line it of tContainer then
            add it to tLinesToSkip
            next repeat
         end if
      end if
      add it to tLinesToSkip
      put tLinesToSkip into item (the number of items of tListLines)+1 of tListLines
   end repeat
   return tListLines
end findAllLines

function fullFindCR FldIDNumber,tPattern,tStart,tCDNumber,tStackName
   local tCharFound,tPlaceList
      if cr is in tPattern then
      if tPattern is not in fld id FldIDNumber of cd tCDNumber of stack tStackName then return empty
      put empty into tCharFound
      put offsets(tPattern,fld id FldIDNumber of cd tCDNumber of stack tStackName,tStart) into tPlaceList
      repeat with i = 1 to the number of items of tPlaceList
         get the lineIndex of char (item i of tPlaceList) of fld id FldIDNumber of cd tCDNumber of stack tStackName
         put item i of tPlaceList&comma&it into line (the number of lines of tCharFound)+1 of tCharFound
      end repeat
      return stripDuplicates2(tCharFound)
   end if
end fullFindCR

function fullFindItemsInField FldIDNumber,tPattern,tExact,tAll,tCasesens,tStart,tItem,tNumberOfCommasPerLine,tCDNumber,tStackName -- not finished?
   local tPreAsterisk,tPostAsterisk,tFoundCount,tContain,tCharNumber1,tLineNumber,tCharNumber2
   if tPattern is not in fld id FldIDNumber of cd tCDNumber of stack tStackName then return empty
   put fld id FldIDNumber of cd tCDNumber of stack tStackName into tContain
   if tStart is an integer and tStart > 0 then
      put char tStart+1 to -1 of tContain into tContain
   end if
   put empty into tPreAsterisk
   put empty into tPostAsterisk
   put empty into tFoundCount
   if tItem is an integer and tItem > 1 then
      repeat tItem-1
         put "*," after tPreAsterisk
      end repeat
      if tExact is true then put "," into tPostAsterisk
      else
         put "*" after tPreAsterisk
         put "*," into tPostAsterisk
      end if
   end if
   set the caseSensitive to tCasesens
   filter tContain with tPreAsterisk&tPattern&tPostAsterisk
   repeat for each line tEntryLine in tContain
      put offset(tEntryLine,fld id FldIDNumber of cd tCDNumber of stack tStackName) into tCharNumber1 
      put the lineIndex of char tCharNumber1 of fld id FldIDNumber of cd tCDNumber of stack tStackName into tLineNumber
      put offset(tPattern,tEntryLine) into tCharNumber2
      put tCharNumber1&comma&tLineNumber&comma&tCharNumber2&comma&tItem into line (the number of lines of tFoundCount)+1 of tFoundCount
   end repeat
   return tFoundCount
end fullFindItemsInField

function fullFind tContain,tPattern,tExact,tAll,tCasesens,tStart,tItem,tCDNumber,tStackName
   local linec,tCharFound,tPatternMode,tListOfLines,counter,tLineC,pui,pin,pun,pou,lin,tLineC2,lup,tPreNumChar,lip,fau,tpatternLength
   if cr is in tPattern and tContain is an integer then return fullFindCR(tContain,tPattern,tStart,tCDNumber,tStackName)
   if cr is in tPattern and tContain is not an integer then 
      answer "The string to search contains one or more paragraph marks. This won’t work unless you allow the search to focus on the first substantive part of the string." with "Abort" or "Proceed" as sheet
      if it is "Abort" then return empty
      else
         repeat until cr is not char 1 of tPattern
            delete char 1 of tPattern
         end repeat
         if cr is in tPattern then
            delete char offset(cr,tPattern) to -1 of tPattern
         end if
      end if
   end if
   if tPattern is not in tContain then return empty
   if isNumber(tStart) is true and tStart > 0 then
      put char tStart+1 to -1 of tContain into tContain
   end if
   put the number of lines of tContain into linec
   put empty into tCharFound
   put empty into tPatternMode
   put length(tPattern) into tpatternLength
   put lineOffsets(tPattern,tContain) into tListOfLines
   if tListOfLines is 0 then return empty
   repeat with tcounter = 1 to the number of items of tListOfLines
      put (item tcounter of tListOfLines) into counter
      put line counter of tContain into tLineC
      if tPattern is not in tLineC or tLineC is empty then next repeat
      if isNumber(tItem) is true and tItem > 0 and tPattern is not in item tItem of tLineC then next repeat
      if tExact is not empty then set the wholeMatches to tExact
      put empty into pou
      if tItem <> "i" and tItem > 0 then 
         if (tExact is true) and (space is not in tPattern) and (tPattern is not among the items of tLineC) then next repeat
         if tCasesens is not empty then set the caseSensitive to tCasesens
         put itemOffset(tPattern,tLineC) into pui
         if pui = 0 then next repeat
         if tItem = pui then 
            put offset(tPattern,item pui of tLineC) into pin
            if pui is 1 then put 0 into pun else put 1 into pun
            if pui > 1 then put length(item 1 to pui-1 of tLineC)+pun+pin into item 1 of pou else put pin into item 1 of pou
            put comma & counter & comma & pou & comma & pui into pou
            if counter = 1 then put item 3 of pou into item 1 of pou else put length(line 1 to counter-1 of tContain)+(item 3 of pou)+1 into item 1 of pou
            put pou into line (the number of lines of tCharFound)+1 of tCharFound
            next repeat
         else
            put "no" into lin
            put tLineC into tLineC2
            repeat until lin is "yes"
               put empty into item pui of tLineC2
               if tCasesens is not empty then set the caseSensitive to tCasesens
               put itemOffset(tPattern,tLineC2) into pui
               if pui = 0 then exit repeat
               if tItem = pui then
                  put offset(tPattern,item pui of tLineC2) into pin
                  if pui is 1 then put 0 into pun else put 1 into pun
                  if pui > 1 then put length(item 1 to pui-1 of tLineC)+pun+pin into item 1 of pou else put pin into item 1 of pou
                  put comma & counter & comma & pou & comma & pui into pou
                  if counter = 1 then put item 3 of pou into item 1 of pou else put length(line 1 to counter-1 of tContain)+(item 3 of pou)+1 into item 1 of pou
                  put pou into line (the number of lines of tCharFound)+1 of tCharFound
                  put "yes" into lin
               end if
            end repeat
            return stripDuplicatesNumberStrings(tCharFound)
         end if
      else
         if (tItem <> "i") and (tExact is true) and (space is not in tPattern) and (tPattern is not among the words of tLineC) then next repeat
         if (tItem = "i") and (tExact is true) and (space is not in tPattern) and (tPattern is not among the items of tLineC) then next repeat
         if tCasesens is not empty then set the caseSensitive to tCasesens
         if tExact is not empty then set the wholeMatches to tExact
         if tExact is false then 
            put offset(tPattern,tLineC) into item 3 of pou
         else 
            if tItem is "" then 
               if the number of words of tPattern= 1 then 
                  put wordOffset(tPattern,tLineC) into lup 
                  put "w" into tPatternMode
               else 
                  put offset(tPattern,tLineC) into lup
                  put "c" into tPatternMode
               end if
            else 
               put itemOffset(tPattern,tLineC) into lup
               put "i" into tPatternMode
            end if
            if lup = 0 then 
               exit repeat
            else
               if tPatternMode is "c" then put lup into item 3 of pou
               else if tPatternMode is "w" then
                  if lup = 1 then 
                     put offset(char 1 of word 1 of tLineC,tLineC) into item 3 of pou 
                  else 
                     put offset(char 1 of word 1 of tLineC,tLineC) into tPreNumChar
                     put length(word 1 to lup-1 of tLineC)+2+(tPreNumChar-1) into item 3 of pou
                  end if
               else  if tPatternMode is "i" then
                  put lup into item 4 of pou
                  if lup > 1 then put length(item 1 to lup-1 of tLineC)+2 into item 3 of pou else put offset(char 1 of word 1 of tLineC,tLineC) into item 3 of pou
               end if
            end if
         end if
         if item 3 of pou is 0 then next repeat
         if counter = 1 then 
            put item 3 of pou into item 1 of pou 
         else 
            put length(line 1 to counter-1 of tContain)+(item 3 of pou)+1 into item 1 of pou
         end if
         put the number of items of char 1 to  (item 3 of pou) of tLineC into item 4 of pou 
         put counter into item 2 of pou
         if item 3 of pou <> 0 and tAll is false then return pou
         repeat
            if tPattern is in char (item 3 of line -1 of pou)+tpatternLength+1 to -1 of tLineC then
               put char (item 3 of line -1 of pou)+tpatternLength+1 to -1 of tLineC into tLineC2
               if tExact is not empty then set the wholeMatches to tExact
               if tCasesens is not empty then set the caseSensitive to tCasesens
               if tExact is false then 
                  put offset(tPattern,tLineC2) into lip 
               else 
                  if tItem is "" then 
                     if the number of words of tPattern = 1 then 
                        put wordOffset(tPattern,tLineC2) into lup 
                        put "w" into tPatternMode
                     else 
                        put offset(tPattern,tLineC2) into lup 
                        put "c" into tPatternMode
                     end if
                  else 
                     put itemOffset(tPattern,tLineC2) into lup
                     put "i" into tPatternMode
                  end if
                  if lup = 0 then 
                     exit repeat
                  else 
                     if tPatternMode is "c" then put lup into lip
                     else if tPatternMode is "w" then
                        if lup = 1 then 
                           put offset(char 1 of word 1 of tLineC2,tLineC2) into lip
                        else 
                           put offset(char 1 of word 1 of tLineC2,tLineC2) into tPreNumChar
                           put length(word 1 to lup-1 of tLineC2)+2+(tPreNumChar-1) into lip
                        end if
                     else  if tPatternMode is "i" then
                        if lup > 1 then put length(item 1 to lup-1 of tLineC2)+2 into lip else put offset(char 1 of word 1 of tLineC2,tLineC2) into lip
                     end if
                  end if
               end if
               if lip = 0 then next repeat
               put lip+(item 3 of line -1 of pou)+tpatternLength into item 3 of line (the number of lines of pou)+1 of pou
               if item 3 of line -1 of pou is 0 or item 3 of line -1 of pou is empty then 
                  delete line -1 of pou
                  next repeat
               end if
               if counter = 1 then 
                  put item 3 of line -1 of pou into item 1 of line -1 of pou
               else 
                  put length(line 1 to counter-1 of tContain)+(item 3 of line -1 of pou)+1 into item 1 of line -1 of pou
                  put the number of items of char 1 to  (item 3 of line -1 of pou) of tLineC into item 4 of line -1 of pou
               end if
            else
               exit repeat
            end if
         end repeat
         repeat with fau = 1 to the number of lines of pou
            put counter into item 2 of line fau of pou
         end repeat
         put pou into line (the number of lines of tCharFound)+1 of tCharFound
      end if
   end repeat
   return stripDuplicatesNumberStrings(tCharFound)
end fullFind

function fullReplace tContain,tMatchingPattern,tNewString,tExact,tAll,tCasesens,tStart,tItem
   local tReplaceList,tMatchLength
   put fullFind(tContain,tMatchingPattern,tExact,tAll,tCasesens,tStart,tItem) into tReplaceList
   put length(tMatchingPattern) into tMatchLength
   repeat with tcount = the number of lines of tReplaceList down to 1
      put tNewString into char (item 3 of line tcount of tReplaceList) to ((item 3 of line tcount of tReplaceList)+tMatchLength-1) of line (item 2 of line tcount of tReplaceList) of tContain
   end repeat
   return tContain
end fullReplace

function stripDuplicatesNumberStrings tListToStrip
   local tArray,tCount,tKeys
   repeat for each line tCount in tListToStrip
      put 1 into tArray[tCount]
   end repeat
   put the keys of tArray into tKeys
   sort tKeys ascending numeric
   return tKeys
end stripDuplicatesNumberStrings


======
## Routines to count and list single words in a text

on CountAllWords
   local fileContent,charsToDelete,charsToSpace,tkeyWords,displayResult,wordCount
   --put empty into field "Results Table" 
   # wordCount is an associative array, its indexes are words 
   # with the contents of each element being number of times 
   # that word appears 
   put field id 1004 of cd 1 of stack "STEP Transcription Module" into fileContent
   if fileContent is empty then 
      answer "First import a text into the Transcription field."
      exit CountAllWords 
   end if
   put ";,.,’s,:,(,),‘,“,”,',’,?,!,<,>,[,],{,},¡,¿,%,*,•,¶,§,«,»,‹,›,„,‚,&, " into charsToDelete--last item is option-space, and there are also low-9 quotation marks
   repeat for each item ch in charsToDelete
      replace ch with empty in fileContent
   end repeat
   replace quote with empty in fileContent
   replace comma with empty in fileContent
   replace CR with space in fileContent
   replace tab with space in fileContent
   put "/,\,—,  " into charsToSpace
   repeat for each item ch in charsToSpace
      replace ch with space in fileContent
   end repeat
   repeat for each word w in fileContent 
      add 1 to wordCount[w] 
   end repeat 
   # copy all the indexes that are in the wordCount associative array 
   put keys(wordCount) into tkeyWords 
   # sort the indexes -- tkeyWords contains a list of elements in array 
   sort tkeyWords 
   repeat for each line l in tkeyWords 
      put l & tab & wordCount[l] & cr after displayResult 
   end repeat 
   sort lines of displayResult descending numeric by word 2 of each
   filter displayResult without empty
   if char -1 of displayResult is cr then delete char -1 of displayResult
   --put displayResult into field "Results Table"
   -- countingFrequencies
end CountAllWords

on createSingleWordList
   local fileContent,charsToDelete,charsToSpace,tkeyWords,displayResult
   put field id 1004 of cd 1 of stack "STEP Transcription Module" into fileContent
   put ";,.,’s,:,(,),‘,“,”,',’,?,!,<,>,[,],{,},¡,¿,%,*,•,¶,§,«,»,‹,›,„,‚,&" into charsToDelete
   repeat for each item ch in charsToDelete
      replace ch with empty in fileContent
   end repeat
   replace quote with empty in fileContent
   replace comma with empty in fileContent
   replace CR with space in fileContent
   replace tab with space in fileContent
   put "/,\,—,  " into charsToSpace
   repeat for each item ch in charsToSpace
      replace ch with space in fileContent
   end repeat
   replace space with comma in fileContent
   split fileContent by comma and space
   combine fileContent by comma and CR
   replace comma with empty in fileContent
   filter fileContent without empty
   sort lines of fileContent
   --put fileContent into field "Results Table" 
end createSingleWordList

on countingFrequencies
   local displayResult,tWordFrequencies,numberCount,tFreq
   put fld "Results Table" into tWordFrequencies
   split tWordFrequencies by cr and tab
   repeat for each element l in tWordFrequencies
      add 1 to numberCount[l]
   end repeat
   put keys(numberCount) into tFreq
   repeat for each line l in tFreq
      put l & tab & numberCount[l] & cr after displayResult
   end repeat
   sort lines of displayResult descending numeric by word 2 of each
   sort lines of displayResult descending numeric by word 1 of each
   set the icon of btn "sort frequency" to 210060
   set the icon of btn "sort number of words" to 210060
   filter displayResult without empty
   if char -1 of displayResult is cr then delete char -1 of displayResult
   put displayResult into field "Frequency Analysis"
end countingFrequencies

## Identifyiong locations of segments or items

on listLocsOfAllSegments pText
   local tStart,x,y,w,displayResult,tkeyWords,segmentLocs
   put -1 into tStart
   repeat for each segment w in pText 
      put tStart+2 into x
      put x into y
      add length(w)-1 to y 
      put x,y & "|" after segmentLocs[w] 
      put y into tStart
   end repeat 
   # copy all the indexes that are in the wordCount associative array 
   put keys(segmentLocs) into tkeyWords 
   sort tkeyWords
   repeat for each line l in tkeyWords 
      put l & tab & segmentLocs[l] & cr after displayResult 
   end repeat 
   filter lines of displayResult with "*<pb*"
   put cr & cr & offsets("<pb",pText) after msg
end listLocsOfAllSegments

function listLocsOfAllItems pText,pItemDel
   local tStart,x,y,w,displayResult,tkeyWords,tCount,itemLocs
   set the itemDel to pItemDel
   put 1 into tStart
   repeat for each item w in pText
      put tStart into x
      put x + length(w)-1 into y
      put x,y & "|" after itemLocs[w] 
      put y+1 into tStart
   end repeat 
   # copy all the indexes that are in the itemLocs associative array 
   put keys(itemLocs) into tkeyWords 
   sort tkeyWords
   repeat for each line l in tkeyWords 
      if l <> empty and l <> cr and l <> space then put l & tab & itemLocs[l] & cr after displayResult 
   end repeat 
   return displayResult
end listLocsOfAllItems


## Spelling checker routine

on checkSpelling pLang
   local tWords,tArray,tText,tW,tC,tList,tMisspellings,tMisspellingsChunks,tSkips,tCustDicts,tCustDico,tItem,tDico,sDictionary
   set the cLanguage of stack "Found Strings" to pLang
   put "English|uWordsToSkipReSpelling|uListOfEnglishWordsAndProperNouns,French|uMotsAEviterReOrthographe|uTousLesMotsFrançais" into tCustDicts
   repeat with i = 1 to the number of items of tCustDicts
      put item i of tCustDicts into tItem
      set the itemDel to "|"
      if pLang is item 1 of tItem then 
         put item 2 of tItem into tCustDico
         put item 3 of tItem into tDico
         set the itemDel to comma
         exit repeat
      end if
      set the itemDel to comma
   end repeat
   put fld id 1004 of cd 1 of stack "STEP Transcription Module" into tText
   if tText is empty then exit checkSpelling
   put decompress(the tDico of cd 1 of stack "STEP Transcription Module") into tWords
   put the tCustDico of cd 1 of stack "STEP Transcription Module" into tSkips
   repeat for each line tWord in tWords
      put true into sDictionary[tWord]
   end repeat
   put 0 into tC
   repeat for each trueword tW in tText
      add 1 to tC
      if tW ends with "’s" then put char 1 to -3 of tW into tW
      if not(sDictionary[tW]) then put tC&comma after tArray[tW]
   end repeat
   if tArray is empty then 
      answer "No potential "&pLang&" spelling error found." as sheet
      exit to top
   end if
   repeat for each key tKey in tArray
      if (char 1 of tKey is not a number) and (char -1 of tKey is not a number) and (length(tKey) > 1) and (tKey is not among the lines of tSkips) then 
         put tKey & comma & tArray[tKey] after tList
         delete char -1 of tList
         put cr after tList
      end if
   end repeat
   delete char -1 of tList
   sort lines of tList ascending international
   repeat for each line tLine in tList
      put item 1 of tLine & cr after tMisspellings
      put item 2 to -1 of tLine & cr after tMisspellingsChunks
      put " ("& (the number of items of tLine)-1 &")" after line -1 of tMisspellings
   end repeat
   delete char -1 of tMisspellings
   delete char -1 of tMisspellingsChunks
   set the cMisspellings of stack "Found Strings" to tMisspellings
   set the cMisspellingsChunks of stack "Found Strings" to tMisspellingsChunks
   put tMisspellings into fld id 1005 of cd 1 of stack "Found Strings"
   set the cContent of stack "Found Strings" to "Misspellings"
   set the title of stack "Found Strings" to "Potential Misspellings - "&pLang
   palette stack "Found Strings"
end checkSpelling
----------------------------

## Listing files and folders

function listFiles pFolder, pRecurse
   local tTotalFiles, tCurrentFiles, tFolders
   set the defaultFolder to pFolder
   put filteredFiles() into tCurrentFiles
   if not pRecurse then return tCurrentFiles
   if tCurrentFiles is not empty then
      put tCurrentFiles & return after tTotalFiles
   end if
   put filteredFolders() into tFolders   
   repeat for each line tFolder in tFolders
      put listFiles((pFolder & slash & tFolder), pRecurse) into tCurrentFiles
      if tCurrentFiles is not empty then
         put tCurrentFiles & return after tTotalFiles
      end if
   end repeat
   delete the last char of tTotalFiles
   return tTotalFiles
end listFiles

# Returns a list of files with the full paths
function listFilesWithPaths pFolder, pRecurse
   local tTotalFiles, tCurrentFiles, tFolders
   set the defaultFolder to pFolder
   put filteredFilesWithPaths() into tCurrentFiles
   if not pRecurse then return tCurrentFiles
   if tCurrentFiles is not empty then
      put tCurrentFiles & return after tTotalFiles#
   end if
   put filteredFolders() into tFolders
   repeat for each line tFolder in tFolders
      put listFilesWithPaths((pFolder & slash & tFolder), pRecurse) into tCurrentFiles
      if tCurrentFiles is not empty then 
         put tCurrentFiles & return after tTotalFiles
      end if
   end repeat
   delete the last char of tTotalFiles
   return tTotalFiles
end listFilesWithPaths

# Filters the strings "." and ".." from a list
function filterDots pList
   local tList
   put pList into tList
   filter tList without "."
   filter tList without ".."
   filter tList without ".DS_Store"
   filter tList without "._thumb"
   return tList
end filterDots

# Returns a filtered list of files in the current directory
function filteredFiles
   return filterDots(the files)
end filteredFiles

# Returns a filtered list of folders in the current directory
function filteredFolders
   return filterDots(the folders)
end filteredFolders

# Returns a list of files in the current directory including
# each file's full path.
function filteredFilesWithPaths
   local tFiles, tFilesWithPaths
   put filteredFiles() into tFiles
   repeat for each line tFile in tFiles
      put the defaultFolder & slash & tFile & return after tFilesWithPaths
   end repeat
   delete the last char of tFilesWithPaths
   return tFilesWithPaths
end filteredFilesWithPaths

function listFolders pFolder, pRecurse
   local tTotalFolders, tCurrentFolders, tFolders
   set the defaultFolder to pFolder
   put filteredFolders() into tCurrentFolders
   if not pRecurse then return tCurrentFolders
   if tCurrentFolders is not empty then
      put tCurrentFolders & return after tTotalFolders
   end if
   put filteredFolders() into tFolders   
   repeat for each line tFolder in tFolders
      put listFolders((pFolder & slash & tFolder), pRecurse) into tCurrentFolders
      if tCurrentFolders is not empty then
         put tCurrentFolders & return after tTotalFolders
      end if
   end repeat
   delete the last char of tTotalFolders
   return tTotalFolders
end listFolders

function listFoldersWithPaths pFolder, pRecurse
   local tTotalFolders, tCurrentFolders, tFolders
   set the defaultFolder to pFolder
   put filteredFoldersWithPaths() into tCurrentFolders
   if not pRecurse then return tCurrentFolders
   if tCurrentFolders is not empty then
      put tCurrentFolders & return after tTotalFolders#
   end if
   put filteredFolders() into tFolders
   repeat for each line tFolder in tFolders
      put listFoldersWithPaths((pFolder & slash & tFolder), pRecurse) into tCurrentFolders
      if tCurrentFolders is not empty then 
         put tCurrentFolders & return after tTotalFolders
      end if
   end repeat
   delete the last char of tTotalFolders
   return tTotalFolders
end listFoldersWithPaths

function filteredFoldersWithPaths
   local tFolders, tFoldersWithPaths
   put filteredFolders() into tFolders
   repeat for each line tFolder in tFolders
      put the defaultFolder & slash & tFolder & return after tFoldersWithPaths
   end repeat
   delete the last char of tFoldersWithPaths
   return tFoldersWithPaths
end filteredFoldersWithPaths

function listFoldersAndFiles
   lock screen
   local tFolder, tFileList,tFullList1,tFullList2,tDirectory
   put field "Folder" into tFolder
   put stripDuplicates2(filterDots(listFolders(tFolder, true))) into tFullList1
   put stripDuplicates2(filterDots(listFiles(tFolder, true))) into tFullList2
   filter tFullList1 without empty
   filter tFullList2 without empty
   if tFullList1 <> empty then 
      put tFullList1 into tDirectory
      if tFullList2 <> empty then 
         put cr&tFullList2 after tDirectory
      end if
   else  if tFullList2 <> empty then put tFullList2 into tDirectory
   return tDirectory
end listFoldersAndFiles

function listFoldersAndFilesWithPaths
   lock screen
   local tFolder, tFileList,tFullList
   put field "Folder" into tFolder
   put listFoldersWithPaths(tFolder, true) into tFullList
   put cr&listFilesWithPaths(tFolder, true) after tFullList
   filter tFullList without "."
   filter tFullList without ".."
   filter tFullList without empty
   put stripDuplicates2(tFullList) into tFullList
   return tFullList
end listFoldersAndFilesWithPaths

function listAllFoldersWithPaths
   lock screen
   local tFolder, tFileList
   put field "Folder" into tFolder
   return listFoldersWithPaths(tFolder, true)
end listAllFoldersWithPaths

function listAllFolders
   lock screen
   local tFolder, tFileList
   put field "Folder" into tFolder
   return listFolders(tFolder, true)
end listAllFolders

function listAllFiles
   lock screen
   local tFolder, tFileList
   put field "Folder" into tFolder
   return listFiles(tFolder, true)
end listAllFiles

function listAllFilesWIthPaths
   lock screen
   local tFolder, tFileList
   put field "Folder" into tFolder
   return listFilesWithPaths(tFolder, true)
end listAllFilesWIthPaths

####################################

##Scripts driving CARD 1 of STACK STEP Transcription Module

## Card-opening and resizing and closing routines

on preOpenCard
   local tEdit,tHelp
   if "wordlib.rev" is not among the lines of the stacksInUse then 
      set the itemDelimiter to slash
      get the effective filename of this stack
      set the defaultFolder to item 1 to -2 of it
      set the itemDelimiter to comma
      library stack "wordlib.rev"
      put the cEditing of btn id 1098 of cd 1 into tEdit
      do tEdit
   end if
   put btn "Help" of group "STEP Menu 1" of stack "STEP Transcription Module" into tHelp
   get lineOffset("Tooltips",tHelp)
   if line it of btn "Help" of group "STEP Menu 1" of stack "STEP Transcription Module" is "Hide Tooltips" then
      set the toolTipDelay to 100
   else
      set the toolTipDelay to 0
   end if
end preOpenCard

on openCard
   local tButtonMenus
   put "1008,1034,1038,1060,1061,1106,1107,1108,1120" into tButtonMenus
   repeat for each item tButID in tButtonMenus
      set the showIcon of btn id tButID to true
   end repeat
   populateMenuWindow "Window","STEP Menu 1","STEP Transcription Module"
   set the HTMLText of fld id 1035 of cd 1 to "<p>Transcription tags</p>"
   set the HTMLText of fld id 1037 of cd 1 to "<p>Description tags</p>"
   gatheringGlyphSetsAndContractions
end openCard

on closeStackRequest
   if "wordlib.rev" is among the lines of the stacksInUse then release library stack "wordlib.rev"
   stuffToDoBeforeClosingOrQuitting
   pass closeStackRequest
end closeStackRequest

on doResize
   local tC,tH
   put item 1 of the loc of image id 1390 of cd 1 into tC
   put the height of image id 1390 of cd 1 into tH
   set the loc of image id 1391 of cd 1 to tC,(the top of image id 1390 of cd 1)+(tH*0.25)
   set the loc of image id 1393 of cd 1 to tC,(the top of image id 1390 of cd 1)+(tH*0.5)
   set the loc of image id 1392 of cd 1 to tC,(the top of image id 1390 of cd 1)+(tH*0.75)
   put item 1 of the loc of image id 1897 of cd 1 into tC
   put the height of image id 1897 of cd 1 into tH
   set the loc of image id 1898 of cd 1 to tC,(the top of image id 1897 of cd 1)+(tH*0.25)
   set the loc of image id 1900 of cd 1 to tC,(the top of image id 1897 of cd 1)+(tH*0.5)
   set the loc of image id 1899 of cd 1 to tC,(the top of image id 1897 of cd 1)+(tH*0.75)
   --set the left of group id 1896 of cd 1 to the cLeft of group "VDragBar2" of cd 1
end doResize

on resizeStack
   --doResize
   pass resizeStack
end resizeStack



## Right-clicking the mouse

on mouseDown theButton
   local tID,tTagTemp,tFldID,tCcopy,ut
   if theButton is 3 then
      uncolorButtons
      if (the clickLoc is within the rect of fld id 1004 of cd 1) and (fld id 1004 of cd 1 is not empty) and (the visible of fld id 1004 of cd 1) then 
         set the itemDel to "|"
         if the cSelectedText of fld id 1004 of cd 1 <> empty then 
            get the cSelectedText of fld id 1004 of cd 1
            if char 1 of it is "<" and char 2 of it is not in "!/>" and char -1 of it is ">" then 
               put it into ut
               get trueword 1 of it
               if char -2 to -1 of ut <> "/>" then 
                  put "Delete outer tags <"& it & ">...<//"&it&">" into line 4 of btn "XMLTagger1" of cd 1
                  put "Recolor selected tag <"& it & ">...<//"&it&">" into line 9 of btn "XMLTagger1" of cd 1
               else
                  put "Delete outer tags" into line 4 of btn "XMLTagger1" of cd 1
                  put "Recolor selected tag <"& it & "...//>" into line 9 of btn "XMLTagger1" of cd 1
               end if
            else
               put "Delete outer tags" into line 4 of btn "XMLTagger1" of cd 1
               put "Recolor selected tag" into line 9 of btn "XMLTagger1" of cd 1
            end if
         else
            put "Delete outer tags" into line 4 of btn "XMLTagger1" of cd 1
            put "Recolor selected tag" into line 9 of btn "XMLTagger1" of cd 1
         end if
         if the cPopUpMenu of btn "XMLTagger1" of cd 1 <> empty then 
            put doubleSlashes(item 1 of the cPopUpMenu of btn "XMLTagger1" of cd 1) into tTagTemp
            put tTagTemp into line 7 of btn "XMLTagger1" of cd 1
            if char -1 of segment 3 of tTagTemp <> ">" then 
               put "...>" after segment 3 of tTagTemp
               put segment 3 of tTagTemp into tTagTemp
            else 
               put char 1 to offset(">",segment 3 of tTagTemp) of segment 3 of tTagTemp into tTagTemp
            end if
         else if the cPopUpMenu of btn "XMLTagger1" of cd 1 is empty then
            put "Copy tag" into line 7 of btn "XMLTagger1"
         end if
         if the cCopyTag of btn "XMLTagger1" of cd 1 <> empty and tTagTemp <> empty then 
            put the cCopyTag of btn "XMLTagger1" of cd 1 into tCcopy
            if "</" is in tTagTemp and "</" is not in tCcopy then replace "<" with "</" in tCcopy
            else if "</" is not in tTagTemp and "</" is in tCcopy then replace "</" with "<" in tCcopy
            set the cCopyTag of btn "XMLTagger1" of cd 1 to tCcopy
            put "Replace tag"&&tTagTemp&&"with copied tag"&& doubleSlashes(the cCopyTag of btn "XMLTagger1" of cd 1) into line 8 of btn "XMLTagger1" of cd 1 
         else 
            put "Replace tag with copied tag" into line 8 of btn "XMLTagger1"
         end if
         set the itemDel to comma
         if fld id 1010 of cd 1 <> empty then 
            put "Insert " &doubleSlashes(fld id 1010 of cd 1) into line 6 of btn "XMLTagger1" of cd 1 
         else 
            put "Insert displayed tags" &fld id 1010 of cd 1 into line 6 of btn "XMLTagger1" of cd 1
         end if
         popup btn "XMLTagger1" at the clickLoc
      else if ((the clickLoc is within the rect of fld id 1041 of cd 1) and (fld id 1041 of cd 1 is not empty) and (the visible of fld id 1041 of cd 1)) or\ 
      ((the clickLoc is within the rect of fld id 1151 of cd 1) and (fld id 1151 of cd 1 is not empty) and (the visible of fld id 1151 of cd 1)) then 
         if the visible of fld id 1041 of cd 1 then put 1041 into tFldID else put 1151 into tFldID
         set the itemDel to "|"
         if the cSelectedText of fld id tFldID of cd 1 <> empty then 
            get the cSelectedText of fld id tFldID of cd 1
            if char 1 of it is "<" and char 2 of it is not in "!/>" and char -1 of it is ">" then 
               put it into ut
               get trueword 1 of it
               if char -2 to -1 of ut <> "/>" then 
                  put "Delete outer tags <"& it & ">...<//"&it&">" into line 4 of btn "XMLTagger2" of cd 1
                  put "Recolor selected tag <"& it & ">...<//"&it&">" into line 9 of btn "XMLTagger2" of cd 1
               else
                  put "Delete outer tags" into line 4 of btn "XMLTagger2" of cd 1
                  put "Recolor selected tag <"& it & "...//>" into line 9 of btn "XMLTagger2" of cd 1
               end if
            else
               put "Delete outer tags" into line 4 of btn "XMLTagger2" of cd 1
               put "Recolor selected tag" into line 9 of btn "XMLTagger2" of cd 1
            end if
         else
            put "Delete outer tags" into line 4 of btn "XMLTagger2" of cd 1
            put "Recolor selected tag" into line 9 of btn "XMLTagger2" of cd 1
         end if
         if the cPopUpMenu of btn "XMLTagger2" of cd 1 <> empty then 
            put doubleSlashes(item 1 of the cPopUpMenu of btn "XMLTagger2" of cd 1) into tTagTemp
            put tTagTemp into line 7 of btn "XMLTagger2" of cd 1
            if char -1 of segment 3 of tTagTemp <> ">" then 
               put "...>" after segment 3 of tTagTemp
               put segment 3 of tTagTemp into tTagTemp
            else 
               put char 1 to offset(">",segment 3 of tTagTemp) of segment 3 of tTagTemp into tTagTemp
            end if
         else if the cPopUpMenu of btn "XMLTagger2" of cd 1 is empty then
            put "Copy tag" into line 7 of btn "XMLTagger2"
         end if
         if the cCopyTag of btn "XMLTagger2" of cd 1 <> empty and tTagTemp <> empty then 
            put the cCopyTag of btn "XMLTagger2" of cd 1 into tCcopy
            if "</" is in tTagTemp and "</" is not in tCcopy then replace "<" with "</" in tCcopy
            else if "</" is not in tTagTemp and "</" is in tCcopy then replace "</" with "<" in tCcopy
            set the cCopyTag of btn "XMLTagger2" of cd 1 to tCcopy
            put "Replace tag"&&tTagTemp&&"with copied tag"&& doubleSlashes(the cCopyTag of btn "XMLTagger2" of cd 1) into line 8 of btn "XMLTagger2" of cd 1 
         else 
            put "Replace tag with copied tag" into line 8 of btn "XMLTagger2"
         end if
         set the itemDel to comma
         if fld id 1010 of cd 1 <> empty then 
            put "Insert " &doubleSlashes(fld id 1010 of cd 1) into line 6 of btn "XMLTagger2" of cd 1 
         else 
            put "Insert displayed tags" &fld id 1010 of cd 1 into line 6 of btn "XMLTagger2" of cd 1
         end if
         popup btn "XMLTagger2" at the clickLoc
      end if
   else if theButton <> 3 then
      if the clickField is not empty then
         put the id of the clickField into tID
         if tID is not among the items of (1004,1041,1151) then 
            uncolorButtons
         end if
      else
         if not (clickLocWithinBtns("1012,1013,1008,1034,1038,1060,1061")) then uncolorButtons
      end if
      pass mouseDown
   end if
end mouseDown

## Miscellaneous functions

function doubleSlashes pTag
   replace "</" with "<//" in pTag
   return pTag
end doubleSlashes

function singleSlasher pTag
   replace "<//" with "</" in pTag
   replace "<//" with "</" in pTag
   return pTag
end singleSlasher

function clickLocWithinBtn pID
   if the clickLoc is within the rect of btn id pID of cd 1 then return true else return false
end clickLocWithinBtn

function clickLocWithinBtns pIDs
   repeat for each item pID in pIDs
      if the clickLoc is within the rect of btn id pID of cd 1 then 
         return true
         exit repeat
      end if
   end repeat
   return false
end clickLocWithinBtns

## Pagebreak management

function addIncrementToPageNumber pLeafP
   local tLeafAbb,ut,ot,tCase,tNum
   if the number of segments of pLeafP = 1 then
      if pLeafP is not an integer then
         if char 1 of pLeafP is not an integer then
            if isRoman(pLeafP) is an integer then
               if isCapitalLetter(char 1 of pLeafP) is true then put "cap" into tCase else put "low" into tCase
               if tCase is "low" then put arabtoRom(romToArab(pLeafP) + 1) into pLeafP
               else if tCase is "cap" then put toUpper(arabtoRom(toLower(romToArab(pLeafP)) + 1)) into pLeafP
            end if
            if isLitteral(char 1 of pLeafP) is true then
               if char 2 to -1 of pLeafP is an integer then
                  put char 2 to -1 of pLeafP into tNum
                  add 1 to tNum
                  put char 1 of pLeafP & tNum into pLeafP
               else if length(pLeafP) is 1 then
                  put numToNativeChar(nativeCharToNum(pLeafP)+1) into pLeafP
               end if
            end if
         else if pLeafP is a number and "." is in pLeafP then
            add 0.1 to pLeafP
         end if
      else if segment 1 of pLeafP is an integer then
         add 1 to pLeafP
      end if
   else if the number of segments of pLeafP = 2 then
      if segment 1 of pLeafP is an integer then
         if (segment 2 of pLeafP is among the items of "1/2,1/3,1/4,2/3,3/4,2/5,3/5,4/5") then
            put segment 2 of pLeafP into ut
            set the itemDel to "/"
            if (item 2 of ut) - (item 1 of ut) > 1 then 
               put item 1 of ut into ot
               add 1 to ot
               put ot into item 1 of ut 
               put ut into segment 2 of pLeafP
            else put (segment 1 of pLeafP) + 1 into pLeafP
         end if
         if segment 2 of pLeafP <> empty and segment 2 of pLeafP is not an integer and "/" is not in segment 2 of pLeafP then
            if length(segment 1 of pLeafP) = 1 and isLitteral(segment 2 of pLeafP) is true then
               put segment 2 of pLeafP into ot
               put numToNativeChar(nativeCharToNum(ot)+1) into ot
               put ot into segment 2 of pLeafP
            end if
         end if
      else if segment 1 of pLeafP is not an integer and segment 2 of pLeafP is an integer then
         put segment 2 of pLeafP into ot
         add 1 to ot
         put ot into segment 2 of pLeafP
      end if
   end if
   return pLeafP
end addIncrementToPageNumber

function reformPageBreak pLeafP,pRectoVerso,pLeafAbb
   local ut,ot,tCase,tNum
   if pLeafP begins with pLeafAbb then put char (length(pLeafAbb) + 1) to -1 of pLeafp into pLeafp
   if pLeafP begins with "0" then
      repeat until not(pLeafP begins with "0")
         delete char 1 of pLeafP
      end repeat
   end if
   replace "_" with space in pLeafP
   if pRectoVerso is "v" or pRectoVerso is empty then
      put addIncrementToPageNumber(pLeafP) into pLeafP
   else 
      put "v" after pLeafP
   end if
   replace space with "_" in pLeafP
   return pLeafP
end reformPageBreak

on compilePageBreaksPrev pID
   local tText,tP,tPBValues
   put fld id pID of cd 1 into tText
   put findAllPageBreakValuesPrev(tText) into tP
   set the itemDel to "|"
   put empty into tPBValues
   repeat with x = 1 to the number of lines of tP
      if item 2 of line x of tP is true then put item 1 of line x of tP&comma&item 3 of line x of tP&comma&item 4 of line x of tP&cr after tPBValues
   end repeat
   set the cPBValues of fld id pID of cd 1 to tPBValues
end compilePageBreaksPrev

on compilePageBreaks pID
   local tText,tP,tPBValues
   put fld id pID of cd 1 into tText
   put findAllPageBreakValues(tText) into tP
   set the itemDel to "|"
   put empty into tPBValues
   repeat with x = 1 to the number of lines of tP
      put item 1 to -1 of line x of tP&cr after tPBValues
   end repeat
   replace "|" with comma in tPBValues
   set the cPBValues of fld id pID of cd 1 to tPBValues
end compilePageBreaks

function findAllPageBreakValuesPrev @pText
   local ots,tPBValues,ot,ut,tString
   put offsets("<pb n=",pText) into ots
   if ots <> 0 then
      repeat with x = 1 to the number of items of ots
         put item x of ots into ot
         put offset("/>",pText,ot) into ut
         put char ot to (ot+ut+1) of pText into tString
         put ot&comma&(ot+ut+1)&"|"&findPageBreakValues(tString) into line (the number of lines of tPBValues)+1 of tPBValues
      end repeat
   end if
   return tPBValues
end findAllPageBreakValuesPrev

function findAllPageBreakValues @pText
   local ots,tPBValues,ot,ut,tString
   put offsets("<pb n=",pText) into ots
   if ots <> 0 then
      repeat with x = 1 to the number of items of ots
         put item x of ots into ot
         put offset("/>",pText,ot) into ut
         put char ot to (ot+ut+1) of pText into tString
         put ot&comma&(ot+ut+1)&"|"&extractAllPBAttributes(tString) into line (the number of lines of tPBValues)+1 of tPBValues
      end repeat
   end if
   return tPBValues
end findAllPageBreakValues

function extractAllPBAttributes @pPB
   if pPB is empty then return empty
   local ot,ut,yt,tAttribs,tAtt,tVal,tn,ted,trend,txmlid,tplace,tmedium,tcolor,ttype,tstyle,tfacs
   put pPB into ut
   repeat with i = 1 to the number of segments of ut
      put segment i of ut & cr after ot
   end repeat
   delete line 1 of ot
   replace "=" with " = " in ot
   repeat with i = 1 to the number of lines of ot
      put segment 1 of line i of ot & "|" & (trueword 2 to -1 of line i of ot) & cr after yt
   end repeat
   set the itemDel to "|"
   put "n|xml:id|ed|rend|facs|place|style|type|medium|color|" into tAttribs
   repeat for each item tAtt in tAttribs
      if tAtt&"|" is in yt then
         get lineOffset(tAtt&"|",yt)
         put item 2 of line it of yt into tVal
         replace ":" with empty in tAtt
         do "put tVal into t"&tAtt
      end if
   end repeat
   return tn&"|"&txmlid&"|"&ted&"|"&trend&"|"&tfacs&"|"&tplace&"|"&tstyle&"|"&ttype&"|"&tmedium&"|"&tcolor
end extractAllPBAttributes

function extractFromPBFormat
   local tAttList,tPBFormat,ot,yt,tAtt,tVal
   put the cPageBreakFormat of fld id 1004 of cd 1 into tPBFormat
   if tPBFormat is empty then return empty
   delete char offset("/>",tPBFormat) to -1 of tPBFormat
   repeat with i = 1 to the number of words of tPBFormat
      put word i of tPBFormat & cr after ot
   end repeat
   delete line 1 of ot
   replace "=" with " = " in ot
   repeat with i = 1 to the number of lines of ot
      put segment 1 of line i of ot & "|" & (trueword 2 to -1 of line i of ot) & cr after yt
   end repeat
   set the itemDel to "|"
   repeat with i = 3 to the number of lines of yt
      put item 1 of line i of yt into tAtt
      put item 2 of line i of yt into tVal
      if tAtt is "ed" then put " ed="&quote&tVal&quote after tAttList
      else if tAtt is "rend" then put " rend="&quote&tVal&quote after tAttList
      else if tAtt is "facs" then put " facs="&quote&tVal&quote after tAttList
      else if tAtt is "place" then put " place="&quote&tVal&quote after tAttList
      else if tAtt is "style" then put " style="&quote&tVal&quote after tAttList
      else if tAtt is "type" then put " type="&quote&tVal&quote after tAttList
      else if tAtt is "medium" then put " medium="&quote&tVal&quote after tAttList
      else if tAtt is "color" then put " color="&quote&tVal&quote after tAttList
   end repeat
   return tAttList
end extractFromPBFormat

function getPagebreakInfo @pCharNum,@tEd,@tRend,@tLastValueOrig,@tRectoVerso2,@tLeafAbb
   local tPBs,tDocAbb,tPageNew,tInitLeaf,tRectoVerso,tLeafP,tXMLLeafP,tPBInfo,tN,tXM,tC,tZeroPageN,tHyphen,tStaPB,tStoPB,r,tLPN,tEdNum,tRendNum
   put the cPBValues of fld id 1004 of cd 1 into tPBs
   put length( fld id 1004 of cd 1)+1 into line (the number of lines of tPBs)+1 of tPBs
   repeat with b = 1 to (the number of lines of tPBs)-1
      set the itemDel to comma
      put item 1 of line b of tPBs into tStaPB
      put (item 1 of line b+1 of tPBs)-1 into tStoPB
      if pCharNum >= tStaPB and pCharNum <= tStoPB then
         put item 3  of line b of tPBs into tN
         put item 4  of line b of tPBs into tXM
         put item 5 of line b of tPBs into tEd
         put item 6 of line b of tPBs into tRend
         put empty into tRectoVerso
         if char -1 of tN is in "rv" and tLastValueOrig is "n" then
            put char -1 of tN into tRectoVerso
            delete char -1 of tN
            if  char -1 of tXM is in "rv" then delete char -1 of tXM
         end if
         if char -1 of tN is in "rv" and tLastValueOrig is "ed" then
            put char -1 of tN into tRectoVerso
            delete char -1 of tN
         end if
         put offset("-",tXM) into tHyphen
         put char 1 to tHyphen-1 of tXM into tDocAbb
         put tN into tZeroPageN
         put reformPageBreak(tZeroPageN,tRectoVerso,tLeafAbb) into tZeroPageN
         if tRectoVerso is empty then put tZeroPageN  into tPageNew
         if tLastValueOrig is "n" then
            if tRectoVerso is "v" and tPageNew is a number then 
               answer "The current page number is "&tZeroPageN&"v. Should the new page number be "&tZeroPageN+1&"r or "&tZeroPageN+1&"?" with "Cancel" or (tZeroPageN+1&"r") or (tZeroPageN+1) as sheet
               if it is "Cancel" then exit to top
               else put it into tPageNew
            else if tRectoVerso is "r" and tPageNew is a number then
               answer "The current page number is "&tZeroPageN&"r. Should the new page number be "&tZeroPageN&"v or "&tZeroPageN+1&"?" with "Cancel" or (tZeroPageN&"v") or (tZeroPageN+1) as sheet
               if it is "Cancel" then exit to top
               else put it into tPageNew
            end if
         end if
         if tZeroPageN is in tN and tZeroPageN <> tN then
            if tLeafAbb is empty then
               put offset(tZeroPageN,tN) into r
               put char 1 to r-1 of tN into tLeafAbb
            end if
            put tLeafAbb&tPageNew into tN
         end if
         if tZeroPageN is a number then
            if char -1 of tPageNew is "v" then put (length(tPageNew)-1) into tLPN else put length(tPageNew) into tLPN
            if tLPN = length(tZeroPageN)+1 then put tC-1 into tC
            repeat tC
               put 0 before tPageNew
            end repeat
         end if
         if tLastValueOrig is "n" or tLastValueOrig is empty then put tDocAbb&"-"&tPageNew into tXM
         if tEd <> empty then
            put tEd into tEdNum
            if tEdNum begins with tLeafAbb then put char (length(tLeafAbb) +1) to -1 of tEdNum into tEdNum
            put addIncrementToPageNumber(tEdNum) into tEdNum
            if tLastValueOrig is "ed" then
               if tRectoVerso2 is "r/v" and char -1 of tXM is in "rv" then
                  put char -1 of tXM into tRectoVerso
                  delete char -1 of tXM
               end if
               if tRectoVerso is "v" and tEdNum is a number then
                  answer "The current archival page number is "&tEdNum&"v. Should the new archival page number be "&tEdNum+1&"r or "&tEdNum+1&"?" with "Cancel" or (tEdNum+1&"r") or (tEdNum+1) as sheet
                  if it is "Cancel" then exit to top
                  else put it into tEdNum
               else if tRectoVerso is "r" and tEdNum is a number then
                  answer "The current archival page number is "&tEdNum&"r. Should the new page number be "&tEdNum&"v or "&tEdNum+1&"?" with "Cancel" or (tEdNum&"v") or (tEdNum+1) as sheet
                  if it is "Cancel" then exit to top
                  else put it into tEdNum
               end if
               put tDocAbb&"-"&tEdNum into tXM
            end if
            put tLeafAbb&tEdNum into tEd
         end if
         if tRend <> empty then
            put tRend into tRendNum
            if tRendNum begins with tLeafAbb then put char (length(tLeafAbb) +1) to -1 of tRendNum into tRendNum
            put addIncrementToPageNumber(tRendNum) into tRendNum
            if tRendNum begins with tLeafAbb then put tLeafAbb&tRendNum into tRend else put tRendNum into tRend
            if tLastValueOrig is "rend" then
               put tDocAbb&"-"&tRendNum into tXM
            end if
         end if
         exit repeat
      end if
   end repeat
   return tLeafAbb&tZeroPageN&comma&tXM&comma&tEd&comma & tRend
end getPagebreakInfo

function findPageBreakValues @pString
   local tM,tZ,tN,tXM
   --put "<pb n="&quote&"([\w\d\D]+)"&quote&" xml:id="&quote&"([\w\d\D]+)"&quote&"/>" into tM
   put "<pb n="&quote&"([^"&quote&"]+)"&quote&" xml:id="&quote&"([^"&quote&"]+)"&quote&"/>" into tM
   put matchText(pString,tM,tN,tXM) into tZ
   return tZ&"|"&tN&"|"&tXM
end findPageBreakValues

function getXMLIDLastValueOriginPlusRV
   set the itemDel to "|"
   return item 2 to -1 of the cPageBreakFormat of fld id 1004 of cd 1 of stack "STEP Transcription Module"
end getXMLIDLastValueOriginPlusRV

on locatePagebreak pCharNum,pID
   local tPBs,tVar,tStaPB,tStoPB,tN,tXM,tLeafAbb,tAbbDoc,tDocAbb,tHyphen,tZeroPageN,r,tPageNumberDisplay,tEd,tRend
   put the cPBValues of fld id pID of cd 1 into tPBs
   put the cPageNumberDisplay of stack "Customize Pagebreak Self-Closing Tag" into tPageNumberDisplay
   if tPageNumberDisplay is empty then put "transcriptional" into tPageNumberDisplay
   put length(fld id pID of cd 1)+1 into line (the number of lines of tPBs)+1 of tPBs
   put fld id 1207 of cd 1 into tVar
   put fld id 1208 of cd 1 into tLeafAbb
   put empty into tAbbDoc
   repeat with b = 1 to (the number of lines of tPBs)-1
      put item 1 of line b of tPBs into tStaPB
      put (item 1 of line b+1 of tPBs)-1 into tStoPB
      if pCharNum >= tStaPB and pCharNum <= tStoPB then
         put item 3  of line b of tPBs into tN
         put item 4  of line b of tPBs into tXM
         put item 5 of line b of tPBs into tEd
         put item 6 of line b of tPBs into tRend
         --put empty into tLeafAbb
         put offset("-",tXM) into tHyphen
         put char 1 to tHyphen-1 of tXM into tDocAbb
         put tDocAbb into tAbbDoc
         if tVar is not empty and tDocAbb ends with tVar then
            delete char -(length(tVar)) to -1 of tAbbDoc
         end if
         put tAbbDoc into fld id 1206 of cd 1
         --put char tHyphen+1 to -1 of tXM into tZeroPageN
         put tEd into tZeroPageN
         if tZeroPageN ends with "r" or tZeroPageN ends with "v" then
            put char -1 of tZeroPageN into fld id 1240 of cd 1 --rv
            delete char -1 of tZeroPageN
         else
            put empty into fld id 1240 of cd 1 --rv
         end if
         if tN ends with "r" or tN ends with "v" then delete char -1 of tN
         if tN begins with tLeafAbb then put char (length(tLeafAbb)+1) to -1 of tN into tN
         if tZeroPageN begins with tLeafAbb then put char (length(tLeafAbb)+1) to -1 of tZeroPageN into tZeroPageN
         --replace space with "_" in tZeroPageN
         --replace space with "_" in tRend
         if tZeroPageN begins with "0" then
            repeat until not(tZeroPageN begins with "0")
               delete char 1 of tZeroPageN
            end repeat
         end if
         --          if tZeroPageN is in tN and tZeroPageN <> tN then
         --             put offset(tZeroPageN,tN) into r
         --             put char 1 to r-1 of tN into tLeafAbb
         --             put tLeafAbb into fld id 1208 of cd 1
         --          end if
         if tPageNumberDisplay is "Archival" then put tZeroPageN into fld id 1210 of cd 1--tEd
         if tPageNumberDisplay is "Authorial" then put tRend into fld id 1210 of cd 1--tRend
         if tPageNumberDisplay is "Transcriptional" then put tN into fld id 1210 of cd 1--tN
         updateCurrentPageNumberFld
         exit repeat
      end if
   end repeat
end locatePagebreak

on updateCurrentPageNumberFld
   if fld id 1210 of cd 1 <> empty then
      if fld id 1211 of cd 1 <> empty then
         get length(fld id 1211 of cd 1)
         if length(fld id 1210 of cd 1) < it then
            repeat until length(fld id 1210 of cd 1) = it  
               put 0 before fld id 1210 of cd 1
            end repeat
         else if length(fld id 1210 of cd 1) > it then
            put removeSomeZeroes(fld id 1210 of cd 1,it) into fld id 1210 of cd 1
         end if
         if fld id 1209 of cd 1 <> empty then
            get length(fld id 1211 of cd 1)
            if length(fld id 1209 of cd 1) < it then
               repeat until length(fld id 1209 of cd 1) = it  
                  put 0 before fld id 1209 of cd 1
               end repeat
            else if length(fld id 1209 of cd 1) > it then
               put removeSomeZeroes(fld id 1209 of cd 1,it) into fld id 1209 of cd 1
            end if
         end if
      end if
   end if
end updateCurrentPageNumberFld

## Pasting text

on pasteKey
   get the cPasteTransit of fld id 1004 of cd 1 of stack "STEP Transcription Module"
   if the ID of the selectedField is "1004" and it is not empty and the clipboardData["text"] is it then
      saveForUndoRedo
      paste
      set the cPasteTransit of fld id 1004 of cd 1 of stack "STEP Transcription Module" to empty
      send "mouseUp" to btn "Describe alterations" of cd 1
   else if the clipboardData["text"] is not empty and the clipboardData["text"] is not it then
      saveForUndoRedo
      paste
   end if
end pasteKey


## Scrolling fields

on scrollFld1 pcharNum,pFldID
   local tScroll,tForTop
   lock screen
   put the vScroll of fld id pFldID of cd 1 into tScroll
   set the vscroll of fld id pFldID of cd 1 to 0
   get the lineIndex of char pcharNum of fld id pFldID of cd 1
   put the formattedTop of line it of fld id pFldID of cd 1 into tForTop
   if tForTop <= tScroll then set the vscroll of fld id pFldID of cd 1 to (the formattedtop of line it-1 of fld id pFldID of cd 1)-(the top of fld id pFldID of cd 1)
   else set the vscroll of fld id pFldID of cd 1 to (the formattedtop of line it-1 of fld id pFldID of cd 1)-(the top of fld id pFldID of cd 1)
end scrollFld1

on scrollFld2 pcharNum,pFldID
   local tScroll,tForTop,tMod
   lock screen
   put the vScroll of fld id pFldID of cd 1 into tScroll
   set the vscroll of fld id pFldID of cd 1 to 0
   put (the formattedTop of char pcharNum of fld id pFldID of cd 1)-(the top of fld id pFldID of cd 1) into tForTop
   if pCharNum > 100 then put pCharNum-100 into tMod else put 1 into tMod
   if tForTop <= tScroll then set the vscroll of fld id pFldID of cd 1 to (the formattedtop of char tMod of fld id pFldID of cd 1)-(the top of fld id pFldID of cd 1)
   else set the vscroll of fld id pFldID of cd 1 to (the formattedtop of char (pcharNum+20) of fld id pFldID of cd 1)-(the top of fld id pFldID of cd 1)
end scrollFld2

on scrollFld pcharNum,pFldID
   local tScroll,tMod
   lock screen
   put the vScroll of fld id pFldID of cd 1 into tScroll
   set the vscroll of fld id pFldID of cd 1 to 0
   if pCharNum > 100 then put pCharNum-100 into tMod else put 1 into tMod
   set the vscroll of fld id pFldID of cd 1 to (the formattedtop of char tMod of fld id pFldID of cd 1)-(the top of fld id pFldID of cd 1)
end scrollFld

## Ensuring basic document data are entered

on checkForDocData
   local tDocAbb,tVariant,tLeafAbb,tInitLeaf,tRectoVerso,tLeafP
   put fld id 1206 of cd 1 into tDocAbb
   put fld id 1207 of cd 1 into tVariant
   put fld id 1208 of cd 1 into tLeafAbb
   put fld id 1209 of cd 1 into tInitLeaf
   put fld id 1240 of cd 1 into tRectoVerso
   put tInitLeaf into tLeafP
   if tLeafP begins with "0" then
      repeat until not(tLeafP begins with "0")
         delete char 1 of tLeafP
      end repeat
   end if
   if tDocAbb is not empty and tLeafAbb is not empty and tInitLeaf is not empty and tLeafP is not empty then
      put tInitLeaf into fld id 1210 of cd 1
   else
      answer "Please enter document and page identification values in the small boxes (at least boxes 1, 3, and 4) at the bottom left of the window. "&\
      "Those data are needed for anchoring tags and page breaks. It is best to use the Pagebreak dialog for that purpose." with "OK" or "Pagebreak Dialog" as sheet
      if it is "Pagebreak Dialog" then modeless stack "Customize Pagebreak Self-Closing Tag"
      exit to top
   end if
end checkForDocData

## Anchoring handlers and functions

on selectAnchorText pLineN
   local tLineNumber,tXMText,tAnchorText,tLine,ot,ut,yt,tFirstNum,tSecondNum,tFirstLine,tSecondLine,tCharOne,tCharTwoTemp,tCharTwo,tFirstTempChar,tSecondTempChar
   put pLineN+1 into tLineNumber
   put fld id 1109 of cd 1 into tXMText
   put fld id 1163 of cd 1 into tAnchorText
   if tXMText is empty then exit selectAnchorText
   put line tLineNumber of tXMText into tLine
   put offset("from=",tLine) into ot
   put offset(" to=",tLine) into ut
   put offset(quote&">",tLine) into yt
   put char ot+6 to ut-2 of tLine into tFirstNum
   put char ut+5 to yt-1 of tLine into tSecondNum
   if the cIndentedStyle of fld id 1163 of cd 1 is true then
      put lineOffset(" xml:id="&quote&tFirstNum&quote,tAnchorText) into tFirstLine
      put lineOffset("<anchor xml:id="&quote&tSecondNum&quote,tAnchorText) into tSecondLine
      put the charIndex of line tFirstLine of fld id 1163 of cd 1 into tCharOne
      put the charIndex of line (tSecondLine+1) of fld id 1163 of cd 1 into tCharTwoTemp
      put tCharTwoTemp + offset(">",line tSecondLine+1 of tAnchorText)-1 into tCharTwo
      scrollFld tCharOne,1163
   else
      put offset(" xml:id="&quote&tFirstNum&quote,tAnchorText) into tFirstTempChar
      put offset("<anchor xml:id="&quote&tSecondNum&quote,tAnchorText) into tSecondTempChar
      put empty into tCharOne
      put empty into tCharTwo
      repeat with x = tFirstTempChar-1 down to 1
         if char x of tAnchorText is "<" then 
            put x into tCharOne
            exit repeat
         end if
      end repeat
      repeat with x = tSecondTempChar+1 to length(tAnchorText)
         if char x of tAnchorText is ">" then 
            put x into tCharTwo
            exit repeat
         end if
      end repeat
      scrollFld tCharOne,1163
   end if
   select char tCharOne to tCharTwo of fld id 1163 of cd 1
end selectAnchorText

function customAnchor
   local tAbbrev,tAbbrev2,tSeparator
   put the cAbbreviation of stack "Customize Tag Anchors" into tAbbrev
   put the cSeparator of stack "Customize Tag Anchors" into tSeparator
   put fld "DOC#" of cd 1 & fld "VAR#" of cd 1 into tAbbrev2
   if tAbbrev is empty or tAbbrev <> tAbbrev2 then put fld "DOC#" of cd 1 & fld "VAR#" of cd 1 into tAbbrev
   if tSeparator is empty then put "-" into tSeparator
   return tAbbrev&tSeparator
end customAnchor

on compileAnchoredNotes
   local tP,tText,tANValues
   put fld id 1004 of cd 1 into tText
   put findAllAnchoredNotes(tText) into tP
   set the itemDel to "|"
   put empty into tANValues
   repeat with x = 1 to the number of lines of tP
      if item 2 of line x of tP is true then put item 1 of line x of tP&comma&item 3 of line x of tP&comma&item 4 of line x of tP&comma&item 6 of line x of tP&cr after tANValues
   end repeat
   set the cAnchoredNoteValues of fld id 1004 of cd 1 to tANValues
end compileAnchoredNotes

function findAllAnchoredNotes @pText
   local ots,tANValues,ot,ttu,ut,tte,tString
   put offsets(quote&"/><note n",pText) into ots
   put empty into tANValues
   if ots <> 0 then
      repeat with x = 1 to the number of items of ots
         put item x of ots into ot
         put ot-40 into ttu
         put offset("<anchor ",pText,ttu) into ut
         if ut <> 0 then
            put offset("</note>",pText,ot) into tte
            put char ttu+ut to (ot+tte-1) of pText into tString
            put (ttu+ut)&comma&(ot+tte-1)&"|"&findAnchoredNoteValues(tString) into line (the number of lines of tANValues)+1 of tANValues
         end if
      end repeat
   end if
   return tANValues
end findAllAnchoredNotes

function findAnchoredNoteValues @pString
   local tM,tZ,tXM,tN,tTA,tTY
   put "<anchor xml:id="&quote&"([\w\d\D]+)"&quote&"/><note n="&quote&"([\w\d\D]+)"&quote&" target="&quote&"([\w\d\D]+)"&quote&" type="&quote&"([\w\d\D]+)"&quote into tM
   put matchText(pString,tM,tXM,tN,tTA,tTY) into tZ
   if tZ is false then 
      put "<anchor xml:id="&quote&"([\w\d\D]+)"&quote&"/><note n="&quote&"([\w\d\D]+)"&quote&" target="&quote&"([\w\d\D]+)"&quote&" type="&quote&"([\w\d\D]+)"&quote&" place="&quote&"([\w\d\D]+)"&quote into tM
      put matchText(pString,tM,tXM,tN,tTA,tTY) into tZ
   end if
   if quote is in tTY then put char 1 to offset(quote,tTY)-1 of tTY into tTY
   return tZ&"|"&tXM&"|"&tN&"|"&tTA&"|"&tTY
end findAnchoredNoteValues


## Shortcut to select menu command

on sendMenuPick pBtnID,pLiNum
   send "menuPick"&&(line pLiNum of btn id pBtnID of cd 1) to btn id pBtnID of cd 1
   select line pLiNum of btn id pBtnID of cd 1
end sendMenuPick

function identifyPullDownMenu pTag
   if pTag is among the lines of the cTags of btn id 1008 of cd 1 then return 1008
   else if pTag is among the lines of the cTags of btn id 1034 of cd 1 then return 1034
   else if pTag is among the lines of the cTags of btn id 1038 of cd 1 then return 1038
   else return empty
end identifyPullDownMenu


## Functions extracting data from tags

function findAttributeValuePosition pString,pAttribute
   local tSta,tSta2,tSto
   if space&pAttribute&"=" is not in pString then return empty
   put offset(space&pAttribute&"=",pString) into tSta
   put offset(space&pAttribute&"=",pString)+(length(pAttribute)+3) into tSta2
   if char tSta2 of pString is quote then return tSta,tSta2
   put tSta2 + offset(quote,pString,tSta2) into tSto
   return tSta,tSto   
end findAttributeValuePosition

function extractValueOfAttribute pString,pAttribute
   local tSta,tSto
   if space&pAttribute&"=" is not in pString then return empty
   put offset(space&pAttribute&"=",pString)+(length(pAttribute)+3) into tSta
   if char tSta of pString is quote then return empty
   put tSta + offset(quote,pString,tSta) -1 into tSto
   return char tSta to tSto of pString   
end extractValueOfAttribute

function extractDataAndDataLengthFromTag pTaggedData,pTag
   local tL1,tL2,tR,tLength
   put offset("<"&pTag,pTaggedData) into tL1
   if tL1 = 0 then return empty
   put offset(">",pTaggedData,tL1)+tL1+1 into tL2
   put offset("</"&pTag,pTaggedData)-1 into tR
   if tL2 = tR-1 or tR = 0 then return empty
   put (tR-tL2)+1 into tLength
   return char tL2 to tR of pTaggedData & cr & tLength
end extractDataAndDataLengthFromTag

function findAllAttributesAndValues pText
   local ots,tFoundAtt,tFullAttList,tSta,tSto,tBs,tLength
   put offsets("="&quote,pText) into ots
   repeat the number of items of ots
      put findAttributesAndValues(pText) into tFoundAtt
      set the itemDel to "|"
      put tFoundAtt & cr after tFullAttList
      put length(item 3 of tFoundAtt) + 2 into tLength
      put item 4 of tFoundAtt into tSta
      put (item 5 of tFoundAtt)+2 into tSto
      put empty into tBs
      repeat tLength
         put "B" after tBs
      end repeat
      put tBs into char tSta to tSto of pText
   end repeat
   delete char -1 of tFullAttList
   set the itemDel to "|"
   repeat with f = (the number of lines of tFullAttList) down to 2
      if (item 1 to 2 of line f of tFullAttList) = (item 1 to 2 of line f-1 of tFullAttList) then
         put "|"&item 3 to (the number of items of line f of tFullAttList) of line f of tFullAttList after line f-1 of tFullAttList
         delete line f of tFullAttList
      end if
   end repeat
   return tFullAttList
end findAllAttributesAndValues

function findAttributesAndValues pString
   local tAttReg,tAttName,tX,tY, tXY,tZ
   put " ([\w:*]+)="&quote into tAttReg
   put matchText(pString,tAttReg,tAttName) into tZ
   put matchChunk(pString,tAttReg,tX,tY) into tXY
   repeat with c = tX-1 down to 1
      if char c of pString is "<" then exit repeat
   end repeat
   repeat with d = c to c+40
      if char d of pString is space then exit repeat
   end repeat
   repeat with e = tY+2 to tY+250
      if (char e of pString is space) and not(char e+1 of pString is quote) then exit repeat
      else if char e of pString is in "/>" then exit repeat
   end repeat
   if tZ is true and tXY is true then return char c to d-1 of pString &"|"&c&comma&d-1&"|"& tAttName&"|"&tX&"|"& tY &"|"& char tY+2 to e-1 of pString & "|"&tY+2 & comma & e-1
end findAttributesAndValues

## Uncoloring tagging buttons

on uncolorButtons
   set the backgroundColor of btn id 1013 of cd 1 of stack "STEP Transcription Module" to empty
   set the backgroundColor of btn id 1012 of cd 1 of stack "STEP Transcription Module" to empty
end uncolorButtons

## Functions for indenting tags

function spaceMetadataTags pmeta
   local tSpaceUnit,tSpaceUnit0,tListOfSpacedAngles,tAngSp,tAng,tSp,tAddSpace
   if "/>" is in pmeta then exit spaceMetadataTags
   put "" into tSpaceUnit0
   put space&space&space&space into tSpaceUnit
   repeat with i = 1 to 10
      put empty into tAddSpace
      repeat i
         put tSpaceUnit after tAddSpace
      end repeat
      do "put tAddSpace into tSpaceUnit"&i
   end repeat
   put createAngleOrder(pmeta) into tListOfSpacedAngles
   repeat with j = (the number of items of tListOfSpacedAngles) down to 1
      put item j of tListOfSpacedAngles into tAngSp
      set the itemDel to ":"
      put item 1 of tAngSp into tAng
      put (item 2 of tAngSp)+1 into tSp
      set the itemDel to comma
      do "put cr & tSpaceUnit"&tSp&&"before char tAng of pmeta"
   end repeat
   delete char 1 of pmeta
   return pmeta
end spaceMetadataTags

function createAngleOrder @pmeta
   local tLeftAndRightAngles,tLeftAs,tRightAs,pNests,tLA,tRA,tCount,tSpaceList
   put gatherAngleLocs(pmeta) into tLeftAndRightAngles
   put line 1 of tLeftAndRightAngles into tLeftAs
   put line 2 of tLeftAndRightAngles into tRightAs
   if char -1 of tLeftAs is not comma then put comma after tLeftAs
   put tLeftAs & tRightAs into pNests
   sort items of pNests ascending numeric
   put empty into tSpaceList
   put 0 into tCount
   repeat with i = 1 to the number of items of pNests
      set the wholeMatches to true
      put itemOffset(item i of pNests,tLeftAs) into tLA
      set the wholeMatches to true
      put itemOffset(item i of pNests,tRightAs) into tRA
      if tLA <> 0 then 
         put ":"&tCount after item i of pNests
         add 1 to tCount
      else if tRA <> 0 then
         put ":"&tCount-1 after item i of pNests
         put tCount-1 into tCount
      end if
   end repeat
   return pNests
end createAngleOrder

function gatherAngleLocs @pmeta
   local tOpenTag,tRightTag,tAllAs,tRightAs
   put "<" into tOpenTag
   put "</" into tRightTag
   put offsets(tOpenTag,pmeta) into tAllAs
   put offsets(tRightTag,pmeta) into tRightAs
   repeat with x = the number of items of tAllAs down to 1
      if item x of tAllAs is among the items of tRightAs then delete item x of tAllAs
   end repeat
   return tAllAs&cr&tRightAs
end gatherAngleLocs

## Controlling use of arrow keys

on arrowKey theKey
   local gLoc,Yloc,tDiff,tFldID
   lock screen
   if the optionKey is down then
      select empty
      put (the width of this stack) - (the minwidth of this stack) into tDiff
      put whichField() into tFldID
      if theKey is "down" then 
         --set the left of group id 1931 of cd 1 to 35
         set the visible of group id 1931 of cd 1 to true
         put the location of group id 1931 of cd 1 into gLoc
         put item 2 of gLoc into Yloc
         add 3 to Yloc
         if Yloc >= (the bottom of fld id tFldID of cd 1)-11 then 
            put the top of fld id tFldID of cd 1 into Yloc
         else if Yloc < the top of fld id tFldID of cd 1 then 
            put (the bottom of fld id tFldID of cd 1)-11 into Yloc
         end if
         set the loc of group id 1931 of cd 1 to (395+(tDiff/2)),Yloc
         setLocLineMark
      else if theKey is "up" then 
         --set the left of group id 1931 of cd 1 to 35
         select empty
         set the visible of group id 1931 of cd 1 to true
         put the location of group id 1931 of cd 1 into gLoc
         put item 2 of gLoc into Yloc
         add -3 to Yloc
         if Yloc < the top of fld id tFldID of cd 1 then 
            put (the bottom of fld id tFldID of cd 1)-11 into Yloc
         else if Yloc >= (the bottom of fld id tFldID of cd 1)-11 then 
            put the top of fld id tFldID of cd 1 into Yloc
         end if
         set the loc of group id 1931 of cd 1 to (395+(tDiff/2)),Yloc
         setLocLineMark
      else if theKey is "left" or theKey is "right" then 
         set the visible of group id 1931 of cd 1 to false
      end if
      recordLinemarkMove
      exit arrowKey
   else
      pass arrowKey
   end if
end arrowKey

## Identifying active field

private function whichField
   local tFldList
   put "1004,1026,1029,1126,1163,1041,1139,1044,1151,1154,1157" into tFldList
   repeat for each item tFld in tFldLIst
      if the visible of fld id tFld then return tFld
   end repeat
end whichField

## Shortcut to colorizing tags

on colorAll pFldID
   if pFldID <> empty then send "mouseUp" && pFldID to btn "Color all tags" of cd 1 else send "mouseUp" to btn "Color all tags" of cd 1
end colorAll

## Functions to check where the insertion point is located vis-à-vis tags

function checkIfInsideRegularTag pText,pPosition1,pPosition2
   if (pPosition2 = (pPosition1-1)) and (char pPosition1 of pText is "<") and (char pPosition2 of pText is ">") then return false
   repeat with i = pPosition2 down to 1
      if char i of pText is ">" then return false
      else if char i of pText is "<" then
         if char i+1 to i+3 of pText is "!--" then return false
         else exit repeat
      else next repeat
   end repeat
   repeat with i = pPosition1 to length(pText)
      if char i of pText is "<" then return false
      else if char i-2 to i of pText is "-->" then return false
      else if char i-1 to i of pText is "/>" then return true
      else next repeat
   end repeat
   return false
end checkIfInsideRegularTag

function checkIfInsideInHouseMessageTag pText,pPosition
   repeat with i = pPosition down to 1
      if char i of pText is ">" then return false
      else if char i to i+1 of pText is "</" then return false
      else if char i to i+3 of pText is "<!--" then return true
      else next repeat
   end repeat
   return false
end checkIfInsideInHouseMessageTag

function checkIfInsideSelfClosingTag pText,pPosition
   repeat with i = pPosition to length(pText)
      if char i of pText is "<" then return false
      else if char i to i+3 of pText is "-->" then return false
      else if char i to i+2 of pText is "/>" then return true
      else next repeat
   end repeat
   return false
end checkIfInsideSelfClosingTag

function checkForNextPTag pText,pStart,pOrigStart
   local tPLocs,tPSLocs
   if "</p>" is not in pText then return empty
   put offsets("<p>",pText) into tPLocs
   put comma & offsets("<p ",pText) after tPLocs
   sort items of tPLocs ascending numeric
   put offsets("</p>",pText) into tPSLocs
   if (tPLocs is 0 or tPLocs is "0,0") and tPSLocs <> 0 then return (item 1 of tPSLocs)+3+pStart & cr & pOrigStart
   if tPLocs <> 0 and tPSLocs <> 0 then 
      if item 1 of tPLocs < item 1 of tPSLocs then return empty
      else return (item 1 of tPSLocs)+3+pStart & cr & pOrigStart
   end if
end checkForNextPTag

function checkIfInsideClosingTag pText,pPosition
   local x,y
   repeat with i = pPosition down to 1
      if i = pPosition and char i of pText = ">" and char i-1 of pText <> "-" then 
         put i into y
         exit repeat
      else if char i of pText is ">" and i < pPosition then return false
      else if char i of pText is "<" and char i+1 of pText is not "/" then return false
      else if char i of pText is "<" and char i+1 of pText is "/" then 
         put i into x
         exit repeat
      else next repeat
   end repeat
   repeat with i = pPosition to length(pText)
      if i = pPosition and char i of pText = "<" and char i+1 of pText is "/" then put i into x
      else if char i of pText is "<" and i > pPosition  then return false
      else if char i of pText is ">" and char i-1 of pText is not "-" then 
         put i into y
         exit repeat
      else next repeat
   end repeat
   return x,y
end checkIfInsideClosingTag

function checkIfBetweenOpeningAndClosingTags pText,pPosition
   put char pPosition to -1 of pText into pText
   if "</" is not in pText then return false
   repeat with i = 1 to length(pText)
      if char i to i+1 of pText is "</" then return true
      else if char  i to i+1 of pText is "<!" then return false
      else if char i of pText is ">" or char i to i+1 of pText is "="&quote then return false
      else next repeat
   end repeat
   return false
end checkIfBetweenOpeningAndClosingTags

function betweenWhichTags pText,pPosition1,pPosition2
   local tX1,tX2,tY1,tY2,i,j,tLText,tOpeningFullTag,tClosingFullTag,tTag1,tTag2
   if checkIfBetweenOpeningAndClosingTags(pText,pPosition1) is true then
      put length(pText) into tLText
      repeat with i = pPosition2 down to 1
         if char i of pText is ">" then 
            if char i-1 of pText is "/" or char i-2 to i-1 of pText is "--" then return empty
            put i into tX2
            exit repeat
         end if
      end repeat
      repeat with j = tX2-1 down to 1
         if char j of pText is "<" then 
            put j into tX1
            exit repeat
         end if
      end repeat
      repeat with i = pPosition1 to tLText
         if char i of pText is "<" then 
            if char i+1 of pText is "!" then return empty
            put i into tY1
            exit repeat
         end if
      end repeat
      repeat with j = tY1+1 to tLText
         if char j of pText is ">" then 
            put j into tY2
            exit repeat
         end if
      end repeat
      put char tX1 to tX2 of pText into tOpeningFullTag
      put char tY1 to tY2 of pText into tClosingFullTag
      put trueword 1 of tOpeningFullTag into tTag1
      put trueword 1 of tClosingFullTag into tTag2
      if tTag1 <> tTag2 then return empty
      return tOpeningFullTag,tX1,tX2,tClosingFullTag,tY1,tY2,tTag1,char tX2+1 to tY1-1 of pText
   else
      return empty
   end if
end betweenWhichTags

## File Menu related handlers

on fillOpenRecentFiles
   local tFPL,tRFL,pFileMenu,tLineNum1,tLineNum2,tPastRFL
   put the cFilePathList of btn id 1101 of cd 1 of stack "STEP Transcription Module" into tFPL
   if tFPL is empty then exit to top
   set the itemDel to "/"
   put empty into tRFL
   repeat for each line tLine in tFPL
      put tab & item -1 of tLine & cr after tRFL
   end repeat
   delete char -1 of tRFL
   put btn "File" of group "STEP Menu 1" of cd 1 of stack "STEP Transcription Module" into pFileMenu
   put lineOffset("Open &Recent",pFileMenu) into tLineNum1
   put lineOffset(tab&"Clear Recent",pFileMenu) into tLineNum2
   if tLineNum1+2<>tLineNum2 then 
      put line tLineNum1+1 to tLineNum2-2 of pFileMenu into tPastRFL
      if tFPL =tPastRFL then exit fillOpenRecentFiles
      put tRFL into line tLineNum1+1 to tLineNum2-2 of pFileMenu
   else
      put cr & tRFL after line tLineNum1 of pFileMenu
   end if
   put pFileMenu into btn "File" of group "STEP Menu 1" of cd 1 of stack "STEP Transcription Module"
end fillOpenRecentFiles

on fillOpenRecentArchives
   local tFPL,tRFL,pFileMenu,tLineNum1,tLineNum2,tPastRFL
   put the cFilePathList of btn id 1074 of cd 1 of stack "STEP Transcription Module" into tFPL
   if tFPL is empty then exit to top
   set the itemDel to "/"
   put empty into tRFL
   repeat for each line tLine in tFPL
      put tab & item -1 of tLine & cr after tRFL
   end repeat
   delete char -1 of tRFL
   put btn "File" of group "STEP Menu 1" of cd 1 of stack "STEP Transcription Module" into pFileMenu
   put lineOffset("Ope&n Recent Archive",pFileMenu) into tLineNum1
   put lineOffset(tab&"Clear Recent Archive",pFileMenu) into tLineNum2
   if tLineNum1+2<>tLineNum2 then 
      put line tLineNum1+1 to tLineNum2-2 of pFileMenu into tPastRFL
      if tFPL =tPastRFL then exit fillOpenRecentArchives
      put tRFL into line tLineNum1+1 to tLineNum2-2 of pFileMenu
   else
      put cr & tRFL after line tLineNum1 of pFileMenu
   end if
   put pFileMenu into btn "File" of group "STEP Menu 1" of cd 1 of stack "STEP Transcription Module"
end fillOpenRecentArchives

## Moving from STEP Transcriptor to Descriptor and back

on showDescriptiveTools
   local tControls
   lock screen
   put "1054,1120,1130,1895,1921,1924,1925,1926,1927,1928,1929" into tControls
   repeat for each item tCon in tControls
      show control id tCon of cd 1 of stack "STEP Transcription Module"
   end repeat
   set the cTranscriptiveTag of fld id 1010 of cd 1 to fld id 1010 of cd 1
   set the text of fld id 1010 of cd 1 to the cDescriptiveTag of fld id 1010 of cd 1
   set the title of this stack to "STEP Descriptor"
   end showDescriptiveTools

on hideDescriptiveTools
   local tControls
   lock screen
   put "1054,1120,1130,1895,1921,1924,1925,1926,1927,1928,1929" into tControls
   repeat for each item tCon in tControls
      hide control id tCon of cd 1 of stack "STEP Transcription Module"
   end repeat
   set the cDescriptiveTag of fld id 1010 of cd 1 to fld id 1010 of cd 1
   set the text of fld id 1010 of cd 1 to the cTranscriptiveTag of fld id 1010 of cd 1
   set the title of this stack to "STEP Transcriptor"
end hideDescriptiveTools

## Discrete colorizing of tags

on colorizeJustEnteredTag pSelectedTag,pX,pY,pFldID--,pOpenOnlyTag
   local tClosedList,tClosedAndOpenedList,tSelfClosedList
   lock screen
   if "<!--" is in pSelectedTag and "-->" is in pSelectedTag then colorizeInHouseMessages2 pFldID,pSelectedTag,pX
   put closedTagList(pSelectedTag) into tClosedList
   if tClosedList is empty and "/>" is not in pSelectedTag then exit colorizeJustEnteredTag
   put openedTagList(tClosedList,pSelectedTag) into tClosedAndOpenedList
   put selfClosingTagList(pSelectedTag) into tSelfClosedList
   if tSelfClosedList <> empty then colorizeSelectedSelfClosingTags tSelfClosedList,pX,pFldID
   colorizeSelectedTags tClosedAndOpenedList,pX,pFldID
   colorizeAttributes2 pFldID,pSelectedTag,pX
   colorizeValues2 pFldID,pSelectedTag,pX
end colorizeJustEnteredTag

on colorizeSelectedTags pClosedAndOpenedList,pX,pFldID
   local tTag,tStartClosingAngle,tEndClosingAngle,tStartOpenAngle,tEndTagInOpenAngle,tEndOpeningAngle1,tEndOpeningAngle2,tTagColor,tTagColorSet
   put the cTagColorSet of cd 1 of stack "STEP Transcription Module" into tTagColorSet
   repeat for each line tTagged in pClosedAndOpenedList
      put item 3 of tTagged into tTag
      put (item 1 of tTagged) + pX -1 into tStartClosingAngle
      put (item 2 of tTagged) + pX -1 into tEndClosingAngle
      put (item 4 of tTagged) + pX -1 into tStartOpenAngle
      put (item 5 of tTagged) + pX -1 into tEndTagInOpenAngle
      put (item 6 of tTagged) + pX -1 into tEndOpeningAngle1
      put (item 7 of tTagged) + pX -1 into tEndOpeningAngle2
      set the textColor of char tStartOpenAngle to tEndTagInOpenAngle of fld id pFldID  of cd 1 of stack "STEP Transcription Module" to getTagColor(tTag,tTagColorSet)
      set the textColor of char tEndOpeningAngle1 to tEndOpeningAngle2 of fld id pFldID  of cd 1 of stack "STEP Transcription Module" to getTagColor(tTag,tTagColorSet)
      set the textColor of char tStartClosingAngle to tEndClosingAngle of fld id pFldID  of cd 1 of stack "STEP Transcription Module" to getTagColor(tTag,tTagColorSet)
   end repeat
end colorizeSelectedTags

on colorizeOpenOnlyTag pOpenTag,pX,pFldID
   local tTagColorSet
   put the cTagColorSet of cd 1 of stack "STEP Transcription Module" into tTagColorSet
   set the textColor of char pX to pX+(length(trueword 1 of pOpenTag))-1 of fld id pFldID  of cd 1 of stack "STEP Transcription Module" to getTagColor(trueword 1 of pOpenTag,tTagColorSet)
   set the textColor of char pX+(length(pOpenTag))-1 of fld id pFldID  of cd 1 of stack "STEP Transcription Module" to getTagColor(trueword 1 of pOpenTag,tTagColorSet)
   colorizeAttributes2 pFldID,pOpenTag,pX
   colorizeValues2 pFldID,pOpenTag,pX
end colorizeOpenOnlyTag

on colorizeSelectedSelfClosingTags pSelfClosedList,pX,pFldID
   local tTag,tStartClosingAngle,tEndClosingAngle,tStartOpenAngle,tEndTagInOpenAngle,tTagColor,tTagColorSet
   if pSelfClosedList is "pSelfClosedList" then exit colorizeSelectedSelfClosingTags
   put the cTagColorSet of cd 1 of stack "STEP Transcription Module" into tTagColorSet
   repeat for each line tTagged in pSelfClosedList
      if tTagged is empty then next repeat
      put item 5 of tTagged into tTag
      put (item 1 of tTagged) + pX -1 into tStartOpenAngle
      put (item 2 of tTagged) + pX -1 into tEndTagInOpenAngle
      put (item 3 of tTagged) + pX -1 into tStartClosingAngle
      put (item 4 of tTagged) + pX -1 into tEndClosingAngle
      set the textColor of char tStartOpenAngle to tEndTagInOpenAngle of fld id pFldID  of cd 1 of stack "STEP Transcription Module" to getTagColor(tTag,tTagColorSet)
      set the textColor of char tStartClosingAngle to tEndClosingAngle of fld id pFldID  of cd 1 of stack "STEP Transcription Module" to getTagColor(tTag,tTagColorSet)
   end repeat
end colorizeSelectedSelfClosingTags

on colorizeAttributes2 pIDNum,pString,pX
   local tLA,tWordNum,tCh
   put offsets("="&quote,pString) into tLA
   if tLA <> 0 then 
      repeat with x = 1 to the number of items of tLA
         put (the number of words of char 1 to (item x of tLA) of pString) -1 into tWordNum
         put length(segment 1 to tWordNum of pString)+pX+1 into tCh
         set the textColor of char tCh to (item x of tLA)-1+pX of fld id pIDNum  of cd 1 of stack "STEP Transcription Module" to the cAttributeColor of cd 1 of stack "STEP Transcription Module"
      end repeat
   end if
end colorizeAttributes2
   
on colorizeValues2 pIDNum,pString,pX
   local tLA,tRA1,tRA2,tRA3,tRA,tTempSeg,ot
   put offsets("="&quote,pString) into tLA
   if tLA = 0 then exit colorizeValues2
   repeat with x = 1 to the number of items of tLA
      put char (item x of tLA)+2 to (item x of tLA)+80 of pString into tTempSeg
      put offset(quote,tTempSeg) into ot
      set the textColor of char (item x of tLA)+pX to (item x of tLA)+pX+ot of fld id pIDNum  of cd 1 of stack "STEP Transcription Module" to the cValueColor of cd 1 of stack "STEP Transcription Module"
   end repeat
end colorizeValues2

function closedTagList pString
   local tStas,tList
   if "</" is not in pString then return empty
   put offsets("</",pString) into tStas
   repeat with i = 1 to the number of items of tStas
      repeat with j = item i of tStas to length(pString)
         if char j of pString is ">" then
            put item i of tStas&comma&j&comma&char item i of tStas+2 to j-1 of pString & cr after tList
            exit repeat
         end if
      end repeat
   end repeat
   delete char -1 of tList
   return tList
end closedTagList

function selfClosingTagList pString
   local tList,tStos,tSelfCloseTag
   if "/>" is not in pString then return empty
   put offsets("/>",pString) into  tStos
   repeat with i = 1 to the number of items of tStos
      repeat with j = (item i of tStos)-1 down to 1
         if char j of pString is "<" then 
            put char j to  (item i of tStos)+1 of pString into tSelfCloseTag
            put j,j+length(trueword 1 of tSelfCloseTag),item 1 of tStos,(item 1 of tStos)+1,trueword 1 of tSelfCloseTag & cr after tList
            exit repeat
         end if
      end repeat
   end repeat
   return tList
end selfClosingTagList

function openedTagList pList,pString
   local tOpenTag,ot,ut1,ut2,replaceChars
   repeat with i = 1 to the number of lines of pList
      put "<"& item -1 of line i of pList into tOpenTag
      put offset(tOpenTag,pString) into ot
      if ot = 0 then next repeat
      put offset(">",pString,ot+1)+ot+1 into ut2
      if char ut2-1 of pString is "/" then put ut2-1 into ut1 else put ut2 into ut1
      put comma&ot,ot+length(tOpenTag)-1,ut1,ut2 after line i of pList
      put empty into replaceChars
      repeat (ut2-ot)+1
         put "%" after replaceChars
      end repeat
      put replaceChars into char ot to ut2 of pString
   end repeat
   return pList
end openedTagList

on colorizeInHouseMessages2 pIDNum,pString,pX
   local tLA,tRA,tLefts,tRights
   put "<!--" into tLA
   put "-->" into tRA
   put offsets(tLA,pString) into tLefts
   put offsets(tRA,pString) into tRights
   --set the backGroundColor of char 1 to -1 of fld id pIDNum  of cd 1 of stack "STEP Transcription Module" to empty
   if tLefts is not empty and tLefts <> 0 then
      repeat with z = 1 to (the number of items of tLefts)
         set the textColor of char (item z of tLefts)+pX-1 to (item z of tRights)+2+pX-1 of fld id pIDNum  of cd 1 of stack "STEP Transcription Module" to "black"
         set the backGroundColor of char (item z of tLefts)+pX-1 to (item z of tRights)+2+pX-1 of fld id pIDNum  of cd 1 of stack "STEP Transcription Module" to "#FEC0A3"
      end repeat
   end if
end colorizeInHouseMessages2

on colorAllParagraphMarkers pFldID
   lock screen
   local tText,tList1,tList2,tList3,tColor
   put fld id pFldID of cd 1 into tText
   put the cGeneralColor of cd 1 of stack "STEP Transcription Module" into tColor
   put offsets("<p>",tText) into tList1
   put offsets("<p ",tText) into tList2
   put offsets("</p>",tText) into tList3
   if tList1 <> 0 then
      repeat for each item tP in tList1
         set the textColor of char tP to tP+2 of fld id 1004  of cd 1 of stack "STEP Transcription Module" to tColor
      end repeat
   end if
   if tList2 <> 0 then
      repeat for each item tP in tList2
         set the textColor of char tP to tP+1 of fld id 1004  of cd 1 of stack "STEP Transcription Module" to tColor
      end repeat
   end if
   if tList3 <> 0 then
      repeat for each item tP in tList3
         set the textColor of char tP to tP+3 of fld id 1004  of cd 1 of stack "STEP Transcription Module" to tColor
      end repeat
   end if
end colorAllParagraphMarkers

function getTagColor pTag,@pTagColorSet
   local ots
   put lineOffsets(pTag&comma,pTagColorSet) into ots
   if ots = 0 then return the cGeneralColor of cd 1 of stack "STEP Transcription Module"
   repeat for each item tTagLine in ots
      if line tTagLine of pTagColorSet begins with pTag&comma then 
         return item 2 to -1 of line tTagLine of pTagColorSet
      else next repeat
   end repeat
   return the cGeneralColor of cd 1 of stack "STEP Transcription Module"
end getTagColor

on uncolorBGLines
   lock screen
   local tFldIDs
   put "1017,1064,1109,1171,1049,1067,1112,1174" into tFldIDs
   repeat for each item tID in tFldIDs
      set the backgroundcolor of line 1 to -1 of fld id tID of cd 1 of stack "STEP Transcription Module" to empty
   end repeat
end uncolorBGLines

on colorBGLine pLineNum,pFldID
   lock screen
   local tFldIDs,tChN
   uncolorBGLines
   put "1017,1064,1049,1067" into tFldIDs
   repeat for each item tID in tFldIDs
      set the backgroundcolor of line pLineNum of fld id tID of cd 1 of stack "STEP Transcription Module" to "#A7B4EB"
      if tID <> pFldID then set the vScroll of fld id tID of cd 1 of stack "STEP Transcription Module" to 0
      select before line pLineNum of fld id tID of cd 1 of stack "STEP Transcription Module"
      if tID <> pFldID then 
         get the vscroll of fld id tID of cd 1 of stack "STEP Transcription Module"
         if pLineNum > 7 then set the vscroll of fld id tID of cd 1 of stack "STEP Transcription Module" to (it+120) else set the vscroll of fld id tID of cd 1 of stack "STEP Transcription Module" to it
      end if
   end repeat
   put "1109,1171,1112,1174" into tFldIDs
   repeat for each item tID in tFldIDs
      set the backgroundcolor of line pLineNum+1 of fld id tID of cd 1 to "#A7B4EB"
      if tID <> pFldID then set the vScroll of fld id tID of cd 1 of stack "STEP Transcription Module" to 0
      select before line pLineNum+1 of fld id tID of cd 1 of stack "STEP Transcription Module"
      if tID <> pFldID then 
         get the vscroll of fld id tID of cd 1 of stack "STEP Transcription Module"
         set the vscroll of fld id tID of cd 1 of stack "STEP Transcription Module" to (it+120)
         if pLineNum+1 > 3 then set the vscroll of fld id tID of cd 1 of stack "STEP Transcription Module" to (it+120) else set the vscroll of fld id tID of cd 1 of stack "STEP Transcription Module" to it
      end if
   end repeat
end colorBGLine

## Handlers to find strings within texts

on findInText tSelText
   local tFoundLines,tFoundPlaces,tText,tLineList,stof,tIDNum
   if the selectedText is not empty then put the selectedText into tSelText
   put the ID of fld (segment -1 of the selectedChunk) of cd 1 into tIDNum
   if tSelText is empty then
      ask "Type the string or tag to be retrieved in the text." as sheet
      if it is empty or the result is "cancel" then exit findInText
      put it into tSelText
   end if
   put singlequoteur(tSelText) into tSelText
   put doublequoteur(tSelText) into tSelText
   lock screen
   set the cursor to watch
   put empty into tFoundLines
   put empty into tFoundPlaces
   put fld id tIDNum of cd 1 of stack "STEP Transcription Module" into tText
   put fullFind(tText,tSelText,false,true,false,,) into tLineList
   repeat for each line tLine in tLineList
      get item 1 of tLine
      put crAndAfterDeleter(char it-30 to it+40 of tText) into stof
      put stof && "..." into line (the number of lines of tFoundLines)+1 of tFoundLines
      put tIDNum&","&it into line (the number of lines of tFoundPlaces)+1 of tFoundPlaces
   end repeat
   if tFoundLines = "" then
      answer "Search failed because “"&tSelText&"” could not be found." as sheet
      exit findInText
   end if
   set the tStringFound of stack "Found Strings" to tSelText
   set the cContent of stack "Found Strings" to "Found Strings"
   replace "<" with "&lt;" in tFoundLines
   replace ">" with "&gt;" in tFoundLines
   replace "<" with "&lt;" in tSelText
   replace ">" with "&gt;" in tSelText
   replace tSelText with "<b>"&tSelText&"</b>" in tFoundLines
   replace cr with "</p>"&cr&"<p>" in tFoundLines
   put "<p>" before tFoundLines
   delete line -1 of tFoundLines
   if char -1 of tFoundLines is not ">" then put "</p>" after tFoundLines
   if line -1 of tFoundLines is "<p></p>" then delete line -1 of tFoundLines
   set the foundStrings of stack "Found Strings" to tFoundLines
   set the foundLocations of stack "Found Strings" to tFoundPlaces
   set the HTMLText of fld id 1005 of cd 1 of stack "Found Strings" to tFoundLines
   palette stack "Found Strings"
end findInText

on findFromDialog tSelText
   local tFoundLines,tFoundPlaces,tListPlaces,ut,tText,tLineList,stof,tIDNum,tExactly,tAll,tMatchCase,tWhatToFind
   if the selectedText is not empty then put the selectedText into tSelText
   put singlequoteur(tSelText) into tSelText
   put doublequoteur(tSelText) into tSelText
   set the TextToFind of stack "Find" to tSelText
   modal stack "Find"
   get the dialogData
   if it is "Cancel" or line 1 of it is empty then exit to top
   put line 1 of it into tWhatToFind
   if line 2 of it is "Whole" then put true into tExactly else put false into tExactly
   if line 3 of it is "All" then put true into tAll else put false into tAll
   if line 4 of it is "true" then put true into tmatchCase else put false into tMatchCase
   put empty into tListPlaces
   put empty into tFoundLines
   put empty into tFoundPlaces
   repeat for each item tItem in line 5 of it
      put fld id tItem of cd 1 of stack "STEP Transcription Module" into tText
      put fullFind(tText,tWhatToFind,tExactly,tAll,tMatchCase,,) into line (the number of lines of tListPlaces)+1 of tListPlaces
      repeat for each line tLine in tListPlaces
         put item 1 of tLine into ut
         put crAndAfterDeleter(char ut-30 to ut+40 of tText) into stof
         put stof && "..." & cr after tFoundLines
         put tItem &","& ut & cr after tFoundPlaces
      end repeat
      put empty into tListPlaces
   end repeat
   if tFoundLines = "" then
      answer "Search failed because “"&tWhatToFind&"” could not be found." as sheet
      exit findFromDialog
   end if
   set the tStringFound of stack "Found Strings" to tWhatToFind
   set the cContent of stack "Found Strings" to "Found Strings"
   replace "<" with "&lt;" in tFoundLines
   replace ">" with "&gt;" in tFoundLines
   replace "<" with "&lt;" in tWhatToFind
   replace ">" with "&gt;" in tWhatToFind
   replace tWhatToFind with "<b>"&tWhatToFind&"</b>" in tFoundLines
   replace cr with "</p>"&cr&"<p>" in tFoundLines
   delete line -1 of tFoundLines
   put "<p>" before tFoundLines
   if char -1 of tFoundLines is not ">" then put "</p>" after tFoundLines
   if line -1 of tFoundLines is "<p></p>" then delete line -1 of tFoundLines
   set the foundStrings of stack "Found Strings" to tFoundLines
   set the foundLocations of stack "Found Strings" to tFoundPlaces
   set the HTMLText of fld id 1005 of cd 1 of stack "Found Strings" to tFoundLines
   palette stack "Found Strings"
end findFromDialog

function crAndAfterDeleter stiff
   local tCRlocation
   get offset(space,stiff)
   if it < 31 then delete char 1 to it of stiff
   put offsets(cr,stiff) into tCRlocation
   if tCRlocation is 0 or tCRlocation is empty then return stiff
   repeat with x = the number of items of tCRlocation down to 1
      if item x of tCRlocation > (30-it) then put empty into char (item x of tCRlocation) to -1 of stiff
      else if item x of tCRlocation < (31-it) then 
         put empty into char 1 to (item x of tCRlocation) of stiff
         exit repeat
      end if
   end repeat
   return stiff
end crAndAfterDeleter

## Tag tip handling

on floating @pAttr--behaves like a tooltip
   lock screen
   set the height of fld "Floater" of cd 1 to 19
   if pAttr is not empty then 
      if pAttr is not the text of fld "Floater" of cd 1 then
         set the vis of fld "Floater" of cd 1 to false
         put lineBreaker(pAttr) into fld "Floater" of cd 1
         set the height of fld "Floater" of cd 1 to the formattedHeight of fld "Floater" of cd 1
         set the textAlign of fld "Floater" to "left"
         set the topLeft of  fld "Floater" of cd 1 to ((item 1 of the mouseLoc)+16,(item 2 of the mouseLoc))
         set the vis of fld "Floater" of cd 1 to true
      else
         set the topLeft of  fld "Floater" of cd 1 to ((item 1 of the mouseLoc)+16,(item 2 of the mouseLoc))
      end if
   else
      set the vis of fld "Floater" of cd 1 to false
   end if
end floating

function lineBreaker pText
   local tW,tM,tRealWidth,tText2,tText3,tTempMeasure
   put 270 into tW
   set the width of fld "Floater" of cd 1 to tW
   put the margins of fld "Floater" into tM
   set the dontWrap of fld "Floater" to false
   put pText into fld "Floater" of cd 1
   put pText into tText2
   repeat until tText2 is empty
      repeat with i = the number of segments of (tText2) down to 1
         put measureText(segment 1 to i of fld "Floater" of cd 1,fld "Floater" of cd 1) into tTempMeasure
         if tTempMeasure > (tW-(tM*2)) then next repeat
         else
            put segment 1 to i of tText2 & cr after tText3
            delete segment 1 to i of tText2
            put tText2 into fld "Floater" of cd 1
            exit repeat
         end if
      end repeat
   end repeat
   filter tText3 without empty
   return tText3
end lineBreaker

#####################
#####################

## Script of button ID 1008 of CARD 1 of STACK STEP Transcription Module

on mouseEnter 
   if the cTagTip of this stack is "off" then exit mouseEnter
   get the label of me
   if it is empty then pass mouseEnter
   else if it is "insert/add" then get "add"
   else if it contains "subst" and not(it contains "join") then get "subst"
   else if it contains "mod" then get "mod"
   else if it contains "deleted" then get "del"
   else if it contains "highlighted" then get "hi"
   else if it contains "alternation" then get "alt"
   else if it contains "retraced" then get "retrace"
   get getElementTEIExplanation(it)
   floating it
end mouseEnter

on mouseLeave
   set the vis of fld "Floater" of cd 1 to false
end mouseLeave

on floating @pAttr--behaves like a tooltip
   lock screen
   set the height of fld "Floater" of cd 1 to 19
   if pAttr is not empty then 
      if pAttr is not the text of fld "Floater" of cd 1 then
         set the vis of fld "Floater" of cd 1 to false
         put lineBreaker(pAttr) into fld "Floater" of cd 1
         set the height of fld "Floater" of cd 1 to the formattedHeight of fld "Floater" of cd 1
         set the textAlign of fld "Floater" to "left"
         set the topRight of fld "Floater" of cd 1 to (the left of fld id 1010 of cd 1,(the top of fld id 1010 of cd 1)-50)
         set the vis of fld "Floater" of cd 1 to true
      else
         set the topRight of fld "Floater" of cd 1 to (the left of fld id 1010 of cd 1,(the top of fld id 1010 of cd 1)-50)
      end if
   else
      set the vis of fld "Floater" of cd 1 to false
   end if
end floating

on float pmsg--behaves like a tooltip
   local pExpanded
   --put desabbreviateSomeTags(pmsg) into pExpanded
   put pmsg into pExpanded
   if pExpanded is not empty then 
      if pExpanded is not in fld "Floater" of cd 1 then set the vis of fld "Floater" of cd 1 to false
      put pExpanded into fld "Floater" of cd 1
      set the height of fld "Floater" of cd 1 to (the formattedHeight of fld "Floater" of cd 1)/*-6*/
      set the dontWrap of fld "Floater" to true
      set the textAlign of fld "Floater" to "center"
      set the width of fld "Floater" of cd 1 to (the formattedWidth of fld "Floater" of cd 1)-4
      set the right of  fld "Floater" of cd 1 to (the left of btn id 1008 of cd 1)-6
      set the top of  fld "Floater" of cd 1 to the top of btn id 1008 of cd 1
      --set the top of  fld "Floater" of cd 1 to the top of graphic id 1052 of cd 1
      set the vis of fld "Floater" of cd 1 to true
   else
      set the vis of fld "Floater" of cd 1 to false
   end if
end float

on menuPick pItemName
   set the label of btn id 1034 to empty
   set the label of btn id 1038 to empty
   if not(pItemName begins with "deleted addition") then set the label of me to pItemName else set the label of me to "del add"
   if length(the label of me) > 14 then set the textSize of me to 10 else set the textSize of me to 12
   put empty into btn id 1060
   put empty into btn id 1061
   switch recognizeTag(pItemName)
      case "subst"
      case "subst/del/add"
      case "substituted"
      case "substitution"
      case "mod/del/add"
         put assembleTagGroup(recognizeTag(pItemName),1) into fld id 1010 of cd 1
         break
      case "addSpan"
      case "delSpan"
      case "damageSpan"
         put assembleTagGroup(pItemName) into fld id 1010 of cd 1
         exit menuPick
         break
      case "substJoin"
         put "<substJoin target="&quote&quote&"/>" into fld id 1010 of cd 1
         break
      case "alternation/alt"
      case "alt"
      case "alternation"
         get recognizeTag("alt")
         put "<alt target="&quote&quote&" mode="&quote&quote&" weights="&quote&quote&"/>" into fld id 1010 of cd 1
         break
      default
         put angleTag(recognizeTag(pItemName)) into fld id 1010 of cd 1
   end switch
   send "menuPick"&&(line 1 of btn id 1060 of cd 1)&",true" to btn id 1060 of cd 1
end menuPick

function angleTag tTag
   if tTag is "<gap/>" then return "<gap quantity="&quote&quote&" unit="&quote&quote&" reason="&quote&quote&"/>"
   if tTag is "<handshift/>" then return "<handshift new="&quote&quote&" medium="&quote&quote&"/>"
   if tTag is "<anchor/>" then return "<anchor xml:id="&quote&quote&"/>"
   if tTag is "deladd" then return "<del><add></add></del>"
   if tTag is "mod" then return "<mod type="&quote&"subst"&quote&"></mod>"
   if tTag is among the items of "<lb/>,<pb/>,<gb/>,<cb/>" then return "<"&tTag&">"
   return "<"&tTag&"></"&tTag&">"
end angleTag

function recognizeTag tTag
   switch tTag
      case "abbr"
         populateAttributes "abbr","type"
         return "abbr"
         break
      case "add"
      case "insert/add"
      case "added"
      case "addition"
      case "ins"
      case "inserted"
      case "insertion"
         populateAttributes "add","place,rend,resp,type"
         return "add"
         break
      case "hi"
      case "highlighted"
      case "highlighted/hi"
         populateAttributes "hi","change,rend,style"
         return "hi"
         break
      case "deletion"
      case "deleted"
      case "deleted/del"
      case "del"
         populateAttributes "del","place,rend,resp,type"
         return "del"
         break
      case "deleted addition"
      case "del add"
      case "deleted addition/del add"
         populateAttributes "del"
         return "deladd"
         break
      case "subst"
      case "subst/del/add"
      case "substituted"
      case "substitution"
         populateAttributes "subst"
         return "subst"
         break
      case "mod"
         populateAttributes "mod"
         return "mod"
         break
      case "mod/del/add"
         populateAttributes "mod"
         return "mod/del/add"
         break
      case "p"
      case "paragraph"
      case "paragraph/p"
         populateAttributes "p"
         return "p"
         break
      case "line/l"
      case "line"
      case "l"
         populateAttributes "l"
         return "l"
         break
      case "emphasis"
      case "emph"
         populateAttributes "emph","change,rend,rendition,style"
         return "emph"
         break
      case "retraced/rtr"
      case "retraced"
      case "retrace"
      case "rtr"
         populateAttributes "retrace"
         return "retrace"
         break
      case "q"
      case "quoted"
      case "quoted/q"
         populateAttributes "q","type"
         return "q"
         break
      case "quotation"
      case "quotation/quote"
         populateAttributes "quote","type"
         return "quote"
         break
      case "cited quotation"
      case "citation/cit"
      case "cit"
         populateAttributes "cit","type,xml:lang"
         return "cit"
         break
      case "damage"
         populateAttributes "damage","agent,degree,hand,type"
         return "damage"
         break
      case "surplus"
         populateAttributes "surplus","reason"
         return "surplus"
         break
      case "unclear"
         populateAttributes "unclear","agent,hand,reason"
         return "unclear"
         break
      case "lineGroup/lg"
      case "lineGroup"
      case "lg"
         populateAttributes "lg"
         return "lg"
         break
      case "linebreak/lb"
      case "line beginning/lb"
      case "line beginning"
      case "linebreak"
      case "lb/"
         populateAttributes "lb"
         return "<lb/>"
         break
      case "page beginning/pb"
      case "page beginning"
      case "pagebreak/pb"
      case "pagebreak"
      case "pb/"
         populateAttributes "pb"
         return "<pb/>"
         break
      case "anchor"
         populateAttributes "anchor"
         return "<anchor/>"
         break
      case "handshift"
         populateAttributes "handshift"
         return "<handshift/>"
         break
      case "gap"
         populateAttributes "gap"
         return "<gap/>"
         break
      case "alt"
         populateAttributes "alt"
         break
      default
         populateAttributes tTag
         return tTag
         break
   end switch
end recognizeTag

function assembleTagGroup tTag,pMod
   local tT1,tAnch,tPlace
   switch tTag
      case "subst"
         put angleTag(tTag) into tT1
         put angleTag("del")&angleTag("add") after char offset(">",tT1) of tT1
         return tT1
         break
      --case "mod"
      case "mod/del/add"
         if tTag is "mod" and (pMod is empty or pMod is "pMod") then return tTag
         put angleTag("mod") into tT1
         put angleTag("del")&angleTag("add") after char offset(">",tT1) of tT1
         return tT1
         break
      case "delSpan"
      case "addSpan"
         put (char 1 to 3 of tTag)&"end"&(fld id 1210 of cd 1)&(fld id 1240 of cd 1)&"-"&pageAltEndCount((char 1 to 3 of tTag),(fld id 1210 of cd 1)&(fld id 1240 of cd 1)) into tAnch
         put fld id 1208&deleteZero(fld id 1210 of cd 1)&(fld id 1240 of cd 1) into tPlace
         return "<"&tTag&" spanTo="&quote&"#"&tAnch&quote&" place="&quote&tPlace&quote&"/><anchor xml:id="&quote&tAnch&quote&"/>"
         break
      case "damageSpan"
         put (fld id 1210 of cd 1)&(fld id 1240 of cd 1)&"-"&pageAltEndCount(("damage"),(fld id 1210 of cd 1)&(fld id 1240 of cd 1)) into tAnch
         return "<"&tTag&" spanTo="&quote&"#"&tAnch&quote&"/><anchor xml:id="&quote&tAnch&quote&"/>"
         break
      default
         return tTag
         break
   end switch
end assembleTagGroup

function pageAltEndCount tTagBeg,pPageN
   local pCharNum,pText,ots,tPBs,tStaPB,tStoPB,tCount
   put word 2 of the cSelectedChunk of fld id 1004 of cd 1 into pCharNum
   if pCharNum is empty then return empty
   compilePageBreaks 1004
   put fld id 1004 of cd 1 into pText
   put offsets("<"&tTagBeg&"Span ",pText) into ots
   if ots = 0 then return "01"
   put the cPBValues of fld id 1004 of cd 1 into tPBs
   put length(fld id 1004 of cd 1)+1 into line (the number of lines of tPBs)+1 of tPBs
   repeat with b = 1 to (the number of lines of tPBs)-1
      put item 1 of line b of tPBs into tStaPB
      put (item 1 of line b+1 of tPBs)-1 into tStoPB
      if pCharNum >= tStaPB and pCharNum <= tStoPB then
         exit repeat
      end if
   end repeat
   put 0 into tCount
   repeat with x = 1 to the number of items of ots
      if item x of ots >= tStaPB and item x of ots <= tStoPB then add 1 to tCount
   end repeat
   put tCount+1 into tCount
   if length(tCount) = 1 then put "0" before tCount
   return tCount
end pageAltEndCount

on populateAttributes pTag,pAttribs
   put getAttributes(pTag,pAttribs) into btn id 1060 of cd 1
   set the label of btn id 1060 of cd 1 to line 1 of btn id 1060 of cd 1
end populateAttributes

function getAttributes pTag,pAtt
   local tCustomProp,tAttributes,tTempAtt,ot
   put pTag&"TEI" into tCustomProp
   if tCustomProp is among the lines of the customKeys of this stack then
      do "put the "&tCustomProp&" of this stack into tAttributes"
      if tAttributes is not empty then
         if "|" is not in tAttributes and the number of items of tAttributes > 0 then
            replace comma with cr in tAttributes
            if char -1 of tAttributes = cr then delete char -1 of tAttributes
            return tAttributes
         else if "|" is in tAttributes then
            put empty into tTempAtt
            repeat with x = 1 to the number of lines of tAttributes
               put offset("|",line x of tAttributes) into ot
               put char 1 to ot-1 of line x of tAttributes & cr after tTempAtt
            end repeat
            delete char -1 of tTempAtt
            return tTempAtt
         end if
      else
         if pAtt is not empty and pAtt is not "pAtt" then
            replace comma with cr in pAtt
            if char -1 of pAtt = cr then delete char -1 of pAtt
            return pAtt
         end if
      end if
   end if
   return empty
end getAttributes

##TOOLTIP:
##Tags in this pull-down menu are intended only to
##describe authorial alterations in transcriptive encoding.

#####################
#####################

## Script of button ID 1012 of CARD 1 of STACK STEP Transcription Module

on mouseEnter
   if the cSelectionLocation of me <> empty then select char (segment 2 of the cSelectionLocation of me) to (segment 4 of the cSelectionLocation of me) of fld (segment -1 of the cSelectionLocation of me) of cd 1
end mouseEnter
   
on mouseUp pIDFld,pGatans
   local tIDNum,tScroll,tTagans,tSel,tSel2,tSelLoc,tChunk,tChunk2,tSta,tSto,tOffs,tFldContent,tFirstTag,tSecondTag,tFullTag,tStu,tEnclosure,tEncLength,t1,t2,tMode,tWeights,tTagEnd,tB
   lock screen
   if fld id 1010 of cd 1 of stack "STEP Transcription Module" is empty then 
      answer "Select a tag in the pull-down menu above first."
      exit mouseUp
   end if
   put the cSelectionLocation of btn id 1012 of cd 1 of stack "STEP Transcription Module" into tSelLoc
   if tSelLoc is empty then exit mouseUp
   if pIDFld > 1000 then put pIDFld into tIDNum
   else put the ID of fld (segment -1 of tSelLoc) into tIDNum
   put word 2 of tSelLoc into tSta
   if word 4 of tSelLoc is an integer then put word 4 of tSelLoc into tSto else put tSta into tSto
   put char tSta to tSto of fld id tIDNum of cd 1 of stack "STEP Transcription Module" into tSel
   saveForUndoRedo tIDNum
   put the scroll of fld id tIDNum of cd 1 of stack "STEP Transcription Module" into tScroll
   put fld id tIDNum of cd 1 of stack "STEP Transcription Module" into tFldContent
   if pGatans is empty or pGatans is "pGatans" then put fld id 1010 of cd 1 of stack "STEP Transcription Module" into tTagans else put pGatans into tTagans
   replace " >" with ">" in tTagans
   replace "  " with " " in tTagans
   if tSta < tSto then
      if char tSta of tFldContent is space then 
         add 1 to tSta
         delete char 1 of tSel
      end if
      if char tSto of tFldContent is space then
         subtract 1 from tSto
         delete char -1 of tSel
      end if
   end if
   if "substJoin" is in tTagans then
      get substJoinAlts(tSel,tIDNum,tSta)
      if it is false then exit mouseUp
      put it into char tSta to tSto of fld id tIDNum of cd 1 of stack "STEP Transcription Module"
      describeAlts --send "mouseUp" to btn "Describe alterations" of cd 1 of stack "STEP Transcription Module"
      colorizeJustEnteredTag tTagans,tSta,tSto,tIDNum
      exit mouseUp
   end if
   if "alt" is in tTagans then
      if trueword 3 of tTagans is "mode" then
         put trueword 4 of tTagans into tMode
         if tMode is "weights" then put empty into tMode
         if trueword 4 of tTagans is "weights" then put trueword 5 to -1 of tTagans into tWeights
         else if trueword 5 of tTagans is "weights" then 
            put trueword 6 to -1 of tTagans into tWeights
         end if
      else
         put trueword 5 of tTagans into tMode
         if tMode is "weights" then put empty into tMode
         if trueword 5 of tTagans is "weights" then put trueword 6 to -1 of tTagans into tWeights
         else if trueword 6 of tTagans is "weights" then put trueword 7 to -1 of tTagans into tWeights
      end if
      get alternationSpans(tSel,tIDNum,tSta,tMode,tWeights)
      if it is false then exit mouseUp
      put it into char tSta to tSto of fld id tIDNum of cd 1 of stack "STEP Transcription Module"
      describeAlts --send "mouseUp" to btn "Describe alterations" of cd 1 of stack "STEP Transcription Module"
      colorizeJustEnteredTag it,tSta,tSto,tIDNum
      exit mouseUp
   end if
   put offsets(">",tTagans) into tOffs
   if tOffs is empty or tOffs is 0 then exit mouseUp
   if the number of items of tOffs < 3 then 
      put char 1 to (item 1 of tOffs) of tTagans into tFirstTag
      put char (item 1 of tOffs)+1 to -1 of tTagans into tSecondTag
   else 
      put char 1 to (item 2 of tOffs) of tTagans into tFirstTag
      put char (item 2 of tOffs)+1 to -1 of tTagans into tSecondTag
   end if
   if char tSta to tSta+2 of tFldContent is "<p>" then put tSta+3 into tSta
   else if char tSta to tSta+2 of tFldContent is "<p " then 
      put offset(">",char tSta to tSto of tFldContent) into tStu
      put tSta+tStu into tSta
   end if
   if char tSto-3 to tSto of tFldContent is "</p>" then put tSto-4 into tSto
   put char tSta to tSto of tFldContent into tEnclosure
   replace "<p>" with tSecondTag&"<p>"&tFirstTag in tEnclosure
   replace "</p>" with tSecondTag&"</p>" in tEnclosure
   put length (tEnclosure) into tEncLength
   if fld id 1010 of cd 1 of stack "STEP Transcription Module" is "<p></p>" then 
      put "<p>"&tEnclosure&"</p>" into tEnclosure
      if "p>" is in char 3 to tSta-1 of tFldContent then
         repeat with i = tSta-1 down to 3
            if char i-3 to i of tFldContent is "</p>" then 
               if char tSta-1 of tFldContent is not cr then put cr&tEnclosure into char tSta to tSto of tFldContent else  put tEnclosure into char tSta to tSto of tFldContent
               exit repeat
            else  if char i-2 to i of tFldContent is "<p>" or char i-2 to i of tFldContent is "<p " then 
               put "</p>"&cr&tEnclosure&cr&"<p>" into char tSta to tSto of tFldContent
               exit repeat
            end if
         end repeat
      else
         put tEnclosure into char tSta to tSto of tFldContent
      end if
      replace "<p>"&space with "<p>" in tFldContent
      replace "</p>"&space with "</p>" in tFldContent
      replace space&"</" with "</" in tFldContent
      replace space&space with space in tFldContent
      put tFldContent into fld id tIDNum of cd 1 of stack "STEP Transcription Module"
      send "mouseUp 1004" to btn "Color all tags" of cd 1 of stack "STEP Transcription Module"
   else
      put tEnclosure into char tSta to tSto of fld id tIDNum of cd 1 of stack "STEP Transcription Module"
      put tSta+tEncLength-1 into tSto
      put tSecondTag after char tSto of fld id tIDNum of cd 1 of stack "STEP Transcription Module"
      set the textStyle of char tSto+1 to (tSto+length(tSecondTag)) of fld id tIDNum  of cd 1 of stack "STEP Transcription Module" to "plain"
      put tFirstTag before char tSta of fld id tIDNum of cd 1 of stack "STEP Transcription Module"
      set the textStyle of char tSta to (tSta+length(tFirstTag)-1) of fld id tIDNum  of cd 1 of stack "STEP Transcription Module" to "plain"
      put tSto+length(tSecondTag)+length(tFirstTag) into tTagEnd
      put tFirstTag&tEnclosure&tSecondTag into tFullTag
      set the textColor of char tSta to (tSta+length(tFullTag)-1) of fld id tIDNum  of cd 1 of stack "STEP Transcription Module" to "black"
      colorizeJustEnteredTag tFullTag,tSta,tTagEnd,tIDNum
      if "<lb/>" is in tFullTag then 
         replace "<lb/>" with tSecondTag&"<lb/>"&tFirstTag in tFullTag
         replace "<lb/>" with tSecondTag&"<lb/>"&tFirstTag in char tSta to tTagEnd of fld id tIDNum of cd 1 of stack "STEP Transcription Module"
         colorizeJustEnteredTag tFullTag,tSta,tSta+length(tFullTag)-1,tIDNum
      end if
      if "<cb/>" is in tFullTag then 
         replace "<cb/>" with tSecondTag&"<cb/>"&tFirstTag in tFullTag
         replace "<cb/>" with tSecondTag&"<cb/>"&tFirstTag in char tSta to tTagEnd of fld id tIDNum of cd 1 of stack "STEP Transcription Module"
         colorizeJustEnteredTag tFullTag,tSta,tSta+length(tFullTag)-1,tIDNum
      end if
      if "<pb/>" is in tFullTag then 
         replace "<pb/>" with tSecondTag&"<pb/>"&tFirstTag in tFullTag
         replace "<pb/>" with tSecondTag&"<pb/>"&tFirstTag in char tSta to tTagEnd of fld id tIDNum of cd 1 of stack "STEP Transcription Module"
         colorizeJustEnteredTag tFullTag,tSta,tSta+length(tFullTag)-1,tIDNum
      end if
      if "<gb/>" is in tFullTag then 
         replace "<gb/>" with tSecondTag&"<gb/>"&tFirstTag in tFullTag
         replace "<gb/>" with tSecondTag&"<gb/>"&tFirstTag in char tSta to tTagEnd of fld id tIDNum of cd 1 of stack "STEP Transcription Module"
         colorizeJustEnteredTag tFullTag,tSta,tSta+length(tFullTag)-1,tIDNum
      end if
      if "<pb " is in tFullTag or "<lb " is in tFullTag or "<gb " is in tFullTag or "<cb " is in tFullTag  then 
         if "<pb " is in tFullTag then put  "<pb " into tB
         else if "<lb " is in tFullTag then put  "<lb " into tB
         else if "<gb " is in tFullTag then put  "<gb " into tB
         else if "<cb " is in tFullTag then put  "<cb " into tB
         put offset("<"&tB&space,tFullTag) into t1
         put offset("/>",tFullTag,t1) into t2
         if t2 <> 0 then 
            put tSecondTag & (char t1 to t1+t2+1 of tFullTag) & tFirstTag into char t1 to t1+t2+1 of tFullTag
            put tSecondTag & (char tSta+t1-1 to tSta+t1+t2 of fld id tIDNum of cd 1 of stack "STEP Transcription Module") & tFirstTag into char tSta+t1-1 to tSta+t1+t2 of fld id tIDNum of cd 1 of stack "STEP Transcription Module"
            colorizeJustEnteredTag tFullTag,tSta,tSta+length(tFullTag)-1,tIDNum
         end if
      end if
      if tFirstTag&tSecondTag is in fld id tIDNum of cd 1 of stack "STEP Transcription Module" then replace tFirstTag&tSecondTag with empty in fld id tIDNum of cd 1 of stack "STEP Transcription Module"
      if tSecondTag&"<p" is in fld id tIDNum of cd 1 of stack "STEP Transcription Module" then replace tSecondTag&"<p" with "<p" in fld id tIDNum of cd 1 of stack "STEP Transcription Module"
      if tFirstTag&cr is in fld id tIDNum of cd 1 of stack "STEP Transcription Module" then replace tFirstTag&cr with cr in fld id tIDNum of cd 1 of stack "STEP Transcription Module"
   end if
   if tIDNum is "1004" then describeAlts --send "mouseUp" to btn "Describe alterations" of cd 1 of stack "STEP Transcription Module"
   set the cSelectedText of fld id tIDNum  of cd 1 of stack "STEP Transcription Module" to empty
   set the cSelectedChunk of fld id tIDNum  of cd 1 of stack "STEP Transcription Module" to empty
   set the cSelectionLocation of btn id 1012 of cd 1 of stack "STEP Transcription Module" to empty
   set the backgroundColor of me to empty
   set the scroll of fld id tIDNum  of cd 1 of stack "STEP Transcription Module" to tScroll
   compilePageBreaks 1004
   saveForUndoRedo tIDNum
   unlock screen
end mouseUp

function substJoinAlts pSelection,pIDNum,pSta
   local pLeftAngles,pRightAngles,pXmls,tPrefix,tTargs
   put offsets("</",pSelection) into pLeftAngles
   if the number of items of pLeftAngles < 2 then return false
   put offsets(">",pSelection) into pRightAngles
   if (the number of items of pRightAngles < 4) or (the number of items of pRightAngles <> (the number of items of pLeftAngles)*2) then return false
   put offsets("xml:id",pSelection) into pXmls
   put empty into tTargs
   put fld id 1206 of cd 1 of stack "STEP Transcription Module" &"-" into tPrefix
   if pXmls = 0 then
      repeat with i = (the number of items of pleftAngles) down to 1
         put space & "xml:id="&quote&tPrefix&(pSta+item i of pLeftAngles)&quote before char (item (i+(i-1)) of pRightAngles) of pSelection
         put space&quote&"#"&tPrefix&(pSta+item i of pLeftAngles)&quote before tTargs
      end repeat
      put "<substJoin target="& removeQuoteSpaceQuote(char 2 to -1 of tTargs)&"/>" after pSelection
      return pSelection
   end if
end substJoinAlts

function alternationSpans pSelection,pIDNum,pSta,pMode,pWeights
   local pLeftAngles,pRightAngles,pXmls,tPrefix,tTargs
   put offsets("</",pSelection) into pLeftAngles
   if the number of items of pLeftAngles < 2 then return false
   put offsets(">",pSelection) into pRightAngles
   if (the number of items of pRightAngles < 4) or (the number of items of pRightAngles <> (the number of items of pLeftAngles)*2) then return false
   put offsets("xml:id",pSelection) into pXmls
   put empty into tTargs
   put fld id 1206 of cd 1 of stack "STEP Transcription Module" &"-" into tPrefix
   if pXmls = 0 then
      repeat with i = (the number of items of pleftAngles) down to 1
         put space & "xml:id="&quote&tPrefix&(pSta+item i of pLeftAngles)&quote before char (item (i+(i-1)) of pRightAngles) of pSelection
         put space&quote&"#"&tPrefix&(pSta+item i of pLeftAngles)&quote before tTargs
      end repeat
      put offsets("</",pSelection) into pLeftAngles
      repeat with j = the number of items of pLeftAngles down to 2
         put "</sup>" before char (item j of pLeftAngles) of pSelection
      end repeat
      put offsets(quote&">",pSelection) into pRightAngles
      repeat with j = the number of items of pRightAngles down to 2
         put "<sup>" after char (item j of pRightAngles)+1 of pSelection
      end repeat
      put "<alt target="& removeQuoteSpaceQuote(char 2 to -1 of tTargs)&" mode="&quote&pMode&quote&" weights="&quote&pWeights&quote&"/>" after pSelection
      return pSelection
   end if
end alternationSpans

function removeQuoteSpaceQuote pString
   replace quote&space&quote with space in pString
   return pString
end removeQuoteSpaceQuote

##TOOLTIP:
##Tag selection with form shown above.


#####################
#####################

## Script of button "Insert tag”, ID 1013 of CARD 1 of STACK STEP Transcription Module

on mouseEnter
   if the cSelectionLocation of me <> empty then select char (segment 2 of the cSelectionLocation of me) to (segment 4 of the cSelectionLocation of me) of fld (segment -1 of the cSelectionLocation of me) of cd 1
end mouseEnter
   
on mouseUp pIDFld,pGatans
   local tTagans,tIDNum,tSta,tTL,tLC,tLefts,tLastLeft,tRights,tValPlaces,t2q,tVP,tScroll,tChunk,tSelLoc,tSto,tSel,tX
   local tLX,tRowN1,tNumberOfRows,tColN1,tNumberOfCols,i,j,tFullTag,tLineNumber,tFullBetween,tOpeningTag,tLengthNewFullTag,tNewFullTag
   lock screen
   if fld id 1010 of cd 1 of stack "STEP Transcription Module" is empty then 
      answer "Select a tag in the pull-down menu above first."
      exit mouseUp
   end if
   put the cSelectionLocation of btn id 1013 of cd 1 of stack "STEP Transcription Module" into tSelLoc
   if tSelLoc is empty and (pIDFld < 1000 or pIDFld is empty) then exit mouseUp
   if pIDFld > 1000 then put pIDFld into tIDNum
   else if tIDnum is empty and tSelLoc <> empty then put the ID of fld (segment -1 of tSelLoc) into tIDNum
   if tIDNum is empty then exit mouseUp
   put the scroll of fld id tIDNum of cd 1 of stack "STEP Transcription Module" into tScroll
   if pGatans is empty or pGatans is "pGatans" then put fld id 1010 of cd 1 of stack "STEP Transcription Module" into tTagans else put pGatans into tTagans
   replace " >" with ">" in tTagans
   replace "  " with " " in tTagans
   if the number of items of offsets("</",tTagans) = 1 and the number of items of offsets(">",tTagans) = 2 and tTagans <> "<p></p>" and not(tTagans begins with "<p ") then
      put the cBetweenOpeningAndClosingTags of me into tFullBetween
      if tFullBetween <> empty then
         if trueword 1 of tTagans is item 7 of tFullBetween then
            saveForUndoRedo tIDNum
            put char 1 to offset(">",tTagans) of tTagans into tOpeningTag
            put length(tOpeningTag)+(item 6 of tFullBetween - item 3 of tFullBetween) into tLengthNewFullTag
            put tOpeningTag & (item 8 to -1 of tFullBetween) & (item 4 of tFullBetween) into tNewFullTag
            put tNewFullTag into char (item 2 of tFullBetween) to (item 6 of tFullBetween) of fld id tIDNum of cd 1
            colorizeJustEnteredTag tNewFullTag,item 2 of tFullBetween,,tIDNum
            select after char (item 2 of tFullBetween)+tLengthNewFullTag-1 of fld id tIDNum of cd 1 of stack "STEP Transcription Module"
            set the scroll of fld id tIDNum of cd 1 of stack "STEP Transcription Module" to tScroll
            saveForUndoRedo tIDNum
            exit mouseUp
         end if
      end if
   end if
   put word 2 of tSelLoc into tSta
   put the lineIndex of char tSta of fld id tIDNum of cd 1 of stack "STEP Transcription Module" into tLineNumber
   if word 4 of tSelLoc is an integer then put word 4 of tSelLoc into tSto else put tSta into tSto
   put char tSta to tSto of fld id tIDNum of cd 1 of stack "STEP Transcription Module" into tSel
   saveForUndoRedo tIDNum
   if tTagans is "<p></p>" then 
      send "returnInField" to fld id tIDNum of cd 1 of stack "STEP Transcription Module"
      exit mouseUp
   else if tTagans begins with "<p " and tTagans ends with "</p>"then
      get line tLineNumber of fld id tIDNum of cd 1 of stack "STEP Transcription Module"
      put length(line 1 to tLineNumber-1 of fld id tIDNum of cd 1 of stack "STEP Transcription Module")+1 into tLC
      if it is "<p></p>" or (it begins with "<p " and it ends with "></p>" and the number of items of (offsets("<",it)) = 2 and the number of items of (offsets(">",it)) = 2) then
         put tTagans into line tLineNumber of fld id tIDNum of cd 1 of stack "STEP Transcription Module"
         colorizeJustEnteredTag tTagans,tLC,tLC+(length(tTagans))-1,tIDNum
         select before char -4 of line tLineNumber of fld id tIDNum of cd 1 of stack "STEP Transcription Module"
      else if char 1 to 3 of line tLineNumber of fld id tIDNum of cd 1 of stack "STEP Transcription Module" is among the items of "<p>,<p " then
         if char tSta-1 of fld id tIDNum of cd 1 of stack "STEP Transcription Module" is cr then 
            put tTagans & cr before line tLineNumber of fld id tIDNum of cd 1 of stack "STEP Transcription Module"
            colorizeJustEnteredTag tTagans,tLC,tLC+(length(tTagans))-1,tIDNum
            select before char -4 of line tLineNumber of fld id tIDNum of cd 1 of stack "STEP Transcription Module"
         else
            put length(line 1 to tLineNumber of fld id tIDNum of cd 1 of stack "STEP Transcription Module")+1 into tLC
            put tTagans & cr before line tLineNumber+1 of fld id tIDNum of cd 1 of stack "STEP Transcription Module"
            colorizeJustEnteredTag tTagans,tLC,tLC+(length(tTagans))-1,tIDNum
            select before char -4 of line tLineNumber+1 of fld id tIDNum of cd 1 of stack "STEP Transcription Module"
         end if
         set the scroll of fld id tIDNum of cd 1 of stack "STEP Transcription Module" to tScroll
         saveForUndoRedo tIDNum
      end if
      exit mouseUp
   end if
   if "<table" is in tTagans and "</table>" is in fld id 1010 of cd 1 of stack "STEP Transcription Module" then 
      identifyTables tSta
      put fld id 1010 of cd 1 of stack "STEP Transcription Module" into tTagans
      put the lineIndex of char tSta of fld id tIDNum of cd 1 into tLX
      put empty into tNumberOfRows
      put empty into tNumberOfCols
      if "rows=" is in tTagans then
         put offset("rows=",tTagans)+6 into tRowN1
         if char tRowN1 of tTagans is quote then put empty into tNumberOfRows
         else
            repeat with j = tRowN1 to tRowN1+4
               if char j of tTagans is quote then
                  put char tRowN1 to j-1 of tTagans into tNumberOfRows
                  exit repeat
               end if
            end repeat
         end if
      end if
      if "cols=" is in tTagans then
         put offset("cols=",tTagans)+6 into tColN1
         if char tColN1 of tTagans is quote then put empty into tNumberOfCols
         else
            repeat with j = tColN1 to tColN1+4
               if char j of tTagans is quote then
                  put char tColN1 to j-1 of tTagans into tNumberOfCols
                  exit repeat
               end if
            end repeat
         end if
      end if
      if tNumberOfRows is empty or tNumberOfCols is empty then put tTagans & cr before line tLX of fld id tIDNum of cd 1 of stack "STEP Transcription Module"
      else
         put char 1 to offset(">",tTagans) of tTagans & cr into tFullTag
         repeat with i = 1 to tNumberOfRows
            put "    <row n="&quote&i&quote&" role="&quote&quote&">"& cr after tFullTag
            repeat with j = 1 to tNumberOfCols
               put "        <cell n="&quote&i&"."&j&quote&"></cell>"& cr after tFullTag
            end repeat
            put "    </row>"& cr after tFullTag
         end repeat
      end if
      put (the charIndex of char 1 of line tLX of fld id tIDNum of cd 1 of stack "STEP Transcription Module")-1 into tX
      put tFullTag &"</table>" & cr before line tLX of fld id tIDNum of cd 1 of stack "STEP Transcription Module"
      colorizeJustEnteredTag tFullTag &"</table>",tX-1,tX+(length(tFullTag &"</table>")),tIDNum
      set the scroll of fld id tIDNum of cd 1 of stack "STEP Transcription Module" to tScroll
      saveForUndoRedo tIDNum
      exit mouseUp
   end if
   put length(tTagans) into tTL
   put tTagans before char tSta of fld id tIDNum of cd 1 of stack "STEP Transcription Module"
   colorizeJustEnteredTag tTagans,tSta,tSta+(length(tTagans))-1,tIDNum
   put offsets("<",tTagans) into tLefts
   put item -1 of tLefts into tLastLeft
   put offsets(">",tTagans) into tRights
   put quote&quote into t2q
   put offsets(t2q,tTagans) into tValPlaces
   if tValPLaces <> 0 then put (item 1 of tValPlaces)+1 into tVP else put empty into tVP
   if pIDFld is "1004" and ("<pb " is in tTagans or "<anchor " is in tTagans) then describeAlts
   if "<pb n=" is in tTagans then put identifyLocPB2() into fld id 1010 of cd 1 of stack "STEP Transcription Module"
   else if "<pb fac=" is in tTagans then put identifyLocPBFac() into fld id 1010 of cd 1 of stack "STEP Transcription Module"
   set the cSelectedChunk of fld id tIDNum of cd 1 of stack "STEP Transcription Module" to empty
   if "<!--" is not in tTagans then 
      if tVP is empty and "/>" is not in tTagans then 
         select before char (tSta+tTL-tLastLeft) of fld id tIDNum of cd 1 of stack "STEP Transcription Module"
      else 
         if "/>" is not in tTagans then select before char (tSta+tVP-1) of fld id tIDNum of cd 1 of stack "STEP Transcription Module"
         else select after char (tSta+tTL-1) of fld id tIDNum of cd 1 of stack "STEP Transcription Module"
      end if
   else select before char (tSta+tTL-3) of fld id tIDNum of cd 1 of stack "STEP Transcription Module"
   set the cSelectionLocation of btn id 1013 of cd 1 of stack "STEP Transcription Module" to empty
   set the backgroundColor of me to empty
   compilePageBreaks 1004
   set the scroll of fld id tIDNum of cd 1 of stack "STEP Transcription Module" to tScroll
   saveForUndoRedo tIDNum
   unlock screen
end mouseUp

function identifyLocPB2
   local tIDNum,pCharNum,tPBs,tDocAbb,tVariant,tLeafAbb,tInitLeaf,tRectoVerso,tLeafP,tPBInfo,tN,tXM,tPBFormat,tAttList,tEd,tRend,tLastValueOrig,tRectoVerso2
   put the cPageBreakFormat of fld id 1004 of cd 1 into tPBFormat
   put item 1 of getXMLIDLastValueOriginPlusRV() into tLastValueOrig
   put item 2 of getXMLIDLastValueOriginPlusRV() into tRectoVerso2
   put word 3 of the focusedObject into tIDNum
   --if tIDNum is empty then put "1004" into tIDNum ---,1041,1151
   if tIDNum is not among the items of "1004" then  put "1004" into tIDNum--return pPhrase ---,1041,1151
   put word 2 of the cSelectedChunk of fld id tIDNum of cd 1 into pCharNum
   compilePageBreaks 1004
   put the cPBValues of fld id 1004 of cd 1 into tPBs
   put extractFromPBFormat() into tAttList
   put extractValueOfAttribute(tAttList,"ed") into tEd
   put extractValueOfAttribute(tAttList,"rend") into tRend
   if tPBs is empty then
      put fld id 1206 of cd 1 into tDocAbb
      put fld id 1207 of cd 1 into tVariant
      put fld id 1208 of cd 1 into tLeafAbb
      put fld id 1209 of cd 1 into tInitLeaf
      put fld id 1240 of cd 1 into tRectoVerso
      put tInitLeaf into tLeafP
      put reformPageBreak(tLeafP,tRectoVerso) into tLeafP
      if tLeafP begins with "0" then
         repeat until not(tLeafP begins with "0")
            delete char 1 of tLeafP
         end repeat
      end if
      if tDocAbb is not empty and tLeafAbb is not empty and tInitLeaf is not empty and tLeafP is not empty then
         put tInitLeaf into fld id 1210 of cd 1
         return "<pb n="&quote&tLeafAbb&tLeafP&tRectoVerso&quote&space&"xml:id="&quote&tDocAbb&tVariant&"-"&tInitLeaf&tRectoVerso&quote&tAttList&"/>"
      else
         answer "Please enter document and page identification values in the small boxes (at least boxes 1, 3, and 4) at the bottom left of the window. "&\
         "Those data are needed for anchoring tags and page breaks. It is best to use the Pagebreak dialog for that purpose." with "OK" or "Pagebreak Dialog" as sheet
         if it is "Pagebreak Dialog" then modeless stack "Customize Pagebreak Self-Closing Tag"
         exit to top
      end if
   else
      put the cLeafType of fld id 1004 of cd 1 into tLeafAbb
      put getPagebreakInfo(pCharNum,tEd,tRend,tLastValueOrig,tRectoVerso2,tLeafAbb) into tPBInfo
      put item 1 of tPBInfo into tN
      put item 2 of tPBInfo into tXM
      put item 3 of tPBInfo into tEd
      put item 4 of tPBInfo into tRend
      if tEd <> empty then put "ed="&quote&tEd&quote into segment 1 of tAttList
      if tRend <> empty then put "rend="&quote&tRend&quote into segment 2 of tAttList
      return "<pb n="&quote&tN&quote&space&"xml:id="&quote&tXM&quote&tAttList&"/>"
   end if
end identifyLocPB2

function identifyLocPB2b
   local tAllTag,tDocAbb,tLeafAbb,tVariant,tRectoVerso,tSta,tSto,tLf,tRv,tLeafP,tAttList
   put fld id 1010 of cd 1 of stack "STEP Transcription Module" into tAllTag
   put fld id 1206 of cd 1 of stack "STEP Transcription Module" into tDocAbb
   put fld id 1207 of cd 1 of stack "STEP Transcription Module" into tVariant
   put fld id 1208 of cd 1 of stack "STEP Transcription Module" into tLeafAbb
   put fld id 1240 of cd 1 of stack "STEP Transcription Module" into tRectoVerso
   put extractFromPBFormat() into tAttList
   put offset("n=",tAllTag)+3 into tSta
   put offset(" xml",tAllTag)-2 into tSto
   put length(tLeafAbb) into tLf
   put length(tRectoVerso) into tRv
   put char tSta+tLf to tSto-tRv of tAllTag into tLeafP 
   if tRv > 0 then put char tSto of tAllTag into tRectoVerso
   put reformPageBreak(tLeafP,tRectoVerso) into tLeafP
   set the itemDel to comma
   if tRectoVerso is "v" then 
      put "r" into tRectoVerso
   else if tRectoVerso is "r" then 
      put "v" into tRectoVerso
   end if
   put tLeafP into fld id 1210 of cd 1
   return "<pb n="&quote&tLeafAbb&tLeafP&tRectoVerso&quote&space&"xml:id="&quote&tDocAbb&tVariant&"-"&tLeafP&tRectoVerso&quote&tAttList&"/>"
end identifyLocPB2b

--tn&"|"&txmlid&"|"&ted&"|"&trend&"|"&tfacs&"|"&tplace&"|"&tstyle&"|"&ttype&"|"&tmedium&"|"&tcolor


function identifyLocPBFac
   local tAllTag,tDocAbb,tVariant,tRectoVerso,tSta,tSto,tLf,tRv,tLeafP,tLeafAbb,tAttList
   put fld id 1010 of cd 1 of stack "STEP Transcription Module" into tAllTag
   put fld id 1206 of cd 1 of stack "STEP Transcription Module" into tDocAbb
   put fld id 1207 of cd 1 of stack "STEP Transcription Module" into tVariant
   put fld id 1208 of cd 1 of stack "STEP Transcription Module" into tLeafAbb
   put fld id 1240 of cd 1 of stack "STEP Transcription Module" into tRectoVerso
   put extractFromPBFormat() into tAttList
   put offset("fac=",tAllTag)+4 into tSta
   put offset("/",tAllTag)-2 into tSto
   put length(tLeafAbb) into tLf
   put length(tRectoVerso) into tRv
   put char tSta+tLf to tSto-tRv of tAllTag into tLeafP 
   if tRv > 0 then put char tSto of tAllTag into tRectoVerso
   put reformPageBreak(tLeafP,tRectoVerso) into tLeafP
   set the itemDel to comma
   if tRectoVerso is "v" then 
      put "r" into tRectoVerso
   else if tRectoVerso is "r" then 
      put "v" into tRectoVerso
   end if
   put tLeafP into fld id 1210 of cd 1 of stack "STEP Transcription Module"
   return "<pb fac="&quote&tLeafAbb&tLeafP&tRectoVerso&quote&"tAttList&/>"
end identifyLocPBFac

on identifyTables pNewLoc
   local tAllTag,tSta,tSto,tText,tTableLocs,tLX,tXMLIDVal,tTLoc,tPrefAnchor,tNewTablePosition,tAttVal,tXMLIDValPos
   put fld id 1010 of cd 1 of stack "STEP Transcription Module" into tAllTag
   put fld id 1004 of cd 1 into tText
   put offsets("<table ",tText) into tTableLocs
   put customAnchor() into tPrefAnchor
   if tTableLocs <> 0 then
      put pNewLoc into item (the number of items of tTableLocs)+1 of tTableLocs
      sort items of tTableLocs numeric ascending
      set the wholematches to true
      put itemOffset(pNewLoc,tTableLocs) into tNewTablePosition
   else
      put 1 into tNewTablePosition
   end if
   put " xml:id="&quote&tPrefAnchor&"table"&tNewTablePosition&quote into tAttVal
   put findAttributeValuePosition(tAllTag,"xml:id") into tXMLIDValPos
   if tXMLIDValPos is empty then put tAttVal after char (offset("<table",tAllTag)+5) of tAllTag
   else put tAttVal into char (item 1 of tXMLIDValPos) to (item 2 of tXMLIDValPos) of tAllTag
   put tAllTag into fld id 1010 of cd 1
   if tTableLocs <> 0 then
      repeat with j = the number of items of tTableLocs down to 1
         if j = tNewTablePosition then next repeat
         put the lineIndex of char (item j of tTableLocs) of fld id 1004 of cd 1 into tLX
         put findAttributeValuePosition(line tLX of tText,"xml:id") into tXMLIDValPos
         if tXMLIDValPos is empty then put " xml:id="&quote&tPrefAnchor&"table"&j&quote after char (item j of tTableLocs)+5 of fld id 1004 of cd 1
         else put " xml:id="&quote&tPrefAnchor&"table"&j&quote into char (item 1 of tXMLIDValPos) to (item 2 of tXMLIDValPos) of line tLX of fld id 1004 of cd 1
      end repeat
   end if
end identifyTables


##TOOLTIP:
##Insert tag above at insertion point.



#####################
#####################

## Script of field "AssembledTags”, ID 1010 of CARD 1 of STACK STEP Transcription Module

on mouseEnter1
   local ut,ot
   if the cTagTip of this stack is "off" then exit mouseEnter1
   get the text of me
   if it is empty then pass mouseEnter1
   put word 1 of it into ut
   if "<!" is in ut then pass mouseEnter1
   if ">" is in ut then put offset(">",ut)-1 into ot else put length(ut) into ot
   get char 2 to ot of it
   float it
end mouseEnter1

on mouseWithin
   local ot,yt,yt2,tExplanation
   if the cTagTip of this stack is "off" then exit mouseWithin
   get the mouseChunk
   if it is empty then pass mouseWithin
   put the number of truewords of char 1 to (word 2 of it) of me into ot
   put trueword ot of me into yt
   put char (item -1 of offsets(yt,me)-1) of me into yt2
   if yt2 is not in "</!" then put getAttributeTEIExplanation(yt) into tExplanation
   else put getElementTEIExplanation(yt) into tExplanation
   floating tExplanation
end mouseWithin

on floating @pAttr--behaves like a tooltip
   lock screen
   set the height of fld "Floater" of cd 1 to 19
   if pAttr is not empty then 
      if pAttr is not the text of fld "Floater" of cd 1 then
         set the vis of fld "Floater" of cd 1 to false
         put lineBreaker(pAttr) into fld "Floater" of cd 1
         set the height of fld "Floater" of cd 1 to the formattedHeight of fld "Floater" of cd 1
         set the textAlign of fld "Floater" to "left"
         set the topRight of  fld "Floater" of cd 1 to ((item 1 of the mouseLoc) -16,(item 2 of the mouseLoc))
         set the vis of fld "Floater" of cd 1 to true
      else
         set the topRight of  fld "Floater" of cd 1 to ((item 1 of the mouseLoc) -16,(item 2 of the mouseLoc))
      end if
   else
      set the vis of fld "Floater" of cd 1 to false
   end if
end floating

on mouseLeave
   set the vis of fld "Floater" of cd 1 to false
end mouseLeave

on float pmsg--behaves like a tooltip
   local pExpanded
   put desabbreviateSomeTags(pmsg) into pExpanded
   if pExpanded is not empty then 
      if pExpanded is not in fld "Floater" of cd 1 then set the vis of fld "Floater" of cd 1 to false
      put pExpanded into fld "Floater" of cd 1
      set the height of fld "Floater" of cd 1 to (the formattedHeight of fld "Floater" of cd 1)/*-6*/
      set the dontWrap of fld "Floater" to true
      set the textAlign of fld "Floater" to "center"
      set the width of fld "Floater" of cd 1 to (the formattedWidth of fld "Floater" of cd 1)-4
      --set the left of  fld "Floater" of cd 1 to the left of fld id 1010 of cd 1+((the width of fld id 1010 of cd 1 - the width of fld "Floater" of cd 1)/2)
      set the topRight of  fld "Floater" of cd 1 to the topLeft of fld id 1010 of cd 1
      --set the top of  fld "Floater" of cd 1 to the top of fld id 1010 of cd 1
      set the vis of fld "Floater" of cd 1 to true
   else
      set the vis of fld "Floater" of cd 1 to false
   end if
end float

on closeField
   local tFld,tW
   put fld id 1010 of cd 1 into tFld
   if tFld is empty or "<!--" is in tFld or "/>" is in tFld then pass closeField
   if tFld is "addSpan" or tFld is "delSpan" then 
      put "<"&tFld&" spanTo="&quote&"#"&quote&" place="&quote&quote&"/><anchor xml:id="&quote&quote&"/>"  into fld id 1010 of cd 1
      exit closeField
   end if
   if tFld is "=" or tFld is quote or tFld is quote&quote then
      put empty into tFld
      exit closeField
   end if
   if quote&quote is in tFld and "=" is not in tFld then
      get offsets(quote&quote,tFld)
      if it <> 0 then
         repeat with x = the number of items of it down to 1
            put the number of words of char 1 to (item x of it) of tFld into tW
            put word tW-1 of tFld & "=" & quote&quote into word tW-1 to tW of tFld
         end repeat
      end if
   end if
   if the number of words of tFld is 2 and "=" is not in  tFld then put "="&quote&quote after word 2 of tFld
   if isOddNumber(the number of words of tFld) is true and the number of words of tFld > 1 and "=" is not in tFld and quote is not in tFld then
      repeat with y = the number of words of tFld down to 3 step -2
         put word (y-1) of tFld & "=" & quote & word y of tFld & quote into word y-1 to y of tFld
      end repeat
   end if
   if isOddNumber(the number of words of tFld) is false and the number of words of tFld > 1 and "=" is not in tFld and quote is not in tFld then
      put "="&quote&quote after word -1 of tFld
      repeat with y = (the number of words of tFld)-1 down to 3 step -2
         put word (y-1) of tFld & "=" & quote & word y of tFld & quote into word y-1 to y of tFld
      end repeat
   end if
   replace "= "&quote with "="&quote in tFld
   replace "= " with "="&quote in tFld
   if char -1 of tFld is "=" then put quote&quote after tFld
   get offsets("="&quote,tFld)
   if it <> 0 then
      repeat with x = the number of items of it down to 1
         if (item x of it) is length(tFld)-1 then 
            put quote after char -1 of tFld
            next repeat
         else if char (item x of it)+2 of tFld is quote then 
            next repeat
         else
            put the number of words of char 1 to (item x of it) of tFld into tW
            if char -1 of word tW of tFld is not quote and "</" is not in word tW of tFld then put quote after char -1 of word tW of tFld
         end if
      end repeat
   end if
   replace "> <" with "><" in tFld
   replace "  " with " " in tFld
   replace "< " with "<" in tFld
   replace " >" with ">" in tFld
   if char 1 of tFld is space then delete char 1 of tFld
   if char -1 of tFld is space then delete char -1 of tFld
   if char -1 of tFld is not ">" then put ">" after tFld
   if char 1 of tFld is not "<" then put "<" before tFld
   if (the number of words of tFld is 1) and ("</" is not in tFld) then 
      put "</" & (char 2 to -1 of word 1 of tFld) after tFld
   else if (the number of words of tFld > 1) and the number of items of (offsets(">",tFld)) = 1 then 
      put "</" & (char 2 to -1 of word 1 of tFld) after tFld
   end if
   if char -1 of tFld is not ">" then put ">" after tFld
   replace "</<" with "</" in tFld
   put checkValueForm(tFld) into fld id 1010 of cd 1
end closeField

function removeValOddities pCntr
   local tPunc
   put ",="&quote into tPunc
   repeat for each char tChar in tPunc
      replace tChar with empty in pCntr
   end repeat
   replace ";" with ";   " in pCntr
   replace ";   " with "; " in pCntr
   replace ":" with ":   " in pCntr
   replace ":   " with ": " in pCntr
   if "; " is in pCntr and ": " is not in pCntr then replace "; " with empty in pCntr
   if char -1 of pCntr is ";" then delete char -1 of pCntr
   replace "  " with space in pCntr
   return pCntr
end removeValOddities

function checkValueForm pString
   local pNI,tValue
   get offsets(quote,pString)
   if it = 0 then return pString
   put the number of items of it into pNI
   repeat with i = pNI-1 down to 1 step -2
      if (item i+1 of it)-(item i of it) = 1 then next repeat
      put char (item i of it)+1 to (item i+1 of it)-1 of pString into tValue
      put removeValOddities(tValue) into tValue
      put tValue into char (item i of it)+1 to (item i+1 of it)-1 of pString
   end repeat
   return pString
end checkValueForm

function removeAttOddities pCntr
   local tPunc
   put ";,="&quote into tPunc
   repeat for each char tChar in tPunc
      replace tChar with empty in pCntr
   end repeat
   replace "  " with space in pCntr
   replace space with "-" in pCntr 
   return pCntr
end removeAttOddities

on returnInField
   exit returnInField
end returnInField

function isOddNumber pNumber
   if pNumber is not an integer or pNumber is 0 then return false
   if (pNumber/2) is an integer then return false
   return true
end isOddNumber

##TOOLTIP:
##You may type tags, attributes and values in this field without angle
##brackets, equal signs, or quotes. Press the tab key to autocomplete. 



#####################
#####################

## Script of button "Archive”, ID 1075 of CARD 1 of STACK STEP Transcription Module

function gatheringContents
   local tFldList,tStackName,tArchive,tKeys,tCustKey
   send "mouseUp" to btn id 1073 of cd 1
   put "1004,1017,1026,1029,1041,1044,1049,1064,1067,1109,1112,1126,1139,1151,1154,1157,1163,1171,1174,1206,1207,1208,1209,1210,1211,1240" into tFldList
   put "STEP Transcription Module" into tStackName
   repeat for each item tItem in tFldList
      put "Fld id "&tItem&" of cd 1 of stack "&tStackName&cr & the cSavedFieldHTMLContent of fld id tItem of cd 1& cr & "//Fld id "&tItem&" of cd 1 of stack "&tStackName&"//"&cr after tArchive
   end repeat   
   put "cAnchoredNoteValues of fld id 1004"&cr&the cAnchoredNoteValues of fld id 1004 of cd 1 & cr & "//cAnchoredNoteValues of fld id 1004//"&cr after tArchive
   put "cPBValues of fld id 1004"&cr&the cPBValues of fld id 1004 of cd 1 & cr & "//cPBValues of fld id 1004//"&cr after tArchive
   put "cSelfClosingTagsList of fld id 1004"&cr&the cSelfClosingTagsList of fld id 1004 of cd 1 & cr & "//cSelfClosingTagsList of fld id 1004//"&cr after tArchive
   put "cSyntacticalDescriptionHolder of fld id 1017"&cr&the cSyntacticalDescriptionHolder of fld id 1017 of cd 1 & cr & "//cSyntacticalDescriptionHolder of fld id 1017//"&cr after tArchive
   put "cPragmaTranspoHolder of fld id 1017"&cr&the cPragmaTranspoHolder of fld id 1017 of cd 1 & cr & "//cPragmaTranspoHolder of fld id 1017//"&cr after tArchive
   put "cTranspositionsHolder of fld id 1017"&cr&the cTranspositionsHolder of fld id 1017 of cd 1 & cr & "//cTranspositionsHolder of fld id 1017//"&cr after tArchive
   put "cSpanList of fld id 1017"&cr&the cSpanList of fld id 1017 of cd 1 & cr & "//cSpanList of fld id 1017//"&cr after tArchive
   put "cAltIndex of btn id 1020"&cr&the cAltIndex of btn id 1020 of cd 1 & cr & "//cAltIndex of btn id 1020//"&cr after tArchive
   put "cAltIndex2 of btn id 1020"&cr&the cAltIndex2 of btn id 1020 of cd 1 & cr & "//cAltIndex2 of btn id 1020//"&cr after tArchive
   put "cAnchoredIndex of btn id 1020"&cr&the cAnchoredIndex of btn id 1020 of cd 1 & cr & "//cAnchoredIndex of btn id 1020//"&cr after tArchive
   put "cBeforeAfterTranspo of btn id 1020"&cr&the cBeforeAfterTranspo of btn id 1020 of cd 1 & cr & "//cBeforeAfterTranspo of btn id 1020//"&cr after tArchive
   put "cAllRunAltsLoc of fld id 1126"&cr&the cAllRunAltsLoc of fld id 1126 of cd 1 & cr & "//cAllRunAltsLoc of fld id 1126//"&cr after tArchive
   put "cAllIndentedAltsLoc of fld id 1126"&cr&the cAllIndentedAltsLoc of fld id 1126 of cd 1 & cr & "//cAllIndentedAltsLoc of fld id 1126//"&cr after tArchive
   put "cAllIndentedAltsLocWithoutSC of fld id 1126"&cr&the cAllIndentedAltsLocWithoutSC of fld id 1126 of cd 1 & cr & "//cAllIndentedAltsLocWithoutSC of fld id 1126//"&cr after tArchive
   put "cFirstSign of fld id 1126"&cr&the cFirstSign of fld id 1126 of cd 1 & cr & "//cFirstSign of fld id 1126//"&cr after tArchive
   put "cSecondSign of fld id 1126"&cr&the cSecondSign of fld id 1126 of cd 1 & cr & "//cSecondSign of fld id 1126//"&cr after tArchive
   put "cPageBreakFormat of fld id 1004"&cr & the cPageBreakFormat of fld id 1004 of cd 1 & cr & "//cPageBreakFormat of fld id 1004//"&cr after tArchive
   put "cPageNumberDisplay"&cr & the cPageNumberDisplay of stack "Customize Pagebreak Self-Closing Tag" & cr & "//cPageNumberDisplay//"&cr after tArchive
   return tArchive
end gatheringContents

on exportData tContents
   ask file "Type the name of the file that will contain the STEP Transcription archive." with type "HTML|html,htm" titled "Type the name of the new file"
   if (it is empty) or (the result is "Cancel") then exit to top
   if not(it ends with ".step") then put ".step" after it
   put tContents into fld id 1014 of cd 1 of stack "STEP Transcription Module"
   put the HTMLText of fld id 1014 of cd 1 of stack "STEP Transcription Module" into tContents
   put empty into fld id 1014 of cd 1 of stack "STEP Transcription Module"
   open file it for write
   write tContents to file it
   close file it
   recordArchivePath it
   unlock screen
   answer "All current STEP transcription data were exported successfully to file “" & it & ".”"
end exportData

on recordArchivePath pFP
   local tFPL
   put the cFilePathList of btn id 1074 of cd 1 of stack "STEP Transcription Module" into tFPL
   if tFPL is empty then put pFP into tFPL else put cr & pFP after tFPL
   put stripDuplicates(tFPL) into tFPL
   set the cFilePathList of btn id 1074 of cd 1 of stack "STEP Transcription Module" to tFPL
   fillOpenRecentArchives
end recordArchivePath pFP

on mouseUp
   local tContents
   answer "Confirm you want to export into one HTML file all the STEP transcription data you may need to import back later on (filetype: .step)." with "Cancel" or "Export"
   if it is "Cancel" then exit to top
   set the cursor to watch
   lock screen
   put gatheringContents() into tContents
   exportData tContents
   unlock screen
   answer "Operation done. All data have been exported. You may now safely click the button “Clear All...” to delete all current data." 
end mouseUp

##TOOLTIP:
##Archive the content of all fields into one file.



#####################
#####################

## Script of button "Syntactical Menu”, ID 1063 of CARD 1 of STACK STEP Transcription Module

on menuPick pItemName
   local tFldIDs
   put "1017,1064,1109,1171" into tFldIDs
   repeat with c = 1 to the number of items of tFldIDs
      set the cVScroll of fld id (item c of tFldIDs) of cd 1 to the vScroll of fld id (item c of tFldIDs) of cd 1
   end repeat
   lock screen
   switch pItemName
      case "Automatic Descr."
         show fld id 1017 of cd 1
         hide fld id 1064 of cd 1
         hide fld id 1109 of cd 1
         hide fld id 1171 of cd 1
         send "menuPick"&&"Automatic Descr." to btn id 1070 of cd 1
         break
      case "XML"
         XMLing
         hide fld id 1017 of cd 1
         hide fld id 1064 of cd 1
         show fld id 1109 of cd 1
         hide fld id 1171 of cd 1
         break
      case ">>"
         if fld id 1017 of cd 1 is empty then 
            repeat with c = 1 to the number of items of tFldIDs
               set the vScroll of fld id (item c of tFldIDs) of cd 1 to the cVScroll of fld id (item c of tFldIDs) of cd 1
            end repeat
            select line 1 of me
            exit menuPick
         end if
         if fld id 1064 of cd 1 is not empty then
            answer "The Edited Description field is not empty. Confirm you want to replace its content with the Automatic XML Description list of alterations." with "Cancel" or "Replace" as sheet
            if it is not "Cancel" then 
               shapeEdited
               select line 4 of me
               send "menuPick"&&"Automatic Descr." to btn id 1070 of cd 1
            else
               if the visible of fld id 1017 then select line 1 of me
               else if the visible of fld id 1109 of cd 1 then select line 2 of me
               else if the visible of fld id 1064 of cd 1 then select line 4 of me
               else if the visible of fld id 1171 of cd 1 then select line 5 of me
            end if
         else
            shapeEdited
            select line 4 of me
            send "menuPick"&&"Automatic Descr." to btn id 1070 of cd 1
         end if
         break
      case "Edit Descr."
         hide fld id 1017 of cd 1
         show fld id 1064 of cd 1
         hide fld id 1109 of cd 1
         hide fld id 1171 of cd 1
         break
      case "XML "
         XMLing2
         hide fld id 1017 of cd 1
         hide fld id 1064 of cd 1
         hide fld id 1109 of cd 1
         show fld id 1171 of cd 1
         break
   end switch
   repeat with c = 1 to the number of items of tFldIDs
      set the vScroll of fld id (item c of tFldIDs) of cd 1 to the cVScroll of fld id (item c of tFldIDs) of cd 1
   end repeat
   unlock screen
end menuPick

on XMLing
   local pFIDNum
   lock screen
   if fld id 1017 of cd 1 is not empty then put "1017" into pFIDNum
   else exit XMLing
   refacemphingText pFIDNum
   select before char 1 of fld id 1109 of cd 1
   unlock screen
end XMLing

on XMLing2
   local pFIDNum
   lock screen
   if fld id 1064 of cd 1 is not empty then put "1064" into pFIDNum
   else exit XMLing2
   refacemphingText2 pFIDNum
   select before char 1 of fld id 1171 of cd 1
   unlock screen
end XMLing2

on refacemphingText pFIDNum
   local tHTML,tNormalText,tPrefAnchor,tFacing,tTranspoDesc,tPragmaTranspoDesc,tAnchoList,tAnchoBeg,ots,tHLine,tNLine,tNLine2,tSpans,ot,tSpanLine,ut,ut2,tRef,tAnchPair,tHiliteIndex,tPair
   if char -1 of fld id 1109 of cd 1 is cr then delete char -1 of fld id 1109 of cd 1
   set the styledText of fld id 1109 of cd 1 to the styledText of fld id pFIDNum of cd 1
   put the HTMLText of fld id 1109 of cd 1 into tHTML
   put fld id pFIDNum of cd 1 into tNormalText
   put customAnchor() into tPrefAnchor
   filter tHTML without "<p></p>"
   put "&lt;hi rend="&quote&"italic"&quote&"&gt;" into tFacing
   replace "<i>" with tFacing in tHTML
   put "&lt;hi rend="&quote&"bold"&quote&"&gt;" into tFacing
   replace "<b>" with tFacing in tHTML
   put "&lt;hi rend="&quote&"underline"&quote&"&gt;" into tFacing
   replace "<u>" with tFacing in tHTML
   put "&lt;/hi&gt;" into tFacing
   replace "</i>" with tFacing in tHTML
   put "&lt;/hi&gt;" into tFacing
   replace "</b>" with tFacing in tHTML
   put "&lt;/hi&gt;" into tFacing
   replace "</u>" with tFacing in tHTML
  -- if the hilite of btn "Example" of cd 1 is true then put the cExampleAltIndex of btn id 1020 of cd 1 into tHiliteIndex
  --else put the cAltIndex of btn id 1020 of cd 1 into tHiliteIndex
   if the hilite of btn "Example" of cd 1 is true then put the cExampleAltIndex of btn id 1020 of cd 1 into tHiliteIndex
   else put the cAllRunAltsLoc of fld id 1126 of cd 1 into tHiliteIndex
   put the cSpanList of fld id 1017 of cd 1 into tSpans
   if the hilite of btn "Example" of cd 1 is true then put the cExampleTranspositionsHolder of fld id 1017 of cd 1 into tTranspoDesc -- cExampleIndentedTranspoAltsLoc of fld id 1017 of cd 1, cExampleRunTranspoAltsLoc
   else put the cTranspositionsHolder of fld id 1017 of cd 1 into tTranspoDesc
   put empty into tAnchoList
   if tTranspoDesc is not empty then
      put quote&(fld id 1206 of cd 1) & (fld id 1207 of cd 1) &"-tr" into tAnchoBeg
      put offsets(tAnchoBeg,tTranspoDesc) into ots
      repeat with x = 1 to (the number of items of ots)-1 step 2
         put char (item x of ots)+1 to (item x of ots)+length(tAnchoBeg)+1 of tTranspoDesc &comma& char (item x+1 of ots)+1 to (item x+1 of ots)+length(tAnchoBeg)+1 of tTranspoDesc&cr after tAnchoList
      end repeat
   end if
   repeat with x = 1 to (the number of lines of tHTML)
      put line x of tHTML into tHLine
      if " metadata=" is in tHLine then put removeMetadata(tHLine) into tHLine
      put line x of tNormalText into tNLine
      put empty into tNLine2
      if "] before del [" is in tNLine then 
         put tNLine into tNLine2
         replace "before del" with "before deleted" in tNLine2
      end if
      if tNLine is in tSpans or tNLine2 is in tSpans then 
         if "app from" is not in tHLine then
            put lineOffset(tNLine,tSpans) into ot
            if ot = 0 then put lineOffset(tNLine2,tSpans) into ot
            put line ot of tSpans into tSpanLine
            put offset("xml:id",tSpanLine) into ut
            put offset("/>",tSpanLine,ut) into ut2
            put char ut+8 to ut+ut2-2 of tSpanLine into tRef
            put "&lt;app "&"from="&quote&tRef&quote&"&gt;&lt;lem&gt;" after char 3 of tHLine
            put "&lt;/lem&gt;" before char offset("]",tHLine) of tHLine
            put "&lt;/app&gt;" before char offset("</p>",tHLine) of tHLine
            put tHLine into line x of tHTML
         end if
         next repeat
      end if
      if tNLine is in tTranspoDesc then
         put lineOffset(tNLine,tTranspoDesc) into ut
         put line ut of tAnchoList into tAnchPair
         put "&lt;app from="&quote&(item 1 of tAnchPair)&quote&&"to="&quote&(item 2 of tAnchPair)&quote&"&gt;&lt;lem&gt;" after char offset(">",tHLine) of tHLine
         put "&lt;/lem&gt;" before char offset("]",tHLine) of tHLine
         put "&lt;/app&gt;" before char offset("</p>",tHLine) of tHLine
         put tHLine into line x of tHTML
         next repeat
      end if
      put trueword 1 of line x of tHiliteIndex into tPair
      if quote&">" is in tHLine then put "&lt;app from="&quote& tPrefAnchor&(item 1 of tPair) &quote&" to="&quote& tPrefAnchor&(item 2 of tPair) & quote&"&gt;&lt;lem&gt;" after char offset(quote&">",tHLine)+1 of tHLine
      else put "&lt;app from="&quote&tPrefAnchor&(item 1 of tPair)&quote&&"to="&quote&tPrefAnchor&(item 2 of tPair)&quote&"&gt;&lt;lem&gt;" after char offset(">",tHLine) of tHLine
      put "&lt;/lem&gt;" before char offset("]",tHLine) of tHLine
      put "&lt;/app&gt;" before char offset("</p>",tHLine) of tHLine
      put tHLine into line x of tHTML
   end repeat
   XMLDeclarations tHTML
   set the HTMLText of fld id 1109 to tHTML
end refacemphingText

function removeMetadata pLine
   put empty into char offset(" metadata",pLine) to offset("/>"&quote&">",pLine)+2 of pLine
   if char 1 to 3 of pLine is not "<p>" then put empty into char 3 to offset(quote&">",pLine) of pLine
   return pLine
end removeMetadata

on XMLDeclarations @tHTML
   put "&lt;div&gt;"&cr&"&lt;listApp&gt;"&cr&"&lt;head&gt;Syntactical description of alterations&lt;/head&gt;"&cr before tHTML
   put cr&"&lt;/listApp&gt;"&cr&"&lt;/div&gt;" after tHTML
   put "&lt;encodingDesc&gt;"&cr&"&lt;variantEncoding method="&quote&"double-end-point"&quote&" location="&quote&"external"&quote&"/&gt;"&cr&cr&"&lt;/encodingDesc&gt;" before tHTML
end XMLDeclarations

on mouseWithin
   local tDiff
   put round((the width of this stack) - (the minWidth of this stack)) into tDiff
   get the mouseH
   if it > (770+tDiff) and it < (878+tDiff) then showtooltip(771)
   else if it > (877+tDiff) and it < (923+tDiff) then showtooltip(878)
   else if it > (922+tDiff) and it < (965+tDiff) then showtooltip(923)
   else if it > (964+tDiff) and it < (1049+tDiff) then showtooltip(965)
   else if it > (1048+tDiff) and it < (1096+tDiff) then showtooltip(1049)
end mouseWithin

on showtooltip pRect
   local tltp
   switch pRect
      case "771"
         put "Automatic generation of alteration descriptions based on their tagging in the left-side field." into tltp
         break
      case "878"
         put "Generates an XML rendition of the automatic syntactical descriptions, along with their anchors." into tltp
         break
      case "923"
         put "Moves the XML automatic descriptions to a field where you can edit them." into tltp
         break
      case "965"
         put "Shows a field where you can edit the automatic alteration descriptions "&cr&\
         "to improve them (between the opening and closing <app> tag)." into tltp
         break
      case "1049"
         put "Generates an XML rendition of the edited syntactical descriptions, along with their anchors." into tltp
         break
   end switch
   set the toolTip of btn id 1063 of cd 1 to tltp
end showtooltip

on shapeEdited
   local tHTML,tXML,ot,yt
   put the HTMLText of fld id 1017 of cd 1 into tHTML
   put line 2 to -2 of fld id 1109 of cd 1 into tXML
   repeat with x = 1 to the number of lines of tXML
      put offset(">",line x of tXML) into ot
      put char 1 to ot of line x of tXML into yt
      replace "<" with "&lt;" in yt
      replace ">" with "&gt;" in yt
      if " metadata=" is in line x of tHTML then put removeMetadata(line x of tHTML) into line x of tHTML
      put yt after char 3 of line x of tHTML
      put "&lt;/app&gt;" before char -4 of of line x of tHTML
   end repeat
   set the HTMLText of fld id 1064 of cd 1 to tHTML
   if char -1 of fld id 1064 of cd 1 is cr then delete char -1 of fld id 1064 of cd 1
end shapeEdited

on refacemphingText2 pFIDNum
   local tHTML,tFacing,tHiliteIndex,tHLine
   set the styledText of fld id 1171 of cd 1 to the styledText of fld id pFIDNum of cd 1
   put the HTMLText of fld id 1171 of cd 1 into tHTML
   filter tHTML without "<p></p>"
   put "&lt;hi rend="&quote&"italic"&quote&"&gt;" into tFacing
   replace "<i>" with tFacing in tHTML
   put "&lt;hi rend="&quote&"bold"&quote&"&gt;" into tFacing
   replace "<b>" with tFacing in tHTML
   put "&lt;hi rend="&quote&"underline"&quote&"&gt;" into tFacing
   replace "<u>" with tFacing in tHTML
   put "&lt;/hi&gt;" into tFacing
   replace "</i>" with tFacing in tHTML
   put "&lt;/hi&gt;" into tFacing
   replace "</b>" with tFacing in tHTML
   put "&lt;/hi&gt;" into tFacing
   replace "</u>" with tFacing in tHTML
   if the hilite of btn "Example" of cd 1 is true then put the cExampleAltIndex of btn id 1020 of cd 1 into tHiliteIndex
   else put the cAltIndex of btn id 1020 of cd 1 into tHiliteIndex
   repeat with x = 1 to the number of lines in tHTML
      put line x of tHTML into tHLine
      if "app from" is in tHLine then
         put "&lt;lem&gt;" after char offset(quote&"&gt;",tHLine)+4 of tHLine
         put "&lt;/lem&gt;" before char offset("]",tHLine) of tHLine
      else
         put "&lt;lem&gt;" after char offset("app&gt;",tHLine)+6 of tHLine
         put "&lt;/lem&gt;" before char offset("]",tHLine) of tHLine 
      end if
      put tHLine into line x of tHTML
   end repeat
   XMLDeclarations tHTML
   set the HTMLText of fld id 1171 to tHTML
end refacemphingText2
   

##TOOLTIP:
##Automatic generation of alteration descriptions based on their tagging in the left-side field.



#####################
#####################

## Script of button "Describe alterations”, ID 1020 of CARD 1 of STACK STEP Transcription Module

on mouseUp
   if not the visible of btn id 1025 of cd 1 of stack "STEP Transcription Module" then exit mouseUp
   local tHText,pSize,tText,tTagsToDelete,tTagPair,tAttList,tListDel,tListOfAlterations,tAngleGroups,tAngleList,tAngleList1,tAngleList2,tNumPairs,tLineNumber,tAngs,tTwoTags,tFirstTag,tSecondTag,tTagBegins,ut
   local tTagAttributesAndValues,tTextFrag,tFirstRightAngle,tTagOne,tTagTwo,tLCA,tTempDel,tNumber,tSubPairs,tItemN,tPairList,tPair,tTempDel2,tList2,tAllSpans,tAllSpansB,tSpanAddList,tSP,tSpanDelList,tDescHilite
   local tSubstJoList,tDescriptorList,tL,tOffList,tGapList,tWN,tItalicPhrases,ots,tAndList,pSelLoc,tRegex,tTableLocs,tTableEnds,tTablePositions,tTablePos,tReplaceChars,tTableStart,tTableStop,tTableAlterations,tAlternationList
   local tResult,ot,tSeq,tVScroll,tVScroll17,tN1,tN2,tN3,tN4,tN5
   put the hilite of btn id 1934 of cd 1 of stack "STEP Transcription Module" into tDescHilite
   set the hilite of btn id 1934 of cd 1 of stack "STEP Transcription Module" to true
   set the cursor to watch
   lock screen
   put the vScroll of fld id 1004 of cd 1 into tVScroll
   put the vScroll of fld id 1017 of cd 1 into tVScroll17
   put the HTMLText of fld id 1004 of cd 1 into tHText
   put the textSize of fld id 1004 of cd 1 into pSize
   if "size=" is in tHText then put replaceText(tHText," size="&quote&"[\d]+"&quote&">"," size="&quote&pSize&quote&">") into tHText
   replace ">  " with "> " in tHText
   replace " &lt;/" with "&lt;/" in tHText
   replace "&lt;p&gt; " with "&lt;p&gt;" in tHText   
   if "&lt;gap " is in tHText then
      repeat until tN2 is false
         put "(&lt;gap [^;]+;)" into tRegex
         put matchText(tHtext,tRegex,tN1) into tN2
         if tN2 is true then
            replace "/</font" with "</font" in tN1
            replace ">&gt;" with ">/&gt;" in tN1
            replace ">/&gt;" with ">&gt;&lt;/gap&gt;" in tN1
            put matchChunk(tHText,tRegex,tN3,tN4) into tN5
            put tN1 into char tN3 to tN4 of tHText
            put "@" into char tN3 of tHText
            put empty into tN2
         end if
      end repeat
   end if
   replace "@lt;" with "&lt;" in tHText
   set the HTMLText of fld id 1004 of cd 1 to tHText
   set the vScroll of fld id 1004 of cd 1 to tVScroll
   put fld id 1004 of cd 1 into tText
   if tText is empty or ("<del" is not in tText and "<add" is not in tText) then 
      set the hilite of btn id 1934 of cd 1 of stack "STEP Transcription Module" to tDescHilite
      exit mouseUp
   end if
   if "<add><del>" is in tText or "</del></add>" is in tText then
      put empty into tResult
      put offset("<add><del>",tText) into ut
      if ut <> 0 then 
         put offset("</del>",tText,ut) into ot
         if char (ut+ot+6) to (ut+ot+11) of tText is "</add>" then 
            select char ut to ut+ot+11 of fld id 1004 of cd 1 of stack "STEP Transcription Module"
            set the vScroll  of fld id 1004 of cd 1 of stack "STEP Transcription Module" to (the vScroll  of fld id 1004 of cd 1 of stack "STEP Transcription Module") + 500
            put "yes1" into tResult
         end if
      else
         put offset("</del></add>",tText) into ut
         if "</subst>" is not in char ut+11 to ut+20 of tText then 
            put  offsetOfOnePrecedingString(char 1 to ut-1 of tText,"<add",false) into ot
            select char ot to ut+11 of fld id 1004 of cd 1 of stack "STEP Transcription Module"
            set the vScroll  of fld id 1004 of cd 1 of stack "STEP Transcription Module" to (the vScroll  of fld id 1004 of cd 1 of stack "STEP Transcription Module") + 500
            put "yes2" into tResult
         end if
      end if
      if "yes" is in tResult then 
         send "mouseUp" to btn "Check encoding" of cd 1
         exit mouseUp
      end if
   end if
   if "<subst><add>" is in tText or "</del></subst>" is in tText then
      put empty into tResult
      put offset("<subst><add>",tText) into ut
      local tSubstText
      if ut <> 0 then 
         put offset("</add></subst>",tText,ut) into ot
         put char ut to ut+ot of tText into tSubstText
         if "<del" is not in  tSubstText or "</del>" is not in tSubstText then 
            select char ut to ut+ot+13 of fld id 1004 of cd 1 of stack "STEP Transcription Module"
            set the vScroll  of fld id 1004 of cd 1 of stack "STEP Transcription Module" to (the vScroll  of fld id 1004 of cd 1 of stack "STEP Transcription Module") + 200
            put "yes1" into tResult
         end if
      else
         put offset("</del></subst>",tText) into ut
         put  offsetOfOnePrecedingString(char 1 to ut-1 of tText,"<subst><del",false) into ot
         put char ot to ut of tText into tSubstText
         if "<add" is not in  tSubstText or "</add>" is not in tSubstText then 
            select char ot to ut+12 of fld id 1004 of cd 1 of stack "STEP Transcription Module"
            set the vScroll  of fld id 1004 of cd 1 of stack "STEP Transcription Module" to (the vScroll  of fld id 1004 of cd 1 of stack "STEP Transcription Module") + 200
            put the vScroll  of fld id 1004 of cd 1 of stack "STEP Transcription Module" into tVScroll
            put "yes2" into tResult
         end if
      end if
      if "yes" is in tResult then 
         send "mouseUp" to btn "Check encoding" of cd 1
         exit mouseUp
      end if
   end if
   if the lockScreen is false then lock screen
   put empty into fld id 1049 of cd 1
   put doublequoteur(tText) into tText
   replace "</p><p" with "</p> <p" in tText
   put offsets("<table ",tText) into tTableLocs
   if tTableLocs <> 0 then
      put offsets("</table>",tText) into tTableEnds
      repeat with j = 1 to the number of items of tTableLocs
         put the lineIndex of char (item j of tTableLocs) of fld id 1004 of cd 1 after tTablePositions
         put "|"&the lineIndex of char (item j of tTableEnds) of fld id 1004 of cd 1&comma after tTablePositions
      end repeat
      repeat with k = 1 to the number of items in tTablePositions
         put item k of tTablePositions into tTablePos
         set the itemDel to "|"
         put item 1 of tTablePos into tTableStart
         put item 2 of tTablePos into tTableStop
         put describeTableAlterations(tText,tTableStart,tTableStop,item k of tTableLocs,(item k of tTableEnds) + 7) into tTableAlterations
         set the itemDel to comma
      end repeat
      repeat for each item tTablePos in tTablePositions
         set the itemDel to "|"
         repeat with h = item 1 of tTablePos to item 2 of tTablePos
            get length(line h of tText)
            put empty into tReplaceChars
            repeat it
               put "+" after tReplaceChars
            end repeat
            put tReplaceChars into line h of tText
         end repeat
         set the itemDel to comma
      end repeat
   end if
   put "<body>,</body>,<p>,</p>,<sic>,</sic>,<sup>,</sup>,<sub>,</sub>,<pb/>,<lb/>,<gb/>,<cb/>,<i>,</i>,<b>,</b>,<u>,</u>,<abbr>,</abbr>,<handnote>,</handnote>,<handshift>,</handshift>,<lb>,</lb>,<l>,</l>,<line>,</line>,<formula,</formula>,</hi>,</emph>,</note>,</table>,</row>,</cell>,</head>,<cell/>" into tTagsToDelete
   repeat for each item tItem in tTagsToDelete
      replace tItem with empty in tText
   end repeat
   put "add,del,subst,handnote,handshift,q,cit,hi,emph,mod,damage,sic,gap,unclear,restore,abbr,surplus,retrace,table,cell,row,head,formula" into tTagsToDelete
   repeat for each item tItem in tTagsToDelete
      put "<"&tItem&"></"&tItem&">" into tTagPair
      replace tTagPair with empty in tText
   end repeat
   put "p,l,pb,note,hi,emph,graphic,handshift,handnote" into tTagBegins --,table,row,cell,head
   repeat for each item tItem in tTagBegins
      put "<"&tItem&" [^>]*>" into tRegex
      -- put "<"&tItem&" [\w\d\s\:;"&quote&"=]*>" into tRegex
      put replaceText(tText,tRegex,empty) into tText
   end repeat
   filter tText without empty
   if "<!--" is in tText then put replaceText(tText,"<!--"&"[^>]+"&">",empty) into tText
   replace "</del><del><add>" with "¶¶¶" in tText
   replace "</del><del>" with "</del>¶<del>" in tText
   replace "¶¶¶" with "</del><del><add>" in tText
   replace "<mod type="&quote&"subst"&quote&"&>" with "<mod>" in tText
   put identifydelDelSequence(tText) into tListDel
   if tListDel<> empty then
      repeat for each line tLine in tListDel
         replace "</del>"&tLine with "</del>¶<del>" in tText
      end repeat
   end if
   put empty into tListOfAlterations
   put identifyComplexSubstitution(tText) into tListOfAlterations
   put identifyTranspositions(tText) into line (the number of lines of tListOfAlterations)+1 of tListOfAlterations
   put orderOfTags(tText) into tAngleGroups
   repeat with c = 1 to the number of lines of tAngleGroups
      put line c of tAngleGroups into tAngleList
      put nestedAngles(tAngleList) into tAngleList1
      put nestedAngles2(tAngleList) into tAngleList2
      if "|" is not in tAngleList1 then put tAngleList2 into tAngleList else put tAngleList1 into tAngleList
      put 1 into tNumPairs
      put the number of lines of tAngleList into tLineNumber
      put line 1 to -2 of tAngleList into tAngleList
      if the number of lines of tAngleList is 1 and "|" is in tAngleList then
         set the itemDel to "|"
         put the number of items of tAngleList into tNumPairs
         set the itemDel to comma
      end if
      repeat with e = 1 to the number of lines of tAngleList
         put line e of tAngleList into tAngs
         set the itemDel to "|"
         put item 1 of tAngs into tTwoTags
         set the itemDel to comma
         put item 1 of tTwoTags into tFirstTag
         put (item 2 of tTwoTags) into tSecondTag
         put empty into tTagAttributesAndValues
         if e > 1 then
            set the itemDel to "|"
            put the number of items of tAngs into tNumPairs
            set the itemDel to comma
         end if
         put char tFirstTag to tSecondTag of tText into tTextFrag
         put offset(">",tTextFrag) into tFirstRightAngle
         put char 1 to tFirstRightAngle of tTextFrag into tTagOne
         put "</"&trueword 1 of tTagOne into tTagTwo
         if char -1 of tTagTwo is not ">" then put ">" after tTagTwo
         if "="&quote is in tTagOne then
            put char offset(space,tTagOne) to -2 of tTagOne into tTagAttributesAndValues
            delete char offset(space,tTagOne) to -2 of tTagOne
         end if
         put length(tTagTwo)-1 into tLCA
         add tLCA to tSecondTag
         put char tFirstTag to tSecondTag of tText into tTextFrag
         if tTagOne is "<subst>" or (tTagOne is "<mod>" and "<del" is in tTextFrag and "<add" is in tTextFrag) then
            put syntacticalDescription(tTagOne,tTextFrag,tFirstTag,tSecondTag,,,tTagAttributesAndValues) & cr after tListOfAlterations
            add 2 to e
            next repeat
         end if
         if tTagOne is "<add>" and tNumPairs = 1 then
            put syntacticalDescription(tTagOne,tTextFrag,tFirstTag,tSecondTag,,,tTagAttributesAndValues) & cr after tListOfAlterations
            next repeat
         end if
         if tTagOne is "<add>" and tNumPairs > 1 then
            put syntacticalDescription(tTagOne,tTextFrag,tFirstTag,tSecondTag,tText,,tTagAttributesAndValues) into tTempDel
            put 0 into tNumber
            if line 2 of tTempDel is an integer then 
               put line 2 of tTempDel into tNumber
               delete line 2 of tTempDel
            end if
            set the itemDel to "|"
            put item 2 to (the number of items of tAngs) of tAngs into tSubPairs
            put (the number of items of tSubPairs) into tItemN
            if tItemN - tNumber <= 0 then 
               put tTempDel & cr after tListOfAlterations
               set the itemDel to comma
               next repeat
            else if tItemN - tNumber > 0 then 
               put tItemN - tNumber into tItemN
               put item -tItemN to -1 of tSubPairs into tSubPairs
            end if
            put empty into tPairList
            repeat with n = 1 to tItemN
               put item n of tSubPairs & cr after tPairList
            end repeat
            set the itemDel to comma
            repeat with r = 1 to the number of lines of tPairList
               put line r of tPairList into tPair
               put item 1 of tPair into tFirstTag
               put (item 2 of tPair) into tSecondTag
               put char tFirstTag to tSecondTag of tText into tTextFrag
               put offset(">",tTextFrag) into tFirstRightAngle
               put char 1 to tFirstRightAngle of tTextFrag into tTagOne
               put "</"&trueword 1 of tTagOne into tTagTwo
               if char -1 of tTagTwo is not ">" then put ">" after tTagTwo
               if "="&quote is in tTagOne then
                  put char offset(space,tTagOne) to -2 of tTagOne into tTagAttributesAndValues
                  delete char offset(space,tTagOne) to -2 of tTagOne
               end if
               put length(tTagTwo)-1 into tLCA
               add tLCA to tSecondTag
               put char tFirstTag to tSecondTag of tText into tTextFrag
               if tTagOne is "<subst>" or (tTagOne is "<mod>" and "<del" is in tTextFrag and "<add" is in tTextFrag) then
                  put syntacticalDescription(tTagOne,tTextFrag,tFirstTag,tSecondTag,,2,tTagAttributesAndValues) into tTempDel2
               else if tTagOne is "<add>" and tItemN = 1 then
                  put syntacticalDescription(tTagOne,tTextFrag,tFirstTag,tSecondTag,,2,tTagAttributesAndValues)  into tTempDel2
               else if tTagOne is "<add>" and tItemN > 1 then
                  put gatherSubNests(tTagOne,tTextFrag,tFirstTag,tSecondTag,tText,2,tTempDel,line r to (the number of lines of tPairList) of tPairList,tTagAttributesAndValues) into tTempDel2
               else if tTagOne is "<retrace>" then
                  put syntacticalDescription(tTagOne,tTextFrag,tFirstTag,tSecondTag,,2,tTagAttributesAndValues) into tTempDel2
               else if tTagOne is "<gap>" or tTagOne begins with "<gap " then
                  put syntacticalDescription(tTagOne,tTextFrag,tFirstTag,tSecondTag,tText,2,tTagAttributesAndValues) into tTempDel2
               else if tTagOne begins with "<del" and tItemN < 3 then
                  put syntacticalDescription(tTagOne,tTextFrag,tFirstTag,tSecondTag,tText,2,tTagAttributesAndValues)  into tTempDel2
               else if tTagOne begins with "<del" and tItemN > 2 then
                  put gatherSubNests(tTagOne,tTextFrag,tFirstTag,tSecondTag,tText,2,tTempDel,line r to (the number of lines of tPairList) of tPairList,tTagAttributesAndValues) into tTempDel2
               end if
               put modifyDescription(tTempDel,tTempDel2,tTextFrag,tTagOne,"add",tTagAttributesAndValues) into tTempDel
            end repeat
            put tTempDel & cr after tListOfAlterations
            next repeat
         end if
         if tTagOne is "<retrace>" then
            put syntacticalDescription(tTagOne,tTextFrag,tFirstTag,tSecondTag,,,tTagAttributesAndValues) & cr after tListOfAlterations
            next repeat
         end if
         if tTagOne is "<gap>" or tTagOne begins with "<gap " then
            put syntacticalDescription(tTagOne,tTextFrag,tFirstTag,tSecondTag,tText,,tTagAttributesAndValues) & cr after tListOfAlterations
            next repeat
         end if
         if (tTagOne is "<del>" and tNumPairs = 1 and tLineNumber = 1) or (tTagOne is "<del" and tNumPairs < 3 and "</add></del>" is in tTextFrag) then
            put syntacticalDescription(tTagOne,tTextFrag,tFirstTag,tSecondTag,tText,,tTagAttributesAndValues) & cr after tListOfAlterations
            next repeat
         end if
         if tTagOne is "<del>" and (tNumPairs > 2 or tLineNumber > 1) then
            put syntacticalDescription(tTagOne,tTextFrag,tFirstTag,tSecondTag,tText,,tTagAttributesAndValues) into tTempDel
            if tNumPairs > 2 then
               set the itemDel to "|"
               put item 2 to (the number of items of tAngs) of tAngs into tSubPairs
               put (the number of items of tSubPairs) into tItemN
               put empty into tPairList
               repeat with n = 1 to (the number of items of tSubPairs)
                  put item n of tSubPairs & cr after tPairList
               end repeat
               set the itemDel to comma
               repeat with r = 1 to the number of lines of tPairList
                  put line r of tPairList into tPair
                  put item 1 of tPair into tFirstTag
                  put (item 2 of tPair) into tSecondTag
                  put char tFirstTag to tSecondTag of tText into tTextFrag
                  put offset(">",tTextFrag) into tFirstRightAngle
                  put char 1 to tFirstRightAngle of tTextFrag into tTagOne
                  put "</"&trueword 1 of tTagOne &">" into tTagTwo
                  if "="&quote is in tTagOne then
                     put char offset(space,tTagOne) to -2 of tTagOne into tTagAttributesAndValues
                     delete char offset(space,tTagOne) to -2 of tTagOne
                  end if
                  put length(tTagTwo)-1 into tLCA
                  add tLCA to tSecondTag
                  put char tFirstTag to tSecondTag of tText into tTextFrag
                  if tTagOne is "<subst>" or (tTagOne is "<mod>" and "<del" is in tTextFrag and "<add" is in tTextFrag) then
                     put syntacticalDescription(tTagOne,tTextFrag,tFirstTag,tSecondTag,,2,tTagAttributesAndValues) into tTempDel2
                     put r+2 into r
                  else if tTagOne is "<add>" and tItemN = 1 then
                     put syntacticalDescription(tTagOne,tTextFrag,tFirstTag,tSecondTag,,2,tTagAttributesAndValues)  into tTempDel2
                  else if tTagOne is "<add>" and tItemN > 1 then
                     put gatherSubNests(tTagOne,tTextFrag,tFirstTag,tSecondTag,tText,2,tTempDel,line r+1 to (the number of lines of tPairList) of tPairList,tTagAttributesAndValues) into tTempDel2
                  else if tTagOne is "<retrace>" then
                     put syntacticalDescription(tTagOne,tTextFrag,tFirstTag,tSecondTag,,2,tTagAttributesAndValues) into tTempDel2
                  else if tTagOne is "<gap>" or tTagOne begins with "<gap " then
                     put syntacticalDescription(tTagOne,tTextFrag,tFirstTag,tSecondTag,tText,2,tTagAttributesAndValues) into tTempDel2
                  else if tTagOne is "<del>" and tItemN < 3 then
                     put syntacticalDescription(tTagOne,tTextFrag,tFirstTag,tSecondTag,tText,2,tTagAttributesAndValues)  into tTempDel2
                  else if tTagOne is "<del>" and tItemN > 2 then
                     put gatherSubNests(tTagOne,tTextFrag,tFirstTag,tSecondTag,tText,2,tTempDel,line r+1 to (the number of lines of tPairList) of tPairList,tTagAttributesAndValues) into tTempDel2
                  end if
                  put modifyDescription(tTempDel,tTempDel2,tTextFrag,tTagOne,,tTagAttributesAndValues) into tTempDel
               end repeat
            else if tLineNumber > 1 then
               put line 2 to -1 of tAngleList into tList2
               repeat with m = 1 to the number of lines of tList2
                  put line m of tList2 into tAngs
                  set the itemDel to "|"
                  put item 1 to (the number of items of tAngs) of tAngs into tSubPairs
                  put (the number of items of tSubPairs) into tItemN
                  put empty into tPairList
                  repeat with n = 1 to (the number of items of tSubPairs)
                     put item n of tSubPairs & cr after tPairList
                  end repeat
                  set the itemDel to comma
                  repeat with r = 1 to the number of lines of tPairList
                     put line r of tPairList into tPair
                     put item 1 of tPair into tFirstTag
                     put (item 2 of tPair) into tSecondTag
                     put char tFirstTag to tSecondTag of tText into tTextFrag
                     put offset(">",tTextFrag) into tFirstRightAngle
                     put char 1 to tFirstRightAngle of tTextFrag into tTagOne
                     put "</"&trueword 1 of tTagOne &">" into tTagTwo
                     if "="&quote is in tTagOne then
                        put char offset(space,tTagOne) to -2 of tTagOne into tTagAttributesAndValues
                        delete char offset(space,tTagOne) to -2 of tTagOne
                     end if
                     put length(tTagTwo)-1 into tLCA
                     add tLCA to tSecondTag
                     put char tFirstTag to tSecondTag of tText into tTextFrag
                     if tTagOne is "<subst>" or (tTagOne is "<mod>" and "<del" is in tTextFrag and "<add" is in tTextFrag) then
                        put syntacticalDescription(tTagOne,tTextFrag,tFirstTag,tSecondTag,,2,tTagAttributesAndValues) into tTempDel2
                        put r+2 into r
                     else if tTagOne is "<add>" then
                        put syntacticalDescription(tTagOne,tTextFrag,tFirstTag,tSecondTag,,2,tTagAttributesAndValues)  into tTempDel2
                     else if tTagOne is "<retrace>" then
                        put syntacticalDescription(tTagOne,tTextFrag,tFirstTag,tSecondTag,,2,tTagAttributesAndValues) into tTempDel2
                     else if tTagOne is "<gap>" or tTagOne begins with "<gap " then
                        put syntacticalDescription(tTagOne,tTextFrag,tFirstTag,tSecondTag,tText,2,tTagAttributesAndValues) into tTempDel2
                     else if tTagOne is "<del>" and tItemN < 3 then
                        put syntacticalDescription(tTagOne,tTextFrag,tFirstTag,tSecondTag,tText,2,tTagAttributesAndValues)  into tTempDel2
                     else if tTagOne is "<del>" and tItemN > 2 then
                        put gatherSubNests(tTagOne,tTextFrag,tFirstTag,tSecondTag,tText,2,tTempDel,line r+1 to (the number of lines of tPairList) of tPairList,tTagAttributesAndValues) into tTempDel2
                     end if
                     put modifyDescription(tTempDel,tTempDel2,tTextFrag,tTagOne,,tTagAttributesAndValues) into tTempDel
                     add tItemN to r
                  end repeat
               end repeat
               add m+1 to e
            end if
            put tTempDel & cr after tListOfAlterations
            next repeat
         end if
      end repeat
   end repeat
   put empty into tAllSpans
   put empty into tAllSpansB
   put describeAddSpans(tText) into tSpanAddList
   put offset("|||",tSpanAddList) into tSP
   if tSP <> 0 then
      put char tSP+3 to -1 of tSpanAddList into tAllSpans
      put char 1 to tSP-1 of tSpanAddList into tSpanAddList
      repeat with j = 1 to the number of lines of tAllSpans
         put "||"&word 2 to -1 of line j of tSpanAddList after line j of tAllSpans
      end repeat
   end if
   if tSpanAddList is not empty then put cr&tSpanAddList after tListOfAlterations
   put describeDelSpans(tText) into tSpanDelList
   put offset("|||",tSpanDelList) into tSP
   if tSP <> 0 then
      put char tSP+3 to -1 of tSpanDelList into line (the number of lines of tAllSpansB)+1 of tAllSpansB
      put char 1 to tSP-1 of tSpanDelList into tSpanDelList
      repeat with j = 1 to the number of lines of tAllSpansB
         put "||"&word 2 to -1 of line j of tSpanDelList after line j of tAllSpansB
      end repeat
   end if
   if tSpanDelList is not empty then put cr&tSpanDelList after tListOfAlterations
   put describeSubstJoins(tText) into tSubstJoList
   if tSubstJoList is not empty then put cr&tSubstJoList after tListOfAlterations
   put describeAlternations(tText) into tAlternationList
   if tAlternationList is not empty then put cr&tAlternationList after tListOfAlterations
   if tTableAlterations is not empty then put cr&tTableAlterations after tListOfAlterations
   if tAllSpansB is not empty then put cr&tAllSpansB after tAllSpans
   filter tAllSpans without empty
   if tAllSpans is not empty then 
      sort lines of tAllSpans ascending numeric by word 1 of each
      repeat with x = 1 to the number of lines of tAllSpans
         delete word 1 of line x of tAllSpans
      end repeat
   end if
   replace "after deleted" with "after del" in tAllSpans
   replace "before deleted" with "before del" in tAllSpans
   set the cSpanList of fld id 1017 of cd 1 to tAllSpans
   sort lines of tListOfAlterations ascending numeric by word 1 of each
   repeat with x = 1 to the number of lines of tListOfAlterations
      delete word 1 of line x of tListOfAlterations
   end repeat
   replace "  ]" with "]" in tListOfAlterations
   replace " ]" with "]" in tListOfAlterations
   replace "</add>]" with "]" in tListOfAlterations
   replace " </del>¶]" with "¶]" in tListOfAlterations
   replace " deleted " with " del " in tListOfAlterations
   filter tListOfAlterations without empty
   put tListOfAlterations into fld id 1017 of cd 1
   set the itemDel to comma
   put "!and!,del-t,intl ab del,ab del,intl bel del,intl,!before!,above inserted, deleted,below inserted,before inserted,after inserted,inserted, ins , ab ,btw,right of,left of,next to,before del,after del,bef del,bel del, below del, next to del,right of del,left of del,near del,aft del,del aft,"&\
   "del bef,del after,del before,added,retraced,inserted and, ins and ,[rtr],retraced and,passage deleted,top-margin,bottom-margin,left-margin,right-margin,in top margin,in right margin,in left margin,in bottom margin,margin and,written over,before gap ,after gap ,inline,supralinear,infralinear,interlinear,"&\
   "shortEnd,lineEnd,lineBeginning,underneath,One alteration,Two alterations,Three alterations,Four alterations,Five alterations,Six alterations,Seven alterations,Eight alterations,Nine alterations,Ten alterations,Eleven alterations,Twelve alterations,empty cell,"&\
   "; alternate form ,are alternate forms ,the author left undecided,are exclusive alternate forms ,are inclusive alternate forms , is optimal.,; initial form ,; initial and alternate forms are equally acceptable.,"&\
   " is strongly preferred to the alternate., is slightly preferred to the initial form., is slightly preferred to the alternate.,"&\
   " is strongly preferred to the initial form.,; first alternate form ,; second alternate form ,; initial and first alternate forms are  acceptable, but not the second alternate form.,"&\
   "; initial and second alternate forms are  acceptable, but not the first alternate form.,; first and second alternate forms are  acceptable, but not the initial form." into tDescriptorList
   repeat for each item tItem in tDescriptorList
      put length(tItem) into tL
      put offsets(tItem,tListOfAlterations) into tOffList
      if tOffList is not 0 then
         repeat for each item tOff in tOffList
            if tItem is not "inserted and" and tItem is not " ins and" then set the textStyle of char tOff to tOff+tL-1 of fld id 1017 of cd 1 to "italic"
            else 
               if char tOff-4 to tOff-1 of fld id 1017 of cd 1 is not "del " then  set the textStyle of char tOff to tOff+tL-1 of fld id 1017 of cd 1 to "italic"
               else set the textStyle of char tOff to tOff+tL-5 of fld id 1017 of cd 1 to "italic"
            end if
         end repeat
      else
         next repeat
      end if
   end repeat
   put offsets("gap due to",tListOfAlterations) into tGapList
   if tGapList <> 0 then
      repeat for each item tGap in tGapList
         put the number of words of char 1 to tGap+2 of tListOfAlterations into tWN
         set the textStyle of word tWN+1 to tWN+3 of fld id 1017 of cd 1 to "italic"
         if char -1 of word tWN+3 of tListOfAlterations is "]" then set the textStyle of char -1 of word tWN+3 of fld id 1017 of cd 1 to "plain"
         if word tWN+4  of tListOfAlterations is "and" then set the textStyle of word tWN+4 of fld id 1017 of cd 1 to "italic"
         if word tWN+4 to tWN+5 of tListOfAlterations is "caused by" then 
            set the textStyle of word tWN+4 to tWN+6 of fld id 1017 of cd 1 to "italic"
            if char -1 of word tWN+6 of tListOfAlterations is "]" then set the textStyle of char -1 of word tWN+6 of fld id 1017 of cd 1 to "plain"
            if word tWN+7  of tListOfAlterations is "and" then set the textStyle of word tWN+7 of fld id 1017 of cd 1 to "italic"
         end if
      end repeat
   end if
   put "transposed by arrows with,transposed by curves with,transposed by lines with,interchanged by wavy line with,transposed according to numbered indications,transposed according to asterisked indications,"&\
   "transposed by authorial instruction,moved by arrow,moved by curve,moved by line,to after,to before,from after,from before,and*,interchanged with,and deletion of,and addition of,deletion of,addition of,"&\
   "are part of a single textual intervention,are alternate forms the author left undecided,Two words or,Three words or,Four words or,Five words or, phrases in alternation,(added alternate),(initial form),and (added alternate),(initial form) and" into tItalicPhrases
   repeat with z = 1 to the number of items of tItalicPhrases
      put offsets(item z of tItalicPhrases,tListOfAlterations) into ots
      if ots <> 0 then
         repeat with x = 1 to the number of items of ots
            set the textStyle of char (item x of ots) to (item x of ots)+length(item z of tItalicPhrases)-1 of fld id 1017 of cd 1 to "italic"
         end repeat
      end if
   end repeat
   put offsets("!and!",tListOfAlterations) into tAndList
   if tAndList <> 0 then
      repeat with x = the number of items of tAndList down to 1
         delete char (item x of tAndList)+4 of fld id 1017 of cd 1
         delete char (item x of tAndList) of fld id 1017 of cd 1
      end repeat
   end if
   put offsets("!before!",tListOfAlterations) into tAndList
   if tAndList <> 0 then
      repeat with x = the number of items of tAndList down to 1
         delete char (item x of tAndList)+7 of fld id 1017 of cd 1
         delete char (item x of tAndList) of fld id 1017 of cd 1
      end repeat
   end if
   if char -1 of fld id 1017 of cd 1 is cr then delete char -1 of fld id 1017 of cd 1
   if not the visible of fld id 1017 of cd 1 then select line 1 of btn id 1063 of cd 1
   put the cSelectedChunk of fld id 1004 of cd 1 into pSelLoc
   set the vScroll of fld id 1017 of cd 1 to tVScroll17
   if pSelLoc is not empty then select after pSelLoc else select after word 1 of fld id 1004 of cd 1
   if "</gap>" is in tText then
      put the HTMLText of fld id 1004 of cd 1 into tHText
      replace ">&gt;&lt;/gap&gt;" with ">/&gt;" in tHText
      set the HTMLText of fld id 1004 of cd 1 to tHText
   end if
   set the vScroll of fld id 1004 of cd 1 to tVScroll
   send "indent" to btn id 1025 of cd 1----
   send "menuPick"&&"Automatic Descr." to btn id 1070 of cd 1
   send "gatherIndentedAltsAndRecordAltLocs" to fld id 1017 of cd 1
   send "menuPick"&&"XML" to btn id 1070 of cd 1
   show fld id 1049 of cd 1
   hide fld id 1067 of cd 1
   hide fld id 1112 of cd 1
   hide fld id 1174 of cd 1
   set the hilite of btn id 1934 of cd 1 of stack "STEP Transcription Module" to tDescHilite
   select line 1 of btn id 1070 of cd 1
   unlock screen
end mouseUp

function gapTagDiscount @pText,@pLoc
   return pLoc
end gapTagDiscount

function extractFromTag tTag,tAlteration,pLength
   local tQ,tAttVal,tAttVal1,tAttVal2,sta,sto,tLeftTag,tRightTag,tL,oto,utu,ata
   put "=" into tQ
   if tTag is "deladd" then
      put empty into tAttVal
      put empty into tAttVal1
      put empty into tAttVal2
      if tQ is in tAlteration then
         put offset("<del ",tAlteration) into sta
         if sta <> 0 then
            put offset(">",tAlteration,sta+3+2)-1 into sto
            put char sta+3+2 to sta+3+2+sto of tAlteration into tAttVal1
            delete  char sta+3+1 to sta+3+2+sto of tAlteration
         end if
         put offset("<add ",tAlteration) into sta
         if sta <> 0 then
            put offset(">",tAlteration,sta+3+2)-1 into sto
            put char sta+3+2 to sta+3+2+sto of tAlteration into tAttVal2
            delete  char sta+3+1 to sta+3+2+sto of tAlteration
         end if
      end if
      put "<del><add>" into tLeftTag
      put "</add></del>" into tRightTag
      if tAttVal1 is not empty then put cr&tAttVal1 into tAttVal else put cr into tAttVal
      if tAttVal2 is not empty then put cr&tAttVal2 after tAttVal
      return char offset(tLeftTag,tAlteration)+10 to offset(tRightTag,tAlteration)-1 of tAlteration&tAttVal
   else
      put length(tTag) into tL
      put empty into tAttVal
      if tQ is in tAlteration then
         put offset("<"&tTag&space,tAlteration) into sta
         if sta is not 0 then 
            put offset(">",tAlteration,sta+tL+2)-1 into sto
            put char sta+tL+2 to sta+tL+2+sto of tAlteration into tAttVal
            delete  char sta+tL+1 to sta+tL+2+sto of tAlteration
         end if
      end if
      put "<"&tTag&">" into tLeftTag
      put "</"&tTag&">" into tRightTag
      put offsets(tLeftTag,tAlteration) into oto
      put offsets(tRightTag,tAlteration) into utu
      put empty into ata
      if the number of items of oto > 1 then
         repeat with k = 2 to the number of items of oto
            if item k of oto < item k-1 of  utu then 
               next repeat
            else
               put item k-1 of utu into ata
               exit repeat
            end if
         end repeat
         if ata is empty then put item -1 of utu into ata
         put ata into utu
      end if
      if tAttVal is not empty then put cr&tAttVal into tAttVal
      if (offset(tLeftTag,tAlteration)+2+tL) > ((item -1 of utu)-1) then return tAttVal
      else return char offset(tLeftTag,tAlteration)+2+tL to (item -1 of utu)-1 of tAlteration&tAttVal
   end if
end extractFromTag

function offsets str,ctr
   local mosList,startPoint,ofs
   put "" into mosList
   put 0 into startPoint
   repeat
      put offset(str,ctr,startPoint) into ofs
      if ofs = 0 then exit repeat
      add ofs to startPoint
      put startPoint & comma after mosList
   end repeat
   if char -1 of mosList = comma then delete char -1 of mosList
   if mosList = "" then return 0
   return mosList
end offsets

function doublequoteur tTextToCurl
   local tPuncts,tCount,tMinus,tWord,tQL
   if quote is not in tTextToCurl then return tTextToCurl
   if char 1 of tTextToCurl is quote then put "“" into char 1 of tTextToCurl
   replace quote&space&quote with "” “" in tTextToCurl
   replace space&quote with " “" in tTextToCurl
   put "([{¡¿" into tPuncts
   repeat for each char tChar in tPuncts
      replace tChar&quote with tChar&"“" in tTextToCurl
   end repeat
   put ")}]!?.,:;±" into tPuncts
   repeat for each char tChar in tPuncts
      replace quote&tChar with "”"&tChar in tTextToCurl
   end repeat
   replace quote with "”" in tTextToCurl
   repeat for each word tWord in tTextToCurl
      put 1 into tMinus
      add 1 to tCount
      if char -1 of tWord is in ",±;:)]}" then 
         delete char -1 of tWord
         put 2 into tMinus
      end if
      if char 1 of tWord is not in "“„" and char -tMinus of tWord is "”" and char 1 to -2 of tWord is a number then put quote into char -tMinus of word tCount of tTextToCurl
   end repeat
   replace "=”" with "="&quote in tTextToCurl
   replace "”>" with quote&">" in tTextToCurl
   replace "”/>" with quote&"/>" in tTextToCurl
   put offsets("” ",tTextToCurl) into tQL
   if tQL is not 0 then
      repeat with x = 1 to the number of items of tQL
         if "=" is in word (the number of words of char 1 to (item x of tQL) of tTextToCurl) of tTextToCurl then
            put quote into char (item x of tQL) of tTextToCurl
         end if
      end repeat
   end if
   put 0 into tCount
   return tTextToCurl
end doublequoteur

function orderOfTags pText
   local tLeftAndRightAngles,tLeftAs,tRightAs,tAngleSeries,tGroupAngles,tLX,tCommaList
   put gatherAngleLocs(pText) into tLeftAndRightAngles
   put line 1 of tLeftAndRightAngles into tLeftAs
   put line 2 of tLeftAndRightAngles into tRightAs
   put empty into tAngleSeries
   repeat with y = 1 to the number of items of tRightAs
      repeat with x = the number of items of tLeftAs down to 1
         if item y of tRightAs > item x of tLeftAs then
            put item x of tLeftAs&comma&item y of tRightAs & cr after tAngleSeries
            delete item x of tLeftAs
            exit repeat
         end if
      end repeat
   end repeat
   put empty into tGroupAngles
   repeat with z = the number of lines of tAngleSeries down to 1
      if not ((item 1 of line z-1 of tAngleSeries > item 1 of line z of tAngleSeries) and (item 1 of line z-1 of tAngleSeries < item 2 of line z of tAngleSeries)) then
         put line z of tAngleSeries & cr after tGroupAngles
      else
         put line z of tAngleSeries & comma after tGroupAngles
         repeat with n = z-1 down to 1
            if not ((item 1 of line n of tAngleSeries > item 1 of line z of tAngleSeries) and (item 1 of line n of tAngleSeries < item 2 of line z of tAngleSeries)) then
               put line n of tAngleSeries & cr after tGroupAngles
               exit repeat
            else 
               put line n of tAngleSeries & comma after tGroupAngles
               if not ((item 1 of line n-1 of tAngleSeries > item 1 of line z of tAngleSeries) and (item 1 of line n-1 of tAngleSeries < item 2 of line z of tAngleSeries)) then 
                  put cr after tGroupAngles
                  exit repeat
               end if
            end if
         end repeat
         if n <> 0 and n <> empty then put n into z
      end if
   end repeat
   sort lines of tGroupAngles ascending numeric by item 1 of each
   repeat with x = 1 to the number of lines of tGroupAngles
      if char -1 of line x of tGroupAngles is comma then delete char -1 of line x of tGroupAngles
      if char 1 of line x of tGroupAngles is comma then delete char 1 of line x of tGroupAngles
      if the number of items of line x of tGroupAngles > 2 then
         put line x of tGroupAngles into tLX
         put offsets(comma,tLX) into tCommaList
         repeat with j = 2 to (the number of items of tCommaList)-1 step 2
            put cr into char (item j of tCommaList) of tLX
         end repeat
         sort lines of tLX ascending numeric by item 1 of each
         replace cr with comma in tLX
         put tLX into line x of tGroupAngles
      end if
   end repeat
   return tGroupAngles
end orderOfTags

function nestedAngles pGroup
   local tPairNum,pComList,tNest,tCount
   put (the number of items of pGroup/2) into tPairNum
   put offsets(comma,pGroup) into pComList
   repeat with h = 2 to (the number of items of pComList)-1 step 2
      put cr into char (item h of pComList) of pGroup
   end repeat
   put line 1 to 2 of pGroup into tNest
   repeat with i = 3 to the number of lines of pGroup
      put 0 into tCount
      repeat with j = the number of lines of pGroup down to 2
         if item 2 of line i of pGroup < item 2 of line j of pGroup and item 1 of line i of pGroup > item 1 of line j of pGroup then 
            put "|"&line i of pGroup after tNest
            put 1 into tCount
            exit repeat
         end if
      end repeat
      if tCount is 0 then put cr&line i of pGroup after tNest
   end repeat
   return tNest&cr&tPairNum
end nestedAngles

function nestedAngles2 pGroup
   local tPairNum,pComList,tCount,tNest
   put (the number of items of pGroup/2) into tPairNum
   put offsets(comma,pGroup) into pComList
   repeat with h = 2 to (the number of items of pComList)-1 step 2
      put cr into char (item h of pComList) of pGroup
   end repeat
   put line 1 of pGroup into tNest
   repeat with i = 2 to the number of lines of pGroup
      put 0 into tCount
      repeat with j = the number of lines of pGroup down to 1
         if item 2 of line i of pGroup < item 2 of line j of pGroup and item 1 of line i of pGroup > item 1 of line j of pGroup then 
            put "|"&line i of pGroup after tNest
            put 1 into tCount
            exit repeat
         end if
      end repeat
      if tCount is 0 then put cr&line i of pGroup after tNest
   end repeat
   return tNest&cr&tPairNum
end nestedAngles2

function gatherAngleLocs pText
   local tOpenTag,tRightTag,tAllAs,tRightAs
   put "<" into tOpenTag
   put "</" into tRightTag
   put offsets(tOpenTag,pText) into tAllAs
   put offsets(tRightTag,pText) into tRightAs
   repeat with x = the number of items of tAllAs down to 1
      if item x of tAllAs is among the items of tRightAs then delete item x of tAllAs
   end repeat
   return tAllAs&cr&tRightAs
end gatherAngleLocs

function gatherSubNests tTagOne,tTextFrag,tFirstTag,tSecondTag,tText,pLevel,pTempDel,pPairL,pTagAttributesAndValues
   local tPair,tFirstRightAngle,tTagTwo,tLCA,tTempDel2
   repeat with q = 1 to the number of lines of pPairL
      put line q of pPairL into tPair
      put item 1 of tPair into tFirstTag
      put (item 2 of tPair) into tSecondTag
      put char tFirstTag to tSecondTag of tText into tTextFrag
      put offset(">",tTextFrag) into tFirstRightAngle
      put char 1 to tFirstRightAngle of tTextFrag into tTagOne
      put "</"&trueword 1 of tTagOne into tTagTwo
      put length(tTagTwo)-1 into tLCA
      add tLCA to tSecondTag
      put char tFirstTag to tSecondTag of tText into tTextFrag
      if tTagOne begins with "<subst" or (tTagOne begins with "<mod" and "<del" is in tTextFrag and "<add" is in tTextFrag) then
         put syntacticalDescription(tTagOne,tTextFrag,tFirstTag,tSecondTag,,2,pTagAttributesAndValues) into tTempDel2
      else if tTagOne begins with "<add" then
         put syntacticalDescription(tTagOne,tTextFrag,tFirstTag,tSecondTag,,2,pTagAttributesAndValues)  into tTempDel2
      else if tTagOne begins with  "<retrace" then
         put syntacticalDescription(tTagOne,tTextFrag,tFirstTag,tSecondTag,,2,pTagAttributesAndValues) into tTempDel2
      else if tTagOne begins with  "<gap" then
         put syntacticalDescription(tTagOne,tTextFrag,tFirstTag,tSecondTag,tText,2,pTagAttributesAndValues) into tTempDel2
      else if tTagOne begins with  "<del"  then
         put syntacticalDescription(tTagOne,tTextFrag,tFirstTag,tSecondTag,tText,2,pTagAttributesAndValues)  into tTempDel2
      end if
      put modifyDescription(pTempDel,tTempDel2,tTextFrag,tTagOne,pTagAttributesAndValues) into pTempDel
   end repeat
   return pTempDel
end gatherSubNests

function removeAttributesAndValues pText
   local tDoubleQuoteAngle,tAttList,tTempTagContent,ot
   put quote&">"&quote&">" into tDoubleQuoteAngle
   replace tDoubleQuoteAngle with quote&">" in pText
   put offsets(quote&">",pText) into tAttList
   repeat with v = (the  number of items of tAttList) down to 1
      repeat with u = (item v of tAttList) down to 1
         if (char u of pText is "<") then
            if (char u-1 of pText <> quote) and (char u+1 of pText <> quote) then exit repeat
         end if
      end repeat
      put char u+1 to v of pText into tTempTagContent
      put offset(space,tTempTagContent) into ot
      delete char (u+ot) to v of pText
   end repeat
   return pText
end removeAttributesAndValues

function syntacticalDescription pTag,pTagContent,pFirstTag,pSecondTag,pText,pSubLevel,pTagAttributesAndValues
   local  tWa,tQ,tAttVal1,tAttVal2,tAttVal3,tL,pTag2,sta,sto,tDeletion,tInsertion,tAttVals,tTypeVal,tPlaceVal,bo,ca,co,tPrevWord,tAfterWord,
   local tW1,tY1,tW2,tW3,tW,ots,tW4,tRAs,gh,el,tReasonVal1,tAgentVal1,tFore,tCRW,tWu,tAft,tReason,tAgent,tAddList,pAddTag,tAlt,tTypeVal2,tPlaceVal2,tTypeVal1,tPlaceVal1,tDelType,tAttVal,tRetrace
   put "=" into tQ
   switch pTag
      case "<subst>"
      case "<mod>"
         if pSubLevel is not 2 then put gapTagDiscount(pText,pFirstTag)&space into tWa
         if "<subst " is in pTagContent or "<mod" is in pTagContent then
            if tQ is in pTagContent then
               put length(pTag)-2 into tL
               put char 2 to -2 of pTag into pTag2
               put offset("<"&pTag2&space,pTagContent) into sta
               put offset(">",pTagContent,sta+tL+2)-1 into sto
               put char sta+tL+2 to sta+tL+2+sto of pTagContent into tAttVal1
               delete  char sta+tL+1 to sta+tL+2+sto of pTagContent
            end if
            if tAttVal1 is "type="&quote&"subst"&quote then put empty into tAttVal1
         end if
         put extractFromTag("del",pTagContent) into tDeletion
         if line 2 of tDeletion is not empty then
            put line 2 of tDeletion into tAttVal2
            delete line 2 of tDeletion
         end if
         put extractFromTag("add",pTagContent) into tInsertion
         if line 2 of tInsertion is not empty then
            put line 2 of tInsertion into tAttVal3
            delete line 2 of tInsertion
         end if
         if (tAttVal1 is empty and tAttVal2 is empty and tAttVal3 is empty) then return tWa&tInsertion&"] "&"intl ab del "& tDeletion
         else
            put tAttVal1 & cr & tAttVal2 & cr & tAttVal3 into tAttVals
            put empty into tTypeVal
            put empty into tPlaceVal
            if "type=" is in tAttVals then 
               put lineOffset("type=",tAttVals) into bo
               put offset("type=",line bo of tAttVals) into ca
               put offset(quote,line bo of tAttVals,ca+6) into co
               put char ca+6 to ca+6+co-1 of line bo of tAttVals into tTypeVal
            end if
            if "place=" is in tAttVals then 
               put lineOffset("place=",tAttVals) into bo
               put offset("place=",line bo of tAttVals) into ca
               put offset(quote,line bo of tAttVals,ca+7) into co
               put char ca+7 to ca+7+co-1 of line bo of tAttVals into tPlaceVal
            end if
            if tTypeVal is "written-over" then return singleSpace(tWa&tInsertion&"] "&abbreviateDescriptors(tTypeVal) && tDeletion)
            else return singleSpace(tWa&tInsertion&"] "&abbreviateDescriptors(tTypeVal)&&abbreviateDescriptors(tPlaceVal)&" del "& tDeletion)
         end if
         break
      case "<gap>"
         put empty into tPrevWord
         put empty into tAfterWord
         put empty into tAttVal1
         put empty into tAttVal2
         if "<gap " is in pTagContent then
            if tQ is in pTagContent then
               put length(pTag)-2 into tL
               put char 2 to -2 of pTag into pTag2
               put offset("<"&pTag2&space,pTagContent) into sta
               put offset("/>",pTagContent,sta+tL+2)-1 into sto
               put char sta+tL+2 to sta+tL+2+sto of pTagContent into tAttVal1
               delete  char sta+tL+1 to sta+tL+2+sto of pTagContent
            end if
         end if
         if pSubLevel is not 2 then put gapTagDiscount(pText,pFirstTag)&space into tWa
         put (the number of words of char 1 to pFirstTag-1 of pText)-2 into tW1
         put (the number of words of char 1 to pSecondTag of pText) into tY1
         put length(word 1 to tW1 of pText) into tW2
         put length(char 1 to pSecondTag of pText) into tW3
         put pFirstTag-1 into tW
         if tW > 0 then  put char tW2+2 to tW of pText into tPrevWord else put empty into tPrevWord
         if "###" is in tPrevWord then
            put offsets("###",tPrevWord) into ots
            delete char 1 to (item -1 of ots) of tPrevWord
         end if
         put empty into tW4
         if char tW3+1 of pText is not space and char tW3+1 of pText is not "<" and char tW3+1 of pText is not empty then 
            put word tY1 of pText into tW4
            put offsets(">",tW4) into tRAs
            if tRAs is not 0 then put char (item -1 of tRAs)+1 to -1 of tW4&space into tW4
         end if
         put tW4&word (tY1+1) to (tY1+2) of pText into tAfterWord
         if word-1 of tPrevWord ends with "</del>" then put empty into tPrevWord
         if "<" is in word 1 of tPrevWord then delete word 1 of tPrevWord
         if word -1 of tPrevWord begins with "<del>" then 
            put offset(word -1 of tPrevWord,tPrevWord) into gh
            delete char 1 to gh+4 of tPrevWord
         end if
         if cr is in tPrevWord then
            put offset(cr,tPrevWord) into el
            if el < length(tPrevWord) then put char el+1 to -1 of tPrevWord into tPrevWord else put char 1 to el-1 of tPrevWord into tPrevWord-----
         end if
         if "###" is in tPrevWord then
            put offsets("###",tPrevWord) into ots
            delete char 1 to (item -1 of ots) of tPrevWord
         end if
         if (char 1 of tPrevWord is "<") or (char -1 of tPrevWord is ">") then 
            put empty into tPrevWord
            if cr is in tAfterWord then
               put offset(cr,tAfterWord) into el
               if el > 1 then put char 1 to el-1 of tAfterWord into tAfterWord else put char el+1 to -1 of tAfterWord into tAfterWord
            end if
         end if
         if "<" is in tAfterWord then
            if "<" is in word 1 of tAfterWord then delete word 1 of tAfterWord else if "<" is in word 2 of tAfterWord then delete word 2 of tAfterWord
         end if
         if "</add>" is in word -1 of tPrevWord then 
            delete char offset("</add>",word -1 of tPrevWord) to -1 of word -1 of tPrevWord
            if "<" is in word -1 of tPrevWord then
               delete char offset("<",word -1 of tPrevWord) to -1 of word -1 of tPrevWord
            end if
         end if
         if tAttVal1 is not empty then
            put empty into tReasonVal1
            put empty into tAgentVal1
            if "reason=" is in tAttVal1 then 
               put offset("reason=",tAttVal1) into ca
               put offset(quote,tAttVal1,ca+8) into co
               put char ca+8 to ca+8+co-1 of tAttVal1 into tReasonVal1
            end if
            if "agent=" is in tAttVal1 then 
               put offset("agent=",tAttVal1) into ca
               put offset(quote,tAttVal1,ca+7) into co
               put char ca+7 to ca+7+co-1 of tAttVal1 into tAgentVal1
            end if
         end if
         if tPrevWord is empty and tAfterWord is empty then
            put char 1 to (word 1 of tWa) of pText into tFore
            if the number of words of tFore >=10 then put word -10 to -1 of tFore into tFore
            repeat with v = (the number of words of tFore) down to 1
               if "</add>" is in word v of tFore and "</add></del>" is not in word v  of tFore then
                  put char (item -1 of offsets("<add>",tFore))+5 to (item -1 of offsets("</add>",tFore))-1 of tFore into tPrevWord
                  exit repeat
               else if cr is in tFore then
                  put char 1 to offset("cr",tFore)-1 of tFore into tCRW
                  repeat with  v = (the number of words of tCRW) down to 1
                     if "<" is not in word v of tFore then 
                        put word v of tFore into tPrevWord
                        exit repeat
                     end if
                  end repeat
                  exit repeat
               end if
            end repeat
            if "###" is in tPrevWord then
               put offsets("###",tPrevWord) into ots
               delete char 1 to (item -1 of ots) of tPrevWord
            end if
            if tPrevWord is empty then
               put (word 1 of tWa) + (length(pTagContent)) into tWu
               put char tWu to -1 of pText into tAft
               repeat with v = 1 to (the number of words of tAft)
                  if "<add>" is in word v of tAft and "<add><del>" is not in word v  of tFore then
                     put char offset("<add>",tAft)+5 to offset("</add>",tAft)-1 of tAft into tAfterWord
                     exit repeat
                  else if cr is in tAft then
                     put char offset("cr",tAft)+1 to -1 of tAft into tCRW
                     repeat with  v = 1 to (the number of words of tCRW)
                        if "<" is not in word v of tAft then 
                           put word v of tAft into tAfterWord
                           exit repeat
                        end if
                     end repeat
                     exit repeat
                  end if
               end repeat
            end if
         end if
         put empty into tReason
         put empty into tAgent
         if tReasonVal1 is not empty then put  "gap due to "&tReasonVal1 into tReason
         if tAgentVal1 is not empty then put "caused by "&tAgentVal1 into tAgent
         if tAgent is not empty then
            if tReason is empty then put tAgent into tReason else put tReason && tAgent into tReason
         end if
         if tPrevWord is not empty then 
            if tReason is empty then return tWa&tPrevWord&"] "&"before gap"
            else return tWa&tPrevWord&"] "&"before "&tReason
         else if tAfterWord is not empty then 
            if tReason is empty then return tWa&tAfterWord&"] "&"after gap"
            else return tWa&tAfterWord&"] "&"after "&tReason
         end if
         break
      case "<del>"
         put empty into tPrevWord
         put empty into tAfterWord
         put empty into tAttVal1
         put empty into tAttVal2
         if "<del " is in pTagContent then
            if tQ is in pTagContent then
               put length(pTag)-2 into tL
               put char 2 to -2 of pTag into pTag2
               put offset("<"&pTag2&space,pTagContent) into sta
               put offset(">",pTagContent,sta+tL+2)-1 into sto
               put char sta+tL+2 to sta+tL+2+sto of pTagContent into tAttVal1
               delete  char sta+tL+1 to sta+tL+2+sto of pTagContent
            end if
         end if
         if "<add>" is in pTagContent and "</add>" is in pTagContent and "<subst" is not in pTagContent and (not(pTagContent begins with "<del><add>") and not(pTagContent ends with "</add></del>")) then
            put offsets("<add>",pTagContent) into line 1 of tAddList
            put offsets("</add>",pTagContent) into line 2 of tAddList
            repeat with c = the number of items of line 1 of tAddList down to 1
               put char (item c of line 1 of tAddList) to (item c of line 2 of tAddList)+5 of pTagContent into pAddTag
               replace pAddTag with "•"&(char offset(">",pAddTag)+1 to (item -1 of offsets("<",pAddTag))-1 of pAddTag) &&"[inserted]" in pTagContent
            end repeat
         end if
         if pSubLevel is not 2 then put gapTagDiscount(pText,pFirstTag)&space into tWa
         put (the number of words of char 1 to pFirstTag-1 of pText)-2 into tW1
         put (the number of words of char 1 to pSecondTag of pText) into tY1
         put length(word 1 to tW1 of pText) into tW2
         put length(char 1 to pSecondTag of pText) into tW3
         put pFirstTag-1 into tW
         if tW > 0 then  put char tW2+2 to tW of pText into tPrevWord else put empty into tPrevWord
         if "###" is in tPrevWord then
            put offsets("###",tPrevWord) into ots
            delete char 1 to (item -1 of ots) of tPrevWord
         end if
         put empty into tW4
         if char tW3+1 of pText is not space and char tW3+1 of pText is not "<" and char tW3+1 of pText is not empty then 
            put word tY1 of pText into tW4
            put offsets(">",tW4) into tRAs
            if tRAs is not 0 then put char (item -1 of tRAs)+1 to -1 of tW4&space into tW4
         end if
         put tW4&word (tY1+1) to (tY1+2) of pText into tAfterWord
         if word-1 of tPrevWord ends with "</del>" then put empty into tPrevWord
         if "<" is in word 1 of tPrevWord then delete word 1 of tPrevWord
         if word -1 of tPrevWord begins with "<del>" then 
            put offset(word -1 of tPrevWord,tPrevWord) into gh
            delete char 1 to gh+4 of tPrevWord
         end if
         if cr is in tPrevWord then
            put offset(cr,tPrevWord) into el
            if el < length(tPrevWord) then put char el+1 to -1 of tPrevWord into tPrevWord else put char 1 to el-1 of tPrevWord into tPrevWord
         end if
         if "###" is in tPrevWord then
            put offsets("###",tPrevWord) into ots
            delete char 1 to (item -1 of ots) of tPrevWord
         end if
         if (char 1 of tPrevWord is "<") or (char -1 of tPrevWord is ">") then 
            put empty into tPrevWord
            if cr is in tAfterWord then
               put offset(cr,tAfterWord) into el
               if el > 1 then put char 1 to el-1 of tAfterWord into tAfterWord else put char el+1 to -1 of tAfterWord into tAfterWord
            end if
         end if
         if "<" is in tAfterWord then
            if "<" is in word 1 of tAfterWord then delete word 1 of tAfterWord else if "<" is in word 2 of tAfterWord then delete word 2 of tAfterWord
         end if
         if "</add>" is in word -1 of tPrevWord then 
            delete char offset("</add>",word -1 of tPrevWord) to -1 of word -1 of tPrevWord
            if "<" is in word -1 of tPrevWord then
               delete char offset("<",word -1 of tPrevWord) to -1 of word -1 of tPrevWord
            end if
         end if
         if char pFirstTag+5 to pFirstTag+8 of pText is "<add" and char pSecondTag-11 to pSecondTag-6 of pText is "</add>" then 
            put extractFromTag("deladd",pTagContent) into tAlt
            if line 3 of tAlt is not empty then
               put line 3 of tAlt into tAttVal2
               delete line 3 of tAlt
               delete line 2 of tAlt
            end if
            delete line 2 of tAlt
            if tAttVal2 is not empty then
               put empty into tTypeVal2
               put empty into tPlaceVal2
               if "type=" is in tAttVal2 then 
                  put offset("type=",tAttVal2) into ca
                  put offset(quote,tAttVal2,ca+6) into co
                  put char ca+6 to ca+6+co-1 of  tAttVal2 into tTypeVal2
               end if
            end if
            if tPrevWord is not empty then
               if tAttVal2 is empty then return tWa&tPrevWord&"] "&"before del inserted "& tAlt  
               else return tWa&tPrevWord&"] "&"before del "&abbreviateDescriptors(tTypeVal2) && tAlt  
            else if tAfterWord is not empty then
               if tAttVal2 is empty then return tWa&tAfterWord&"] "&"after del inserted "& tAlt
               else return tWa&tAfterWord&"] "&"after del "&abbreviateDescriptors(tTypeVal2) && tAlt  
            end if
         else
            put extractFromTag("del",pTagContent) into tAlt
            if line 2 of tAlt is not empty then
               put line 2 of tAlt into tAttVal1
               delete line 2 of tAlt
            end if
            if tAttVal1 is not empty then
               put empty into tTypeVal1
               put empty into tPlaceVal1
               if "place=" is in tAttVal1 then 
                  put offset("place=",tAttVal1) into ca
                  put offset(quote,tAttVal1,ca+7) into co
                  put char ca+7 to ca+7+co-1 of tAttVal1 into tPlaceVal1
               end if
               if "type=" is in tAttVal1 then 
                  put offset("type=",tAttVal1) into ca
                  put offset(quote,tAttVal1,ca+6) into co
                  put char ca+6 to ca+6+co-1 of tAttVal1 into tTypeVal1
               end if
            end if
            if tPrevWord is empty and tAfterWord is empty then
               put char 1 to (word 1 of tWa) of pText into tFore
               if the number of words of tFore >=10 then put word -10 to -1 of tFore into tFore
               repeat with v = (the number of words of tFore) down to 1
                  if "</add>" is in word v of tFore and "</add></del>" is not in word v  of tFore then
                     put char (item -1 of offsets("<add>",tFore))+5 to (item -1 of offsets("</add>",tFore))-1 of tFore into tPrevWord
                     exit repeat
                  else if cr is in tFore then
                     put char 1 to offset("cr",tFore)-1 of tFore into tCRW
                     repeat with  v = (the number of words of tCRW) down to 1
                        if "<" is not in word v of tFore then 
                           put word v of tFore into tPrevWord
                           exit repeat
                        end if
                     end repeat
                     exit repeat
                  end if
               end repeat
               if "###" is in tPrevWord then
                  put offsets("###",tPrevWord) into ots
                  delete char 1 to (item -1 of ots) of tPrevWord
               end if
               if tPrevWord is empty then
                  put (word 1 of tWa) + (length(pTagContent)) into tWu
                  put char tWu to -1 of pText into tAft
                  repeat with v = 1 to (the number of words of tAft)
                     if "<add>" is in word v of tAft and "<add><del>" is not in word v  of tFore then
                        put char offset("<add>",tAft)+5 to offset("</add>",tAft)-1 of tAft into tAfterWord
                        exit repeat
                     else if cr is in tAft then
                        put char offset("cr",tAft)+1 to -1 of tAft into tCRW
                        repeat with  v = 1 to (the number of words of tCRW)
                           if "<" is not in word v of tAft then 
                              put word v of tAft into tAfterWord
                              exit repeat
                           end if
                        end repeat
                        exit repeat
                     end if
                  end repeat
               end if
            end if
            if tPrevWord is empty and tAfterWord is empty then
               put "passage deleted" into tPrevWord
               return tWa&tPrevWord &"]"&tAlt
            end if
            if "typewriter" is in tTypeVal1 then put "del-t" into tDelType else put "del" into tDelType
            if tPrevWord is not empty then 
               if tPlaceVal1 is empty then return tWa&tPrevWord&"] "&"before "&tDelType&" "& tAlt 
               else return tWa&tPrevWord&"] "&"next to "&tDelType&" "& tAlt && abbreviateDescriptors(tPlaceVal1)
            else if tAfterWord is not empty then 
               if tPlaceVal1 is empty then return tWa&tAfterWord&"] "&"after "&tDelType&" "& tAlt
               else return tWa&tAfterWord&"] "&"next to "&tDelType&" "& tAlt && abbreviateDescriptors(tPlaceVal1)
            end if
         end if
         break
      case "<add>"
         put empty into tAttVal
         if "<add " is in pTagContent then
            if tQ is in pTagContent then
               put length(pTag)-2 into tL
               put char 2 to -2 of pTag into pTag2
               put offset("<"&pTag2&space,pTagContent) into sta
               put offset(">",pTagContent,sta+tL+2)-1 into sto
               put char sta+tL+2 to sta+tL+2+sto of pTagContent into tAttVal
               delete  char sta+tL+1 to sta+tL+2+sto of pTagContent
            end if
         end if
         if pSubLevel is not 2 then put gapTagDiscount(pText,pFirstTag)&space into tWa
         put extractFromTag("add",pTagContent) into tInsertion
         if line 2 of tInsertion is not empty then
            put line 2 of tInsertion into tAttVal
            delete line 2 of tInsertion
         end if
         if "</" is in tInsertion and (tAttVal is empty) then 
            return tWa&describeInnerAlts(tInsertion)
            if "</gap>" is in tInsertion then
               replace "></gap>" with "/>" in tInsertion
               
            end if
         end if
         if (tAttVal is empty) then return tWa&tInsertion&"] "&"inserted"
         else
            put empty into tTypeVal
            put empty into tPlaceVal
            if "type=" is in tAttVal then 
               put offset("type=",tAttVal) into ca
               put offset(quote,tAttVal,ca+6) into co
               put char ca+6 to ca+6+co-1 of  tAttVal into tTypeVal
            else
               put "inserted" into tTypeVal
            end if
            if "place=" is in tAttVal then 
               put offset("place=",tAttVal) into ca
               put offset(quote,tAttVal,ca+7) into co
               put char ca+7 to ca+7+co-1 of tAttVal into tPlaceVal
            end if
            return tWa&tInsertion&"] "&abbreviateDescriptors(tTypeVal)&&abbreviateDescriptors(tPlaceVal)
         end if
         break
      case "<retrace>"
         if "<retrace " is in pTagContent then
            if tQ is in pTagContent then
               put length(pTag)-2 into tL
               put char 2 to -2 of pTag into pTag2
               put offset("<"&pTag2&space,pTagContent) into sta
               put offset(">",pTagContent,sta+tL+2)-1 into sto
               put char sta+tL+2 to sta+tL+2+sto of pTagContent into tAttVal
               delete  char sta+tL+1 to sta+tL+2+sto of pTagContent
            end if
         end if
         if pSubLevel is not 2 then put gapTagDiscount(pText,pFirstTag)&space into tWa
         put extractFromTag("retrace",pTagContent) into tRetrace
         if line 2 of tRetrace is not empty then
            put line 2 of tRetrace into tAttVal
            delete line 2 of tRetrace
         end if
         if (tAttVal is empty) then return tWa&tRetrace&"] "&"retraced"
         else
            put empty into tTypeVal
            put empty into tPlaceVal
            if "type=" is in tAttVal then 
               put offset("type=",tAttVal) into ca
               put offset(quote,tAttVal,ca+6) into co
               put char ca+6 to ca+6+co-1 of  tAttVal into tTypeVal
            else
               put "retraced" into tTypeVal
            end if
            if "place=" is in tAttVal then 
               put offset("place=",tAttVal) into ca
               put offset(quote,tAttVal,ca+7) into co
               put char ca+7 to ca+7+co-1 of tAttVal into tPlaceVal
            end if
            return tWa&tRetrace&"] "&abbreviateDescriptors(tTypeVal)&&abbreviateDescriptors(tPlaceVal)
         end if
         break
   end switch
end syntacticalDescription

function describeInternalSubstitution pTagContent,pTag
   local tQ,sta,sto,tAttVal1,tAttVal2,tAttVal3,tDeletion,tInsertion,tAttVals,tTypeVal,tPlaceVal,tL,pTag2,bo,ca,co
   put "=" into tQ
   if "<subst " is in pTagContent or "<mod" is in pTagContent then
      if tQ is in pTagContent then
         put length(pTag)-2 into tL
         put char 2 to -2 of pTag into pTag2
         put offset("<"&pTag2&space,pTagContent) into sta
         put offset(">",pTagContent,sta+tL+2)-1 into sto
         put char sta+tL+2 to sta+tL+2+sto of pTagContent into tAttVal1
         delete  char sta+tL+1 to sta+tL+2+sto of pTagContent
      end if
      if tAttVal1 is "type="&quote&"subst"&quote then put empty into tAttVal1
   end if
   put extractFromTag("del",pTagContent) into tDeletion
   if line 2 of tDeletion is not empty then
      put line 2 of tDeletion into tAttVal2
      delete line 2 of tDeletion
   end if
   put extractFromTag("add",pTagContent) into tInsertion
   if line 2 of tInsertion is not empty then
      put line 2 of tInsertion into tAttVal3
      delete line 2 of tInsertion
   end if
   if (tAttVal1 is empty and tAttVal2 is empty and tAttVal3 is empty) then return tInsertion&"] "&"intl ab del "& tDeletion
   else
      put tAttVal1 & cr & tAttVal2 & cr & tAttVal3 into tAttVals
      put empty into tTypeVal
      put empty into tPlaceVal
      if "type=" is in tAttVals then 
         put lineOffset("type=",tAttVals) into bo
         put offset("type=",line bo of tAttVals) into ca
         put offset(quote,line bo of tAttVals,ca+6) into co
         put char ca+6 to ca+6+co-1 of line bo of tAttVals into tTypeVal
      end if
      if "place=" is in tAttVals then 
         put lineOffset("place=",tAttVals) into bo
         put offset("place=",line bo of tAttVals) into ca
         put offset(quote,line bo of tAttVals,ca+7) into co
         put char ca+7 to ca+7+co-1 of line bo of tAttVals into tPlaceVal
      end if
      if tTypeVal is "written-over" then return singleSpace(tInsertion&"] "&abbreviateDescriptors(tTypeVal) && tDeletion)
      else return singleSpace(tInsertion&"] "&abbreviateDescriptors(tTypeVal)&&abbreviateDescriptors(tPlaceVal)&" del "& tDeletion)
   end if
end describeInternalSubstitution

function modifyDescription pTempDel,pTempDel2,pTextFrag,pTag,pAdd,pTagAttributesAndValues
   local tAngleL,ot,ut,tLemma,tGloss,tLem2,tGloss2,tPhrase,tGl3,tSp,tExSp,yts,yt,yt2
   put length(pTextFrag) into tAngleL
   put offset(pTextFrag,pTempDel) into ot
   if ot is 0 then exit modifyDescription
   switch pTag
      case "<retrace"
      case "<gap>"
      case "<add>"
      case "<subst>"
      case "<mod>"
         if word 1 of pTempDel2 is an integer then delete word 1 of pTempDel2
         put offset("]",pTempDel2) into ut
         put char 1 to ut-1 of pTempDel2 into tLemma
         put char ut+2 to -1 of pTempDel2 into tGloss
         if char -1 of tLemma is not space then put space after tLemma
         if ("<subst>" is in tLemma and "</subst" is in tLemma) or  ("<mod>" is in tLemma and "</mod" is in tLemma) then
            put char offset("<del>",tLemma)+5 to offset("</del>",tLemma)-1 of tLemma into tLem2
            put char offset("<add>",tLemma)+5 to offset("</add>",tLemma)-1  of tLemma into tGloss2
            put tLem2&& "below del" &&tGloss2 into tPhrase
            if tGloss begins with "intl ab del" then
               put char offset("intl ab del ",tGloss)+12 to -1 of tGloss into tGl3
               put tGl3 && "below del" && tPhrase into char ot to ot+tAngleL-1 of pTempDel
               return pTempDel
            end if
         end if
         if char ot+tAngleL of pTempDel is not space then put space into tSp else put empty into tSp
         put 0 into tExSp
         if "before gap " is in tGloss then
            if "] inserted" is not in pTempDel then 
               put offset(tLemma,pTempDel) into ot
               put length(tLemma) into tExSp
               put "•"&tLemma&"["&tGloss&"]"&tSp into char ot to ot+tAngleL-1+tExSp of pTempDel
            else
               put offset(pTextFrag,pTempDel) into ot
               delete char ot to ot+tAngleL-1 of pTempDel
               put " and "& tLemma&&tGloss after pTempDel
            end if
         else
            put "•"&tLemma&"["&tGloss&"]"&tSp into char ot to ot+tAngleL-1+tExSp of pTempDel
         end if
         return pTempDel
         break
      case "<del>"
         if word 1 of pTempDel2 is an integer then delete word 1 of pTempDel2
         put offset("]",pTempDel2) into ut
         put char 1 to ut-1 of pTempDel2 into tLemma
         put char ut+2 to -1 of pTempDel2 into tGloss
         put offsets(tLemma,pTempDel) into yts
         if the number of items of yts > 1 then
            repeat with s = 1 to the number of items of yts
               if item s of yts > ot then exit repeat
            end repeat
            put item s-1 of yts into yt
         else
            put yts into yt
         end if
         if yt is 0 then
            if "<" is in tLemma then
               if word -1 of tLemma begins with "<del>" and char -1 of tLemma is not ">" then put char 6 to -1 of word -1 of tLemma into tLemma
               else
                  repeat with h = the number of words of tLemma down to 1
                     if "<" is in word h of tLemma then delete word h of tLemma
                  end repeat
               end if
               put offset(tLemma,pTempDel) into yt
            end if
         end if
         if char -1 of tLemma is not space then put space after tLemma
         put length(tLemma) into yt2
         if pAdd is not "add" then
            if "before " is in tGloss then put "•"&tLemma&"["&tGloss&"]" into char yt to ot+tAngleL-1 of pTempDel
            else if "after " is in tGloss then put "•"&tLemma&"["&tGloss&"]" into char ot to yt+yt2-1 of pTempDel
         end if
         if pAdd is "add" then
            put empty into char ot to ot+(length(pTextFrag)-1) of pTempDel
            if "before " is in tGloss then put " and"&&tLemma&tGloss after pTempDel
            else if "after " is in tGloss then put " and"&&tLemma&tGloss after pTempDel
            else if "next to " is in tGloss then put " and"&&tLemma&tGloss after pTempDel
         end if
         replace space&space with space in pTempDel
         return pTempDel
         break
   end switch
end modifyDescription

function setOffCharToNum pLetter,pCtr,pSkip,pCharToNum
   local tCount
   if pSkip is empty then put 1 into pSkip
   put 0 into tCount
   repeat with x = pSkip to length(pCtr)
      add 1 to tCount
      if nativeCharToNum(char x of pCtr) is pCharToNum then return tCount
   end repeat
   return 0
end setOffCharToNum

function abbreviateDescriptors pDesc
   local tDescPart
   repeat with x = 1 to the number of words of pDesc
      put word x of pDesc into tDescPart
      switch tDescPart
         case "interlined"
            put "intl" into word x of pDesc
            break
         case "inserted"
            put "ins" into word x of pDesc
            break
         case "above"
            put "ab" into word x of pDesc
            break
         case "below"
            put "bel" into word x of pDesc
            break
         case "after"
            put "aft" into word x of pDesc
            break
         case "before"
            put "bef" into word x of pDesc
            break
         case "between"
            put "btw" into word x of pDesc
            break
         case "underneath"
            put "under" into word x of pDesc
            break
         case "top-margin"
         case "bottom-margin" 
         case "left-margin"
         case "right-margin"
            replace "-" with space in tDescPart
            put "in " before tDescPart
            put tDescPart into word x of pDesc
            break
         case "next-to"
         case "right-of"
         case "left-of"
         case "written-over"
            replace "-" with space in tDescPart
            put tDescPart into word x of pDesc
            break
      end switch
   end repeat
   return pDesc
end abbreviateDescriptors

function identifydelDelSequence @pText
   local tDels,tDelList,tQA,tDelEnd
   put offsets("<del ",pText) into tDels
   if tDels <> 0 then
      put quote&">" into tQA
      repeat for each item tDelete in tDels
         put offset(tQA,pText,tDelete) into tDelEnd
         if tDelEnd <> 0 then
            put char tDelete to tDelete+tDelEnd+1 of pText & cr after tDelList
         end if 
      end repeat
   end if
   if tDelList <> empty then put stripDuplicates(tDelList) into tDelList
   return tDelList
end identifydelDelSequence

function identifyComplexSubstitution @pScript
   local tSyntaDesc,tDescList,tSepar,tAngledSubst,tAngledSubst2,tDescription,tStart,tEnd,cTagList,cL,tReplacer
   if the hilite of btn "Example" of cd 1 is true then put the cExampleSyntacticalDescriptionHolder of fld id 1017 of cd 1 into tSyntaDesc
   else put the cSyntacticalDescriptionHolder of fld id 1017 of cd 1 into tSyntaDesc
   put stripDuplicates2(tSyntaDesc) into tSyntaDesc
   if tSyntaDesc is empty then exit identifyComplexSubstitution
   repeat with x = 1 to the number of lines of tSyntaDesc
      get line x of tSyntaDesc
      put offset("||",it) into tSepar
      put char 1 to tSepar-1 of it into tAngledSubst
      put tAngledSubst into tAngledSubst2
      put char tSepar+2 to -1 of it into tDescription
      put offset(tAngledSubst,pScript) into tStart
      if tStart = 0 then next repeat
      put tStart+tSepar-2 into tEnd
      put tStart&space&tDescription&cr after tDescList
      put "<subst>,<subst ,</subst>,<mod>,<mod ,</mod>,<add>,<add ,</add>,<del>,<del ,</del>,<gap>,<gap ,</gap>,<retrace>,</retrace>,>" into cTagList
      repeat for each item cTag in cTagList
         put length(cTag) into cL
         put empty into tReplacer
         repeat cL
            put "#" after tReplacer
         end repeat
         replace cTag with tReplacer in tAngledSubst2
      end repeat
      replace tAngledSubst with tAngledSubst2 in pScript
   end repeat
   return tDescList
end identifyComplexSubstitution

function identifyTranspositions @pScript
   local tTransDesc,tDescList,tSepar,tAngledTrans,tAngledTrans2,tDescription,tStart,tEnd,cTagList,cL,tReplacer
   if the hilite of btn "Example" of cd 1 is true then put the cExampleTranspositionsHolder of fld id 1017 of cd 1 into tTransDesc
   else put the cTranspositionsHolder of fld id 1017 of cd 1 into tTransDesc
   put stripDuplicates(tTransDesc) into tTransDesc
   if tTransDesc is empty then exit identifyTranspositions
   put empty into tDescList
   repeat with x = 1 to the number of lines of tTransDesc
      get line x of tTransDesc
      put offset("||",it) into tSepar
      put char tSepar+2 to -1 of it into tAngledTrans
      put tAngledTrans into tAngledTrans2
      put char 1 to tSepar-1 of it into tDescription
      put offset(tAngledTrans,pScript) into tStart
      if tStart = 0 then next repeat
      put tStart&space&tDescription&cr after tDescList
      put "<seg ,</seg>,<metamark ,</metamark>" into cTagList
      repeat for each item cTag in cTagList
         put length(cTag) into cL
         put empty into tReplacer
         repeat cL
            put "#" after tReplacer
         end repeat
         replace cTag with tReplacer in tAngledTrans2
      end repeat
      replace tAngledTrans with tAngledTrans2 in pScript
   end repeat
   return tDescList
end identifyTranspositions

function describeInnerAlts pInsert
   local pL,tOAs,tOCs,tOACs,tAngledMatter,ots,tstartCount,tTaglessIntervals,tCharPrem,tLastNum,tAllDelands,tCount,tTag,tDeland,tPrelLem
   put length(pInsert) into pL
   put offsets("<",pInsert) into tOAs
   put offsets(">",pInsert) into tOCs
   put tOAs&comma&tOCs into tOACs
   put the number of items of tOAs into tAngledMatter
   sort items of tOACs ascending numeric
   put offsets(comma,tOACs) into ots
   repeat with s = 2 to (the number of items of ots)-2 step 2
      put cr into char (item s of ots) of tOACs
   end repeat
   put 0 into tstartCount
   put empty into tTaglessIntervals
   repeat with x = 1 to (the number of lines of tOACs)-1 step 2
      put item 1 of line x of tOACs into tCharPrem
      if tCharPrem - 1 > tstartCount then 
         put tStartCount+1 &comma & tCharPrem-1 &cr after tTaglessIntervals
         put item 2 of line x+1 of tOACs into tStartCount
      else 
         put space &cr after tTaglessIntervals
      end if
   end repeat
   put pL - (item 2 of line-1 of tOACS) into tLastNum
   if tLastNum > 0 then 
      put (item 2 of line-1 of tOACS)+1 & comma & pL & cr after tTaglessIntervals
   else put space &cr after tTaglessIntervals
   put empty into tAllDelands
   put 0 into tCount
   repeat with y = 1 to (the number of lines of tOACs)-1 step 2
      add 1 to tCount
      put char (item 1 of line y of tOACs)+1 to (item 2 of line y of tOACs)-1 of pInsert into tTag
      if the number of words of tTag > 1 then put word 1 of tTag into tTag
      put char (item 2 of line y of tOACs)+1 to (item 1 of line y+1 of tOACs)-1 of pInsert into tDeland
      if line tCount of tTaglessIntervals is not space then 
         put (char (item 1 of line tCount of tTaglessIntervals) to (item 2 of line tCount of tTaglessIntervals) of pInsert) into tPrelLem
         if the number of words of tPrelLem > 1 then put word -2 to -1 of tPrelLem into tPrelLem
         put space&"!and!"&&tPrelLem && "before "&tTag&& tDeland after tAllDelands
      else 
         put (char (item 1 of line tCount+1 of tTaglessIntervals) to (item 2 of line tCount+1 of tTaglessIntervals) of pInsert) into tPrelLem
         if the number of words of tPrelLem > 1 then put word -2 to -1 of tPrelLem into tPrelLem
         put space&"!and!"&&tPrelLem && "after "&tTag&& tDeland after tAllDelands
      end if
   end repeat
   replace space&space with space in tAllDelands
   if "before gap " is in tAllDelands then put describeGap(pInsert,tAllDelands,"before") into tAllDelands
   if "after gap " is in tAllDelands then put describeGap(pInsert,tAllDelands,"after") into tAllDelands
   repeat with q = (the number of lines of tOACs)-1 down to 1 step -2
      put empty into char (item 1 of line q of tOACs) to (item 2 of line q+1 of tOACs) of pInsert
   end repeat
   replace space&space with space in pInsert
   return pInsert&"]"&&"inserted"&tAllDelands&cr&(the number of lines of tOACs)/2
end describeInnerAlts

function describeGap pGloss,pLemma,pPrevWord
   local tQ,sta,sto,tAttVal1,tReasonVal1,tAgentVal1,ca,co,tReason,tAgent
   put "=" into tQ
   if "<gap " is in pGloss and tQ is in pGloss then
      put offset("<gap ",pGloss) into sta
      put offset(">",pGloss,sta+5)-1 into sto
      put char sta+5 to sta+5+sto of pGloss into tAttVal1
   end if
   if tAttVal1 is not empty then
      put empty into tReasonVal1
      put empty into tAgentVal1
      if "reason=" is in tAttVal1 then 
         put offset("reason=",tAttVal1) into ca
         put offset(quote,tAttVal1,ca+8) into co
         put char ca+8 to ca+8+co-1 of tAttVal1 into tReasonVal1
      end if
      if "agent=" is in tAttVal1 then 
         put offset("agent=",tAttVal1) into ca
         put offset(quote,tAttVal1,ca+7) into co
         put char ca+7 to ca+7+co-1 of tAttVal1 into tAgentVal1
      end if
   end if
   put empty into tReason
   put empty into tAgent
   if tReasonVal1 is not empty then put  "gap due to "&tReasonVal1 into tReason
   if tAgentVal1 is not empty then put "caused by "&tAgentVal1 into tAgent
   if tAgent is not empty then
      if tReason is empty then put tAgent into tReason else put tReason && tAgent into tReason
   end if
   if pPrevWord is "before" then 
      replace "before gap" with "before "&tReason in pLemma
   else if pPrevWord is "after" then 
      replace "after gap" with "after "&tReason in pLemma
   end if
   return pLemma
end describeGap

function describeSubstJoins @pText
   local ots,tSubstJoinList,tSubTarget,tQu,ets,tListTg,tSJForm,tSJForm2,tXml,tAnchX,tAnchSta
   local tAnchSto,tTagTemp,tTagTemp2,tTaggedSta,tTaggedSto,tTagged,tStartAnch
   put offsets("<substJoin ",pText) into ots
   if ots = 0 then  return empty
   repeat for each item tSJ in ots
      put char tSJ+18 to offset("/>",pText,tSJ)+tSJ-1 of pText into tSubTarget
      put "#" into tQu
      put offsets(tQu,tSubTarget) into ets
      if ets = 0 then next repeat
      put empty into tListTg
      repeat with k = 1 to (the number of items of ets)-1
         put char (item k of ets)+1 to (item k+1 of ets)-2 of tSubTarget&comma after tListTg
      end repeat
      put char (item -1 of ets)+1 to -2 of tSubTarget after tListTg
      put empty into tSJForm
      put empty into tSJForm2
      repeat with z = 1 to the number of items of tListTg
         put "xml:id="&quote&item z of tListTg&quote into tXml
         put offset(tXml,pText) into tAnchX
         put item -1 of offsets("<",char 1 to tAnchX of pText)+1 into tAnchSta--
         if z = the number of items of tListTg then put tAnchsta+1 into tStartAnch--
         put offset(space,char tAnchSta to tAnchX of pText)+tAnchsta-2 into tAnchSto
         put char tAnchSta to tAnchSto of pText into tTagTemp
         put "</"&tTagTemp&">" into tTagTemp2
         put offset(">",char tAnchX to -1 of pText)+tAnchX into tTaggedSta
         put offset(tTagTemp2,char tTaggedSta to -1 of pText)+tTaggedSta-2 into tTaggedSto
         put char tTaggedSta to tTaggedSto of pText into tTagged
         if tTagTemp is "add" then put "addition of "&tTagged into line z of tSJForm
         else if tTagTemp is "del" then put "deletion of "&tTagged into line z of tSJForm
      end repeat
      if z > 2 then 
         put ", and " before line z of tSJForm
         repeat with k = 1 to z-2
            put comma & space after line k of tSJForm
         end repeat
      else if z = 2 then put " and " before line 2 of tSJForm
      put upper(char 1 of line 1 of tSJForm) into char 1 of line 1 of tSJForm
      repeat with m = 1 to z
         put line m of tSJForm after tSJForm2
      end repeat
      put tStartAnch&&cipherNumber(z)&"] "& tSJForm2 & " are part of a single textual intervention" & cr after tSubstJoinList
   end repeat
   return tSubstJoinList
end describeSubstJoins

function describeAlternations @pText
   local ots,tAlternatesList,tSubTarget,tQu,ets,ut,tListTg,tSJForm,tSJForm2,tXml,tAnchX,tAnchSta,tAlternates
   local tAnchSto,tTagTemp,tTagTemp2,tTaggedSta,tTaggedSto,tTagged,tStartAnch,tMode,tWeights,tInitial,tPhrase
   put offsets("<alt ",pText) into ots
   if ots = 0 then  return empty
   repeat for each item tSJ in ots
      put char tSJ+12 to offset("/>",pText,tSJ)+tSJ-1 of pText into tSubTarget
      replace "“" with quote in tSubTarget
      replace "”" with quote in tSubTarget
      put extractValueOfAttribute(tSubTarget,"mode") into tMode
      put extractValueOfAttribute(tSubTarget,"weights") into tWeights
      put "#" into tQu
      put offsets(tQu,tSubTarget) into ets
      put offset("mode",tSubTarget) into ut
      if ut = 0 then put "-2" into ut else put ut-3 into ut
      if ets = 0 then next repeat
      put empty into tListTg
      repeat with k = 1 to (the number of items of ets)-1
         put char (item k of ets)+1 to (item k+1 of ets)-2 of tSubTarget&comma after tListTg
      end repeat
      put char (item -1 of ets)+1 to ut of tSubTarget after tListTg
      put empty into tSJForm
      put empty into tSJForm2
      repeat with z = 1 to the number of items of tListTg
         put "xml:id="&quote&item z of tListTg&quote into tXml
         put offset(tXml,pText) into tAnchX
         put item -1 of offsets("<",char 1 to tAnchX of pText)+1 into tAnchSta--
         if z = the number of items of tListTg then put tAnchsta+1 into tStartAnch--
         put offset(space,char tAnchSta to tAnchX of pText)+tAnchsta-2 into tAnchSto
         put char tAnchSta to tAnchSto of pText into tTagTemp
         put "</"&tTagTemp&">" into tTagTemp2
         put offset(">",char tAnchX to -1 of pText)+tAnchX into tTaggedSta
         put offset(tTagTemp2,char tTaggedSta to -1 of pText)+tTaggedSta-2 into tTaggedSto
         put char tTaggedSta to tTaggedSto of pText into tTagged
         if tTagTemp is "seg" then 
            put tTagged && "(initial form)" into line z of tSJForm
            put tTagged into tInitial
         else if tTagTemp is "add" then 
            put tTagged && "(added alternate)" into line z of tSJForm
            put tTagged&cr after tAlternates
         end if
      end repeat
      delete char -1 of tAlternates
      if z > 2 then 
         put ", and " before line z of tSJForm
         repeat with k = 1 to z-2
            put comma & space after line k of tSJForm
         end repeat
      else if z = 2 then put " and " before line 2 of tSJForm
      repeat with m = 1 to z
         put line m of tSJForm after tSJForm2
      end repeat
      if tMode is"excl" then put "exclusive " into tMode
      else if tMode is"incl" then put "inclusive " into tMode
      if tWeights <> empty then put readWeights(tWeights,tInitial,tAlternates) into tPhrase
      put tStartAnch&&cipherNumberAlt(z)&"] "& tSJForm2 & " are "&tMode& "alternate forms the author left undecided" & tPhrase&cr after tAlternatesList
   end repeat
   return tAlternatesList
end describeAlternations

function readWeights pWeights,pInitialForm,pAlternateForm
   local tItemDel,tW,tX,tY,tZ,tPhrase,tAltNum,tAlternateForm2
   put the itemDel into tItemDel
   set the itemDel to "-"
   put the number of lines of pAlternateForm into tAltNum
   if tAltNum > 2 then return empty
   if tAltNum = 1 then
      put item 1 of pWeights into tX
      put item 2 of pWeights into tY
      put tX-tY into tZ
      if tZ = "-1" then put "; alternate form “"&pAlternateForm&"” is optimal." into tPhrase
      else if tZ = "1" then put "; initial form “"&pInitialForm&"” is optimal." into tPhrase
      else if tZ = 0 then put "; initial and alternate forms are equally acceptable." into tPhrase
      else if tZ < 1 and tZ > 0.5 then put "; initial form “"&pInitialForm&"” is strongly preferred to the alternate." into tPhrase
      else if tZ < 0.5 and tZ > 0 then put "; initial form “"&pInitialForm&"” is slightly preferred to the alternate." into tPhrase
      else if tZ < 0 and tZ > -(0.5) then put "; alternate form “"&pAlternateForm&"” is slightly preferred to the initial form." into tPhrase
      else if tZ < -(0.5) then put "; alternate form “"&pAlternateForm&"” is strongly preferred to the initial form." into tPhrase
      set the itemDel to tItemDel
      return tPhrase
   else if tAltNum = 2 then
      put line 2 of pAlternateForm into tAlternateForm2
      put line 1 of pAlternateForm into pAlternateForm
      put item 1 of pWeights into tX
      put item 2 of pWeights into tY
      put item 3 of pWeights into tW
      if tX = "1" then put "; initial form “"&pInitialForm&"” is optimal." into tPhrase
      else if tY = "1" then put "; first alternate form “"&pAlternateForm&"” is optimal." into tPhrase
      else if tW = "1" then put "; second alternate form “"&tAlternateForm2&"” is optimal." into tPhrase
      else if tX = "0.5" and tY = "0.5" then put "; initial and first alternate forms are  acceptable, but not the second alternate form." into tPhrase
      else if tX = "0.5" and tW = "0.5" then put "; initial and second alternate forms are  acceptable, but not the first alternate form." into tPhrase
      else if tY = "0.5" and tW = "0.5" then put "; first and second alternate forms are  acceptable, but not the initial form." into tPhrase
      set the itemDel to tItemDel
      return tPhrase
   end if
end readWeights

function cipherNumber pN
   local tNLC,tAlter
   put "One,Two,Three,Four,Five,Six,Seven,Eight,Nine,Ten,Eleven,Twelve" into tNLC
   if pN = 1 then put "alteration" into tAlter else put "alterations" into tAlter
   return item pN of tNLC && tAlter
end cipherNumber

function cipherNumberAlt pN
   local tNLC,tAltern
   put "One,Two,Three,Four,Five" into tNLC
   put "words or phrases in alternation" into tAltern
   return item pN of tNLC && tAltern
end cipherNumberAlt

function describeAddSpans @pText
   local ots,ets,tAddSpanList,tSpanList,tLeftSide,yt,tRightSide,tSpan,tPrevAftWord,tLemma,tGeforeAfter,tF,tL,tGloss,tBeforeAfter
   local sta,sto,tSubstDesc,tPrelimin,tEnding
   put offsets("<addSpan ",pText) into ots
   put offsets(quote&"addend",pText) into ets
   if ots = 0 then return empty
   repeat with s = 1 to the number of items of ots
      put item s of ots into tLeftSide
      put offset("/>",pText,item s of ets) into yt
      put (item s of ets)+yt+1 into tRightSide
      put char tLeftSide to tRightSide of pText into tSpan
      put findGoodLemma(pText,tLeftSide,tRightSide) into tPrevAftWord
      put line 1 of tPrevAftWord into tLemma
      if char -1 of tLemma is space then delete char-1 of tLemma
      put line 2 of tPrevAftWord into tBeforeAfter
      put offset("/>",tSpan) into tF
      put offset("<anchor",tSpan) into tL
      put char tF+2 to tL-1 of tSpan into tGloss
      if "<subst" is in tGloss then
         put offset("<subst",tGloss) into sta
         put offset("</subst>",tGloss)+7 into sto
         put describeInternalSubstitution(char sta to sto of tGloss,"<subst>") into tSubstDesc
         if sta <> 1 then put char 1 to sta-1 of tGloss into tPrelimin
         if char -1 of tPrelimin <> space then put space after tPrelimin
         if sto <> length(tGloss) then put char sto+1 to -1 of tGloss into tEnding
         put tPrelimin &"!before! "&tSubstDesc&"]" & tEnding into tGloss
      end if
      if the number of words of tGloss > 8 then put word 1 to 3 of tGloss &&"..."&&word -3 to -1 of tGloss into tGloss
      put (item s of ots)-1&space&tLemma&"]"&&tBeforeAfter&&"inserted ["&tGloss&"]"&cr after tAddSpanList
      put (item s of ots)-1&space&tSpan & cr after tSpanList
   end repeat
   return tAddSpanList&"|||"&tSpanList
end describeAddSpans

function describeDelSpans @pText
   local ots,ets,tDelSpanList,tSpanList,tLeftSide,yt,tRightSide,tSpan,tPrevAftWord,tLemma,tBeforeAfter,tF,tL,tGloss
   local sta,sto,tSubstDesc,tPrelimin,tEnding
   put offsets("<delSpan ",pText) into ots
   put offsets(quote&"delend",pText) into ets
   if ots = 0 then  return empty
   put empty into tDelSpanList
   put empty into tSpanList
   repeat with s = 1 to the number of items of ots
      put item s of ots into tLeftSide
      put offset("/>",pText,item s of ets) into yt
      put (item s of ets)+yt+1 into tRightSide
      put char tLeftSide to tRightSide of pText into tSpan
      put findGoodLemma(pText,tLeftSide,tRightSide) into tPrevAftWord
      put line 1 of tPrevAftWord into tLemma
      if char -1 of tLemma is space then delete char-1 of tLemma
      put line 2 of tPrevAftWord into tBeforeAfter
      put offset("/>",tSpan) into tF
      put offset("<anchor",tSpan) into tL
      put char tF+2 to tL-1 of tSpan into tGloss
      if "<subst" is in tGloss then
         put offset("<subst",tGloss) into sta
         put offset("</subst>",tGloss)+7 into sto
         put describeInternalSubstitution(char sta to sto of tGloss,"<subst>") into tSubstDesc
         if sta <> 1 then put char 1 to sta-1 of tGloss into tPrelimin
         if char -1 of tPrelimin <> space then put space after tPrelimin
         if sto <> length(tGloss) then put char sto+1 to -1 of tGloss into tEnding
         put tPrelimin &"!before! "&tSubstDesc&"]" & tEnding into tGloss
      end if
      if the number of words of tGloss > 8 then put word 1 to 3 of tGloss &&"..."&&word -3 to -1 of tGloss into tGloss
      put (item s of ots)-1&space&tLemma&"]"&&tBeforeAfter&&"deleted ["&tGloss&"]"&cr after tDelSpanList
      put (item s of ots)-1&space&tSpan & cr after tSpanList
   end repeat
   return tDelSpanList&"|||"&tSpanList
end describeDelSpans

function findGoodLemma @pText,pStartAngle,pEndAngle
   local tW1,tY1,tW2,tW3,tW,tW4,tRAs,tAfterWord,tPrevWord,ots,gh,el
   put (the number of words of char 1 to pStartAngle-1 of pText)-2 into tW1
   put (the number of words of char 1 to pEndAngle of pText) into tY1
   put length(word 1 to tW1 of pText) into tW2
   put length(char 1 to pEndAngle of pText) into tW3
   put pStartAngle-1 into tW
   if tW > 0 then  put char tW2+2 to tW of pText into tPrevWord else put empty into tPrevWord
   if "###" is in tPrevWord then
      put offsets("#",tPrevWord) into ots
      delete char 1 to (item -1 of ots) of tPrevWord
   end if
   if char tW3+1 of pText is not space and char tW3+1 of pText is not "<" and char tW3+1 of pText is not empty then 
      put word tY1 of pText into tW4
      put offsets(">",tW4) into tRAs
      if tRAs is not 0 then put char (item -1 of tRAs)+1 to -1 of tW4&space into tW4
   end if
   put tW4&word (tY1+1) to (tY1+2) of pText into tAfterWord
   if word-1 of tPrevWord ends with "</del>" then put empty into tPrevWord
   if "<" is in word 1 of tPrevWord then delete word 1 of tPrevWord
   if word -1 of tPrevWord begins with "<del>" then 
      put offset(word -1 of tPrevWord,tPrevWord) into gh
      delete char 1 to gh+4 of tPrevWord
   end if
   if cr is in tPrevWord then
      put offset(cr,tPrevWord) into el
      if el < length(tPrevWord) then put char el+1 to -1 of tPrevWord into tPrevWord else put char 1 to el-1 of tPrevWord into tPrevWord
   end if
   if "###" is in tPrevWord then
      put offsets("#",tPrevWord) into ots
      delete char 1 to (item -1 of ots) of tPrevWord
   end if
   if (char 1 of tPrevWord is "<") or (char -1 of tPrevWord is ">") then 
      put empty into tPrevWord
      if cr is in tAfterWord then
         put offset(cr,tAfterWord) into el
         if el > 1 then put char 1 to el-1 of tAfterWord into tAfterWord else put char el+1 to -1 of tAfterWord into tAfterWord
      end if
   end if
   if "<" is in tAfterWord then
      if "<" is in word 1 of tAfterWord then delete word 1 of tAfterWord else if "<" is in word 2 of tAfterWord then delete word 2 of tAfterWord
   end if
   if tPrevWord is not empty then return tPrevWord&cr&"before"
   else if tAfterWord is not empty then return tAfterWord&cr&"after"
end findGoodLemma

function describeTableAlterations @pText,pTableStartLine,pTableStopLine,pTableStartChar,pTableStopChar
   local tTableXMLText,tSubstLines,tAddLines,tDelLines,tSta,tSta2,tSto,tTableXmlID,tCellNumber,tDelText,
   local tAddText,tTableAlterationsList,tReplaceChars,tCellText,tBefText,tBef1,tAftText,tAft1,tGloss,tLemma
   put line pTableStartLine to pTableStopLine of pText into tTableXMLText
   put extractValueOfAttribute(line 1 of tTableXMLText,"xml:id") into tTableXmlID
   put lineOffsets("</subst>",tTableXMLText) into tSubstLines
   if tSubstLines <> 0 then
      repeat with k = 1 to the number of items of tSubstLines
         put extractValueOfAttribute(line (item k of tSubstLines) of tTableXMLText,"n") into tCellNumber
         put offset("<subst",line (item k of tSubstLines) of tTableXMLText) into tSta
         put length(line 1 to (item k of tSubstLines)-1 of tTableXMLText) + tSta into tSta2
         put offset("</subst>",line (item k of tSubstLines) of tTableXMLText)+7 into tSto
         put line 1 of extractDataAndDataLengthFromTag(line (item k of tSubstLines) of tTableXMLText,"del") into tDelText
         put line 1 of extractDataAndDataLengthFromTag(line (item k of tSubstLines) of tTableXMLText,"add") into tAddText
         put (tSta2+pTableStartChar-1)&&tTableXmlID&"-"&tCellNumber && tAddText&"] intl ab del "& tDelText & cr after tTableAlterationsList
         put empty into tReplaceChars
         repeat (tSto-tSta)+1
            put "%" after tReplaceChars
         end repeat
         put tReplaceChars into char tSta to tSto of line (item k of tSubstLines) of tTableXMLText
      end repeat
   end if
   put lineOffsets("</add>",tTableXMLText) into tAddLines
   if tAddLines <> 0 then
      repeat with k = 1 to the number of items of tAddLines
         put extractValueOfAttribute(line (item k of tAddLines) of tTableXMLText,"n") into tCellNumber
         put offset("<add",line (item k of tAddLines) of tTableXMLText) into tSta
         put length(line 1 to (item k of tAddLines)-1 of tTableXMLText) + tSta into tSta2
         put offset("</add>",line (item k of tAddLines) of tTableXMLText)+5 into tSto
         put line 1 of extractDataAndDataLengthFromTag(line (item k of tAddLines) of tTableXMLText,"add") into tAddText
         put (tSta2+pTableStartChar-1)&&tTableXmlID&"-"&tCellNumber && tAddText&"] inserted" & cr after tTableAlterationsList
         put empty into tReplaceChars
         repeat (tSto-tSta)+1
            put "%" after tReplaceChars
         end repeat
         put tReplaceChars into char tSta to tSto of line (item k of tAddLines) of tTableXMLText
      end repeat
   end if
   put lineOffsets("</del>",tTableXMLText) into tDelLines
   if tDelLines <> 0 then
      repeat with k = 1 to the number of items of tDelLines
         put extractValueOfAttribute(line (item k of tDelLines) of tTableXMLText,"n") into tCellNumber
         put offset("<add",line (item k of tDelLines) of tTableXMLText) into tSta
         put length(line 1 to (item k of tDelLines)-1 of tTableXMLText) + tSta into tSta2
         put offset("</add>",line (item k of tDelLines) of tTableXMLText)+5 into tSto
         put line 1 of extractDataAndDataLengthFromTag(line (item k of tDelLines) of tTableXMLText,"cell") into tCellText
         put line 1 of extractDataAndDataLengthFromTag(line (item k of tDelLines) of tTableXMLText,"del") into tDelText
         put offset("<del",tCellText) into tBef1
         if tBef1 > 2 then put char 1 to tBef1-1 of tCellText into tBefText
         if char -1 of tBefText is space then delete char -1 of tBefText
         put offset("</del>",tCellText) + 5 into tAft1
         if tAft1 < length(tCellText) then put char tAft1+1 to -1 of tCellText into tAftText
         if char 1 of tAftText is space then delete char 1 of tAftText
         if tBefText <> empty then 
            put "before del "&tDelText into tGloss
            put tBefText into tLemma
         else if tBefText is empty and tAftText <> empty then 
            put " after del "&tAftText into tGloss
            put tAftText into tLemma
         else  if tBefText is empty and tAftText is empty then 
            put tDelText &&"deleted" into tGloss
            put "empty cell" into tLemma
         end if
         put (tSta2+pTableStartChar-1)&&tTableXmlID&"-"&tCellNumber && tLemma&"] " & tGloss & cr after tTableAlterationsList
         put empty into tReplaceChars
         repeat (tSto-tSta)+1
            put "%" after tReplaceChars
         end repeat
         put tReplaceChars into char tSta to tSto of line (item k of tDelLines) of tTableXMLText
      end repeat
   end if
   return tTableAlterationsList
end describeTableAlterations


##TOOLTIP:
##Click to create a list of syntactical alteration descriptions.
##It also generates more pragmatic descriptions afterward.
##This complex operation may take some time.



#####################
#####################

## Script of button "Import”, ID 1074 of CARD 1 of STACK STEP Transcription Module

on mouseUp pClickNum,pPath
   local tfilePath,Tixt
   if the hilite of btn "Example" of cd 1 is true then
      answer "You are in “Example” mode. Click the Example button to turn it off." as sheet
      exit to top
   end if
   if fld id 1004 of cd 1 of stack "STEP Transcription Module" <> empty then
      answer "Importing an archive will replace the current content of all fields. You should first archive all contents if you do not want to lose them by clicking the “Archive...” button. Then click the “Clear All...” button to empty all fields. At that point you'll be ready for importing a new text." with "Proceed anyway" or "Cancel" as sheet
      if it is "Cancel" then exit mouseUp
      else send "mouseUp "&"1,Skip" to btn "Clear All…" of cd 1 of stack "STEP Transcription Module"
   end if
   if pPath is empty then 
      answer file "Locate the STEP Transcription data file you want to import." with type "HTML|htm,html,step"
      if (the result is "Cancel") or (it = empty) then exit to top
      put it into tfilePath
   else put pPath into tfilePath
   open file tfilePath
   read from file tfilePath until EOF
   put it into Tixt
   close file tfilePath
   if Tixt is "" then
      answer "The file you selected turns out to be empty. Nothing was imported."
      exit mouseUp
   end if
   if "Fld id 1004" is not in line 1 to 2 of Tixt then
      answer "The file you selected is not a STEP archive. Importation is aborted."
      exit mouseUp
   end if
   set the cursor to watch
   lock screen
   distributeData Tixt
   put empty into fld id 1014 of cd 1 of stack "STEP Transcription Module"
   recordArchivePath tfilePath
   unlock screen
   answer "Importation done."
end mouseUp

on recordArchivePath pFP
   local tFPL
   put the cFilePathList of btn id 1074 of cd 1 of stack "STEP Transcription Module" into tFPL
   if tFPL is empty then put pFP into tFPL else put cr & pFP after tFPL
   put stripDuplicates(tFPL) into tFPL
   set the cFilePathList of btn id 1074 of cd 1 of stack "STEP Transcription Module" to tFPL
   fillOpenRecentArchives
end recordArchivePath pFP

on distributeData @Tixt
   local tIDs,tKeys,tStackName,tStart,tStop,tText,tProp,tControlID,tPC,tToLocate1,tToLocate2,tCustomPropList,tCust
   put "1004,1017,1026,1029,1041,1044,1049,1064,1067,1109,1112,1126,1139,1151,1154,1157,1163,1171,1174,1206,1207,1208,1209,1210,1211,1240" into tIDs
   repeat for each item tNum in tIDs
      loadIntoField tNum,Tixt
   end repeat
   put "cAnchoredNoteValues|fld id 1004,cPBValues|fld id 1004,cSelfClosingTagsList|fld id 1004,cPageBreakFormat|fld id 1004,cSyntacticalDescriptionHolder|fld id 1017,"&\
   "cPragmaTranspoHolder|fld id 1017,cTranspositionsHolder|fld id 1017,cSpanList|fld id 1017,cAltIndex|btn id 1020,cAltIndex2|btn id 1020,cAnchoredIndex|btn id 1020,"&\
   "cBeforeAfterTranspo|btn id 1020,cAllRunAltsLoc|fld id 1126,cAllIndentedAltsLoc|fld id 1126,cAllIndentedAltsLocWithoutSC|fld id 1126,cFirstSign|fld id 1126,cSecondSign|fld id 1126" into tCustomPropList
   put "STEP Transcription Module" into tStackName
   delete char -1 of tCustomPropList
   repeat for each item tCust in tCustomPropList
      set the itemDel to "|"
      put item 1 of tCust into tProp
      put item 2 of tCust into tControlID
      set the itemDel to comma
      put tProp&&"of"&&tControlID into tPC
      put "<p>"&tPC&"</p>" into tToLocate1
      put char 1 to 3 of tToLocate1 & "//"&tPC&"//" & char -4 to -1 of tToLocate1 into tToLocate2
      set the wholeMatches to true
      put lineOffset(tToLocate1,Tixt) into tStart
      if tStart is 0 then next repeat
      set the wholeMatches to true
      put lineOffset(tToLocate2,Tixt) into tStop
      if tStop is 0 then next repeat
      put line tStart+1 to tStop-1 of Tixt into tText
      if tText is not empty and tText is not cr and tText is not "<p></p>" then
         if "fld" is in tPC then
            if (there is a fld id (word -1 of tControlID) of cd 1 of stack tStackName) then 
               set the tProp of fld id (word -1 of tControlID) of cd 1 to HTMLtoText(tText)
            end if
         else if "btn" is in tPC then
            if (there is a btn id (word -1 of tControlID) of cd 1 of stack tStackName) then 
               set the tProp of btn id (word -1 of tControlID) of cd 1 to HTMLtoText(tText)
            end if
         end if
      end if
   end repeat
   put "<p>cPageNumberDisplay</p>" into tToLocate1
   put "<p>//cPageNumberDisplay//</p>" into tToLocate2
   set the wholeMatches to true
   put lineOffset(tToLocate1,Tixt) into tStart
   if tStart <> 0 then
      put lineOffset(tToLocate2,Tixt) into tStop
      if tStop <> 0 then
         set the cPageNumberDisplay of stack "Customize Pagebreak Self-Closing Tag" to HTMLtoText(line tStart+1 to tStop-1 of Tixt)
      end if
   end if
end distributeData

on distributeDroppedData Tixt
   local tIDs,tKeys,tStackName,tStart,tStop,tText,tProp,tControlID,tPC,tToLocate1,tToLocate2,tCustomPropList,tCust
   put "1004,1017,1026,1029,1041,1044,1049,1064,1067,1109,1112,1126,1139,1151,1154,1157,1163,1171,1174,1206,1207,1208,1209,1210,1211,1240" into tIDs
   repeat for each item tNum in tIDs
      loadIntoField tNum,Tixt
   end repeat
   put "cAnchoredNoteValues|fld id 1004,cPBValues|fld id 1004,cSelfClosingTagsList|fld id 1004,cPageBreakFormat|fld id 1004,cSyntacticalDescriptionHolder|fld id 1017,cPragmaTranspoHolder|fld id 1017,"&\
   "cTranspositionsHolder|fld id 1017,cSpanList|fld id 1017,cAltIndex|btn id 1020,cAltIndex2|btn id 1020,cAnchoredIndex|btn id 1020,cBeforeAfterTranspo|btn id 1020,cAllRunAltsLoc|fld id 1126,"&\
   "cAllIndentedAltsLoc|fld id 1126,cAllIndentedAltsLocWithoutSC|fld id 1126,cFirstSign|fld id 1126,cSecondSign|fld id 1126" into tCustomPropList
   put "STEP Transcription Module" into tStackName
   delete char -1 of tCustomPropList
   repeat for each item tCust in tCustomPropList
      set the itemDel to "|"
      put item 1 of tCust into tProp
      put item 2 of tCust into tControlID
      set the itemDel to comma
      put tProp&&"of"&&tControlID into tPC
      put "<p>"&tPC&"</p>" into tToLocate1
      put "<p>//"&tPC&"//</p>" into tToLocate2
      set the wholeMatches to true
      put lineOffset(tToLocate1,Tixt) into tStart
      if tStart is 0 then next repeat
      set the wholeMatches to true
      put lineOffset(tToLocate2,Tixt) into tStop
      if tStop is 0 then next repeat
      put line tStart+1 to tStop-1 of Tixt into tText
      if tText is not empty and tText is not cr and tText is not "<p></p>" then
         if "fld" is in tPC then
            if (there is a fld id (word -1 of tControlID) of cd 1 of stack tStackName) then 
               set the tProp of fld id (word -1 of tControlID) of cd 1 to HTMLtoText(tText)
            end if
         else if "btn" is in tPC then
            if (there is a btn id (word -1 of tControlID) of cd 1 of stack tStackName) then 
               set the tProp of btn id (word -1 of tControlID) of cd 1 to HTMLtoText(tText)
            end if
         end if
      end if
   end repeat
   put "<p>cPageNumberDisplay</p>" into tToLocate1
   put "<p>//cPageNumberDisplay//</p>" into tToLocate2
   set the wholeMatches to true
   put lineOffset(tToLocate1,Tixt) into tStart
   if tStart <> 0 then
      put lineOffset(tToLocate2,Tixt) into tStop
      if tStop <> 0 then
         set the cPageNumberDisplay of stack "Customize Pagebreak Self-Closing Tag" to HTMLtoText(line tStart+1 to tStop-1 of Tixt)
      end if
   end if
end distributeDroppedData

on loadIntoField tIDNum,@Tixt
   local tStackName,tToLocate1,tToLocate2,tStart,tStop,tText
   put "STEP Transcription Module" into tStackName
   put "<p>"&"Fld id "&tIDNum&" of cd 1 of stack "&tStackName&"</p>" into tToLocate1
   put char 1 to 3 of tToLocate1 & "//Fld id "&tIDNum&" of cd 1 of stack "&tStackName&"//" & char -4 to -1 of tToLocate1 into tToLocate2
   set the wholeMatches to true
   put lineOffset(tToLocate1,Tixt) into tStart
   if tStart is 0 then exit loadIntoField
   set the wholeMatches to true
   put lineOffset(tToLocate2,Tixt) into tStop
   if tStop is 0 then exit loadIntoField
   put line tStart+1 to tStop-1 of Tixt into tText
   if tText is not empty and tText is not cr and tText is not "<p></p>" and (there is a fld id tIDNum of cd 1 of stack tStackName) then 
      if "<p>" is in tToLocate1 then
         set the cSavedFieldHTMLContent of fld id tIDNum of cd 1 of stack tStackName to tText
         put HTMLtoText(tText) into tText
      end if
     set the HTMLText of fld id tIDNum of cd 1 of stack tStackName to tText
   end if
end loadIntoField

private function HTMLtoText pHTMText
   set the HTMLText of fld id 1014 of cd 1 of stack "STEP Transcription Module" to pHTMText
   return the text of fld id 1014 of cd 1 of stack "STEP Transcription Module"
end HTMLtoText


##TOOLTIP:
##Import an archive file created by the Archive button.



#####################
#####################

## Script of button "Color all tags”, ID 1021 of CARD 1 of STACK STEP Transcription Module

on mouseUp2 pIDFld
   local tIDList,tText,tLefts,tRights,tTagAngles,tTagColorSet
   lock screen
   set the cursor to watch
   if pIDFld < 1000 then put empty into pIDFld
   if pIDFld is not empty then
      if pIDFld is not among the items of "1004,1041,1126,1139,1151,1154,1163" then 
         put word 3 of the focusedObject into tIDList
         if tIDList is not among the items of "1004,1041,1126,1139,1151,1154,1163" then
            exit mouseUp2
         end if
      else 
         put pIDFld into tIDList
      end if
   else if pIDFld is empty then
      put whichTranscriptField() into tIDList
      if tIDList = 1004 then put "1004,1041,1151" into tIDList
   end if
   repeat for each item tIDNum in tIDList
      if tIDNum is among the items of "1004,1041,1151" then
         if the cHiddenTags of fld id tIDNum of cd 1 of stack "STEP Transcription Module" is true then set the cHiddenTags of fld id tIDNum  of cd 1 of stack "STEP Transcription Module" to false
      end if
      set the textColor of char 1 to -1 of fld id tIDNum of cd 1 of stack "STEP Transcription Module" to empty
      set the backGroundColor of char 1 to -1 of fld id tIDNum  of cd 1 of stack "STEP Transcription Module" to empty
      put fld id tIDNum of cd 1 of stack "STEP Transcription Module" into tText
      put offsets("<",tText) into tLefts
      put offsets(">",tText) into tRights
      put tLefts,tRights into tTagAngles
      sort items of tTagAngles numeric ascending
      repeat with z = 1 to (the number of items of tTagAngles)-1 step 2
         set the textColor of char (item z of tTagAngles) to (item z+1 of tTagAngles) of fld id tIDNum  of cd 1 of stack "STEP Transcription Module" to the cGeneralColor of cd 1 of stack "STEP Transcription Module"
      end repeat
      replace "<delSpan" with "{delSpan" in tText
      replace "<addSpan" with "{addSpan" in tText
      replace "<damageSpan" with "{damageSpan" in tText
      replace "<substJoin" with "{substJoin" in tText
      replace "<lb " with "{lb " in tText
      replace "/>" with "]}" in tText
      replace "<anchor " with "{anchor " in tText
      replace "<pb " with "{pb " in tText
      replace "<ptr " with "{ptr " in tText
      replace "<alt " with "{alt " in tText
      put the cTagColorSet of cd 1 of stack "STEP Transcription Module" into tTagColorSet
      colorizeInHouseMessages tIDNum,tText
      colorizeAttributes tIDNum,tText
      colorizeValues tIDNum,tText
      colorizeSelfClosingTags tIDNum,tText,tTagColorSet
      decolorizeEqualSigns tIDNum,tText
      repeat for each line tTagLine in tTagColorSet
         if "</"&(item 1 of tTagLine)&">" is in tText then colorizeTags item 1 of tTagLine,tIDNum,item 2 to -1 of tTagLine,tText
      end repeat
   end repeat
   set the enabled of btn id 1224  of cd 1 of stack "STEP Transcription Module" to true
   unlock screen
end mouseUp2

on mouseUp pIDFld
   local tIDList,tText,tText2,tHText,tLefts,tRights,tTagAngles,tTagColorSet,tTagColorSet2,tTagLine,tNum,tGenColor,po,po1,tSCList,tSC
   local tRegTags,tAllColorTags,tAllTagNames,tSCTagNames,tSCTagsList,tNewRegTags,tTagName,tN1,tN2,tN3,tN4,tN5,tVScroll,tCustomProp
   set the cursor to watch
   lock screen
   if the enabled of btn id 1224 of cd 1 of stack "STEP Transcription Module" is false then
      put "1004,1041,1151" into tIDList
      repeat for each item tID in tIDList
         if the visible of fld id tID of cd 1 of stack "STEP Transcription Module" and the cHiddenTags of fld id tID of cd 1 of stack "STEP Transcription Module" is true then 
            put "cTempColoredText"&tID into tCustomProp
            set the HTMLText of fld id tID of cd 1 of stack "STEP Transcription Module" to the tCustomProp of btn id 1224 of cd 1 of stack "STEP Transcription Module" 
            set the cHiddenTags of fld id tID of cd 1 of stack "STEP Transcription Module" to false
         end if
      end repeat
      set the enabled of btn id 1224  of cd 1 of stack "STEP Transcription Module" to true
      exit mouseUp
   end if
   if pIDFld < 1000 then put empty into pIDFld
   if pIDFld is not empty then
      if pIDFld is not among the items of "1004,1041,1126,1139,1151,1154,1163" then 
         put word 3 of the focusedObject into tIDList
         if tIDList is not among the items of "1004,1041,1126,1139,1151,1154,1163" then
            exit mouseUp
         end if
      else 
         put pIDFld into tIDList
      end if
   else if pIDFld is empty then
      put whichTranscriptField() into tIDList
      if tIDList = 1004 then put "1004,1041,1151" into tIDList
   end if
   repeat for each item tIDNum in tIDList
      if tIDNum is among the items of "1004,1041,1151" then
         if the cHiddenTags of fld id tIDNum of cd 1 of stack "STEP Transcription Module" is true then set the cHiddenTags of fld id tIDNum  of cd 1 of stack "STEP Transcription Module" to false
      end if
      put the vScroll of fld id tIDNum into tVScroll
      set cursor to busy
      gatherTagsAttributesValues tIDNum
      set the textColor of char 1 to -1 of fld id tIDNum of cd 1 of stack "STEP Transcription Module" to empty
      set the backGroundColor of char 1 to -1 of fld id tIDNum  of cd 1 of stack "STEP Transcription Module" to empty
      put the text of fld id tIDNum of cd 1 of stack "STEP Transcription Module" into tText
      put tText into tText2
      if " </" is in tText then
         repeat until " </" is not in tText
            put matchText(tText," </([^<]+)>",tN1) into tN2
            if tN2 is true then
               put matchChunk(tText,"( </[^<]+>)",tN3,tN4) into tN5
               put "</"&tN1&"> " into char tN3 to tN4 of tText
            end if
         end repeat
      end if
      replace space&space with space in tText
      if tText <> tText2 then put tText into fld id tIDNum of cd 1
      put the HTMLText of fld id tIDNum of cd 1 of stack "STEP Transcription Module" into tHText
      put "delSpan,addSpan,damageSpan,substJoin,pb,lb,anchor,ptr,alt,gap,handshift,space,graphic" into tSCList
      set cursor to busy
      repeat for each item tSC in tSCList
         replace "&lt;"&tSC with "{"&tSC in tHText
      end repeat
      replace "/&gt;" with "]}" in tHText
      put the cTagColorSet of cd 1 of stack "STEP Transcription Module" into tTagColorSet
      put tTagColorSet into tTagColorSet2
      replace cr with comma in tTagColorSet2
      colorizeInHouseHMessages tHText
      set cursor to busy
      put the cSelfClosingTagNamesList of fld id tIDNum of cd 1 of stack "STEP Transcription Module" into tSCTagNames
      put the cSelfClosingTagsList of fld id tIDNum of cd 1 of stack "STEP Transcription Module" into tSCTagsList
      colorizeHSelfClosingTags tHText,tTagColorSet,tSCTagNames,tSCTagsList
      set cursor to busy
      colorizeHAttributes tHText,(the cAttributeNamesList of fld id tIDNum of cd 1 of stack "STEP Transcription Module")
      set cursor to busy
      colorizeHValues tHText,(the cValueNamesList of fld id tIDNum of cd 1 of stack "STEP Transcription Module")
      set cursor to busy
      put RGBtoHexaColor(the cGeneralColor of cd 1 of stack "STEP Transcription Module") into tGenColor
      put the cNamesOfOpeningClosingTags of fld id tIDNum of cd 1 of stack "STEP Transcription Module" into tRegTags
      put the cNamesOfAllTags of fld id tIDNum of cd 1 of stack "STEP Transcription Module" into tAllTagNames
      set the wholematches to true
      repeat for each item tTagName in tAllTagNames
         if tTagName is not among the items of tSCTagNames then
            if tTagName is among the items of tTagColorSet2 then
               set the wholematches to true
               put item itemOffset(tTagName,tTagColorSet2) + 1 of tTagColorSet2 into tNum
               set the wholematches to false
               put line lineOffset(tTagName&comma&tNum,tTagColorSet) of tTagColorSet into tTagLine
               if "&lt;/"&tTagName&"&gt;" is in tHText then 
                  colorizeHTags tTagName,RGBtoHexaColor(item 2 to -1 of tTagLine),tHText
               end if
            else put tTagName & comma after tNewRegTags
         end if 
      end repeat
      set cursor to busy
      repeat for each item tRegTag in tNewRegTags
         colorizeHTags tRegTag,tGenColor,tHText
      end repeat
      set the HTMLText of fld id tIDNum  of cd 1 of stack "STEP Transcription Module" to tHText
      set the vScroll of fld id tIDNum to tVScroll
   end repeat
   set the enabled of btn id 1224  of cd 1 of stack "STEP Transcription Module" to true
   unlock screen
end mouseUp

on gatherTagsAttributesValues pIDNum
   local ut,ut1,ut2,yt,tag,tList,tList2,tList3,tList4,tList5,tList6,tAttrib,tAttributes,tValues,tSign1,tChars
   get fld id pIDNum of cd 1
   put "%•@€¶§∞ºª∂∑√≤«ÆÚ∏Ø" into tChars
   repeat with i = 1 to length(tChars)
      if char i of tChars is not in it then 
         put char i of tChars into tSign1
         exit repeat
      end if
   end repeat
   replace "<" with tSign1&"<" in it
   replace ">" with ">"&tSign1 in it
   set the itemDel to tSign1
   --filter items of it with regex pattern "<[/\w\d\s=':.\-;#"&quote&"^>]+>" into ut
   put listLocsOfAllItems(it,tSign1) into ut1
   filter items of it with regex pattern "<[^>]+>" into ut
   filter lines of ut1 with regex pattern "<[^>]+>" into ut2
   set the cAllTagsList of fld id pIDNum of cd 1 of stack "STEP Transcription Module" to ut
   repeat for each item tag in ut
      if tag is not among the items of tList then put tag&comma after tList
   end repeat
   delete char -1 of tList
   set the cSingularTagsOfAllKindsList of fld id pIDNum of cd 1 of stack "STEP Transcription Module" to tList
   set the itemDel to comma
   repeat for each item tag in tList
      if trueword 1 of tag is not among the items of tList2 then put trueword 1 of tag&comma after tList2
   end repeat
   delete char -1 of tList2
   set the cNamesOfAllTags of fld id pIDNum of cd 1 of stack "STEP Transcription Module" to numericDescendingSort(tList2,"item")
   repeat for each item tag in tList
      if tag begins with "</" then 
         put tag&comma after tList6
         if  trueword 1 of tag is not among the items of tList3 then put trueword 1 of tag&comma after tList3
      end if
   end repeat
   delete char -1 of tList3
   delete char -1 of tList6
   set the cNamesOfOpeningClosingTags of fld id pIDNum of cd 1 of stack "STEP Transcription Module" to numericDescendingSort(tList3,"item")
   set the cClosedTags of fld id pIDNum of cd 1 of stack "STEP Transcription Module" to numericDescendingSort(tList6,"item")
   repeat for each item tag in tList
      if tag ends with "/>" then 
         if tag is not among the items of tList5 then put tag&comma after tList5
         if  trueword 1 of tag is not among the items of tList4 then put trueword 1 of tag&comma after tList4
      end if
   end repeat
   delete char -1 of tList4
   delete char -1 of tList5
   set the cSelfClosingTagNamesList of fld id pIDNum of cd 1 of stack "STEP Transcription Module" to numericDescendingSort(tList4,"item")
   set the cSelfClosingTagsList of fld id pIDNum of cd 1 of stack "STEP Transcription Module" to numericDescendingSort(tList5,"item")
   filter items of tList with regex pattern " [\w\d=:_-]" into tAttrib
   put findAllAttributes(tAttrib) into tAttributes
   set the cAttributeNamesList of fld id pIDNum  of cd 1 of stack "STEP Transcription Module" to numericDescendingSort(tAttributes,"line")
   put findAllValues(tAttrib) into tValues
   filter tValues without empty
   set the cValueNamesList of fld id pIDNum  of cd 1 of stack "STEP Transcription Module" to numericDescendingSort(tValues,"line")
end gatherTagsAttributesValues

function identifyAllRegularTags pText
   local tAllRegTags,tTag,ut,tItem
   get offsets("</",pText)
   if it = 0 then return empty
   repeat for each item tItem in it
      put char tItem to offset(">",pText,tItem)+tItem of pText into ut
      put trueword 1 of ut into tTag
      if tTag&cr is not in tAllRegTags then put tTag & cr after tAllRegTags
   end repeat
   delete char -1 of tAllRegTags
   return tAllRegTags
end identifyAllRegularTags

private function whichTranscriptField
   local tFldList
   put "1004,1126,1163" into tFldList
   repeat for each item tFld in tFldLIst
      if the visible of fld id tFld then return tFld
   end repeat
end whichTranscriptField

on colorizeTags pTag,pIDNum,pColor,@pText
   local tLA1,tLA2,tRA,tLeftsA,tLeftsB,tLefts,tRights,yt,tL
   if pTag is among the items of "addSpan,delSpan,damageSpan,substJoin,alt" then exit colorizeTags
   put "<"&pTag&">" into tLA1
   put "<"&pTag&space into tLA2
   put "</"&pTag&">" into tRA
   put offsets(tLA1,pText) into tLeftsA
   put offsets(tLA2,pText) into tLeftsB
   put empty into tLefts
   if tLeftsA <> 0 then put tLeftsA into tLefts
   if tLeftsB <> 0 then
      if tLefts is empty then put tLeftsB into tLefts else put comma&tLeftsB after tLefts
   end if
   if tLefts is not empty then sort items of tLefts ascending numeric
   put offsets(tRA,pText) into tRights
   put length(pTag) into tL
   if tLefts is not empty then
      repeat with z = 1 to (the number of items of tLefts)
         set the textColor of char (item z of tLefts) to (item z of tLefts)+tL+1 of fld id pIDNum  of cd 1 of stack "STEP Transcription Module" to pColor
         if item z of tLefts is among the items of tLeftsB then
            put offset(">",pText,(item z of tLefts)) into yt
            set the textColor of char (item z of tLefts) + yt of fld id pIDNum of cd 1 of stack "STEP Transcription Module" to pColor
         end if
      end repeat
      repeat with z = 1 to (the number of items of tRights)
         set the textColor of char (item z of tRights) to (item z of tRights)+tL+2 of fld id pIDNum  of cd 1 of stack "STEP Transcription Module" to pColor
      end repeat
   end if
end colorizeTags

on colorizeHTags pTag,pColor,@pHText
   local tLA1,tLA2,tRA,tLefts,yt
   if pTag is among the items of "addSpan,delSpan,damageSpan,substJoin,alt" then exit colorizeHTags
   put "&lt;"&pTag&"&gt;" into tLA1
   put "&lt;"&pTag&space into tLA2
   put "&lt;/"&pTag&"&gt;" into tRA
   replace tRA with "<font color="&quote&pColor&quote&">"&tRA&"</font>" in pHText
   replace tLA1 with "<font color="&quote&pColor&quote&">"&tLA1&"</font>" in pHText
   replace tLA2 with "<font color="&quote&pColor&quote&">"&tLA2&"</font>" in pHText
   put offsets(tLA2&"</font>",pHText) into tLefts
   if tLefts <> 0 then 
      sort items of tLefts descending numeric
      repeat for each item z in tLefts
         put offset("&gt;",pHText,z) into yt
         put "<font color="&quote&pColor&quote&">&gt;</font>" into char (z + yt) to (z + yt + 3) of pHText
      end repeat
   end if
end colorizeHTags

on colorizeInHouseMessages pIDNum,@pText
   local tLA,tRA,tLefts,tRights
   put "<!--" into tLA
   put "-->" into tRA
   put offsets(tLA,pText) into tLefts
   put offsets(tRA,pText) into tRights
   if tLefts is not empty and tLefts <> 0 then
      repeat with z = 1 to (the number of items of tLefts)
         set the textColor of char (item z of tLefts) to (item z of tRights)+2 of fld id pIDNum  of cd 1 of stack "STEP Transcription Module" to "black"
         set the backGroundColor of char (item z of tLefts) to (item z of tRights)+2 of fld id pIDNum  of cd 1 of stack "STEP Transcription Module" to "#FEC0A3"
      end repeat
   end if
end colorizeInHouseMessages

on colorizeInHouseHMessages @pHText
   replace "&lt;!--" with "<font color="&quote&"#000000"&quote&" bgcolor="&quote&"#FEC0A3"&quote&">&lt;!--" in pHText
   replace "--&gt;" with "--&gt;</font>" in pHText
end colorizeInHouseHMessages

on colorizeAttributes pIDNum,@pText
   local tLA,tWordNum,tCh
   put offsets("="&quote,pText) into tLA
   if tLA <> 0 then 
      repeat with x = 1 to the number of items of tLA
         put the number of segments of char 1 to (item x of tLA) of pText into tWordNum
         put the charIndex of word tWordNum of fld id pIDNum of cd 1 of stack "STEP Transcription Module" into tCh
         set the textColor of char tCh to (item x of tLA)/*-1*/ of fld id pIDNum  of cd 1 of stack "STEP Transcription Module" to the cAttributeColor of cd 1 of stack "STEP Transcription Module"
      end repeat
   end if
end colorizeAttributes

on colorizeHAttributes @pHText,pAttribNames
   local tAttributeColor,tHText,tAllAttribs
   if pAttribNames is empty then exit colorizeHAttributes
   put RGBtoHexaColor(the cAttributeColor of cd 1 of stack "STEP Transcription Module") into tAttributeColor
   repeat for each line tAttribute in pAttribNames
      if tAttribute is among the items of "color,bgcolor" then next repeat
      replace tAttribute&"="&quote with "<font color="&quote&tAttributeColor&quote&">"&(trueword 1 of tAttribute)&"=</font>"&quote in pHText
   end repeat
end colorizeHAttributes

function findAllAttributes pHText
   local tFoundAtt,tFullAttList,tBs,tLength
   repeat until "="&quote is not in pHText
      put findAttributes(pHText) into tFoundAtt
      if tFoundAtt is empty then exit repeat
      put tFoundAtt & cr after tFullAttList
      put length(tFoundAtt) + 2 into tLength
      put empty into tBs
      repeat tLength
         put "B" after tBs
      end repeat
      replace space&tFoundAtt&"=" with tBs in pHText
   end repeat
   if char -1 of tFullAttList is cr then delete char -1 of tFullAttList
   return tFullAttList
end findAllAttributes

function findAttributes pString
   local tAttReg,tAttName,tZ
   put " ([\w:*]+)="&quote into tAttReg
   put matchText(pString,tAttReg,tAttName) into tZ
   if tZ is true then return tAttName else return empty
end findAttributes

function findAllValues pHText
   local tFoundVal,tFullValList,tBs,tLength
   repeat until quote is not in pHText
      put findValues(pHText) into tFoundVal
      if tFoundVal is empty then exit repeat
      put tFoundVal & cr after tFullValList
      put length(tFoundVal) + 2 into tLength
      put empty into tBs
      repeat tLength
         put "B" after tBs
      end repeat
      replace quote&tFoundVal&quote with tBs in pHText
   end repeat
   if char -1 of tFullValList is cr then delete char -1 of tFullValList
   return tFullValList
end findAllValues

function findValues pString
   local tValReg,tValName,tZ
   put quote &"([^"&quote&"]*)" & quote into tValReg
   put matchText(pString,tValReg,tValName) into tZ
   if tZ is true then return tValName else return empty
end findValues

function numericDescendingSort pString,pChunkType
   if pChunkType is "item" then sort items of pString numeric descending by length(each)
   else if pChunkType is "line" then sort lines of pString numeric descending by length(each)
   return pString
end numericDescendingSort

function RGBtoHexaColor pRGB -- three comma-separated numbers, each <= 255
   if char 1 of pRGB is "#" then return pRGB
   if trueword 1 of item 1 of pRGB is not an integer then return RGBtoHexaColor(colorNameToRGB(pRGB))
   return format("#%02X%02X%02X",item 1 of pRGB,item 2 of pRGB,item 3 of pRGB)
end RGBtoHexaColor
   
function colorNameToRGB pColorName
   local tList
   put the cRGBtoColorNameList of btn id 1021 of cd 1 of stack "STEP Transcription Module" into tList
   replace cr with "|" in tList
   set the itemDel to "|"
   set the wholeMatches to true
   get itemOffset(pColorName,tList)
   if it is 0 then return empty
   return item it-1 of tList
end colorNameToRGB

on colorizeValues3 pIDNum,@pText
   local tLA,tRA1,tRA2,tRA3,tRA
   put offsets("="&quote,pText) into tLA
   if tLA = 0 then exit colorizeValues3
   put empty into tRA1
   put empty into tRA2
   put empty into tRA3
   put offsets(quote&">",pText) into tRA1
   put offsets(quote&space,pText) into tRA2
   put offsets(quote&"]}",pText) into tRA3
   if tRA1 <> 0 and tRA1 is not empty then put tRA1 into tRA
   if tRA2 <> 0 and tRA2 is not empty then
      if tRA is empty then put tRA2 into tRA else put comma&tRA2 after tRA
   end if
   if tRA3 <> 0 and tRA3 is not empty then 
      if tRA is empty then put tRA3 into tRA else put comma&tRA3 after tRA
   end if
   if char 1 of tRA is comma then delete char 1 of tRA
   if char -1 of tRA is comma then delete char -1 of tRA
   sort items of tRA ascending numeric
   repeat with x = 1 to the number of items of tLA
      set the textColor of char (item x of tLA)+1 to (item x of tRA) of fld id pIDNum  of cd 1 of stack "STEP Transcription Module" to RGBtoHexaColor(the cValueColor of cd 1 of stack "STEP Transcription Module")
   end repeat
end colorizeValues3

on colorizeValues pIDNum,pText
   local tLA,tRA1,tRA2,tRA3,tRA,tTempSeg,ot
   put offsets("="&quote,pText) into tLA
   if tLA = 0 then exit colorizeValues
   repeat with x = 1 to the number of items of tLA
      put char (item x of tLA)+2 to (item x of tLA)+80 of pText into tTempSeg
      put offset(quote,tTempSeg) into ot
      set the textColor of char (item x of tLA)+1 to (item x of tLA)+ot+2 of fld id pIDNum  of cd 1 of stack "STEP Transcription Module" to the cValueColor of cd 1 of stack "STEP Transcription Module"
   end repeat
end colorizeValues

on colorizeHValues2 @pHText,pValueNames
   local tLA,tEqualQuote,tValueColor,tQuoteClosingAngle,tQuoteSpace
   put offset("="&quote,pHText) into tLA
   if tLA = 0 then exit colorizeHValues2
   put "="&quote into tEqualQuote
   put RGBtoHexaColor(the cValueColor of cd 1 of stack "STEP Transcription Module") into tValueColor
   replace "font color"&tEqualQuote&"#" with "%%%%%%%%%%%%%" in pHText
   replace "bgcolor"&tEqualQuote&"#" with "%%%%%%%%%%" in pHText
   replace tEqualQuote with "=<font color="&quote&tValueColor&quote&">"&quote in pHText
   put quote&"&gt;" into tQuoteClosingAngle
   replace tQuoteClosingAngle with quote&"</font>&gt;" in pHText
   put quote&"/&gt;" into tQuoteClosingAngle
   replace tQuoteClosingAngle with quote&"</font>/&gt;" in pHText
   put quote&"]}" into tQuoteClosingAngle
   replace tQuoteClosingAngle with quote&"</font>]}" in pHText
   replace "%%%%%%%%%%%%%" with "font color"&tEqualQuote&"#" in pHText
   replace "%%%%%%%%%%" with "bgcolor"&tEqualQuote&"#" in pHText
   replace quote&" <font color" with quote&" </font><font color"  in pHText
   replace quote&"<font color" with quote&"</font><font color"  in pHText
end colorizeHValues2

on colorizeHValues @pHText,pValueNames
   local tLA,tEqualQuote,tEqualQuote2,tValueColor,tQuoteClosingAngle,tQuoteSpace
   put offset("=</font>"&quote,pHText) into tLA
   if tLA = 0 then exit colorizeHValues
   put "=</font>"&quote into tEqualQuote2
   put "="&quote into tEqualQuote
   put RGBtoHexaColor(the cValueColor of cd 1 of stack "STEP Transcription Module") into tValueColor
   replace "font color"&tEqualQuote&"#" with "%%%%%%%%%%%%%" in pHText
   replace "bgcolor"&tEqualQuote&"#" with "%%%%%%%%%%" in pHText
   replace tEqualQuote2 with "=</font><font color="&quote&tValueColor&quote&">"&quote in pHText
   put quote&"&gt;" into tQuoteClosingAngle
   replace tQuoteClosingAngle with quote&"</font>&gt;" in pHText
   put quote&"/&gt;" into tQuoteClosingAngle
   replace tQuoteClosingAngle with quote&"</font>/&gt;" in pHText
   put quote&"]}" into tQuoteClosingAngle
   replace tQuoteClosingAngle with quote&"</font>]}" in pHText
   replace "%%%%%%%%%%%%%" with "font color"&tEqualQuote&"#" in pHText
   replace "%%%%%%%%%%" with "bgcolor"&tEqualQuote&"#" in pHText
   replace quote&" <font color" with quote&" </font><font color"  in pHText
   replace quote&"<font color" with quote&"</font><font color"  in pHText
end colorizeHValues

function offsets str,ctr
   local mosList,startpoint,ofs
   put "" into mosList
   put 0 into startPoint
   repeat
      put offset(str,ctr,startPoint) into ofs
      if ofs = 0 then exit repeat
      add ofs to startPoint
      put startPoint & comma after mosList
   end repeat
   if char -1 of mosList = comma then delete char -1 of mosList
   if mosList = "" then return 0
   return mosList
end offsets

on colorizeSpans pIDNum,@pText,@pTagColorSet--NOT USED: replaced by colorizeSelfClosingTags
   local xts,x1ts,x2ts,x3ts,x4ts,ots,uts,dts,bts,ets,yts,tTag,tItem,paxt
   put offsets("{pb ",pText) into x1ts
   put offsets("{lb",pText) into x2ts
   put offsets("{anchor ",pText) into x3ts
   put offsets("{ptr ",pText) into x4ts
   if x1ts <> 0 then put x1ts into xts
   if x2ts <> 0 then 
      if xts is empty then put x2ts into xts else put comma&x2ts after xts
   end if
   if x3ts <> 0 then 
      if xts is empty then put x3ts into xts else put comma&x3ts after xts
   end if
   if x4ts <> 0 then 
      if xts is empty then put x4ts into xts else put comma&x4ts after xts
   end if
   put offsets("{addSpan ",pText) into ots
   put offsets("{delSpan ",pText) into uts
   put offsets("{damageSpan ",pText) into dts
   put offsets("{substJoin ",pText) into bts
   put empty into yts
   if ots = 0 and uts = 0 and xts = 0 and dts = 0 and bts = 0 then exit colorizeSpans
   if ots <> 0 then put ots into yts
   if uts <> 0 then 
      if yts is empty then put uts into yts else put comma&uts after yts
   end if
   if xts <> 0 then 
      if yts is empty then put xts into yts else put comma&xts after yts
   end if
   if dts <> 0 then 
      if yts is empty then put dts into yts else put comma&dts after yts
   end if
   if bts <> 0 then 
      if yts is empty then put bts into yts else put comma&bts after yts
   end if
   put offsets("]}",pText) into ets
   sort items of yts numeric ascending
   repeat with x = 1 to the number of items of yts
      put item x of yts into tItem
      if tItem is among the items of ots then put "addSpan" into tTag
      else if tItem is among the items of uts then put "delSpan" into tTag
      else if tItem is among the items of x1ts then put "pb" into tTag
      else if tItem is among the items of x2ts then put "lb" into tTag
       else if tItem is among the items of x3ts then put "anchor" into tTag
      else if tItem is among the items of x4ts then put "ptr" into tTag
      else if tItem is among the items of dts then put "damageSpan" into tTag
      else if tItem is among the items of bts then put "substJoin" into tTag
      set the textColor of char (item x of yts) to (item x of yts)+length(tTag)+1 of fld id pIDNum  of cd 1 of stack "STEP Transcription Module" to getTagColor(tTag,pTagColorSet)
      set the textColor of char (item x of ets) to (item x of ets)+1 of fld id pIDNum  of cd 1 of stack "STEP Transcription Module" to getTagColor(tTag,pTagColorSet)
   end repeat
end colorizeSpans

on decolorizeEqualSigns pIDNum
   local ots,pText
   put fld id pIDNum of cd 1 into pText
   put offsets("="&quote,pText) into ots
   if ots <> 0 then
      repeat with x = 1 to the number of items of ots
         set the textColor of char (item x of ots)  of fld id pIDNum  of cd 1 of stack "STEP Transcription Module" to empty
      end repeat
   end if
end decolorizeEqualSigns

on colorizeSelfClosingTags pIDNum,@pText,@pTagColorSet
   local ets,yts,tTag,tList,tItem,tTags,tSelfClose,tOpenAngle,j,tContainer,tCount
   put offsets("]}",pText) into ets
   if ets = 0 then exit colorizeSelfClosingTags
   put "handshift,note" into tList
   repeat for each item tItem in tList
      replace "<"&tItem with "{"&tItem in pText
   end repeat
   put offsets("]}",pText) into ets
   sort items of ets descending numeric
   repeat for each item tItem in ets
      put char 1 to tItem-1 of pText into tContainer
      put offsetOfOnePrecedingChar(tContainer,"{") into j
      put j&comma after yts
      put trueword 1 of (char j to tItem-1 of pText) &comma after tTags
   end repeat
   put 0 into tCount
   repeat for each item tSelfClose in ets
      add 1 to tCount
      put item tCount of yts into tOpenAngle
      put item tCount of tTags into tTag
      set the textColor of char tOpenAngle to tOpenAngle+length(tTag)+1 of fld id pIDNum of cd 1 of stack "STEP Transcription Module" to getTagColor(tTag,pTagColorSet)
      set the textColor of char tSelfClose to tSelfClose+1 of fld id pIDNum of cd 1 of stack "STEP Transcription Module" to getTagColor(tTag,pTagColorSet)
   end repeat
   repeat for each item tItem in tList
      replace "{"&tItem with "<"&tItem in pText
   end repeat
end colorizeSelfClosingTags

on colorizeHSelfClosingTags @pHText,@pTagColorSet,pSCTagNames,pSCTagsList
   local ets,yts,tTag,tList,tItem,tTags,tSelfClose,tOpenAngle,tTagColor,j,tContainer,tCount,tSCTag,tSCTag2
   replace "<" with "{" in pSCTagsList
   replace "/>" with "]}" in pSCTagsList
   repeat for each item tSCTag in pSCTagsList
      put trueword 1 of tSCTag into tTag
      put tSCTag into tSCTag2
      put RGBtoHexaColor(getTagColor(tTag,pTagColorSet)) into tTagColor
      put "<font color="&quote&tTagColor&quote&">/&gt;</font>" into char -2 to -1 of tSCTag2
      put  "<font color="&quote&tTagColor&quote&">&lt;"&tTag&" </font>" into char 1 to (2+length(tTag)) of tSCTag2
      replace tSCTag with tSCTag2 in pHText
   end repeat
end colorizeHSelfClosingTags


##TOOLTIP:
##This is normally done automatically, but feel free to click this button anyway.



#####################
#####################

## Script of button "Print”, ID 1076 of CARD 1 of STACK STEP Transcription Module

on mouseUp
   modeless stack "Printing"
end mouseUp


##TOOLTIP:
##Print the content of any field.



#####################
#####################

## Script of field "Automatic Syntactical Descriptions”, ID 1017 of CARD 1 of STACK STEP Transcription Module

on selectionChanged pLineNumber
   local tLineNumber,tAltLine,tAltLocations,tAnchoredAltLocations,tAnchAlt,tSta,tLineInd,tNumLine,t8sp,tSto,tIA,tTaggedText,tStoTemp,tTemp,tOffs
   local tTranspositions,tAltIndentedLocations,tAltAnchoredLocations,tListTranspoIndentedLoc,tListTranspoRunLoc
   uncolorButtons
   lock screen
   if pLineNumber is empty then put the lineIndex of the selectedChunk into tLineNumber else put pLineNumber into tLineNumber
   put line tLineNumber of fld id 1017 of cd 1 into tAltLine
   colorBGLine tLineNumber,1017
   if the hilite of btn "Example" of cd 1 is true then 
      put the cExampleAltIndex of btn id 1020 of cd 1 of stack "STEP Transcription Module" into tAltLocations
      put the cExampleIndentedIndex of btn id 1020 of cd 1 of stack "STEP Transcription Module" into tAltIndentedLocations
      put the cExampleTranspositionsHolder of fld id 1017 of cd 1 of stack "STEP Transcription Module" into tTranspositions
      put the cExampleIndentedTranspoAltsLoc of fld id 1017 of cd 1 of stack "STEP Transcription Module" into tListTranspoIndentedLoc
      put the cExampleRunTranspoAltsLoc of fld id 1017 of cd 1 of stack "STEP Transcription Module" into tListTranspoRunLoc
      put tListTranspoRunLoc after tAltLocations
      put tListTranspoIndentedLoc after tAltIndentedLocations
      sort lines of tAltLocations ascending numeric by item 1 of each
      sort lines of tAltIndentedLocations ascending numeric by item 1 of each
   else 
      put the cAllRunAltsLoc of fld id 1126 of cd 1 of stack "STEP Transcription Module" into tAltLocations
      put the cAllIndentedAltsLoc of fld id 1126 of cd 1 of stack "STEP Transcription Module" into tAltIndentedLocations
      put the cTranspositionsHolder of fld id 1017 of cd 1 of stack "STEP Transcription Module" into tTranspositions
   end if
   if the visible of fld id 1004 of cd 1 then
      get trueword 1 of line tLineNumber of tAltLocations
      select char (item 1 of it) to (item 2 of it) of fld id 1004 of cd 1
      scrollFld (item 1 of it),1004
      exit selectionChanged
   end if
   if the visible of fld id 1126 of cd 1 then
      get trueword 1 of line tLineNumber of tAltIndentedLocations
      select char (item 1 of it) to (item 2 of it) of fld id 1126 of cd 1
      scrollFld (item 1 of it),1126
      exit selectionChanged
   end if
   if the visible of fld id 1163 of cd 1 then
      local tAllIndentedAltLocs,tAnchoredText,tIndentedAltsLocsWithoutSC,tAnchorTag,tXMLIDTag,tTaggedSet,tSign1,tIndentAltLine,tPrefAnchor,ut,ot
      local tTagEnd,tTranspoTaggedSet
      put line tLineNumber of tAltIndentedLocations into tIndentAltLine
      put fld id 1163 of cd 1 of stack "STEP Transcription Module" into tAnchoredText
      put the cAllIndentedAltsLocWithoutSC  of fld id 1126 of cd 1 of stack "STEP Transcription Module" into tIndentedAltsLocsWithoutSC
      put customAnchor() into tPrefAnchor
      set the itemDel to "|"
      put the cFirstSign of fld id 1126 of cd 1 of stack "STEP Transcription Module" into tSign1
      if ("function="&quote&"transposition" is not in tIndentAltLine) and (item 2 of tIndentAltLine is not "cl") then
         if item 2 of tIndentAltLine is in "sn" then
            put item 3 of line tLineNumber of tAltIndentedLocations into tTaggedSet
         else 
            put item 2 of line tLineNumber of tAltIndentedLocations into tTaggedSet
         end if
         put lineOffset(tTaggedSet,tIndentedAltsLocsWithoutSC) into tLineNumber
         put "<anchor xml:id="&quote&tPrefAnchor&tLineNumber&quote&"/>" into tAnchorTag
         put " xml:id="&quote&tPrefAnchor&tLineNumber&quote into tXMLIDTag
         replace tSign1 with cr in tTaggedSet
         put tXMLIDTag after trueword 1 of tTaggedSet
         put tAnchorTag before char offset("</",line -1 of tTaggedSet) of line -1 of tTaggedSet
         put offset(tTaggedSet,tAnchoredText) into ut
         put ut + length(tTaggedSet)-1 into ot
         select char ut to ot of fld id 1163 of cd 1  of stack "STEP Transcription Module"
         scrollFld ut,1163
         exit selectionChanged
      else if item 2 of tIndentAltLine is "cl" then  --self-closing alt tags
         put item 3 of line tLineNumber of tAltIndentedLocations into tTaggedSet
         replace tSign1 with cr in tTaggedSet
         put offset(tTaggedSet,tAnchoredText) into ut
         put ut + length(tTaggedSet)-1 into ot
         select char ut to ot of fld id 1163 of cd 1  of stack "STEP Transcription Module"
         scrollFld ut,1163
         exit selectionChanged
      else -- transpositions
         set the itemDel to "|"
         put lineOffset(tAltLine,tTranspositions) into tLineNumber
         put item 3 of line tLineNumber of tTranspositions into tTranspoTaggedSet
         put offset(char 1 to offset(">",tTranspoTaggedSet) of tTranspoTaggedSet,tAnchoredText) into ut
         set the itemDel to comma
         put char (item 2 of offsets("<metamark",tTranspoTaggedSet)) to -1 of tTranspoTaggedSet into tTagEnd
         set the itemDel to "|"
         put offset(tTagEnd,tAnchoredText)+length(tTagEnd)-1 into ot
         select char ut to ot of fld id 1163 of cd 1  of stack "STEP Transcription Module"
         scrollFld ut,1163
         exit selectionChanged
      end if
   end if
end selectionChanged

function retaggingLine pLine,pLineNumber  -- NOT USED
   local pLine2,tLemma,tGloss,tBelDels,tCount,tTempAlt,tTopBelDel,tN1,tW1,tW2,tDelAbove,tW3,tBelowDel,tTempAlt1
   local tN2,ot,ut,tGloss1,sta,sto,tLemma1,tSta,tNestedGloss,tBg,tSubLemma,tSubGloss1,tDif,yt,tLemma2
   put pLine into pLine2
   if "gap due to" is in pLine or "gap caused by" is in pLine then put replaceGapTag(pLine) into pLine
   get offset("]",pLine)
   put char 1 to it-1 of pLine into tLemma
   put char it+2 to -1 of pLine into tGloss
   if "] intl ab del " is in pLine then
      delete char 1 to 12 of tGloss
      return "<subst><del>"&tGloss&"</del><add>"&tLemma&"</add></subst>"
   else if "] before del inserted " is in pLine then
      delete char 1 to 20 of tGloss
      return "<del><add>"&tGloss&"</add></del>"
   else if "] after del inserted " is in pLine then
      delete char 1 to 19 of tGloss
      return "<del><add>"&tGloss&"</add></del>"
   else if "] before del " is in pLine then
      delete char 1 to 11 of tGloss
      if "[" is not in tGloss and "•" is not in tGloss and "below del" is not in tGloss then 
         return "<del>"&tGloss&"</del>"
      else if "[" is not in tGloss and "•" is not in tGloss and "below del" is in tGloss then
         put offsets(" below del ",tGloss) into tBelDels
         put 0 into tCount
         put empty into tTempAlt
         put item-1 of tBelDels into tTopBelDel
         put tTopBelDel+11 into tN1
         put the number of words of char 1 to tN1-2 of tGloss into tW1
         repeat with r = tW1+1 to the number of words of tGloss
            if word r of tGloss is among the words of  " before below " then 
               put r-1 into r
               exit repeat
            end if
         end repeat
         put r into tW2
         put word tW1+1 to tW2 of tGloss into tDelAbove
         repeat with s = tW1-2 down to 1
            if word s of tGloss is among the words of  " del ins " then 
               put s+1 into s
               exit repeat
            end if
         end repeat
         put s into tW3
         put word tW3 to tW1-2 of tGloss into tBelowDel
         put "<del><subst><del>"&tBelowDel&"</del><add>"&tDelAbove&"</add></subst></del>" into tTempAlt1
         put 1 into tCount
         repeat with q = (the number of items of tBelDels)-1 down to 1
            add 1 to tCount
            put item q of tBelDels into tN2
            put the number of words of char 1 to tN2+5 of tGloss into tW2
            repeat with s = tW2-1 down to 1
               if word s of tGloss is among the words of  " del ins " then 
                  put s+1 into s
                  exit repeat
               end if
            end repeat
            put s into tW3
            put word tW3 to tW2-1 of tGloss into tBelowDel
            put "<subst><del>"&tBelowDel&"</del><add>" after char 5 of tTempAlt1
            put "</add></subst>" before char -6 of tTempALt1
         end repeat
         return tTempAlt1
      else
         if "] before del •" is in pLine then
            if "[intl ab del " is not in pLine then
               put offset("•",pLine) into ot
               put offset("[",pLine) into ut
               put char ot+1 to ut-2 of pLine into tGloss1
               if char -1 of tGloss1 is space then delete char -1 of tGloss1
               return "<del>"&tGloss1&"!!"
            else
               put offset("•",tGloss) into ot
               put offset("[",tGloss) into ut
               if char ut+1 to ut+7 of tGloss is "intl ab" then
                  put char 1 to ut-2 of tGloss into tGloss1
                  put offset("[intl ab del ",tGloss) into sta
                  put (offset("]",tGloss,sta+1))+sta+1 into sto
                  put char sta+13 to sto-1 of tGloss into tLemma1
                  replace "•" with empty in tGloss1
                  if char -1 of tGloss1 is space then delete char -1 of tGloss1
                  return "<del><subst><del>"&tLemma1&"</del><add>"&tGloss1&"</add></subst></del>"
               else
                  put char 1 to ut-1 of tGloss into tGloss1
                  replace "•" with empty in tGloss1
                  if char -1 of tGloss1 is space then delete char -1 of tGloss1
                  if char ut+1 to ut+8 of tGloss is not "inserted" then return "<del>"&tGloss1&"!!" else return  "<del><add>"&tGloss1&"!!"
               end if
            end if
         else if  "•" is in tGloss then
            put offset("•",tGloss) into ot
            put offset("[",tGloss) into ut
            if ot < ut then put char 1 to ot-1 of tGloss into tGloss1
            else if ut < ot then put char 1 to ut-1 of tGloss into tGloss1
            replace "•" with empty in tGloss1
            if char -1 of tGloss1 is space then delete char -1 of tGloss1
            return "<del>"&tGloss1&"!!"
         end if
      end if
   else if "] after del " is in pLine and "after del [" is not in pLine then
      delete char 1 to 10 of tGloss
      return "<del>"&tGloss&"</del>"
   else if "] after del [" is in pLine then
      delete char 1 to 10 of tGloss
      return "<del>"&tGloss&"</del>"
   else if "] inserted" is in pLine and word -1 of pLine is "inserted" then
      return "<add>"&tLemma&"</add>"
   else if "] inserted and " is in pLine then
      put offset("inserted and",pLine2) into tSta
      if the textStyle of char tSta to tSta+11 of line pLineNumber of fld id 1017 of cd 1 is in "mixed italic" then
         put offset("inserted and",pLine) into tSta
         put char tSta+13 to -1 of pLine into tNestedGloss
         if "before del" is in tNestedGloss then
            put offsets(" before del ",tNestedGloss) into tBg
            repeat with y = 1 to the number of items of tBg
               put char 1 to (item y of tBg)-1 of tNestedGloss into tSubLemma
               if y < (the number of items of tBg) then put (item y+1 of tBg)-1 into ut else put "-1" into ut
               put char (item y of tBg)+12 to ut of tNestedGloss into tSubGloss1
               put 0 into tDif
               if y < (the number of items of tBg) and " and " is in tSubGloss1 then 
                  put offset(" and ",tSubGloss1) into yt
                  put length(tSubGloss1)-yt into tDif
                  delete char yt to -1 of tSubGloss1
               end if
               delete char 1 to (ut-tDif+4) of tNestedGloss
               if y < (the number of items of tBg) then
                  repeat with x = y+1 to the number of items in tBg
                     put (item x of tBg)-(ut-tDif+4) into item x of tBg
                  end repeat
               end if
               put offset(tSubLemma,tLemma) into ot
               put tLemma into tLemma2
               put "<del>"&tSubGloss1&"</del>" after char ot+length(tSubLemma) of tLemma
               put "<del>"&tSubGloss1&"</del>" after char ot+length(tSubLemma)-1 of tLemma2
            end repeat
            put "<add>"&tLemma&"</add>" into tLemma
            put "<add>"&tLemma2&"</add>" into tLemma2
            put cr&tLemma2 after tLemma
            replace "/del>" with "/del> " in tLemma
            replace "/del>  " with "/del> " in tLemma
            return tLemma
         else
            return "<add>"&tLemma&"</add>"
         end if
      end if
   end if
   return pLine
end retaggingLine

function identifydelDelSequence @pText
   local tDels,tDelList,tQA,tDelEnd
   put offsets("<del ",pText) into tDels
   put empty into tDelList
   if tDels <> 0 then
      put quote&">" into tQA
      repeat for each item tDelete in tDels
         put offset(tQA,pText,tDelete) into tDelEnd
         if tDelEnd <> 0 then
            put char tDelete to tDelete+tDelEnd+1 of pText & cr after tDelList
         end if 
      end repeat
   end if
   if tDelList <> empty then put stripDuplicates(tDelList) into tDelList
   return tDelList
end identifydelDelSequence

on replaceTagSequence pTag,@pAltTaxt
   local ots,ut,tL,tList,tC,tAs
   put length(pAltTaxt) into tL
   put offsets("<"&pTag&space,pAltTaxt) into ots
   if ots <> 0 then
      repeat for each item tItem in ots
         repeat with ut = tItem+1 to tL
            put empty into tAs
            if char ut of pAltTaxt is ">" then
               put (ut - tItem)+1 into tC
               repeat tC
                  put "A" after tAs
               end repeat
               put tAs into char tItem to ut of pAltTaxt
               exit repeat
            end if
         end repeat
      end repeat
   end if
end replaceTagSequence

on replaceTagSequence2 pTag,@pAltTaxt
   local ots,ut,tL,tL2,tList,tC,tAs,pAltTax
   put length(pAltTaxt) into tL
   put length(pTag) into tL2
   repeat tL2
      put "%" after tAs
   end repeat
   put offsets(pTag,pAltTaxt) into ots
   if ots <> 0 then
      repeat for each item tItem in ots
         put tAs into char tItem to (tItem + tL2 - 1) of pAltTax
      end repeat
   end if
end replaceTagSequence2


on indexingAltLocations2
   gatherIndentedAltsAndRecordAltLocs
end indexingAltLocations2

function getFirstNumberFromEnd pString
   local h
   put char offset("||",pString)+2 to -1 of pString into h
   return item 1 of h
end getFirstNumberFromEnd

function gatherSubstJoins pSubjText
   local tSubstList,ots,sto
   if "<substJoin target" is not in pSubjText then return empty
   put offsets("<substJoin target",pSubjText) into ots
   repeat with j = 1 to the number of items of ots
      put offset("/>",pSubjText,item j of ots)+item j of ots+1 into sto
      put char (item j of ots) to sto of pSubjText & "||"& item j of ots & cr after tSubstList
   end repeat
   return tSubstList   
end gatherSubstJoins

function gatherSubstJoins2 pSubjText
   local tSubstList,ots,sto
   if "<substJoin target" is not in pSubjText then return empty
   put offsets("<substJoin target",pSubjText) into ots
   repeat with j = 1 to the number of items of ots
      put offset("/>",pSubjText,item j of ots)+item j of ots+1 into sto
      put (item j of ots)&comma& sto & cr after tSubstList
   end repeat
   return tSubstList   
end gatherSubstJoins2

function gatherSubstJoins3 pSubjText
   local tSubstList,ots,sto
   if "<substJoin target" is not in pSubjText then return empty
   put empty into tSubstList
   put offsets("<substJoin target",pSubjText) into ots
   repeat with j = 1 to the number of items of ots
      put offset("/>",pSubjText,item j of ots)+item j of ots+1 into sto
      put char (item j of ots) to sto of pSubjText&"||"&(item j of ots)&comma& sto & cr after tSubstList
   end repeat
   return tSubstList   
end gatherSubstJoins3

function gatherAlternations pAlternText
   local tAlternList,ots,sto
   if "<substJoin target" is not in pAlternText then return empty
   put offsets("<alt target",pAlternText) into ots
   repeat with j = 1 to the number of items of ots
      put offset("/>",pAlternText,item j of ots)+item j of ots+1 into sto
      put (item j of ots)&comma& sto & cr after tAlternList
   end repeat
   return tAlternList   
end gatherAlternations

function gatherAlternations2 pAlternText
   local tAlternList,ots,sto
   if "<substJoin target" is not in pAlternText then return empty
   put offsets("<alt target",pAlternText) into ots
   repeat with j = 1 to the number of items of ots
      put offset("/>",pAlternText,item j of ots)+item j of ots+1 into sto
      put char (item j of ots) to sto of pAlternText&"||"&(item j of ots)&comma& sto & cr after tAlternList
   end repeat
   return tAlternList   
end gatherAlternations2

function gatherTableAlterations @pTableText,@pAnchorTableText
   local tTableLocs,tTableEnds,tTablePositions,tTablePos,tTableStart,tTableStop,tTableXMLText,tDiffLength1,tSta,tSto,tSta2,tSto2
   local tAltTags,tAltList,tReplaceChars,tLength,tTableAltsList,tTableAnchorAltsList,tCloseTag,tFullAlt,tIndentAlt
   put offsets("<table ",pTableText) into tTableLocs
   if tTableLocs <> 0 then
      put offsets("</table>",pTableText) into tTableEnds
      repeat with j = 1 to the number of items of tTableLocs
         put the lineIndex of char (item j of tTableLocs) of fld id 1004 of cd 1 after tTablePositions
         put "|"&the lineIndex of char (item j of tTableEnds) of fld id 1004 of cd 1&comma after tTablePositions
      end repeat
      repeat with k = 1 to the number of items in tTablePositions
         put item k of tTablePositions into tTablePos
         set the itemDel to "|"
         put item 1 of tTablePos into tTableStart
         put item 2 of tTablePos into tTableStop
         set the itemDel to comma
         put line tTableStart to tTableStop of pTableText into tTableXMLText
         put length(line 1 to tTableStart-1 of pTableText)+1 into tDiffLength1
         put "<subst,<add,<del" into tAltTags
         repeat with k = 1 to the number of items of tAltTags
            put offsets(item k of tAltTags,tTableXMLText) into tAltList
            if tAltList= 0 then next repeat
            repeat with m = 1 to the number of items of tAltList
               put item m of tAltList into tSta
               put "</"&char 2 to -1 of item k of tAltTags & ">" into tCloseTag
               put offset(tCloseTag,tTableXMLText)+(length(tCloseTag)-1) into tSto
               put char tSta to tSto of tTableXMLText into tFullAlt
               put indentTableAlteration(tFullAlt) into tIndentAlt
               put offset(tIndentAlt,pAnchorTableText) into tSta2
               put length(tIndentAlt)+tSta2-1 into tSto2
               put (tSta+tDiffLength1),(tSto+tDiffLength1) & cr after tTableAltsList
               put tSta2,tSto2 & cr after tTableAnchorAltsList
               put (tSto-tSta)+1 into tLength
               put empty into tReplaceChars
               repeat tLength
                  put "%" after tReplaceChars
               end repeat
                put tReplaceChars into char tSta to tSto of tTableXMLText
               put (tSto2-tSta2)+1 into tLength
               put empty into tReplaceChars
               repeat tLength
                  put "%" after tReplaceChars
               end repeat
               put tReplaceChars into char tSta2 to tSto2 of pAnchorTableText
               set the itemDel to comma
            end repeat
         end repeat
         put tTableXMLText into line  tTableStart to tTableStop of pTableText
      end repeat
   end if
   return tTableAltsList&"|||"&tTableAnchorAltsList
end gatherTableAlterations

function indentTableAlteration pTableAlt
   local tAngBegs
   if char 1 to 6 of pTableAlt is "<subst" then 
      put offsets("<",pTableAlt) into tAngBegs
      put cr & tab&tab&tab&tab before char (item -1 of tAngBegs) of pTableAlt
      repeat with k = (the number of items of tAngBegs)-2 down to 2 step -2
         put cr &tab&tab&tab&tab&tab before char (item k of tAngBegs) of pTableAlt
      end repeat
   end if
   return pTableAlt
end indentTableAlteration

on gatherIndentedAltsAndRecordAltLocs
   local tText,tText2,tAlts,tMainAltList,tAlter,tSimpleAltsList,tSimpleAltsList2,tSelfClosingAltsList,tSelfClosingAltsList2,tN,tN1,tN2,tN3,tN4,tN5,tN6,tTableRunAltList
   local tListIndentedNestedAltLoc,ut,ot,tRunText,tListRunNestedAltLoc,tListSimpleIndentedLoc,tListSimpleRunLoc,tListSCIndentedLoc,tListSCRunLoc,tTableIndentAltList
   local tMatch1,tMatch2,tMatch3,tN7,tN8,tItem2,tIndentedAltsLocs,tRunAltsLocs,tMAL2,tChars,tSign1,tSign2,tC,tD,tTargets,tTextPrime,tRunTextPrime,ut1
   local tNonAltTag,tNonAltTags,tAltTag,tAltTags,tAnchorIndic,tIndentedAltsLocsWithoutSC,tItemCount,tItemList,uts,uts1,tPuncList
   local tTranspositions,tAnchorText,tTranspo,tTranspoTaggedSet,tListTranspoRunLoc,tTagEnd,tListTranspoIndentedLoc,tListTranspoAnchorLoc
   set the cursor to busy
   put fld id 1126 of cd 1 of stack "STEP Transcription Module" into tText
   put fld id 1004 of cd 1 of stack "STEP Transcription Module" into tRunText
   put tText into tTextPrime
   put tRunText into tRunTextPrime
   put "%•@€¶§∞ºª∂∑√≤«ÆÚ∏Ø" into tChars
   repeat with i = 1 to length(tChars)
      if char i of tChars is not in tText then 
         put char i of tChars into tSign1
         delete char i of tChars
         exit repeat
      end if
   end repeat
   repeat with i = 1 to length(tChars)
      if char i of tChars is not in tText then 
         put char i of tChars into tSign2
         exit repeat
      end if
   end repeat
   set the cFirstSign of fld id 1126 of cd 1 of stack "STEP Transcription Module" to tSign1
   set the cSecondSign of fld id 1126 of cd 1 of stack "STEP Transcription Module" to tSign2
   set the cursor to busy
   repeat while matchText(tRunText,"<cell[^>]*>[^<]*(<[^\/>]+>)",tN)
      repeat with i = 1 to 8
         do "put empty into tN"&i
      end repeat
      put matchChunk(tRunText,"(<cell[^>]*>[^<]*(<[^\/>]+>))",tN1,tN2,tN7,tN8) into tMatch1
      put matchText(tText,"<cell[^>]*>\s{5}[^<]*(<([^\/>]+)>[\s\S]*?<\/\2>)",tN3,tN4) into tMatch2
      put matchChunk(tText,"<cell[^>]*>\s{5}[^<]*(<([^\/>]+)>[\s\S]*?<\/\2>)",tN5,tN6) into tMatch3
      if tMatch1 is true and tMatch2 is true and tMatch3 is true then
         if the number of lines of tN3 = 1 then put "s" into tAnchorIndic else if the number of lines of tN3 >=4 then put  "n" into tAnchorIndic
         replace cr with tSign1 in tN3
         put tN5&","&tN6&"|"&tAnchorIndic&"|"&tN3&cr after tTableIndentAltList
         replace tSign1 with empty in tN3
         replace tab with empty in tN3
         put tN7&","&tN7+length(tN3)-1&"|"&tN3&cr after tTableRunAltList
         put tSign2 into char tN1 of tRunText
         put tSign2 into char tN5 of tText
      end if
   end repeat
   set the cIndentedTableAltsLoc of fld id 1126 of cd 1 of stack "STEP Transcription Module" to tTableIndentAltList
   set the cRunTableAltsLoc of fld id 1126 of cd 1 of stack "STEP Transcription Module" to tTableRunAltList
   set the cursor to busy
   put tText into tText2
   put tText into tMainAltList
   put "add,del,subst,mod" into tAlts
   repeat for each item tAlter in tAlts
      if "<"&tAlter is not in tText then next repeat
      replace cr&tab&tab&"<"&tAlter with cr&"|"&tab&tab&"<"&tAlter in tMainAltList
      replace cr&tab&tab&"</"&tAlter&">" with  cr&tab&tab&"</"&tAlter&">|" in tMainAltList
   end repeat
   set the itemDel to "|"
   filter items of tMainAltList with regex pattern "^\t\t<[^>]+>" into tMainAltList
   repeat for each item tItem in tMainAltList
      get trueword 1 of tItem
      if (tItem begins with (tab&tab&"<"&it) and "</"&it&">" is not in line 1 of tItem) and (("/>" is not in tItem) or (("/>" is in tItem) and ("gap" is in tItem))) and not(it is among the segments of "p note body") then 
         put tItem&"|" after tMAL2
      end if
   end repeat
   put tMAL2 into tMainAltList
   replace "|" with cr in tMainAltList
   filter tMainAltList without empty
   replace ">"&cr&tab&tab&"<" with ">"&cr&"|"&tab&tab&"<" in tMainAltList
   replace cr&"|"&tab&tab&"</" with  cr&tab&tab&"</" in tMainAltList
   set the cNestedAlts of fld id 1126 of cd 1 of stack "STEP Transcription Module" to tMainAltList
   set the cursor to busy
   repeat for each item tItem in tMainAltList
      delete char 1 to 2 of tItem
      if char -1 of tItem is cr then delete char -1 of tItem
      put tItem into tItem2
      replace cr with tSign1 in tItem2
      put offset(tItem,tText) into ut
      if ut <> 0 then 
         put ut + length(tItem)-1 into ot
         put ut,ot&"|n|"&tItem2 & cr after tListIndentedNestedAltLoc
         put tSign2 into char ut+1 of tText
      end if
      replace tab with empty in tItem
      replace cr with empty in tItem
      put offset(tItem,tRunText) into ut
      if ut <> 0 then 
         put ut + length(tItem)-1 into ot
         put ut,ot&"|"&tItem&cr after tListRunNestedAltLoc
         put tSign2 into char ut+1 of tRunText
      end if
   end repeat
   set the cIndentedNestedAltsLoc of fld id 1126 of cd 1 of stack "STEP Transcription Module" to tListIndentedNestedAltLoc
   set the cRunNestedAltsLoc of fld id 1126 of cd 1 of stack "STEP Transcription Module" to tListRunNestedAltLoc
   set the cursor to busy
   
   filter lines of tText2 with regex pattern "^\t\t<[^<]+/>" into tSelfClosingAltsList
   
   filter lines of tText2 with regex pattern "^\t\t<([AC-HJ-TV-Z][A-Z0-9]*)\b[^>]*>.*?</\1>" into tSimpleAltsList
   replace tab&tab&"<" with "|<" in tSimpleAltsList
   replace ">"&space with ">|" in tSimpleAltsList
   put ",.)}]?!" into tPuncList
   repeat for each char tPunc in tPuncList
      replace ">"&tPunc with ">|"&tPunc in tSimpleAltsList
   end repeat
   put replaceRegexValueEverywhere(tSimpleAltsList,"(>\|[,.\)\}\]\?\!]?[^>]*</)","|",empty) into tSimpleAltsList
   replace ">"&cr with ">|"&cr in tSimpleAltsList
   filter items of tSimpleAltsList with regex pattern "<([A-Z][A-Z0-9]*)\b[^>]*>.*?</\1>" into tSimpleAltsList2
   replace ">|" with ">"&cr in tSimpleAltsList2
   put "metamark seg sic note figure graphic change hi emph space" into tNonAltTags
   repeat for each segment tNonAltTag in tNonAltTags
      filter lines of tSimpleAltsList2 without regex pattern "<"&tNonAltTag&"[^<]*>[^<]*</"&tNonAltTag&">"
   end repeat
   set the cursor to busy
   put "add del" into tAltTags
   repeat for each segment tAltTag in tAltTags
      filter lines of tSimpleAltsList2 without "<"&tAltTag&"></"&tAltTag&">"
   end repeat
   set the cSimpleAlts of fld id 1126 of cd 1 of stack "STEP Transcription Module" to tSimpleAltsList2
   put 0 into tD
   repeat for each line tLine in tSimpleAltsList2
      add 1 to tD
      if char -1 of tD = 0 then set the cursor to busy
      if char 1 to 2 of tLine is tab&tab then delete char 1 to 2 of tLine
      if char 1 of tLine is "|" then delete char 1 /*to 2*/ of tLine
      set the itemDel to comma
      if char -1 of tLine <> ">" then delete char (item -1 of offsets(">",tLine))+1 to -1 of tLine
      put offsets(tLine,tText) into uts
      put offsets(cr&tab&tab&tLine,tText) into uts1
      put empty into tItemList
      if the number of items of uts <> the number of items of uts1 then
         put 0 into tItemCount
         repeat for each item tItem in uts
            add 1 to tItemCount
            if tItem-3 is not among the items of uts1 then 
               put tItemCount & comma after tItemList
               put tSign2 into char tItem of tText
            end if
         end repeat
      end if
      put empty into tItemCount
      repeat for each item tItem in uts1
         put tItem into ut
         if ut <> 0 then 
            put ut + 3 + length(tLine)-1 into ot
            put ut+3,ot&"|s|"&tLine & cr after tListSimpleIndentedLoc
            put tSign2 into char ut+4 of tText
         end if
      end repeat
      put offsets(tLine,tRunText) into ut
      set the itemDel to comma
      if ut <> 0 and the number of items of ut = 1 then 
         put ut + length(tLine)-1 into ot
         put ut,ot&"|"&tLine & cr after tListSimpleRunLoc
         put tSign2 into char ut+1 of tRunText
      else if ut <> 0 and the number of items of ut > 1 then
         if tItemList <> empty then put 0 into tItemCount else put empty into tItemCount
         repeat for each item tItem in ut
            if tItemCount is an integer then 
               add 1 to tItemCount
               if tItemCount is among the items of tItemList then 
                  put tSign2 into char tItem of tRunText
                  next repeat
               end if
            end if
            put tItem into ut1
            put ut1 + length(tLine)-1 into ot
            put ut1,ot&"|"&tLine & cr after tListSimpleRunLoc
            put tSign2 into char ut1+1 of tRunText
         end repeat
      end if
   end repeat
   sort lines of tListSimpleIndentedLoc ascending numeric by item 1 of each
   sort lines of tListSimpleRunLoc ascending numeric by item 1 of each
   set the cIndentedSimpleAltsLoc of fld id 1126 of cd 1 of stack "STEP Transcription Module" to tListSimpleIndentedLoc
   set the cRunSimpleAltsLoc of fld id 1126 of cd 1 of stack "STEP Transcription Module" to tListSimpleRunLoc
   set the itemDel to "|"
   set the cursor to busy
   replace tab&tab&"<" with "|<" in tSelfClosingAltsList
   replace "/>" with "/>|" in tSelfClosingAltsList
   filter items of tSelfClosingAltsList with regex pattern "<[^<]+/>" into tSelfClosingAltsList2
   replace "/>|" with "/>"&cr in tSelfClosingAltsList2
   filter lines of tSelfClosingAltsList2 without regex pattern "<pb[^<]+/>"
   set the cSelfClosingAlts of fld id 1126 of cd 1 of stack "STEP Transcription Module" to tSelfClosingAltsList2
   put 0 into tC
   repeat for each line tLine in tSelfClosingAltsList2
      add 1 to tC
      if  trueword 1 of tLine is "anchor" then next repeat
      if char 1 to 2 of tLine is tab&tab then delete char 1 to 2 of tLine
      put offset(tLine,tText) into ut
      if trueword 1 of tLine is among the segments of "addSpan delSpan damageSpan" then 
         put offset(line (tC + 1) of tSelfClosingAltsList2,tText) + length(line (tC + 1) of tSelfClosingAltsList2) -1 into ot
         put ut,ot&"|cl|"&replaceCRwithOtherSign((char ut to ot of tTextPrime),tSign1) & cr after tListSCIndentedLoc
         put tSign2 into char ut+1 of tText
      else if trueword 1 of tLine is "alt" then
         put offsetOfOnePrecedingString(char 1 to ut-1 of tText,"<seg",,) into ot
         put ut+length(tLine)-1 into ut
         put ot,ut&"|cl|"&replaceCRwithOtherSign((char ot to ut of tTextPrime),tSign1) & cr after tListSCIndentedLoc
      else if trueword 1 of tLine is "substJoin" then
         put findValues(tLine) into tTargets
         put offsetOfOnePrecedingString(char 1 to ut-1 of tText,char 2 to -1 of segment 1 of tTargets,,) into ot
         put offsetOfOnePrecedingChar(char 1 to ot-1 of tText,"<") into ot
         put ut+length(tLine)-1 into ut
         put ot,ut&"|cl|"&replaceCRwithOtherSign((char ot to ut of tTextPrime),tSign1) & cr after tListSCIndentedLoc
      end if
      put offset(tLine,tRunText) into ut
      if trueword 1 of tLine is among the segments of "addSpan delSpan damageSpan" then 
         put offset(line (tC + 1) of tSelfClosingAltsList2,tRunText) + length(line (tC + 1) of tSelfClosingAltsList2) -1 into ot
         put ut,ot&"|"&(char ut to ot of tRunTextPrime) & cr after tListSCRunLoc
         put tSign2 into char ut+1 of tRunText
      else if trueword 1 of tLine is "alt" then
         put offsetOfOnePrecedingString(char 1 to ut-1 of tRunText,"<seg",,) into ot
         put ut+length(tLine)-1 into ut
         put ot,ut&"|"&(char ot to ut of tRunTextPrime) & cr after tListSCRunLoc
      else if trueword 1 of tLine is "substJoin" then
         put findValues(tLine) into tTargets
         put offsetOfOnePrecedingString(char 1 to ut-1 of tRunText,char 2 to -1 of segment 1 of tTargets,,) into ot
         put offsetOfOnePrecedingChar(char 1 to ot-1 of tRunText,"<") into ot
         put ut+length(tLine)-1 into ut
         put ot,ut&"|"&(char ot to ut of tRunTextPrime) & cr after tListSCRunLoc
      end if
   end repeat
   set the cIndentedSCAltsLoc of fld id 1126 of cd 1 of stack "STEP Transcription Module" to tListSCIndentedLoc
   set the cRunSCAltsLoc of fld id 1126 of cd 1 of stack "STEP Transcription Module" to tListSCRunLoc
   set the cursor to busy
   if the hilite of btn "Example" of cd 1 is true then 
      put the cExampleTranspositionsHolder of fld id 1017 of cd 1 of stack "STEP Transcription Module" into tTranspositions
   else
      put the cTranspositionsHolder of fld id 1017 of cd 1 of stack "STEP Transcription Module" into tTranspositions
   end if
   if tTranspositions <> empty then
      repeat for each line tTranspo in tTranspositions
         put item 3 of tTranspo into tTranspoTaggedSet
         put offset(tTranspoTaggedSet,tRunTextPrime) into ut
         put ut + length(tTranspoTaggedSet)-1 into ot
         put ut,ot&"|"&tTranspoTaggedSet & cr after tListTranspoRunLoc
         put offset(char 1 to offset(">",tTranspoTaggedSet) of tTranspoTaggedSet,tTextPrime) into ut
         set the itemDel to comma
         put char (item 2 of offsets("<metamark",tTranspoTaggedSet)) to -1 of tTranspoTaggedSet into tTagEnd
         set the itemDel to "|"
         put offset(tTagEnd,tTextPrime)+length(tTagEnd)-1 into ot
         put ut,ot&"|"&replaceCRwithOtherSign(tTranspoTaggedSet,tSign1) & cr after tListTranspoIndentedLoc
      end repeat
      if the hilite of btn "Example" of cd 1 is true then
         set the cExampleIndentedTranspoAltsLoc of fld id 1017 of cd 1 of stack "STEP Transcription Module" to tListTranspoIndentedLoc
         set the cExampleRunTranspoAltsLoc of fld id 1017 of cd 1 of stack "STEP Transcription Module" to tListTranspoRunLoc
      else
         set the cIndentedTranspoAltsLoc of fld id 1126 of cd 1 of stack "STEP Transcription Module" to tListTranspoIndentedLoc
         set the cRunTranspoAltsLoc of fld id 1126 of cd 1 of stack "STEP Transcription Module" to tListTranspoRunLoc
      end if
   end if
   put tListSimpleIndentedLoc&tListIndentedNestedAltLoc&tTableIndentAltList into tIndentedAltsLocsWithoutSC
   put tListSimpleIndentedLoc&tListIndentedNestedAltLoc&tTableIndentAltList&tListSCIndentedLoc&tListTranspoIndentedLoc into tIndentedAltsLocs
   put tListSimpleRunLoc&tListRunNestedAltLoc&tTableRunAltList&tListSCRunLoc&tListTranspoRunLoc into tRunAltsLocs
   set the itemDel to comma
   sort lines of tIndentedAltsLocs ascending numeric by item 1 of each
   sort lines of tRunAltsLocs ascending numeric by item 1 of each
   set the cAllIndentedAltsLoc  of fld id 1126 of cd 1 of stack "STEP Transcription Module" to tIndentedAltsLocs
   set the cAllRunAltsLoc  of fld id 1126 of cd 1 of stack "STEP Transcription Module" to tRunAltsLocs
   sort lines of tIndentedAltsLocsWithoutSC ascending numeric by item 1 of each
   set the cAllIndentedAltsLocWithoutSC of fld id 1126 of cd 1 of stack "STEP Transcription Module" to tIndentedAltsLocsWithoutSC
end gatherIndentedAltsAndRecordAltLocs

function findValues pString
   local tValReg,tValName,tZ
   put quote &"([^"&quote&"]*)" & quote into tValReg
   put matchText(pString,tValReg,tValName) into tZ
   if tZ is true then return tValName else return empty
end findValues

function replaceCRwithOtherSign pString,pSign
   replace cr with pSign in pString
   return pString
end replaceCRwithOtherSign

function gatherSubstAlterations pSubjText
   local tSubstList,ots,sto
   if " alterations]" is not in pSubjText then return empty
   put empty into tSubstList
   put lineOffsets(" alterations]",pSubjText) into ots
   repeat with j = 1 to the number of items of ots
      put item j of ots & "||" & line (item j of ots) of pSubjText & cr after tSubstList
   end repeat
   return tSubstList   
end gatherSubstAlterations

function replaceRegexValueEverywhere pText,pRegex,pStringToReplaceInResult,pReplacement
   local tN1,tN2,tN3,tN4,tN5
   repeat until tN2 is false
      put matchText(pText,pRegex,tN1) into tN2
      if tN2 is true then
         put matchChunk(pText,pRegex,tN3,tN4) into tN5
         replace pStringToReplaceInResult with pReplacement in tN1
         put tN1 into char tN3 to tN4 of pText
         put empty into tN2
      else
         exit repeat
      end if
   end repeat
   return pText
end replaceRegexValueEverywhere

##TOOLTIP:
##Click any line to select its counterpart in the run-on or indented transcription.



#####################
#####################

## Script of button "Restore" of card "card id 1002" of stack "/Users/adetienn/Documents/STEP Externals/STEP-LI 7.1.4/STEP Transcription Module.livecode" ID 1078 of CARD 1 of STACK STEP Transcription Module

on mouseUp
   local tFldList
   set the hilite of btn "Example" of cd 1 to false
   put "1004,1014,1017,1026,1029,1041,1044,1049,1064,1067,1109,1112,1126,1139,1151,1154,1157,1163,1171,1174,1206,1207,1208,1209,1210,1211,1240,1921" into tFldList
   repeat for each item tItem in tFldList
      set the HTMLText of fld id tItem of cd 1 to the cSavedFieldHTMLContent of fld id tItem of cd 1
   end repeat   
   put "1026,1029,1041,1151" into tFldList
   repeat for each item tItem in tFldList
      set the cBrHTMLText of fld id tItem of cd 1 to the cSavedBrHTMLText of fld id tItem of cd 1
   end repeat   
end mouseUp

##TOOLTIP:
##Recover data from last save. To undo the last action,
use the Undo command (Edit menu) instead. The Undo
command can be used repeatedly to backtrack, and so
can the Redo command reversely.



#####################
#####################

## Script of button " " of card "card id 1002" of stack "/Users/adetienn/Documents/STEP Externals/STEP-LI 7.1.4/STEP Transcription Module.livecode" ID 1034 of CARD 1 of STACK STEP Transcription Module

on mouseEnter 
   if the cTagTip of this stack is "off" then exit mouseEnter
   get the label of me
   if it is empty then pass mouseEnter
   if it contains "/" then get char offset("/",it) + 1 to -1 of it
   get getElementTEIExplanation(it)
   floating it
end mouseEnter

on floating @pAttr--behaves like a tooltip
   lock screen
   set the height of fld "Floater" of cd 1 to 19
   if pAttr is not empty then 
      if pAttr is not the text of fld "Floater" of cd 1 then
         set the vis of fld "Floater" of cd 1 to false
         put lineBreaker(pAttr) into fld "Floater" of cd 1
         set the height of fld "Floater" of cd 1 to the formattedHeight of fld "Floater" of cd 1
         set the textAlign of fld "Floater" to "left"
         set the topRight of fld "Floater" of cd 1 to ((the left of fld id 1010 of cd 1)+125,(the top of fld id 1010 of cd 1)-50)
         set the vis of fld "Floater" of cd 1 to true
      else
         set the topRight of fld "Floater" of cd 1 to ((the left of fld id 1010 of cd 1)+125,(the top of fld id 1010 of cd 1)-50)
      end if
   else
      set the vis of fld "Floater" of cd 1 to false
   end if
end floating

on mouseLeave
   set the vis of fld "Floater" of cd 1 to false
end mouseLeave

on float pmsg--behaves like a tooltip
   local pExpanded
   put desabbreviateSomeTags(pmsg) into pExpanded
   if pExpanded is not empty then 
      if pExpanded is not in fld "Floater" of cd 1 then set the vis of fld "Floater" of cd 1 to false
      put pExpanded into fld "Floater" of cd 1
      set the height of fld "Floater" of cd 1 to (the formattedHeight of fld "Floater" of cd 1)/*-6*/
      set the dontWrap of fld "Floater" to true
      set the textAlign of fld "Floater" to "center"
      set the width of fld "Floater" of cd 1 to (the formattedWidth of fld "Floater" of cd 1)-4
      set the right of  fld "Floater" of cd 1 to (the left of btn id 1008 of cd 1)-6
      set the top of  fld "Floater" of cd 1 to the top of btn id 1008 of cd 1
      set the vis of fld "Floater" of cd 1 to true
   else
      set the vis of fld "Floater" of cd 1 to false
   end if
end float

on menuPick pItemName
   lock screen
   set the label of btn id 1008 to empty
   set the label of btn id 1038 to empty
   set the label of btn id 1060 to empty
   set the label of btn id 1061 to empty
   put empty into btn id 1060
   put empty into btn id 1061
   set the itemDel to "|"
   if item 1 of pItemName is "In-house messages" then
      switch (item 2 of pItemName)
         case "To-do reminders"
            put "<!--TODO -->" into fld id 1010 of cd 1
            break
         case "Transcription problems"
            put "<!--TRANSC -->" into fld id 1010 of cd 1
            break
         case "Issues with document"
            put "<!--CODIC -->" into fld id 1010 of cd 1
            break
         case "Apparatus remarks"
            put "<!--APP -->" into fld id 1010 of cd 1
            break
         case "Other"
            put "<!--OTHER -->" into fld id 1010 of cd 1
            break
      end switch
      select before char -3 of fld id 1010 of cd 1
      exit menuPick
   end if
   if pItemName is "Customize pagebreak format..." then
      modeless stack "Customize Pagebreak Self-Closing Tag"
      exit menuPick
   end if
   if item 1 of pItemName is "choice/sic/corr" then
      set the label of me to pItemName
      put "<choice><sic></sic><corr></corr></choice>" into fld id 1010 of cd 1
      set the textSize of me to 8
      select after char 13 of fld id 1010 of cd 1
      exit menuPick
   end if
   if pItemName is "pagebreak/pb" or pItemName is "page beginning/pb" then put "pb" into pItemName
   if pItemName is "linebreak/lb" or pItemName is "line beginning/lb" then put "lb" into pItemName
   if pItemName is "column beginning/cb" then put "cb" into pItemName
   if pItemName is "gathering begins/gb" or pItemName is "gathering/gb" then put "gb" into pItemName
   if pItemName is "anonymous block/ab" then put "ab" into pItemName
   if the number of items of pItemName > 1 then set the label of me to item 2 of pItemName else set the label of me to pItemName
   if the number of items of pItemName > 1 then put item 2 of pItemName into pItemName else put item 1 of pItemName into pItemName
   if length(pItemName) > 10 then set the textSize of me to 9 else set the textSize of me to 12
   put angleTag(recognizeTag(pItemName)) into fld id 1010 of cd 1
end menuPick

function angleTag tTag
   local tAnch,tItems,tRend
   if tTag is "anchnote" then 
      put (fld id 1206 of cd 1)&(fld id 1207 of cd 1)&(fld id 1210 of cd 1)&(fld id 1240 of cd 1)&"-"&anchorNoteCount() into tAnch
      return "<anchor xml:id="&quote&tAnch&quote&"/><note n="&quote&quote&space&"target="&quote&"#"&tAnch&quote&space&"type="&quote&quote&space&"place="&quote&quote&"></note>"
   else if tTag is "lb/" then return "<lb/>"
   else if tTag is "gb/" then return "<gb/>"
   else if tTag is "cb/" then return "<cb/>"
   else if tTag is "milestone/" then return "<milestone/>"
   else if tTag is "graphic/" then return "<graphic/>"
   else if tTag is "space/" then return "<space/>"
   else if tTag is "pb/" then 
      if "<pb facs=" is not in fld id 1004 of cd 1 then 
         return identifyLocPB("<pb n="&quote&quote&space&"xml:id="&quote&quote&"/>") 
      else 
         return "<pb facs="&quote&quote&"/>"
      end if
   else if tTag is in "ibu" then
      put "italic,bold,underline" into tItems
      put item offset(tTag,"ibu") of tItems into tRend
      return "<hi rend="&quote&tRend&quote&"></hi>"
   else return "<"&tTag&"></"&tTag&">"
end angleTag

function anchorNoteCount
   local pCharNum,pText,tANs,tPBs,tStaPB,tStoPB,tCount,tPair
   put word 2 of the cSelectedChunk of fld id 1004 of cd 1 into pCharNum
   if pCharNum is empty then return empty
   compilePageBreaks 1004
   compileAnchoredNotes
   --1083,1096|true|LL1a01-01|dagger|[#LL1a01-01]|authorial
   put fld id 1004 of cd 1 into pText
   put the cAnchoredNoteValues of fld id 1004 of cd 1 into tANs
   put the cPBValues of fld id 1004 of cd 1 into tPBs
   if tANs is empty then return "01"
   put length( pText)+1 into line (the number of lines of tPBs)+1 of tPBs
   repeat with b = 1 to (the number of lines of tPBs)-1
      put item 1 of line b of tPBs into tStaPB
      put (item 1 of line b+1 of tPBs)-1 into tStoPB
      if pCharNum >= tStaPB and pCharNum <= tStoPB then
         exit repeat
      end if
   end repeat
   put 0 into tCount
   repeat with x = 1 to the number of lines of tANs
      set the itemDel to "|"
      put item 1 of line x of tANs into tPair
      set the itemDel to comma
      if item 1 of line x of tPair >= tStaPB and item 2 of line x of tPair <= tStoPB then add 1 to tCount
   end repeat
   put tCount+1 into tCount
   if length(tCount) = 1 then put "0" before tCount
   return tCount
end anchorNoteCount

function recognizeTag tTag
   switch tTag
      case "italic/i"
      case "italic"
      case "ital"
      case "i"
         return "i"
         break
      case "bold/b"
      case "bold"
      case "boldface"
      case "b"
         return "b"
         break
      case "underline/u"
      case "underlined"
      case "underline"
      case "u"
         return "u"
         break
      case "milestone"
         populateAttributes "milestone"
         return "milestone/"
         break
      case "pb"
      case "page beginning/pb"
      case "pagebreak/pb"
         populateAttributes "pb"
         return "pb/"
         break
      case "paragraph/p"
         populateAttributes "p"
         return "p"
         break
      case "lineGroup/lg"
         populateAttributes "lg"
         return "lg"
         break
      case "line/l"
         populateAttributes "l"
         return "l"
         break
      case "lb"
      case "line beginning/lb"
      case "line beginning"
      case "linebreak/lb"
         populateAttributes "lb"
         return "lb/"
         break
      case "cb"
      case "column beginning/cb"
      case "column beginning"
         populateAttributes "cb"
         return "cb/"
         break
      case "gb"
      case "gathering/gb"
         populateAttributes "gb"
         return "gb/"
         break
      case "ab"
      case "anonymous block/ab"
         populateAttributes "ab"
         return "ab"
         break
      case "graphic"
         populateAttributes "graphic"
         return "graphic/"
         break
      case "space"
         populateAttributes "space"
         return "space/"
         break
      case "quoted/q"
         populateAttributes "q"
         return "q"
         break
      case "anchor+note"
         populateAttributes "note"
         return "anchnote"
         break
      default
         populateAttributes tTag
         return tTag
   end switch
end recognizeTag

on populateAttributes pTag,pAttribs
   put getAttributes(pTag,pAttribs) into btn id 1060 of cd 1
   set the label of btn id 1060 of cd 1 to line 1 of btn id 1060 of cd 1
end populateAttributes

function getAttributes pTag,pAtt
   local tCustomProp,tAttributes,tTempAtt,ot
   put pTag&"TEI" into tCustomProp
   if tCustomProp is among the lines of the customKeys of this stack then
      do "put the "&tCustomProp&" of this stack into tAttributes"
      if tAttributes is not empty then
         if "|" is not in tAttributes and the number of items of tAttributes > 0 then
            replace comma with cr in tAttributes
            if char -1 of tAttributes = cr then delete char -1 of tAttributes
            return tAttributes
         else if "|" is in tAttributes then
            put empty into tTempAtt
            repeat with x = 1 to the number of lines of tAttributes
               put offset("|",line x of tAttributes) into ot
               put char 1 to ot-1 of line x of tAttributes & cr after tTempAtt
            end repeat
            delete char -1 of tTempAtt
            return tTempAtt
         end if
      else
         if pAtt is not empty and pAtt is not "pAtt" then
            replace comma with cr in pAtt
            if char -1 of pAtt = cr then delete char -1 of pAtt
            return pAtt
         end if
      end if
   end if
   return empty
end getAttributes

function identifyLocPB pPhrase
   local tIDNum,pCharNum,tPBs,tDocAbb,tVariant,tLeafAbb,tInitLeaf,tRectoVerso,tLeafP,tPBInfo,tN,tXM,tPBFormat,tAttList,tEd,tRend,tLastValueOrig,tRectoVerso2
   put the cPageBreakFormat of fld id 1004 of cd 1 into tPBFormat
   put item 1 of getXMLIDLastValueOriginPlusRV() into tLastValueOrig
   put item 2 of getXMLIDLastValueOriginPlusRV() into tRectoVerso2
   put word 3 of the focusedObject into tIDNum
   --if tIDNum is empty then put "1004" into tIDNum ---,1041,1151
   if tIDNum is not among the items of "1004" then  put "1004" into tIDNum--return pPhrase ---,1041,1151
   put word 2 of the cSelectedChunk of fld id tIDNum of cd 1 into pCharNum
   compilePageBreaks 1004
   put the cPBValues of fld id 1004 of cd 1 into tPBs
   put extractFromPBFormat() into tAttList
   put extractValueOfAttribute(tAttList,"ed") into tEd
   put extractValueOfAttribute(tAttList,"rend") into tRend
   if tPBs is empty then
      put fld id 1206 of cd 1 into tDocAbb
      put fld id 1207 of cd 1 into tVariant
      put fld id 1208 of cd 1 into tLeafAbb
      put fld id 1209 of cd 1 into tInitLeaf
      put fld id 1240 of cd 1 into tRectoVerso
      put tInitLeaf into tLeafP
      put reformPageBreak(tLeafP,tRectoVerso) into tLeafP
      if tLeafP begins with "0" then
         repeat until not(tLeafP begins with "0")
            delete char 1 of tLeafP
         end repeat
      end if
      if tDocAbb is not empty and tLeafAbb is not empty and tInitLeaf is not empty and tLeafP is not empty then
         put tInitLeaf into fld id 1210 of cd 1
         return "<pb n="&quote&tLeafAbb&tLeafP&tRectoVerso&quote&space&"xml:id="&quote&tDocAbb&tVariant&"-"&tInitLeaf&tRectoVerso&quote&tAttList&"/>"
      else
         answer "Please enter document and page identification values in the small boxes (at least boxes 1, 3, and 4) at the bottom left of the window. "&\
         "Those data are needed for anchoring tags and page breaks. It is best to use the Pagebreak dialog for that purpose." with "OK" or "Pagebreak Dialog" as sheet
         if it is "Pagebreak Dialog" then modeless stack "Customize Pagebreak Self-Closing Tag"
         exit to top
      end if
   else
      put the cLeafType of fld id 1004 of cd 1 into tLeafAbb
      put getPagebreakInfo(pCharNum,tEd,tRend,tLastValueOrig,tRectoVerso2,tLeafAbb) into tPBInfo
      put item 1 of tPBInfo into tN
      put item 2 of tPBInfo into tXM
      put item 3 of tPBInfo into tEd
      put item 4 of tPBInfo into tRend
      if tEd <> empty then put "ed="&quote&tEd&quote into segment 1 of tAttList
      if tRend <> empty then put "rend="&quote&tRend&quote into segment 2 of tAttList
      return "<pb n="&quote&tN&quote&space&"xml:id="&quote&tXM&quote&tAttList&"/>"
   end if
end identifyLocPB

-- cPageBreakFormat: x,y|tn&"|"&txmlid&"|"&ted&"|"&trend&"|"&ttype&"|"&tplace&"|"&tfacs&"|"&tstyle&"|"&tmedium&"|"&tcolor



##TOOLTIP:
##Typeface tags can be used in either types of encoding. They
##are intended to help visualize the actual typefacing of words.
##Structure tags can also be used in both types of encoding.



#####################
#####################

## Script of button "Pragmatic Menu”, ID 1070 of CARD 1 of STACK STEP Transcription Module

on menuPick pItemName
   local tFldIDs,pAltsToPragmatize,tTranspoPragmaDescs,tListToAbbreviate,tLA,tListAbb,ots,tGapItems,listOfDescriptorsToDelete
   local tListOfAbbreviations,pStaRtr,uts,tStaGap,tStopGap,tLNs,tGapLine,tCG,tCG2,tWG,tWG2,ot,tLemma,yt,tLemma1,tLemma2,tLN2,tLN,tDescriptorList,tMargins,tL,tOffList
   lock screen
   put "1049,1067,1112,1174" into tFldIDs
   repeat with c = 1 to the number of items of tFldIDs
      set the cVScroll of fld id (item c of tFldIDs) of cd 1 to the vScroll of fld id (item c of tFldIDs) of cd 1
   end repeat
   switch pItemName
      case "Automatic Descr."
         lock screen
         show fld id 1049 of cd 1
         hide fld id 1067 of cd 1
         hide fld id 1112 of cd 1
         hide fld id 1174 of cd 1
         if the visible of fld id 1064 of cd 1 then put fld id 1064 of cd 1 into pAltsToPragmatize
         else put fld id 1017 of cd 1 into pAltsToPragmatize
         if the hilite of btn "Example" of cd 1 is true then put the cExamplePragmaTranspoHolder of fld id 1017 of cd 1 into tTranspoPragmaDescs
         else put the cPragmaTranspoHolder of fld id 1017 of cd 1 into tTranspoPragmaDescs
         put "intl ab del,intl bel del,ins ab del,ins bel del,ins next to del,ins right of del,ins left of del,added next to del,added bef del,added aft del,added ab del,added bel del,"&\
         "ins bef del,ins aft del,written over,careted-in,careted in,supralinear,infralinear,interlinear,top-margin,bottom-margin,left-margin,right-margin,in top margin,in right margin,in left margin,in bottom margin,shortEnd,lineEnd,lineBeginning" into listOfDescriptorsToDelete
         repeat for each item tDesc in listOfDescriptorsToDelete
            replace "] "&tDesc&" " with "] " in pAltsToPragmatize
            replace "["&tDesc&" " with "[" in pAltsToPragmatize
         end repeat
         put "before del,above del,after del,before del-t,after del-t,below del,below del-t,below inserted,above inserted,before inserted,inserted,ins inline,interlined,added,add alternate,written-over,next to del,right of del,left of del,next to del-t,right of del-t,left of del-t, deleted" into tListToAbbreviate
         put "bef del,ab del,aft del,bef del-t,aft del-t,bel del,bel del-t,bel ins,ab ins,bef ins,ins,ins,intl,add,added alternate,written over,near del,near del,near del,near del-t,near del-t,near del-t, del" into tListOfAbbreviations
         repeat with z = 1 to the number of items in tListToAbbreviate
            put offsets(item z of tListToAbbreviate,pAltsToPragmatize) into tListAbb
            put length(item z of tListToAbbreviate) into tLA
            if tListAbb is not 0 then
               repeat with y = the number of items of tListAbb down to 1
                  put item z of tListOfAbbreviations into char (item y of tListAbb) to (item y of tListAbb)+tLA-1 of pAltsToPragmatize
               end repeat
            end if
         end repeat
         replace space&space with space in pAltsToPragmatize
         if "[rtr]" is in pAltsToPragmatize then
            put offsets("[rtr]",pAltsToPragmatize) into ots
            repeat with x = the number of items of ots down to 1
               put item x of ots into pStaRtr
               put offsets("•",pAltsToPragmatize) into uts
               if the number of items of uts > 1 then
                  repeat with s = 1 to the number of items of uts
                     if item s of uts > pStaRtr then exit repeat
                  end repeat
                  delete char pStaRtr-1 to pStaRtr+4 of pAltsToPragmatize
                  delete char (item s-1 of uts) of pAltsToPragmatize 
               else
                  delete char pStaRtr-1 to pStaRtr+4 of pAltsToPragmatize
                  delete char uts of pAltsToPragmatize
               end if
            end repeat
         end if
         if "[before gap due to " is in pAltsToPragmatize or "[after gap due to " is in pAltsToPragmatize then
            put "[before gap due to ","[after gap due to " into tGapItems
            repeat with f = 1 to the number of items of tGapItems
               put offsets(item f of tGapItems,pAltsToPragmatize) into ots
               if ots <> 0 then
                  repeat with x = the number of items of ots down to 1
                     put item x of ots into tStaGap
                     put (offset("]",pAltsToPragmatize,tStaGap+1))+tStaGap into tStopGap
                     put offsets("•",pAltsToPragmatize) into uts
                     if the number of items of uts > 1 then
                        repeat with s = 1 to the number of items of uts
                           if item s of uts > tStaGap then exit repeat
                        end repeat
                        delete char tStaGap-1 to tStopGap of pAltsToPragmatize
                        delete char (item s-1 of uts) of pAltsToPragmatize 
                     else
                        delete char tStaGap-1 to tStopGap of pAltsToPragmatize
                        delete char uts of pAltsToPragmatize
                     end if
                  end repeat
               end if
            end repeat
         end if
         if "] before gap due to " is in pAltsToPragmatize or "] after gap due to " is in pAltsToPragmatize then
            put "] before gap due to ","] after gap due to " into tGapItems
            repeat with f = 1 to the number of items of tGapItems
               put lineOffsets(item f of tGapItems,pAltsToPragmatize) into tLNs
               if tLNs <> 0 then
                  repeat with x = the number of items of tLNs down to 1
                     delete line (item x of tLNs) of pAltsToPragmatize
                  end repeat
               end if
            end repeat
         end if
         if " before gap due to " is in pAltsToPragmatize or " after gap due to " is in pAltsToPragmatize then
            put " before gap due to "," after gap due to " into tGapItems
            repeat with f = 1 to the number of items of tGapItems
               put lineOffsets(item f of tGapItems,pAltsToPragmatize) into tLNs
               if tLNs <> 0 then
                  repeat with x = the number of items of tLNs down to 1
                     put line (item x of tLNs) of pAltsToPragmatize into tGapLine
                     put offset(item f of tGapItems,tGapLine) into tCG
                     put offset("caused by ",tGapLine) into tCG2
                     put the number of words of char 1 to tCG+length(word 1 of item f of tGapItems)-1 of tGapLine into tWG
                     put the number of words of char 1 to tCG2+length(word 1 of item f of tGapItems)-1 of tGapLine into tWG2
                     if word tWG-3 of tGapLine is "and" and tWG2 is not 0 and word tWG2+3 of tGapLine is empty then delete word tWG-3 to tWG2+2 of tGapLine
                     else if word tWG-3 of tGapLine is "and" and tWG2 is 0 then delete word tWG-3 to tWG+3 of tGapLine
                     else if word tWG-3 of tGapLine is "and" and tWG2 is not 0 and word tWG2+3 of tGapLine is "and" then delete word tWG-2 to tWG2+3 of tGapLine
                     put tGapLine into line (item x of tLNs) of pAltsToPragmatize
                  end repeat
               end if
            end repeat
         end if
         repeat for each line tTranspo in tTranspoPragmaDescs
            put offset("]",tTranspo) into ot
            put char 1 to ot-1 of tTranspo into tLemma
            if " ... " is in tLemma then
               put offset (" ... ",tLemma) into yt
               put char yt+5 to ot of tLemma into tLemma1
               put char 1 to yt-1 of tLemma into tLemma2
               put lineOffsets(tLemma2,pAltsToPragmatize) into tLN2
               repeat with x = 1 to the number of items of tLN2
                  if tLemma1 is in line (item x of tLN2) of pAltsToPragmatize then
                     put item x of tLN2 into tLN
                     exit repeat
                  end if
               end repeat
            else
               put lineOffset(tLemma,pAltsToPragmatize) into tLN
            end if
            put tTranspo into line tLN of pAltsToPragmatize
         end repeat
         if char -1 of pAltsToPragmatize is cr then delete char -1 of pAltsToPragmatize
         put pAltsToPragmatize into fld id 1049 of cd 1
         put "intl ab del,intl bel del,inserted,add,added,before del ,after del  ,after ins ,intl,ab ins ,bel ins ,bef ins , ins,[ins], del,bef del,ab del,aft del ,del aft ,del bef ,retraced,inserted and, ins and ,careted in,retraced and,passage deleted,"&\
         "in left margin,in right margin,in top margin,in bottom margin,margin and,written over,bel del, near del,del-t,btw,before gap and,before gap,and deletion of,and addition of,deletion of,addition of,are part of a single textual intervention,"&\
         "One alteration,Two alterations,Three alterations,Four alterations,Five alterations,Six alterations,Seven alterations,Eight alterations,Nine alterations,Ten alterations,Eleven alterations,Twelve alterations,infralinear,supralinear,inline,"&\
         "are alternate forms ,the author left undecided,are exclusive alternate forms ,are inclusive alternate forms ,Two words or,Three words or,Four words or,"&\
         "Five words or, phrases in alternation,(added alternate),(initial form),and (added alternate),(initial form) and,empty cell,"&\
         "; alternate form , is optimal.,; initial form ,; initial and alternate forms are equally acceptable., is strongly preferred to the alternate., is slightly preferred to the initial form., is slightly preferred to the alternate.,"&\
         " is strongly preferred to the initial form.,; first alternate form ,; second alternate form ,; initial and first alternate forms are  acceptable, but not the second alternate form.,"&\
         "; initial and second alternate forms are  acceptable, but not the first alternate form.,; first and second alternate forms are  acceptable, but not the initial form." into tDescriptorList
         put "in left margin,in right margin,in top margin,in bottom margin" into tMargins
         repeat for each item tItem in tDescriptorList
            put length(tItem) into tL
            put offsets(tItem,pAltsToPragmatize) into tOffList
            --if tItem is "Two alterations" then breakpoint
            if tOffList is not 0 then
               repeat for each item tOff in tOffList
                  --if checkLineIndex(tOff) is false then next repeat
                  if tItem is not among the items of "inserted and, ins, ins and ,[ins]" then set the textStyle of char tOff to tOff+tL-1 of fld id 1049 of cd 1 to "italic"
                  else 
                     switch tItem
                        case "inserted and"
                           if (char tOff-4 to tOff-1 of fld id 1049 of cd 1 is not "del ") and (char tOff-6 to tOff-1 of fld id 1049 of cd 1 is not "del-t ") then
                              set the textStyle of char tOff to tOff+tL-1 of fld id 1049 of cd 1 to "italic"
                           else set the textStyle of char tOff to tOff+tL-5 of fld id 1049 of cd 1 to "italic"
                           break
                        case " ins and "
                           if (char tOff-3 to tOff-1 of fld id 1049 of cd 1 is not "del") and (char tOff-5 to tOff-1 of fld id 1049 of cd 1 is not "del-t") then 
                              set the textStyle of char tOff+1 to tOff+7 of fld id 1049 of cd 1 to "italic"
                           else set the textStyle of char tOff+1 to tOff+3 of fld id 1049 of cd 1 to "italic"
                           break
                        case " ins"
                           if char tOff+4 of fld id 1049 of cd 1 is in space&cr then set the textStyle of char tOff+1 to tOff+3 of fld id 1049 of cd 1 to "italic"
                           break
                        case " del"
                           if char tOff+4 of fld id 1049 of cd 1 is cr then set the textStyle of char tOff+1 to tOff+3 of fld id 1049 of cd 1 to "italic"
                           break
                        case "[ins]"
                           set the textStyle of char tOff+1 to tOff+3 of fld id 1049 of cd 1 to "italic"
                           break
                     end switch
                  end if
               end repeat
            end if
         end repeat
         repeat for each item tDesc in tMargins
            put offsets(tDesc,pAltsToPragmatize) into ots
            if ots is not 0 then
               repeat with f = the number of items of ots down to 1
                  put empty into char(item f of ots) to (item f of ots)+length(tDesc)-1 of pAltsToPragmatize
                  put empty into char(item f of ots) to (item f of ots)+length(tDesc)-1 of fld id 1049 of cd 1
               end repeat
            end if
         end repeat
         put offsets("  ",pAltsToPragmatize) into ots
         if ots is not 0 then
            repeat with f = the number of items of ots down to 1
               put space into char(item f of ots) to (item f of ots)+1 of fld id 1049 of cd 1
            end repeat
         end if
         select line 1 of btn id 1070 of cd 1
         break
      case "XML"
         XMLing
         hide fld id 1049 of cd 1
         hide fld id 1067 of cd 1
         hide fld id 1174 of cd 1
         show fld id 1112 of cd 1
         break
      case ">>"
         if fld id 1049 of cd 1 is empty then 
            select line 1 of me
            exit menuPick
         end if
         if fld id 1067 of cd 1 is not empty then
            answer "The Edited Description field is not empty. Confirm you want to replace its content with the Automatic XML Description list of alterations." with "Cancel" or "Replace" as sheet
            if it is not "Cancel" then 
               shapeEdited
               select line 4 of me
            else
               if the visible of fld id 1049 then select line 1 of me
               else if the visible of fld id 1112 of cd 1 then select line 2 of me
               else if the visible of fld id 1067 of cd 1 then select line 4 of me
               else if the visible of fld id 1174 of cd 1 then select line 5 of me
            end if
         else
            shapeEdited
            select line 4 of me
         end if
         break
      case "Edit Descr."
         hide fld id 1049 of cd 1
         show fld id 1067 of cd 1
         hide fld id 1112 of cd 1
         hide fld id 1174 of cd 1
         break
      case "XML "
         XMLing2
         hide fld id 1049 of cd 1
         hide fld id 1067 of cd 1
         show fld id 1174 of cd 1
         hide fld id 1112 of cd 1
         break
   end switch
   repeat with c = 1 to the number of items of tFldIDs
      set the vScroll of fld id (item c of tFldIDs) of cd 1 to the cVScroll of fld id (item c of tFldIDs) of cd 1
   end repeat
   unlock screen
end menuPick

function checkLineIndex tW1
   local tLn,ut
   put the lineIndex of char tW1 of fld id 1049 of cd 1 into tLn
   put offset("]",line tLn of fld id 1049 of cd 1) into ut
   if tW1 > ut then return true else return false
end checkLineIndex

on XMLing
   local pFIDNum
   lock screen
   if fld id 1049 of cd 1 is not empty then put "1049" into pFIDNum
   else exit XMLing
   refacemphingText pFIDNum
   select before char 1 of fld id 1112 of cd 1
   unlock screen
end XMLing

on XMLing2
   local pFIDNum
   lock screen
   if fld id 1067 of cd 1 is not empty then put "1067" into pFIDNum
   else exit XMLing2
   refacemphingText2 pFIDNum
   select before char 1 of fld id 1174 of cd 1
   unlock screen
end XMLing2

on refacemphingText pFIDNum
   local tHTML,tNormalText,tPrefAnchor,tFacing,tTranspoDesc,tPragmaTranspoDesc,tAnchoList,tAnchoBeg,ots,tHLine,tNLine,tNLine2,tSpans,ot,tSpanLine,ut,ut2,tRef,tAnchPair,tHiliteIndex,tPair
   set the styledText of fld id 1112 of cd 1 to the styledText of fld id pFIDNum of cd 1
   put the HTMLText of fld id 1112 of cd 1 into tHTML
   put fld id pFIDNum of cd 1 into tNormalText
   replace "after ins" with "after inserted" in tNormalText
   put customAnchor() into tPrefAnchor
   filter tHTML without "<p></p>"
   put "&lt;hi rend="&quote&"italic"&quote&"&gt;" into tFacing
   replace "<i>" with tFacing in tHTML
   put "&lt;hi rend="&quote&"bold"&quote&"&gt;" into tFacing
   replace "<b>" with tFacing in tHTML
   put "&lt;hi rend="&quote&"underline"&quote&"&gt;" into tFacing
   replace "<u>" with tFacing in tHTML
   put "&lt;/hi&gt;" into tFacing
   replace "</i>" with tFacing in tHTML
   put "&lt;/hi&gt;" into tFacing
   replace "</b>" with tFacing in tHTML
   put "&lt;/hi&gt;" into tFacing
   replace "</u>" with tFacing in tHTML
   if the hilite of btn "Example" of cd 1 is true then put the cExampleTranspositionsHolder of fld id 1017 of cd 1 into tTranspoDesc
   else put the cTranspositionsHolder of fld id 1017 of cd 1 into tTranspoDesc
   if the hilite of btn "Example" of cd 1 is true then put the cExamplePragmaTranspoHolder of fld id 1017 of cd 1 into tPragmaTranspoDesc
   else put the cPragmaTranspoHolder of fld id 1017 of cd 1 into tPragmaTranspoDesc
   put empty into tAnchoList
   if tTranspoDesc is not empty then
      put quote&(fld id 1206 of cd 1) & (fld id 1207 of cd 1) &"-tr" into tAnchoBeg
      put offsets(tAnchoBeg,tTranspoDesc) into ots
      repeat with x = 1 to (the number of items of ots)-1 step 2
         put char (item x of ots)+1 to (item x of ots)+length(tAnchoBeg)+1 of tTranspoDesc &comma& char (item x+1 of ots)+1 to (item x+1 of ots)+length(tAnchoBeg)+1 of tTranspoDesc&cr after tAnchoList
      end repeat
   end if
   repeat with x = 1 to (the number of lines in tHTML)
      put line x of tHTML into tHLine
      if " metadata=" is in tHLine then put removeMetadata(tHLine) into tHLine
      put line x of tNormalText into tNLine
      put empty into tNLine2
      if "] bef del [" is in tNLine then 
         put tNLine into tNLine2
         replace "bef del" with "before del" in tNLine2
      end if
      if "] before ins [" is in tNLine then 
         put tNLine into tNLine2
         replace "before ins" with "before inserted" in tNLine2
      end if
      if tNLine is in tSpans or tNLine2 is in tSpans then 
         if "app from" is not in tHLine then
            put lineOffset(tNLine,tSpans) into ot
            if ot = 0 then put lineOffset(tNLine2,tSpans) into ot
            put line ot of tSpans into tSpanLine
            put offset("xml:id",tSpanLine) into ut
            put offset("/>",tSpanLine,ut) into ut2
            put char ut+8 to ut+ut2-2 of tSpanLine into tRef
            put "&lt;app "&"from="&quote&tRef&quote&"&gt;&lt;lem&gt;" after char 3 of tHLine
            put "&lt;/lem&gt;" before char offset("]",tHLine) of tHLine
            put "&lt;/app&gt;" before char offset("</p>",tHLine) of tHLine
            put tHLine into line x of tHTML
         end if
         next repeat
      end if
      if tNLine is in tPragmaTranspoDesc then
         put lineOffset(tNLine,tPragmaTranspoDesc) into ut
         put line ut of tAnchoList into tAnchPair
         put "&lt;app from="&quote&(item 1 of tAnchPair)&quote&&"to="&quote&(item 2 of tAnchPair)&quote&"&gt;&lt;lem&gt;" after char offset(">",tHLine) of tHLine
         put "&lt;/lem&gt;" before char offset("]",tHLine) of tHLine
         put "&lt;/app&gt;" before char offset("</p>",tHLine) of tHLine
         put tHLine into line x of tHTML
         next repeat
      end if
      if the hilite of btn "Example" of cd 1 is true then put the cExampleAltIndex of btn id 1020 of cd 1 into tHiliteIndex
      else put the cAllRunAltsLoc of fld id 1126 of cd 1 into tHiliteIndex
     -- if the hilite of btn "Example" of cd 1 is true then put the cExampleAltIndex of btn id 1020 of cd 1 into tHiliteIndex
      --else put the cAltIndex of btn id 1020 of cd 1 into tHiliteIndex
      put trueword 1 of line x of tHiliteIndex into tPair
      if quote&">" is in tHLine then put "&lt;app from="&quote& tPrefAnchor&(item 1 of tPair) &quote&" to="&quote& tPrefAnchor&(item 2 of tPair) & quote&"&gt;&lt;lem&gt;" after char offset(quote&">",tHLine)+1 of tHLine
      else put "&lt;app from="&quote&tPrefAnchor&(item 1 of tPair)&quote&&"to="&quote&tPrefAnchor&(item 2 of tPair)&quote&"&gt;&lt;lem&gt;" after char offset(">",tHLine) of tHLine
      put "&lt;/lem&gt;" before char offset("]",tHLine) of tHLine
      put "&lt;/app&gt;" before char offset("</p>",tHLine) of tHLine
      put tHLine into line x of tHTML
   end repeat
   XMLDeclarations tHTML
   set the HTMLText of fld id 1112 to tHTML
end refacemphingText

on XMLDeclarations @tHTML
   put "&lt;div&gt;"&cr&"&lt;listApp&gt;"&cr&"&lt;head&gt;Pragmatic description of alterations&lt;/head&gt;"&cr before tHTML
   put cr&"&lt;/listApp&gt;"&cr&"&lt;/div&gt;" after tHTML
   put "&lt;encodingDesc&gt;"&cr&"&lt;variantEncoding method="&quote&"double-end-point"&quote&" location="&quote&"external"&quote&"/&gt;"&cr&cr&"&lt;/encodingDesc&gt;" before tHTML
end XMLDeclarations


on shapeEdited
   local tHTML,tXML,ot,yt
   put the HTMLText of fld id 1049 of cd 1 into tHTML
   put line 2 to -2 of fld id 1112 of cd 1 into tXML
   repeat with x = 1 to the number of lines of tXML
      put offset(">",line x of tXML) into ot
      put char 1 to ot of line x of tXML into yt
      replace "<" with "&lt;" in yt
      replace ">" with "&gt;" in yt
      if " metadata=" is in line x of tHTML then put removeMetadata(line x of tHTML) into line x of tHTML
      put yt after char 3 of line x of tHTML
      put "&lt;/app&gt;" before char -4 of of line x of tHTML
   end repeat
   set the HTMLText of fld id 1067 of cd 1 to tHTML
   if char -1 of fld id 1067 of cd 1 is cr then delete char -1 of fld id 1067 of cd 1
end shapeEdited

on refacemphingText2 pFIDNum
   local tHTML,tFacing,tHiliteIndex,tHLine
   set the styledText of fld id 1174 of cd 1 to the styledText of fld id pFIDNum of cd 1
   put the HTMLText of fld id 1174 of cd 1 into tHTML
   filter tHTML without "<p></p>"
   put "&lt;hi rend="&quote&"italic"&quote&"&gt;" into tFacing
   replace "<i>" with tFacing in tHTML
   put "&lt;hi rend="&quote&"bold"&quote&"&gt;" into tFacing
   replace "<b>" with tFacing in tHTML
   put "&lt;hi rend="&quote&"underline"&quote&"&gt;" into tFacing
   replace "<u>" with tFacing in tHTML
   put "&lt;/hi&gt;" into tFacing
   replace "</i>" with tFacing in tHTML
   put "&lt;/hi&gt;" into tFacing
   replace "</b>" with tFacing in tHTML
   put "&lt;/hi&gt;" into tFacing
   replace "</u>" with tFacing in tHTML
   if the hilite of btn "Example" of cd 1 is true then put the cExampleAltIndex of btn id 1020 of cd 1 into tHiliteIndex
   else put the cAltIndex of btn id 1020 of cd 1 into tHiliteIndex
   repeat with x = 1 to the number of lines in tHTML
      put line x of tHTML into tHLine
      if "app from" is in tHLine then
         put "&lt;lem&gt;" after char offset(quote&"&gt;",tHLine)+4 of tHLine
         put "&lt;/lem&gt;" before char offset("]",tHLine) of tHLine
      else
         put "&lt;lem&gt;" after char offset("app&gt;",tHLine)+6 of tHLine
         put "&lt;/lem&gt;" before char offset("]",tHLine) of tHLine 
      end if
      put tHLine into line x of tHTML
   end repeat
   XMLDeclarations tHTML
   set the HTMLText of fld id 1174 to tHTML
end refacemphingText2

function removeMetadata pLine
   put empty into char offset(" metadata",pLine) to offset("/>"&quote&">",pLine)+2 of pLine
   if char 1 to 3 of pLine is not "<p>" then put empty into char 3 to offset(quote&">",pLine) of pLine
   return pLine
end removeMetadata

on mouseWithin
   local tDiff
   put round((the width of this stack) - (the minWidth of this stack)) into tDiff
   get the mouseH
   if it > (770+tDiff) and it < (878+tDiff) then showtooltip(771)
   else if it > (877+tDiff) and it < (923+tDiff) then showtooltip(878)
   else if it > (922+tDiff) and it < (965+tDiff) then showtooltip(923)
   else if it > (964+tDiff) and it < (1049+tDiff) then showtooltip(965)
   else if it > (1048+tDiff) and it < (1096+tDiff) then showtooltip(1049)
end mouseWithin

on showtooltip pRect
   local tltp
   switch pRect
      case "771"
         put "Click “Automatic Description” to simplify the syntactical descriptions recorded in the"&cr&\
         "“Edited Description” field above if not empty or else in  the “Automatic Description” field." into tltp
         break
      case "878"
         put "Generates an XML rendition of the automatic pragmatic descriptions, along with their anchors." into tltp
         break
      case "923"
         put "Moves the XML pragmatic descriptions to a field where you can edit them." into tltp
         break
      case "965"
         put "Shows a field where you can EDIT the automatic alteration descriptions "&cr&\
         "to improve them (between the opening and closing <app> tag)." into tltp
         break
      case "1049"
         put "Generates an XML rendition of the edited pragmatic descriptions, along with their anchors." into tltp
         break
   end switch
   set the toolTip of btn id 1070 of cd 1 to tltp
end showtooltip

##TOOLTIP:
##Shows a field where you can EDIT the automatic alteration descriptions 
##to improve them (between the opening and closing <app> tag).


#####################
#####################

## Script of button "Check encoding" of card "card id 1002" of stack "/Users/adetienn/Documents/STEP Externals/STEP-LI 7.1.4/STEP Transcription Module.livecode" ID 1047 of CARD 1 of STACK STEP Transcription Module

on mouseUp
   if not the visible of btn id 1025 of cd 1 of stack "STEP Transcription Module" then exit mouseUp
   lock screen
   checkInvalidTags
end mouseUp

on checkInvalidTags
   local tTagList,tN1,tN2,tN3,tN4,tN5,tListOfAbuttingTags,tListOfAbuttingTags1,tListOfAbuttingTags2,tListOfAbuttingTags3,tBadTags,tBadChunks
   local tText,ut,ot,tSeq,tVScroll,tReg,tUt,tSubstText
   put fld id 1004 of cd 1 into tText
   if "<add><del>" is in tText or "</del></add>" is in tText then
      put offsets("<add><del>",tText) into ut
      if ut <> 0 then 
         repeat for each item tUt in ut
            put offset("</del>",tText,tUt) into ot
            if char (tUt+ot+6) to (tUt+ot+11) of tText is "</add>" then 
               put char tUt to (tUt+ot+11) of tText & "|" & tUt,(tUt+ot+11) & cr after tListOfAbuttingTags1
            end if
         end repeat
      else
         put offsets("</del></add>",tText) into ut
         if ut <> 0 then 
            repeat for each item tUt in ut
               if "</subst>" is not in char tUt+11 to tUt+20 of tText then 
                  put  offsetOfOnePrecedingString(char 1 to tUt-1 of tText,"<add",false) into ot
                  put char ot to tUt+11 of tText & "|" & ot,(tUt+11) & cr after tListOfAbuttingTags1
               end if
            end repeat
         end if
      end if
      if tListOfAbuttingTags1 <> empty then 
         put "The following entries contain the sequence"&cr&\
         "“<add><del>...</del></add>.” Logic dictates that an author"&cr&\
         "may delete an addition but not add a deletion (unless only a"&cr&\
         "portion of the addition is deleted). See whether they need to"&cr&\
         "be replaced with <del><add>...</add></del>." & cr & cr before tListOfAbuttingTags1
      end if
   end if
   if "<subst><add>" is in tText or "</del></subst>" is in tText then
      put offsets("<subst><add>",tText) into ut
      if ut <> 0 then 
         repeat for each item tUt in ut
            put offset("</add></subst>",tText,tUt) into ot
            put char tUt to tUt+ot of tText into tSubstText
            if "<del" is not in  tSubstText or "</del>" is not in tSubstText then 
               put char tUt to tUt+ot+13 of tText & "|" & tUt,(tUt+ot+13) & cr after tListOfAbuttingTags2
            end if
         end repeat
      else
         put offsets("</del></subst>",tText) into ut
         if ut <> 0 then
            repeat for each item tUt in ut
               put  offsetOfOnePrecedingString(char 1 to tUt-1 of tText,"<subst><del",false) into ot
               put char ot to tUt of tText into tSubstText
               if "<add" is not in  tSubstText or "</add>" is not in tSubstText then 
                  put char ot to tUt+12 of tText & "|" & ot,(tUt+12) & cr after tListOfAbuttingTags2
               end if
            end repeat
         end if
      end if
      if tListOfAbuttingTags2 <> empty then 
         put "The following entries contain either the sequence"&cr&\
         "“<subst><add>...</add></subst>” (missing <del></del> tags)"&cr&\
         "or “<subst><del>...</del></subst>” (missing <add></add> tags)."&cr&\
         " Either remove the <subst> tags or add the missing tags." & cr &cr before tListOfAbuttingTags2
      end if
   end if
   put "add,del,unclear,graphic,p,gap,sic,retrace,restore,change,damage" into tTagList
   repeat for each item tTag in tTagList
      repeat while tN2 is not false
         put "(<"&tTag&"[^/^>]*></"&tTag&">)" into tReg
         put matchText(tText,tReg,tN1) into tN2
         if tN2 is true then
            put matchChunk(tText,tReg,tN3,tN4) into tN5
            put tN1 & "|" & tN3,tN4 & cr after tListOfAbuttingTags3
            put "@" into char tN3 of tText
         end if
      end repeat
      put empty into tN2
   end repeat
   if tListOfAbuttingTags3 <> empty then 
      put "The following entries contain tags without content in their middle. This may"&cr&\
      "be problematic (especially regarding proper listing of alterations descriptions)."&cr&\
      "Try to fill them with content, or delete them, or turn them into self-closing tags"&cr&\
      "(<tag attribute="&quote&"value"&quote&"/>) with information moved into values of attributes." & cr & cr before tListOfAbuttingTags3
   end if
   if tListOfAbuttingTags1 <> empty then put  tListOfAbuttingTags1 & cr after tListOfAbuttingTags
   if tListOfAbuttingTags2 <> empty then put  tListOfAbuttingTags2 & cr after tListOfAbuttingTags
   if tListOfAbuttingTags3 <> empty then put  tListOfAbuttingTags3 & cr after tListOfAbuttingTags
   put gatherAndCompareListOfAllTagsAndTheirLocs() after tListOfAbuttingTags
   put checkForWrongTagsInsideSelfClosingTags(tText)  after tListOfAbuttingTags
   if tListOfAbuttingTags <> empty then
      set the itemDel to "|"
      repeat for each line tLine in tListOfAbuttingTags
         if "|" is not in tLine then
            put tLine&cr after tBadTags
            put cr after tBadChunks
            next repeat
         end if
         put item 1 of tLine & cr after tBadTags
         put item 2 of tLine & cr after tBadChunks
      end repeat
      if not the visible of fld id 1004 of cd 1 of stack "STEP Transcription Module" then
         select line 1 of btn id 1025 of cd 1 of stack "STEP Transcription Module"
      end if
      put tBadTags into fld id 1005 of cd 1 of stack "Found Strings"
      set the cBadTags of stack "Found Strings" to tBadTags
      set the cBadChunks of stack "Found Strings" to tBadChunks
      set the cContent of stack "Found Strings" to "Bad Tags"
      set the title of stack "Found Strings" to "Potentially Problematic Tags"
      palette stack "Found Strings"
   else 
      answer "No tagging problems were found." as sheet
   end if
end checkInvalidTags

function gatherAndCompareListOfAllTagsAndTheirLocs
   local ut,ut1,ut2,ut3,ut4,ut5,yt,tag,tList,tList2,tList3,tList4,tList5,tList6,tAttrib,tAttributes,tValues,tSign1,tChars,tClosedAng,tReport,tOpenMissingClosedReport,tC1
   local tEndAngLocs,tOpenAng,tOpenAngLocs,tNum1,tNum2,tItem1,tItem2,tItem1Bis,tOpenMissingClosedAngs,tClosedMissingOpenAngs,tClosedMissingOpenReport
   local tWrongSCList,tSCList,tText
   put fld id 1004 of cd 1 of stack "STEP Transcription Module" into tText
   get tText
   put "%•@€¶§∞ºª∂∑√≤«ÆÚ∏Ø" into tChars
   repeat with i = 1 to length(tChars)
      if char i of tChars is not in it then 
         put char i of tChars into tSign1
         exit repeat
      end if
   end repeat
   replace "<" with tSign1&"<" in it
   replace ">" with ">"&tSign1 in it
   set the itemDel to tSign1
   put listLocsOfAllItems(it,tSign1) into ut1
   filter items of it with regex pattern "<[^>]+>" into ut
   filter lines of ut1 with regex pattern "<[^>]+>" into ut2
   filter lines of ut2 with "</*" into ut3
   put "pb,lb,gap,graphic,handshift,milestone,addSpan,delSpan,damageSpan,substJoin,alt,anchor,space,ptr" into tSCList
   repeat for each line tClosedAng in ut3
      put empty into tOpenAngLocs
      put char offset(tab,tClosedAng)+1 to -1 of tClosedAng into tEndAngLocs
      put "<"&trueword 1 of tClosedAng into tOpenAng
      filter lines of ut2 with regex pattern tOpenAng&"[>| ]+" into ut4
      repeat for each line tLine in ut4
         put char offset(tab,tLine)+1 to -1 of tLine after tOpenAngLocs
      end repeat
      set the itemDel to "|"
      sort items of tOpenAngLocs ascending numeric by itemizeItem(each)
      delete char 1 of tOpenAngLocs
      set the itemDel to comma
      if trueword 1 of tClosedAng is among the items of tSCList then
         put checkingTagsThatShouldBeSelfEnclosed(ut4,tEndAngLocs,tOpenAngLocs,tText) into ut5
         if ut5 <> empty then put ut5 &cr after tWrongSCList
      end if
      set the itemDel to "|"
      put the number of items of tOpenAngLocs into tNum1
      put the number of items of tEndAngLocs into tNum2
      if tNum1 = tNum2 then next repeat
      put 0 into tC1
      
      if tNum1 > tNum2 then
         repeat with i = tNum1 down to 2
            put item i of tOpenAngLocs into tItem1
            put item tNum2 of tEndAngLocs into tItem1Bis
            set the itemDel to comma
            if (item 1 of tItem1 > item 2 of tItem1Bis) then
               set the itemDel to "|"
               put item i of tOpenAngLocs & cr after tOpenMissingClosedAngs
            else
               subtract 1 from tNum2
               set the itemDel to "|"
            end if
         end repeat 
      end if
      
      if tNum2 > tNum1 then
         repeat with i = 1 to tNum2
            add 1 to tC1
            put item tC1 of tOpenAngLocs into tItem1
            put item i of tEndAngLocs into tItem1Bis
            set the itemDel to comma
            if (item 1 of tItem1 > item 2 of tItem1Bis) then
               set the itemDel to "|"
               put item i of tEndAngLocs & cr after tClosedMissingOpenAngs
               subtract 1 from tC1
            else
               set the itemDel to "|"
            end if
         end repeat 
      end if
      
      
      repeat with i = 1 to (the number of items of tOpenAngLocs)-1
         put item i of tOpenAngLocs into tItem1
         put item i+1 of tOpenAngLocs into tItem2
         add 1 to tC1
         put item tC1 of tEndAngLocs into tItem1Bis
         set the itemDel to comma
         if (item 2 of tItem1 < item 1 of tItem1Bis) and (item 2 of tItem2 < item 2 of tItem1Bis) then
            set the itemDel to "|"
            put item i of tOpenAngLocs & cr after tOpenMissingClosedAngs
            put tC1-1 into tC1
         end if
         set the itemDel to "|"
      end repeat
      put 0 into tC1
      repeat with i = 1 to (the number of items of tEndAngLocs)-1
         put item i of tEndAngLocs into tItem1
         add 1 to tC1
         put item tC1 of tOpenAngLocs into tItem1Bis
         set the itemDel to comma
         if (item 2 of tItem1 < item 1 of tItem1Bis) then
            set the itemDel to "|"
            put item i of tEndAngLocs & cr after tClosedMissingOpenAngs
            put tC1-1 into tC1
         end if
         set the itemDel to "|"
      end repeat
      put stripDuplicates(tOpenMissingClosedAngs) into tOpenMissingClosedAngs
      put stripDuplicates(tClosedMissingOpenAngs) into tClosedMissingOpenAngs
      if tOpenMissingClosedAngs <> empty then
         repeat for each line tLine2 in tOpenMissingClosedAngs
            put segment 1 of line lineOffset(tLine2,ut4) of ut4 & "|" & tLine2 & cr after tOpenMissingClosedReport
         end repeat
      end if
      if tClosedMissingOpenAngs <> empty then
         repeat for each line tLine3 in tClosedMissingOpenAngs
            put segment 1 of  tCLosedAng & "|" & tLine3 & cr after tClosedMissingOpenReport
         end repeat
      end if
      put empty into tOpenMissingClosedAngs
      put empty into tClosedMissingOpenAngs
   end repeat
   if tOpenMissingClosedReport <> empty then
      put "The following entries contain opening tags (<tag>) not"&cr&\
      "followed by a corresponding closing tag (</tag>)."&cr &cr before tOpenMissingClosedReport
   end if
   if tClosedMissingOpenReport <> empty then
      put "The following entries contain closing tags (</tag>) not"&cr&\
      "preceded by a corresponding opening tag (<tag>)."&cr &cr before tClosedMissingOpenReport
   end if
   if tOpenMissingClosedReport <> empty then put  tOpenMissingClosedReport & cr after tReport
   if tClosedMissingOpenReport <> empty then put  tClosedMissingOpenReport & cr after tReport
   if tWrongSCList <> empty then
      put "The following entries contain sequences of opening and closing tags"&cr&\
      "(<tag> ... </tag>) that should be turned into self-closing tags (<tag ... />)."&cr &cr before tWrongSCList
   end if
   if tWrongSCList <> empty then put  tWrongSCList & cr after tReport
   return tReport
end gatherAndCompareListOfAllTagsAndTheirLocs

function itemizeItem pitem
   set the itemDel to comma
   put item 1 of pitem into pitem
   set the itemDel to "|"
   return pitem
end itemizeItem
   
function checkingTagsThatShouldBeSelfEnclosed pOpenAngleLists,pEndAngLocs,pOpenAngLocs,@tText
   local tList,tWrongSCList,tItem1,tItem2
   filter lines of pOpenAngleLists without regex pattern "<[^\/]+/>"
   if pOpenAngleLists <> empty then
     set the itemDel to "|"
     repeat with i = 1 to the number of items of pOpenAngLocs
        set the itemDel to "|"
        put item i of pOpenAngLocs into tItem1
        if tItem1&"|" is not in pOpenAngleLists then next repeat
        put item i of pEndAngLocs into tItem2
        set the itemDel to comma
        put char  (item 1 of tItem1) to (item 2 of tItem2) of tText & "|" & item 1 of tItem1,item 2 of tItem2 & cr after tWrongSCList
     end repeat
   end if
   return tWrongSCList
end checkingTagsThatShouldBeSelfEnclosed

function checkForWrongTagsInsideSelfClosingTags @pText
   local tSCT,tSC,tWSCList,ut,tItem,ot
   if "="&quote&"<" is in pText then
      get offsets("="&quote&"<",pText)
      repeat for each item tItem in it
         put offset(quote,pText,tItem+2) into ot
         put char tItem+1 to tItem+ot+2 of pText&"|"&tItem+1 & comma &tItem+ot+2& cr after tWSCList
      end repeat
   end if
   if tWSCList <> empty then 
      put "The following entries contain one or more tags inside the value of an"&cr&\
      "attribute, which is not permissible. Situations that seemed to call for"&cr&\
      "such tags are likely better described within the TEI header." & cr & cr before tWSCList
   end if
   return tWSCList
end checkForWrongTagsInsideSelfClosingTags


-------------
on mouseUp2
   local tFldList,tFontCommandList
   if fld id 1004 of cd 1 is empty then exit mouseUp2
   if fld id 1041 of cd 1 is not empty then
      if the visible of btn id 1025 of cd 1 then
         answer "Updating the current content of Description fields with new transcriptive data will make you lose current descriptive encoding if any. Select one option." with "Cancel" or "Update and Access" or "Update" as sheet
         if it is "Cancel" then 
            exit mouseUp2
         else if it is "Update" then 
            formatDescriptionText
            exit mouseUp2
         else if it is "Update and Access" then 
            formatDescriptionText
         end if
      else if the visible of btn id 1040 of cd 1 then
         answer "Updating the current content of Description fields with new transcriptive data will make you lose current descriptive encoding if any." with "Cancel" or "Update" as sheet
         if it is "Cancel" then 
            exit mouseUp2
         else if it is "Update" then 
            formatDescriptionText
            exit mouseUp2
         end if
      end if
   else if fld id 1041 of cd 1 is empty then
      formatDescriptionText
      if the visible of btn id 1040 of cd 1 then exit mouseUp2
      answer "Transcriptive data have been transferred to descriptive fields. Access STEP Descriptor or remain in STEP Transcriptor?" with "STEP Descriptor" or "STEP Transcriptor" as sheet
      if it is "STEP Transcriptor" then exit mouseUp2
   end if
   put "1004,1026,1029,1126,1163" into tFldList
   repeat for each item tFldID in tFldList
      hide fld id tFldID of cd 1
   end repeat
   hide btn id 1025 of cd 1
   hide graphic id 1920 of cd 1
   put "1041,1139,1044,1151,1154,1157" into tFldList
   repeat for each item tFldID in tFldList
      set the visible of fld id tFldID of cd 1 to the cVisibleStatus of fld id tFldID of cd 1
   end repeat
   showDescriptiveTools
   show graphic id 1160 of cd 1
   show graphic id 1919 of cd 1
   show btn id 1040 of cd 1
   set the menuHistory of btn id 1040 of cd 1 to the cLastTabOfMe of btn id 1040 of cd 1
   put "3,4,6,7,9,10" into tFontCommandList
   repeat for each item tItem in tFontCommandList
      if char 1 of line tItem of btn "Font" of group "STEP Menu 1" of cd 1 <> "(" then put "(" before line  tItem of btn "Font" of group "STEP Menu 1" of cd 1
   end repeat
   set the lockscreen to false
end mouseUp2

on formatDescriptionText
   set the lockscreen to true
   saveForUndoRedo 1041
   refacemphingText
   send "mouseUp 1041" to btn "Color all tags" of cd 1
   send "mouseUp 1151" to btn "Color all tags" of cd 1
   put empty into fld id 1044 of cd 1
   saveForUndoRedo 1041
end formatDescriptionText

on refacemphingText
   local tTwoFields,tHTML,tPara,tFacing
   if "<br>" is in the cBrHTMLText of fld id 1029 of cd 1 then
      set the text of fld id 1041 of cd 1 to the cBrHTMLText of fld id 1029 of cd 1
      set the cBrHTMLText of fld id 1041 of cd 1 to the cBrHTMLText of fld id 1029 of cd 1
   else
      set the styledText of fld id 1041 of cd 1 to the styledText of fld id 1029 of cd 1
      set the cBrHTMLText of fld id 1041 of cd 1 to empty
   end if
   if "<br>" is in the cBrHTMLText of fld id 1026 of cd 1 then
      set the text of fld id 1151 of cd 1 to the cBrHTMLText of fld id 1026 of cd 1
      set the cBrHTMLText of fld id 1151 of cd 1 to the cBrHTMLText of fld id 1026 of cd 1
   else
      set the styledText of fld id 1151 of cd 1 to the styledText of fld id 1026 of cd 1
      set the cBrHTMLText of fld id 1151 of cd 1 to empty
   end if
   put "1041,1151" into tTwoFields
   repeat for each item tFldID in tTwoFields
      if "<br>" is in the cBrHTMLText of fld id tFldID of cd 1 then put the cBrHTMLText of fld id tFldID of cd 1 into tHTML else put the HTMLText of fld id tFldID of cd 1 into tHTML
      put "&lt;p&gt;" into tPara
      replace "<p>" with tPara in tHTML
      put "&lt;/p&gt;</p>" into tPara
      replace "</p>" with tPara in tHTML
      put "<emph rend="&quote&"italic"&quote&">" into tFacing
      replace "<i>" with tFacing in tHTML
      put "<emph rend="&quote&"bold"&quote&">" into tFacing
      replace "<b>" with tFacing in tHTML
      put "<emph rend="&quote&"underline"&quote&">" into tFacing
      replace "<u>" with tFacing in tHTML
      put "</emph>" into tFacing
      replace "</i>" with tFacing in tHTML
      replace "</b>" with tFacing in tHTML
      replace "</u>" with tFacing in tHTML
      replace "&lt;/p&gt;</p>"  with "</p>" in tHTML
      replace "&lt;p&gt;"  with "<p>" in tHTML
      --put removeExtraCodeUnits(tHTML) into tHTML
      --if "<br>" is in the cBrHTMLText of fld id tFldID of cd 1 then set the text of fld id tFldID of cd 1 to tHTML else set the text of fld id tFldID of cd 1 to tHTML
      set the text of fld id tFldID of cd 1 to tHTML
      put replaceText(fld id tFldID of cd 1,"<br>","<lb/>") into fld id tFldID of cd 1
   end repeat
   if not the visible of fld id 1041 of cd 1 then select line 1 of btn id 1040 of cd 1
end refacemphingText

function removeExtraCodeUnits pHText
   local tReg
   put ";&#[\d]+;" into tReg
   put replaceText(pHText,tReg,";") into pHText
   return pHText
end removeExtraCodeUnits


##TOOLTIP:
##Click to get a report about tags that might cause
##problem if they are ill-formed or enclose no content.



#####################
#####################

## Script of button "Close”, ID 1079 of CARD 1 of STACK STEP Transcription Module

on mouseUp
   if the hilite of btn "Example" of cd 1 is true then send mouseUp to btn id 1169 of cd 1
   send "mouseUp" to btn id 1073 of cd 1
   stuffToDoBeforeClosingOrQuitting
   close stack "STEP Transcription Module"
end mouseUp


field "Alteration Tag" of card "card id 1002" of stack "/Users/adetienn/Documents/STEP Externals/STEP-LI 7.1.4/STEP Transcription Module.livecode" ID 1035 of CARD 1 of STACK STEP Transcription Module

on mouseUp
   if the environment is "development" then
      set the cursor to watch
      collectAllScripts
   end if
end mouseUp


field "Typeface" of card "card id 1002" of stack "/Users/adetienn/Documents/STEP Externals/STEP-LI 7.1.4/STEP Transcription Module.livecode" ID 1036 of CARD 1 of STACK STEP Transcription Module


##TOOLTIP:
##The menu below also includes special tags for in-house messages
##which can be inserted anywhere to draw supervisory attention.



#####################
#####################

## Script of button " " of card "card id 1002" of stack "/Users/adetienn/Documents/STEP Externals/STEP-LI 7.1.4/STEP Transcription Module.livecode" ID 1038 of CARD 1 of STACK STEP Transcription Module

on mouseEnter 
   if the cTagTip of this stack is "off" then exit mouseEnter
   get the label of me
   if it is empty then pass mouseEnter
   if it contains "/" then get char offset("/",it) + 1 to -1 of it
   else if it is "emphasis" then get "emph"
   get getElementTEIExplanation(it)
   floating it
end mouseEnter

on floating @pAttr--behaves like a tooltip
   lock screen
   set the height of fld "Floater" of cd 1 to 19
   if pAttr is not empty then 
      if pAttr is not the text of fld "Floater" of cd 1 then
         set the vis of fld "Floater" of cd 1 to false
         put lineBreaker(pAttr) into fld "Floater" of cd 1
         set the height of fld "Floater" of cd 1 to the formattedHeight of fld "Floater" of cd 1
         set the textAlign of fld "Floater" to "left"
         set the topRight of fld "Floater" of cd 1 to ((the left of fld id 1010 of cd 1)+212,(the top of fld id 1010 of cd 1)-50)
         set the vis of fld "Floater" of cd 1 to true
      else
         set the topRight of fld "Floater" of cd 1 to ((the left of fld id 1010 of cd 1)+212,(the top of fld id 1010 of cd 1)-50)
      end if
   else
      set the vis of fld "Floater" of cd 1 to false
   end if
end floating

on mouseLeave
   set the vis of fld "Floater" of cd 1 to false
end mouseLeave

on float pmsg--behaves like a tooltip
   local pExpanded
   put desabbreviateSomeTags(pmsg) into pExpanded
   if pExpanded is not empty then 
      if pExpanded is not in fld "Floater" of cd 1 then set the vis of fld "Floater" of cd 1 to false
      put pExpanded into fld "Floater" of cd 1
      set the height of fld "Floater" of cd 1 to (the formattedHeight of fld "Floater" of cd 1)/*-6*/
      set the dontWrap of fld "Floater" to true
      set the textAlign of fld "Floater" to "center"
      set the right of  fld "Floater" of cd 1 to (the left of btn id 1008 of cd 1)-6
      set the top of  fld "Floater" of cd 1 to the top of btn id 1008 of cd 1
      set the vis of fld "Floater" of cd 1 to true
   else
      set the vis of fld "Floater" of cd 1 to false
   end if
end float

on menuPick pItemName
   set the label of btn id 1008 to empty
   set the label of btn id 1034 to empty
   put empty into btn id 1060
   put empty into btn id 1061
   set the itemDel to "|"
   if item 2 of pItemName is not empty then put item 2 of pItemName into pItemName else put item 1 of pItemName into pItemName
   set the itemDel to comma
   if length(pItemName) > 14 then set the textSize of me to 10 else set the textSize of me to 12
   set the label of me to pItemName
   put angleTag(recognizeTag(pItemName)) into fld id 1010 of cd 1
   send "menuPick"&&(line 1 of btn id 1060 of cd 1)&",true" to btn id 1060 of cd 1
end menuPick

function angleTag tTag
   if tTag is "cae" then return "<choice><abbr></abbr><expan></expan></choice>"
   if tTag is among the items of "lb/,pb/,gb/,cb/" then return "<"&tTag&">" else return "<"&tTag&"></"&tTag&">"
end angleTag

function recognizeTag tTag
   switch tTag
      case "abbr"
      case "abbreviation"
         populateAttributes "abbr","type"
         return "abbr"
         break
      case "author"
         populateAttributes "author","nymRef,role"
         return "author"
         break
      case "choice"
         populateAttributes "choice"
         return "choice"
         break
      case "choice/abbr/expan"
         return "cae"
         break
      case "cit"
      case "cited quotation"
      case "citation"
         populateAttributes "cit","type,xml:lang"
         return "cit"
         break
      case "corr"
         populateAttributes "corr","cert,resp,source,subtype,type"
         return "corr"
         break
      case "date"
         populateAttributes "date","cert,resp,source,subtype,type"
         return "date"
         break
      case "editor"
         populateAttributes "editor","nymRef,role"
         return "editor"
         break
      case "ex"
         populateAttributes "ex"
         return "ex"
         break
      case "expan"
      case "expansion"
         populateAttributes "expan","cert,resp"
         return "expan"
         break
      case "foreign"
         populateAttributes "foreign","xml:lang"
         return "foreign"
         break
      case "metamark"
         populateAttributes "metamark","function,target"
         return "metamark"
         break
      case "mod"
         populateAttributes "mod","cert,resp,spanTo,status,type"
         return "mod"
         break
      case "publisher"
         populateAttributes ""
         return "publisher"
         break
      case "pubPlace"
         populateAttributes "publisher"
         return "pubPlace"
         break
      case "q"
         populateAttributes "q"
         return "q"
         break
      case "line beginning/lb"
      case "line beginning"
      case "lb"
      case "linebreak"
         populateAttributes "lb"
         return "lb/"
         break
      case "gb"
      case "gathering"
         populateAttributes "gb"
         return "gb/"
         break
      case "cb"
      case "column beginning"
         populateAttributes "cb"
         return "cb/"
         break
      case "page beginning/pb"
      case "page beginning"
      case "pb"
      case "pagebreak"
         populateAttributes "pb","n,facs"
         return "pb/"
         break
      case "quotation"
      case "quote"
         populateAttributes "quote","type"
         return "quote"
         break
      case "sic"
         populateAttributes "sic"
         return "sic"
         break
      case "supplied"
         populateAttributes "supplied","reason,source"
         return "supplied"
         break
      case "title"
         populateAttributes "title","level"
         return "title"
         break
      case "emphasis"
      case "emph"
         populateAttributes "emph","change,rend,rendition,style"
         return "emph"
         break
      case "bibliography"
      case "bibl"
         populateAttributes "bibl","subtype,type"
         return "bibl"
         break
      case "name"
         populateAttributes "name"
         return "name"
         break
      case "forename"
         populateAttributes "forename"
         return "forename"
         break
      case "surname"
         populateAttributes "surname"
         return "surname"
         break
      case "persName"
         populateAttributes "persName"
         return "persName"
         break
      case "addName"
         populateAttributes "addName"
         return "addName"
         break
      case "placeName"
         populateAttributes "placeName"
         return "placeName"
         break
      case "country"
         populateAttributes "country","key"
         return "country"
         break
      default
         populateAttributes tTag
         return tTag
         break
   end switch
end recognizeTag

function assembleTagGroup tTag
   local tT1
   switch tTag
      case "subst"
         put angleTag(tTag) into tT1
         put angleTag("del")&angleTag("add") after char offset(">",tT1) of tT1
         return tT1
         break
      default
         return tTag
         break
   end switch
end assembleTagGroup

on populateAttributes pTag,pAttribs
   local tAtt
   put getAttributes(pTag,pAttribs) into tAtt
   if tAtt is "pattern" then put "pattern" into btn id 1060 of cd 1
   else put tAtt into btn id 1060 of cd 1
end populateAttributes

function getAttributes pTag,pAtt
   local tCustomProp,tAttributes,tTempAtt,ot
   put pTag&"TEI" into tCustomProp
   if tCustomProp is among the lines of the customKeys of this stack then
      do "put the "&tCustomProp&" of this stack into tAttributes"
      if tAttributes is not empty then
         if "|" is not in tAttributes and the number of items of tAttributes > 0 then
            replace comma with cr in tAttributes
            if char -1 of tAttributes = cr then delete char -1 of tAttributes
            return tAttributes
         else if "|" is in tAttributes then
            put empty into tTempAtt
            repeat with x = 1 to the number of lines of tAttributes
               put offset("|",line x of tAttributes) into ot
               put char 1 to ot-1 of line x of tAttributes & cr after tTempAtt
            end repeat
            delete char -1 of tTempAtt
            return tTempAtt
         end if
      else
         if pAtt is not empty and pAtt is not "pAtt" then
            replace comma with cr in pAtt
            if char -1 of pAtt = cr then delete char -1 of pAtt
            return pAtt
         end if
      end if
   end if
   return empty
end getAttributes


##TOOLTIP:
##Tags in this pull-down menu are intended only to
##describe the textual content in descriptive encoding.



#####################
#####################

## Script of button " " of card "card id 1002" of stack "/Users/adetienn/Documents/STEP Externals/STEP-LI 7.1.4/STEP Transcription Module.livecode" ID 1060 of CARD 1 of STACK STEP Transcription Module

on menuPick pItemName,pNotAddToField
   local tTagLet,yt,tSta,tSto,tCharN
   if fld id 1010 of cd 1 is empty then exit menuPick
   if the label of btn id 1008 of cd 1 is "addSpan" or char 1 to 8 of fld id 1010 of cd 1 is "<addSpan" then put "addSpan" into pNotAddToField
   else if the label of btn id 1008 of cd 1 is "delSpan" or char 1 to 8 of fld id 1010 of cd 1 is "<delSpan" then put "delSpan" into pNotAddToField
   else if the label of btn id 1008 of cd 1 is "graphic" or char 1 to 8 of fld id 1010 of cd 1 is "<graphic" then put "graphic" into pNotAddToField
   else if the label of btn id 1034 of cd 1 is "space" or char 1 to 6 of fld id 1010 of cd 1 is "<space" then put "space" into pNotAddToField
   else if the label of btn id 1008 of cd 1 is "handshift" or char 1 to 10 of fld id 1010 of cd 1 is "<handshift" then put "handshift" into pNotAddToField
   else if the label of btn id 1008 of cd 1 is "gap" or char 1 to 4 of fld id 1010 of cd 1 is "<gap" then put "gap" into pNotAddToField
   else if the label of btn id 1034 of cd 1 is among the items of "linebreak,lb,linebreak/lb,line beginning,line beginning/lb" or char 1 to 5 of fld id 1010 of cd 1 is "<lb/>" then put "lb" into pNotAddToField
   else if the label of btn id 1034 of cd 1 is among the items of "gathering,gb,gathering/gb" or char 1 to 5 of fld id 1010 of cd 1 is "<gb/>" then put "gb" into pNotAddToField
   else if the label of btn id 1034 of cd 1 is among the items of "column beginning,cb,column beginning/cb" or char 1 to 5 of fld id 1010 of cd 1 is "<cb/>" then put "cb" into pNotAddToField
   else if the label of btn id 1034 of cd 1 is among the items of "pagebreak,pb,pagebreak/pb,page beginning,page beginning/pb" or char 1 to 5 of fld id 1010 of cd 1 is "<pb/>" then put "pb" into pNotAddToField
   else if the label of btn id 1034 of cd 1 is "anchor+note" or ("anchor" is in fld id 1010 of cd 1 and "note" is in fld id 1010 of cd 1) then put "anchnote" into pNotAddToField
   if pItemName is "button "&quote&space&quote then put "target" into pItemName
   if pItemName is "136" then set the label of me to "pattern" else set the label of me to pItemName
   put populateValues(getTag(),pItemName) into btn id 1061 of cd 1
   set the label of btn id 1061 of cd 1 to line 1 of btn id 1061 of cd 1
   if pNotAddToField is not true and pNotAddToField is not among the items of "addSpan,delSpan,lb,pb,anchnote,graphic,space,handshift,gap" then
      put the text of fld id 1010 of cd 1 into tTagLet
      put empty into tSta
      put empty into tSto
      if quote&quote&">" is in fld id 1010 of cd 1 then
         put the charIndex of word -1 of fld id 1010 of cd 1 into tSta
         put offset(">",fld id 1010 of cd 1)-1 into tSto
      end if
      put offset(">",tTagLet) into tCharN
      if " "&pItemName&"="&quote is in tTagLet then
         put offset(" "&pItemName&"="&quote,tTagLet) into yt
         select after char yt+length(pItemName)+2 of fld id 1010 of cd 1
      else
         if tSta is not empty then
            if pItemName&"=" is not in fld id 1010 of cd 1 then put pItemName&"="&quote&quote into char tSta to tSto of fld id 1010 of cd 1
            select after char tSta+length(pItemName)+1 of fld id 1010 of cd 1
         else 
            put " "&pItemName&"="&quote&quote before char tCharN of fld id 1010 of cd 1
            select after char tCharN+length(pItemName)+2 of fld id 1010 of cd 1
         end if
      end if
   else if pNotAddToField is among the items of "addSpan,delSpan,lb,pb,anchnote,graphic,space,handshift,gap" then
      put the text of fld id 1010 of cd 1 into tTagLet
      put offsets("/>",tTagLet) into tCharN
      if pItemName&"=" is not in fld id 1010 of cd 1 then put space&pItemName&"="&quote&quote before char (item -1 of tCharN) of fld id 1010 of cd 1
      select after char (item -1 of tCharN)+length(pItemName)+3 of fld id 1010 of cd 1
   end if
end menuPick

function populateValues pTag,pAttribute
   if pTag is empty then exit populateValues
   if "><" is in pTag then put char 2 to offset(">",pTag)-1 of pTag into pTag
   if space is in pTag then put char 1 to offset(space,pTag)-1 of pTag into pTag
   if char 1 of pTag is "<" and char -2 to -1 of pTag is "/>" then put char 2 to -3 of pTag into pTag
   return getValuesFromAttribute(pTag,pAttribute)
end populateValues

function getValuesFromAttribute pTag,pAttrib
   local tTagCustomProp,tAttCustomProp,tTempValue,ot,tAttributes,tValues,tItem
   put pTag&"TEI" into tTagCustomProp
   put pAttrib&"TEI" into tAttCustomProp
   replace ":" with "_" in tAttCustomProp
   if tTagCustomProp is among the lines of the customKeys of this stack then
      do "put the "&tTagCustomProp&" of this stack into tAttributes"
      put lineOffset((char 1 to -4 of tAttCustomProp)&"|",tAttributes) into ot
      if ot is not 0 then
         set the itemDel to "|"
         put item 2 of line ot of tAttributes into tTempValue
      end if
   end if
   if tTempValue is empty then
      if tAttCustomProp is among the lines of the customKeys of this stack then
         do "put the "&tAttCustomProp&" of this stack into tValues"
         put lineOffset((char 1 to -4 of tAttCustomProp)&"|",tValues) into ot
         if ot is not 0 and "|" is in tValues then
            set the itemDel to "|"
            put item 2 of line ot of tValues into tTempValue
         else if ot is 0 and ":" is in tValues and "|" is not in tValues then
            set the itemDel to comma
            put empty into tTempValue
            repeat with x = 1 to the number of items of tValues
               put item x of tValues into tItem
               set the itemDel to ":"
               put item 2 of tItem & comma after tTempValue
               set the itemDel to comma
            end repeat
         end if
      end if
   end if
   replace comma with cr in tTempValue
   if char -1 of tTempValue = cr then delete char -1 of tTempValue
   return tTempValue
end getValuesFromAttribute

function getTag
   local tTagger,ste,sti,tTempTag,pTag
   put fld id 1010 of cd 1 into tTagger
   if "<anchor " is in tTagger and "<note " is in tTagger then return "note"
   if tTagger is empty or "<" is not in tTagger or ">" is not in tTagger then
      if the label of btn id 1008 of cd 1 is not empty then return the label of btn id 1008 of cd 1
      else if the label of btn id 1034 of cd 1 is not empty then return the label of btn id 1034 of cd 1
      else if the label of btn id 1038 of cd 1 is not empty then return the label of btn id 1038 of cd 1
      else return empty
   end if
   put offset("<",tTagger) into ste
   if "/>" is in tTagger then put offset("/>",tTagger) into sti else put offset(">",tTagger) into sti
   put char ste+1 to sti-1 of tTagger into tTempTag
   if space is not in tTempTag and "/>" is not in pTag then return tTagger
   else if space is in tTempTag then return char ste+1 to offset(space,tTagger)-1 of tTagger
   else if "/>" is in tTempTag then return char ste+1 to offset("/>",tTagger)-1 of tTagger
end getTag

on mouseEnter 
   if the cTagTip of this stack is "off" then exit mouseEnter
   local tAttrExplanation
   get the label of me
   if it is empty then pass mouseEnter
   put getAttributeTEIExplanation(it) into tAttrExplanation
   floating tAttrExplanation
end mouseEnter

on mouseLeave
   set the vis of fld "Floater" of cd 1 to false
end mouseLeave

on floating @pAttr--behaves like a tooltip
   lock screen
   set the height of fld "Floater" of cd 1 to 19
   if pAttr is not empty then 
      if pAttr is not the text of fld "Floater" of cd 1 then
         set the vis of fld "Floater" of cd 1 to false
         put lineBreaker(pAttr) into fld "Floater" of cd 1
         set the height of fld "Floater" of cd 1 to the formattedHeight of fld "Floater" of cd 1
         set the textAlign of fld "Floater" to "left"
         set the topRight of fld "Floater" of cd 1 to (the left of fld id 1010 of cd 1,(the top of fld id 1010 of cd 1)-25)
         set the vis of fld "Floater" of cd 1 to true
      else
         set the topRight of fld "Floater" of cd 1 to (the left of fld id 1010 of cd 1,(the top of fld id 1010 of cd 1)-25)
      end if
   else
      set the vis of fld "Floater" of cd 1 to false
   end if
end floating

function lineBreaker pText
   local tW,tM,tRealWidth,tText2,tText3,tTempMeasure
   put 270 into tW
   set the width of fld "Floater" of cd 1 to tW
   put the margins of fld "Floater" into tM
   set the dontWrap of fld "Floater" to false
   put pText into fld "Floater" of cd 1
   put pText into tText2
   repeat until tText2 is empty
      repeat with i = the number of segments of (tText2) down to 1
         put measureText(segment 1 to i of fld "Floater" of cd 1,fld "Floater" of cd 1) into tTempMeasure
         if tTempMeasure > (tW-(tM*2)) then next repeat
         else
            put segment 1 to i of tText2 & cr after tText3
            delete segment 1 to i of tText2
            put tText2 into fld "Floater" of cd 1
            exit repeat
         end if
      end repeat
   end repeat
   filter tText3 without empty
   return tText3
end lineBreaker



##TOOLTIP:
##Selecting any attribute enters it in the field below.



#####################
#####################

## Script of button " " of card "card id 1002" of stack "/Users/adetienn/Documents/STEP Externals/STEP-LI 7.1.4/STEP Transcription Module.livecode" ID 1061 of CARD 1 of STACK STEP Transcription Module

on menuPick pItemName
   local tAttrib,tTagLet,yt
   if fld id 1010 of cd 1 is empty then exit menuPick
   set the label of me to pItemName
   if length(the label of me) > 14 then set the textSize of me to 10 else set the textSize of me to 12
   put the label of btn id 1060 of cd 1 into tAttrib
   if tAttrib is empty then exit menuPick
   put the text of fld id 1010 of cd 1 into tTagLet
   if " "&tAttrib&"="&quote&quote is in tTagLet then
      put offset(" "&tAttrib&"="&quote,tTagLet) into yt
      put translateValue(pItemName) after char yt+length(tAttrib)+2 of fld id 1010 of cd 1
   else if " "&tAttrib&"="&quote is in tTagLet and "="&quote&translateValue(pItemName)&quote is not in fld id 1010 of cd 1 then
      put offset(tAttrib&"="&quote,tTagLet) into yt
      repeat with y = yt+length(tAttrib)+3 to length(tTagLet)-1
         if char y of tTagLet is quote then exit repeat
      end repeat
      put translateValue(pItemName) into char yt+length(tAttrib)+2 to y-1 of fld id 1010 of cd 1
   else if " "&tAttrib&"=" is not in tTagLet then
      put " "&tAttrib&"="&quote&translateValue(pItemName)&quote before char offset(">",tTagLet) of fld id 1010 of cd 1
   end if
end menuPick

function translateValue pVal
   if pVal is "plus +" then return "+"
   if pVal is "minus -" then return "-"
   if pVal is "solidus /" then return "/"
   if pVal is "vertical-stroke" then return "|"
   return pVal
end translateValue

##TOOLTIP:
##Selecting any value enters it after its
##corresponding attribute in the field below.



#####################
#####################

## Script of button "File" of group "STEP Menu 1" of card "card id 1002" of stack "/Users/adetienn/Documents/STEP Externals/STEP-LI 7.1.4/STEP Transcription Module.livecode" ID 1082 of CARD 1 of STACK STEP Transcription Module

on menuPick pItemName
   local tPath,tFilePath,tFileName,ots,ut,tOpenStackList,tListStacks,tFileType,tQ
   set the itemDelimiter to "|"
   switch item 1 of pItemName
      case "Open..."
         send "mouseUp" to btn id 1101 of cd 1 of stack "STEP Transcription Module"
         break
      case "Import Text for TEI Tagging..."
         send "mouseUp" to btn id 1101 of cd 1 of stack "STEP Transcription Module"
         break
      case "Open STEP Archive..."
         send "mouseUp" to btn id 1074 of cd 1 of stack "STEP Transcription Module"
         break
      case "Open Recent"
         if item 2 of pItemName is "Clear Recent" then clearRecentFilePaths
         else 
            put getPathOfRecentFile(item 2 of pItemName) into tPath
            if tPath is empty then exit to top
            send "mouseUp "&"1,"&tPath to btn id 1101 of cd 1 of stack "STEP Transcription Module"
         end if
         break
      case "Open Recent Archive"
         if item 2 of pItemName is "Clear Recent Archive" then clearRecentArchivePaths
         else 
            put getPathOfRecentArchive(item 2 of pItemName) into tPath
            if tPath is empty then exit to top
            send "mouseUp "&"1,"&tPath to btn id 1074 of cd 1 of stack "STEP Transcription Module"
         end if
         break
      case "Open URL..."
         modal stack "Download File From Server"
         put the cURLImportedFilePath of stack "STEP Transcription Module" into tFilePath
         set the cURLImportedFilePath of stack "STEP Transcription Module" to empty
         if tFilePath = empty or tFilePath is "Save" or tFilePath is "Cancel" then exit menuPick
         set the itemDel to "/"
         put item -1 of tFilePath into tFileName
         put offsets(".",tFileName) into ots
         if ots = 0 then 
            answer "File “" & tFileName & "” does not show a filetype (such as .rtf, .docx, etc.) and therefore cannot be brought inside STEP Transcriptor."
            exit menuPick
         end if
         put char (item-1 of ots)+1 to -1 of tFileName into tFileType
         if tFileType is not among the items of "rtf,txt,step,stp,html,xml,docx,odt" then
            answer "The filetype of file “" & tFileName & "” is “"&tFileType& "” and therefore cannot be brought inside STEP Transcriptor."
            exit menuPick
         end if
         send "mouseUp "&tFilePath to btn id 1101 of cd 1 of stack "STEP Transcription Module"
         break
      case "Save"
         send "mouseUp" to btn id 1073 of cd 1 of stack "STEP Transcription Module"
         get the effective filename of stack "STEP Transcription Module"
         set the itemDelimiter to "/"
         put item 1 to -1 of it into ut
         save stack "STEP Transcription Module" as ut
         break
      case "Restore Last Save"
         answer "This command restores STEP Transcriptor to its state when last saved, deleting all changes made since the last save." with "Cancel" or "Restore Last Save" as sheet
         if it is "Restore Last Save" then send "mouseUp" to btn id 1078 of cd 1 of stack "STEP Transcription Module"
         break
      case "Save Transcription As..."
         send "mouseUp" to btn id 1102 of cd 1 of stack "STEP Transcription Module"
         break
      case "STEP Corpus Directory Viewer..."
         modeless stack "STEP Corpus Directory Viewer"
         break
      case "Archive All STEP Fields..."
         send "mouseUp" to btn id 1075 of cd 1 of stack "STEP Transcription Module"
         break
      case "Upload File to FTP Host..."
         modeless stack "Upload File To Server"
         break
      case "View/Export HTML or XHTML Content of Any Field..."
         modeless stack "HTML or XHTML Viewing and Exporting"
         break
      case "Convert File To Be Imported to TEI-XML..."
         answer "Use STEP’s web  browser to access OxGarage’s Conversion Tool on the TEI Consortium website."\
               &cr &"1. Click “Document” on that page."&cr&"2. Select its type (Microsoft Word, for instance)."&cr&\
         "3. Select the format to convert it to (“TEI P5 XML Document”)."&cr&"4. Use the browse button to select the file to convert."&cr&\
         "5. Click the “Convert” button. Once you have received the "&cr&"converted file, use the Open command in the File menu to import it into STEP Transcriptor."\
         with "Cancel" or "Use OxGarage’s Conversion Tool online"
         if it is "Cancel" then exit to top
         modeless stack "STEP Web Browser"
         put empty into fld id 1003 of cd 1 of  stack "STEP Web Browser"
         send "tabKey" to fld id 1003 of cd 1 of stack "STEP Web Browser"
         break
      case "Download Latest TEI MS Description Schema (DTD and RNG)..."
         updateTEIMSDescriptionDTD
         break
      case "Print..."
         modeless stack "Printing"
         break
      case "Close"
         stuffToDoBeforeClosingOrQuitting
         close this stack
         break
      case "Quit"
         send "mouseUp" to btn id 1073 of cd 1
         stuffToDoBeforeClosingOrQuitting
         put the openStacks into tOpenStackList
         put "STEP Emendations Module,STEP Annotations Module,STEP Text Comparator,STEP Image Browser,STEP Formulator" into tListStacks
         put empty into tQ
         repeat with k = 1 to the number of items of tListStacks
            if item k of tListStacks is among the lines of tOpenStackList then
               put "1" into tQ
               exit repeat
            end if         
         end repeat
         if tQ is 1 then close this stack else quit
         break 
   end switch
end menuPick

on stuffToDoBeforeClosingOrQuitting
   local tSubStackList,tOpenStackList,tListSubStacks,tPhrase,ut
   if the short name of this stack is not "STEP Transcription Module" then exit stuffToDoBeforeClosingOrQuitting
   put the subStacks of this stack into tSubStackList
   if tSubStackList is not empty then
      put the openStacks into tOpenStackList
      put empty into tListSubStacks
      repeat with k = 1 to the number of lines of tSubStackList
         if line k of tSubStackList is among the lines of tOpenStackList then
            put line k of tSubStackList & comma & space after tListSubStacks
         end if         
      end repeat
      if tListSubStacks is not empty then
         delete char -2 to -1 of tListSubStacks
         if the number of items of tListSubStacks is 1 then put "window that is" into tPhrase else put "windows that are" into tPhrase
         answer "Closing STEP Transcriptor’s main window will close the associated "& tPhrase & " still open: "&tListSubStacks&". STEP Transcriptor will then quit. Do you want to proceed?" with "Cancel" or "Quit"
         if it is "Cancel" then exit to top
         replace comma&space with cr in tListSubStacks
         repeat with k = 1 to the number of lines of tListSubStacks
            if there is a stack (line k of tListSubStacks) then close stack (line k of tListSubStacks)
         end repeat
      end if
   end if
   deleteUndoCustomKeys
   storeSTEPTranscriptorPreferences
   if the hilite of btn "Example" of cd 1 of stack "STEP Transcription Module" is false
   then send "mouseUp" to btn id 1073 of cd 1 of stack "STEP Transcription Module"
   get the effective filename of stack "STEP Transcription Module"
   set the itemDelimiter to "/"
   put item 1 to -1 of it into ut
   save stack "STEP Transcription Module" as ut
end stuffToDoBeforeClosingOrQuitting

function getPathOfRecentFile pRF
   local tFPL,tLN
   put the cFilePathList of btn id 1101 of cd 1 of stack "STEP Transcription Module" into tFPL
   if tFPL is empty then exit to top
   put lineOffset(pRF,tFPL) into tLN
   if tLN <> 0 then return line (item 1 of tLN) of tFPL
end getPathOfRecentFile

function getPathOfRecentArchive pRF
   local tFPL,tLN
   put the cFilePathList of btn id 1074 of cd 1 of stack "STEP Transcription Module" into tFPL
   if tFPL is empty then exit to top
   put lineOffset(pRF,tFPL) into tLN
   if tLN <> 0 then return line (item 1 of tLN) of tFPL
end getPathOfRecentArchive

on clearRecentFilePaths
   local tFileMenu,tLineNum1,tLineNum2
   set the cFilePathList of btn id 1101 of cd 1 of stack "STEP Transcription Module" to empty
   put the text of btn "File" of group "STEP Menu 1" of cd 1 of stack "STEP Transcription Module" into tFileMenu
   put lineOffset("Open &Recent",tFileMenu) into tLineNum1
   put lineOffset(tab&"Clear Recent",tFileMenu) into tLineNum2
   if tLineNum1+2<>tLineNum2 then 
      delete line tLineNum1+1 to tLineNum2-2 of tFileMenu
      put tFileMenu into btn "File" of group "STEP Menu 1" of cd 1 of stack "STEP Transcription Module"
   end if
end clearRecentFilePaths

on clearRecentArchivePaths
   local tFileMenu,tLineNum1,tLineNum2
   set the cFilePathList of btn id 1074 of cd 1 of stack "STEP Transcription Module" to empty
   put the text of btn "File" of group "STEP Menu 1" of cd 1 of stack "STEP Transcription Module" into tFileMenu
   put lineOffset("Ope&n Recent Archive",tFileMenu) into tLineNum1
   put lineOffset(tab&"Clear Recent Archive",tFileMenu) into tLineNum2
   if tLineNum1+2<>tLineNum2 then 
      delete line tLineNum1+1 to tLineNum2-2 of tFileMenu
      put tFileMenu into btn "File" of group "STEP Menu 1" of cd 1 of stack "STEP Transcription Module"
   end if
end clearRecentArchivePaths


#####################
#####################

## Script of button "Export”, ID 1917 of CARD 1 of STACK STEP Transcription Module

on menuPick pItemName
   local tSubCommand,tIDNum,tFileType,tContents
   set the itemDelimiter to "|"
   switch item 1 of pItemName
      case "Export TEI-XML Transcription…"
         fileExport "Click the button below if you want to export the current transcription of the text with tagged alterations to a file importable into the STEP platform."
         put the dialogData into tFileType
         if tFileType is empty then exit menuPick
         set the cursor to watch
         lock screen
         put gatheringContents2() into tContents
         if tContents is not empty then 
            exportData2 tContents,tFileType
            unlock screen
         else
            answer "The field containing the current transcription of the text with alterations is empty; there is nothing to export."
         end if
         break
      case "Export TEI-XML Description…"
         local tFldID
         answer "Export the tagged base description text, or the tagged rendition description text?" with "Cancel" or "Rendition Text" or "Base Text"
         if it is "Cancel" then exit to top
         if it is "Rendition Text" then put "1151" into tFldID else put "1041" into tFldID
         fileExport "Click the button below if you want to export the tagged description of the text to a file importable into the STEP platform."
         put the dialogData into tFileType
         if tFileType is empty then exit menuPick
         set the cursor to watch
         lock screen
         put gatheringContents(tFldID) into tContents
         if tContents is not empty then 
            exportData3 tContents,tFileType,tFldID
            unlock screen
         else
            answer "The field you want to export is empty."
         end if
         break
      case "Upload STEP File to FTP Host…"
         modeless stack "Upload File To Server"
         break
      case "Export Alterations Description"
         put item 2 of pItemName into tSubCommand
         switch tSubCommand
            case "Automatic Syntactical Description"
               put "1017" into tIDNum
               break
            case "XML  Syntactical Description"
               put "1109" into tIDNum
               break
            case "Edited Syntactical Description"
               put "1064" into tIDNum
               break
            case "XML Edited Syntactical Description"
               put "1171" into tIDNum
               break
            case "Automatic Pragmatic Description"
               put "1049" into tIDNum
               break
            case "XML Pragmatic Description"
               put "1112" into tIDNum
               break         
            case "Edited Pragmatic Description"
               put "1067" into tIDNum
               break
            case "XML Edited Pragmatic Description"
               put "1174" into tIDNum
               break
               fileExport "Click the button below if you want to export the "&(toLower(pItemName))&" of alterations to a Text or RTF or HTML file importable into STEP."
               put the dialogData into tFileType
               if tFileType is empty then exit menuPick
               set the cursor to watch
               lock screen
               put gatheringContents1(tIDNum) into tContents
               if tContents is not empty then 
                  exportData1 tContents,pItemName,tIDNum,tFileType
                  unlock screen
               else
                  answer "The field “"&pItemName&"” is empty; there is nothing to export."
               end if
         end switch
      case "Export HTML or XHTML Content of Any Field..."
         modeless stack "HTML or XHTML Viewing and Exporting"
         break
   end switch
end menuPick

function gatheringContents1 pIDNum
   send "mouseUp" to btn id 1073 of cd 1
   return the text of fld id pIDNum of cd 1
end gatheringContents1

on exportData1 tContents,pItemName,pIDNum,pFileType
   local tF
   if pFileType is "step" then
      ask file "Type the name of file that will contain the "&(toLower(pItemName))&" of alterations." with type "TEXT|txt,step,stp" titled "Type the name of the text file"
      if (it is empty) or (the result is "Cancel") then exit to top
      put ".step" after it
   else
      put "TEXT|"&pFileType into tF
      ask file "Type the name of file that will contain the "&(toLower(pItemName))&" of alterations." with type tF titled "Type the name of the text file"
      if (it is empty) or (the result is "Cancel") then exit to top
      if pFileType is "txt" and not(it ends with ".txt") then put ".txt" after it
      else if pFileType is "rtf" and not(it ends with ".rtf") then put ".rtf" after it
      else if pFileType is "html" and not(it ends with ".html") then put ".html" after it
      else if pFileType is "xhtml" and not(it ends with ".html") then put ".html" after it
      if it ends with ".rtf" then
         put the RTFText of fld id pIDNum of cd 1 into tContents
      else if it ends with ".html" and pFileType <> "xhtml" then
         if pIDNum is 1017 and "metadata=" is in tContents then send "mouseUp" to btn "Describe alterations" of cd 1
         put the HTMLText of fld id pIDNum of cd 1 into tContents
      else if it ends with ".html" and pFileType is "xhtml" then
         if pIDNum is 1017 and "metadata=" is in tContents then send "mouseUp" to btn "Describe alterations" of cd 1
         put ConvertStyledTextToXHTML(the styledText of fld id pIDNum of cd 1) into tContents
      end if
   end if
   open file it for write
   write tContents to file it
   close file it
   unlock screen
   if pFileType is "step" then answer "The current transcription of the text with alterations was exported successfully to file “" & it & ".” That file can now be imported into the STEP platform."
   else answer "The current transcription of the text with alterations was exported successfully to file “" & it & ".”"
end exportData1


function gatheringContents2
   local tText
   send "mouseUp" to btn id 1073 of cd 1
   put fld id 1004 of cd 1 into tText
   send "insertAnchor tText,"&"no" to btn id 1025 of cd 1
   return the text of fld id 1163 of cd 1
end gatheringContents2

on exportData2 tContents,pFileType
   local tF
   if pFileType is "step" then
      ask file "Type the name of the file that will contain the current transcription of the text with alterations." with type "TEXT|txt,step,stp" titled "Type the name of the text file"
      if (it is empty) or (the result is "Cancel") then exit to top
      put ".step" after it
      put "<filetype module="&quote&"Transcriptor"&quote&"/>" before tContents
   else
      put "TEXT|"&pFileType into tF
      ask file "Type the name of the file that will contain the current transcription of the text with alterations." with type tF titled "Type the name of the text file"
      if (it is empty) or (the result is "Cancel") then exit to top
      if pFileType is "txt" and not(it ends with ".txt") then put ".txt" after it
      else if pFileType is "rtf" and not(it ends with ".rtf") then put ".rtf" after it
      else if pFileType is "html" and not(it ends with ".html") then put ".html" after it
      else if pFileType is "xhtml" and not(it ends with ".html") then put ".html" after it
      else if pFileType is "xml" and not(it ends with ".html") then put ".xml" after it
      if it ends with ".rtf" then
         put the RTFText of fld id 1163 of cd 1 into tContents
      else if it ends with ".html" and pFileType <> "xhtml" then
         put the HTMLText of fld id 1163 of cd 1 into tContents
      else if it ends with ".html" and pFileType is "xhtml" then
         put ConvertStyledTextToXHTML(the styledText of fld id 1163 of cd 1) into tContents
      else if it ends with ".xml" and pFileType is "xml" then
         put convertTextToXML(the text of fld id 1163 of cd 1) into tContents
      end if
   end if
   open file it for write
   write tContents to file it
   close file it
   unlock screen
   if pFileType is "step" then answer "The current transcription of the text with tagged alterations was exported successfully to file “" & it & ".” That file can now be uploaded to the STEP platform."
   else answer "The current transcription of the text with tagged alterations was exported successfully to file “" & it & ".”"
end exportData2

function convertTextToXML pText
   put "<?xml version="&quote&"1.0"&quote&"?>" before pText
   replace ">"&"Transcriptor"&"<" with "><" in pText
   return pText
end convertTextToXML

function gatheringContents3 pFldID
   send "mouseUp" to btn id 1073 of cd 1
   return the text of fld id pFldID of cd 1
end gatheringContents3

on exportData3 tContents,pFileType,pFldID
   local tF
   if pFileType is "step" then
      ask file "Type the name of file that will contain the TEI description of the base text." with type "TEXT|txt,step,stp" titled "Type the name of the text file"
      if (it is empty) or (the result is "Cancel") then exit to top
      put ".step" after it
   else
      put "TEXT|"&pFileType into tF
      ask file "Type the name of file that will contain the TEI description of the base text." with type tF titled "Type the name of the text file"
      if (it is empty) or (the result is "Cancel") then exit to top
      if pFileType is "txt" and not(it ends with ".txt") then put ".txt" after it
      else if pFileType is "rtf" and not(it ends with ".rtf") then put ".rtf" after it
      else if pFileType is "html" and not(it ends with ".html") then put ".html" after it
      else if pFileType is "xhtml" and not(it ends with ".html") then put ".html" after it
      if it ends with ".rtf" then
         put the RTFText of fld id pFldID of cd 1 into tContents
      else if it ends with ".html" and pFileType <> "xhtml" then
         put the HTMLText of fld id pFldID of cd 1 into tContents
      else if it ends with ".html" and pFileType is "xhtml" then
         put ConvertStyledTextToXHTML(the styledText of fld id pFldID of cd 1) into tContents
      end if
   end if
   open file it for write
   write tContents to file it
   close file it
   unlock screen
   if pFileType is "step" then answer "The current transcription of the tagged descriptive text was exported successfully to file “" & it & ".” That file can now be imported into the STEP platform."
   else answer "The current transcription of the tagged descriptive text was exported successfully to file “" & it & ".”"
end exportData3



#####################
#####################

## Script of button "Edit" of group "STEP Menu 1" of card "card id 1002" of stack "/Users/adetienn/Documents/STEP Externals/STEP-LI 7.1.4/STEP Transcription Module.livecode" ID 1083 of CARD 1 of STACK STEP Transcription Module

on menuPick pItemName
   local f,tText,tNumberOcc,pSelText
   switch pItemName
      case "Undo"
         if the clickStack <> empty then
            if the short name of the clickStack is the short name of the defaultStack then undoEdit else undo
         end if
         break
      case "Redo"
         if the clickStack <> empty then
            if the short name of the clickStack is the short name of the defaultStack then redoEdit else undo
         end if
         break
      case "Restore Last Save"
         answer "This command restores STEP Transcriptor to its state when last saved, deleting all changes made since the last save." with "Cancel" or "Restore Last Save" as sheet
         if it is "Restore Last Save" then send "mouseUp" to btn id 1078 of cd 1 of stack "STEP Transcription Module"
         break
      case "Cut"
         cut
         break
      case "Copy"
         copy
         break
      case "Paste"
         get the cPasteTransit of fld id 1004 of cd 1 of stack "STEP Transcription Module"
         if the ID of the selectedField is "1004" and it is not empty and the clipboardData["text"] is it then
            paste
            set the cPasteTransit of fld id 1004 of cd 1 of stack "STEP Transcription Module" to empty
            send "mouseUp" to btn "Describe alterations" of cd 1
         else if the clipboardData["text"] is not empty and the clipboardData["text"] is not it then
            paste
         end if
         break
      case "Clear"
         clear
         break
      case "Select All"
         put word 2 of the selectedfield into f
         if f <> empty then
            select text of fld f
         end if
         break
      case "Deselect All"
         put word 2 of the selectedfield into f
         select empty
         if f <> empty then
            set the hilitedLines of fld f to 0
         end if
         break
      case "Check English Spelling..."
         checkSpelling "English"
         break
      case "Check French Spelling..."
         checkSpelling "French"
         break
      case "Delete All <!--In-House Messages-->"
         if "<!--" is not in fld id 1004 of cd 1 then exit menuPick
         lock screen
         put fld id 1004 of cd 1 into tText
         put countOccurrences(tText,"<!--",,,) into tNumberOcc
         answer "Confirm deletion of the"&&tNumberOcc&&"in-house messages present in the transcription." with "Cancel" or "Delete" as sheet
         if it is "Delete" then
            put replaceText(tText,"<!--[^>]+>",empty) into tText
            --put replaceText(tText,"<!--"&"[\w\s\d-\?:;—–!'“”‘’]+"&"-->",empty) into tText
            put tText into fld id 1004 of cd 1
            send "mouseUp 1004" to btn "Color all tags" of cd 1
         end if
         break
      case "Find..."
         put the selectedText into pSelText
         findFromDialog pSelText
         break
      case "Find Selected String..."
         put the selectedText into pSelText
         findInText pSelText
         break
      case "List of Found Strings..."
         palette stack "Found Strings"
         break
      case "Replace..."
         set the cVisibleField of stack "Replace" to whichVisibleMainField()
         modal stack "Replace"
         break
   end switch
end menuPick



#####################
#####################

## Script of button "Font" of group "STEP Menu 1" of card "card id 1002" of stack "/Users/adetienn/Documents/STEP Externals/STEP-LI 7.1.4/STEP Transcription Module.livecode" ID 1217 of CARD 1 of STACK STEP Transcription Module

on menuPick pItemName
   local tText,tHText,tQuotesList,tSingleQuotesList,ut,tEqualQuotesList,tEqualQuotesList2,tQ,tVScroll,tContraction
   set the itemDel to "|"
   put item 2 of pItemName into tContraction
   put item 1 of pItemName into pItemName
   set the itemDel to comma
   switch pItemName
      case "Text Font and Size..."
         modeless stack "Text Font and Size"
         break
      case "Insert Special Font Character..."
         modeless stack "Special Font Characters"
         break
      case "Turn Curly Quotes On"
         set the cCurlyQuoting of this stack to true
         put "!cTurn Curly Quotes On" into line 3 of me
         put "!nTurn Straight Quotes On" into line 6 of me
         break
      case "Convert All Straight Quotes to Curly"
         lock screen
         put the vScroll of fld id 1004 of cd 1 into tVScroll
         put fld id 1004 of cd 1 into tText
         set cursor to watch
         put stripDuplicateItems(offsets(quote,tText)) into tQuotesList
         put stripDuplicateItems(offsets("="&quote,tText)) into tEqualQuotesList
         repeat for each item tQ in tEqualQuotesList
            put tQ+1&comma after tEqualQuotesList2
         end repeat
         put reverseItemList(tEqualQuotesList2) into tEqualQuotesList
         set the wholeMatches to true
         repeat for each item tEq in tEqualQuotesList
            get itemOffset(tEq,tQuotesList)
            delete item it to it+1 of tQuotesList
         end repeat
         put stripDuplicateItems(offsets("'",tText)) into tSingleQuotesList
         repeat for each item tItem in tQuotesList
            set cursor to busy
            put the number of segments of char 1 to tItem of tText into ut
            get segment ut of tText
            if quote is in it then put doublequoteur(it) into segment ut of tText
         end repeat
         repeat for each item tItem in tSingleQuotesList
            set cursor to busy
            put the number of segments of char 1 to tItem of tText into ut
            get segment ut of tText
            if "'" is in it then put singlequoteur(it) into segment ut of tText
         end repeat
         put tText into fld id 1004 of cd 1
         send "mouseUp 1004" to btn "Color All Tags" of cd 1
         put the vScroll of fld id 1004 of cd 1 into tVScroll
         break
      case "Turn Straight Quotes On"
         set the cCurlyQuoting of this stack to false
         put "!nTurn Curly Quotes On" into line 3 of me
         put "!cTurn Straight Quotes On" into line 6 of me
         break
      case "Convert All Curly Quotes to Straight"
         lock screen
         put the HTMLText of fld id 1004 of cd 1 into tHText
         replace"&ldquo;" with quote  in tHText
         replace "&rdquo;" with quote in tHText
         replace "&lsquo;" with "'" in tHText
         replace "&rsquo;" with "'" in tHText
         set the HTMLText of fld id 1004 of cd 1 to tHText
         break
      case "Convert All Curly Quotes into HTML markup"
         lock screen
         put fld id 1004 of cd 1 into tText
         replace "“" with "&ldquo;" in tText
         replace "”" with "&rdquo;" in tText
         replace "‘" with "&lsquo;" in tText
         replace "’" with "&rsquo;" in tText
         put tText into fld id 1004 of cd 1
         send "mouseUp 1004" to btn "Color All Tags" of cd 1
         break
      case "Convert HTML Curly Quotes to Curly Glyphs"
         lock screen
         put fld id 1004 of cd 1 into tText
         replace"&ldquo;" with "“"  in tText
         replace "&rdquo;" with "”" in tText
         replace "&lsquo;" with "‘" in tText
         replace "&rsquo;" with "’" in tText
         put tText into fld id 1004 of cd 1
         send "mouseUp 1004" to btn "Color All Tags" of cd 1
         break
      default
         switch tContraction
            default
               lock screen
               local tIDNum,tChunk,tSta
               set the itemDel to comma
               put the cFldToReturnTo of cd 1 of stack "STEP Transcription Module" into tIDNum
               if (tIDNum is not empty) and ((the cFldToReturnTo of cd 1 of stack "STEP Transcription Module" is empty) or (tIDNum is not among the items of "1004,1041"))  then 
                  answer "First make sure the pointer is in the Transcription field or the TEI Base Description field." as sheet
                  exit menuPick
               end if
               if fld id tIDNum of cd 1 of stack "STEP Transcription Module" is empty then exit menuPick
               put the cSelectedChunk of fld id tIDNum of cd 1 of stack "STEP Transcription Module" into tChunk
               if tChunk is empty then exit menuPick
               put word 2 of tChunk into tSta
               put tContraction before char tSta of fld id tIDNum of cd 1 of stack "STEP Transcription Module"
               select after char tSta+length(tContraction)-1 of fld id tIDNum of cd 1 of stack "STEP Transcription Module"
               set the cSelectedChunk of fld id tIDNum of cd 1 of stack "STEP Transcription Module" to the selectedChunk
         end switch
   end switch
end menuPick

function checkIfInsideTag pText,pPosition
   repeat with i = pPosition down to 1
      if char i of pText is ">" then return false
      else if char i of pText is "<" then return true
      else next repeat
   end repeat
   return false
end checkIfInsideTag


#####################
#####################

## Script of button "Tools" of group "STEP Menu 1" of card "card id 1002" of stack "/Users/adetienn/Documents/STEP Externals/STEP-LI 7.1.4/STEP Transcription Module.livecode" ID 1228 of CARD 1 of STACK STEP Transcription Module

on menuPick pItemName
   local tPath
   lock screen
   switch pItemName
      case "Nested Alterations Tagging Tool"
         modeless stack "Stacked Alteration Tagger"
         break
      case "Transposition Tagging Tool"
         modeless stack "Transposition Tagging Tool"
         break
      case "Alternation Tagging Tool"
         answer "This utility does not exist yet." as sheet
         --modeless stack "Alternation Tagging Tool"
         break
      case "TEI Encoding Cursor Palette"
         palette stack "TEI Encoding Cursor Palette"
         break
      case "Graphics Manager"
         answer "The Graphics management and insertion tool is coming soon."
         exit menuPick
         break
      case "STEP Emendator"
         put getPath("STEP Emendations Module.livecode") into tPath
         break
      case "STEP Annotator"
         put getPath("STEP Annotations Module.livecode") into tPath
         break
      case "STEP Image Browser"
         put getPath("STEP Image Browser.livecode") into tPath
         break
      case "STEP Text Comparator"
         put getPath("STEP Text Comparator.livecode") into tPath
         break
      case "STEP Formulator"
         put getPath("STEP Formulator.livecode") into tPath
         break
   end switch
   open stack tPath
   if "STEP Image Browser" is in tPath then
      set the systemWindow  of stack "STEP Image Browser" to true
      send "populateAllWindowMenus" to stack "STEP Image Browser"
      if the mode of stack "STEP Transcription Module" > 0 then set the topLeft of stack "STEP Image Browser" to the topLeft of btn id 1040 of cd 1 of stack "STEP Transcription Module"
      else then set the loc of stack "STEP Image Browser" to the screenLoc
   end if
end menuPick



#####################
#####################

## Script of button "Insert" of group "STEP Menu 1" of card "card id 1002" of stack "/Users/adetienn/Documents/STEP Externals/STEP-LI 7.1.4/STEP Transcription Module.livecode" ID 1918 of CARD 1 of STACK STEP Transcription Module

on mouseDown
   local tMenuList,tFullMenu,tHyphen
   put the cVisibleSpecialCharactersSubMenus of btn id 1106 of stack "STEP Transcription Module" into tMenuList
   put empty into tFullMenu
   put "-" into tHyphen
   repeat for each line tSubMenu in tMenuList
      do "put the "&tSubMenu& " of me & cr & tHyphen & cr after tFullMenu"
   end repeat
   put "Add or Manage Unicode Characters..." & cr & "Edit Unicode Characters Menu..." after tFullMenu
   replace cr&cr with cr in tFullMenu
   put tFullMenu into btn "Insert" of group "STEP Menu 1" of cd 1
end mouseDown

on menuPick pItemName
   local tCombkey,tIDNum,tHTMCode,tChunk,tSta,tTL,tCategory
   if pItemName is "Add or Manage Unicode Characters..." then
      modeless stack "Add Special Character"
      exit menuPick
   end if
   if pItemName is "Edit Unicode Characters Menu..." then
      modeless stack "Edit Unicode Characters Menu"
      exit menuPick
   end if
   if the optionKey is down or the commandKey is down then put "opt" into tCombkey
   else put empty into tCombKey
   put word 3 of the focusedObject into tIDNum
   if tIDNum is among the items of "1004,1041" then set the cFldToReturnTo of cd 1 of this stack to tIDNum
   if tIDNum is empty and the cFldToReturnTo of cd 1 of this stack is not empty then put the cFldToReturnTo of cd 1 of this stack into tIDNum
   if (tIDNum is not empty) and ((the cFldToReturnTo of cd 1 of this stack is empty) or (tIDNum is not among the items of "1004,1041"))  then 
      answer "First make sure the pointer is in the Transcription field or the TEI Base Description field." as sheet
      exit menuPick
   end if
   set the itemDel to "|"
   put item 1 of pItemName into tCategory
   if the number of segments of item -1 of pItemName = 1 then put item -1 of pItemName into pItemName
   else
      if item 3 of pItemName is not empty then put segment 1 to -2 of item 3 of pItemName into pItemName else put segment 1 to -2 of item 2 of pItemName into pItemName
   end if
   set the itemDel to comma
   put getHTMLUnicode(tCategory,pItemName,tCombkey) into tHTMCode
   lock screen
   put the cSelectedChunk of fld id tIDNum of cd 1 into tChunk
   if tChunk is empty then exit menuPick
   put word 2 of tChunk into tSta
   put length(tHTMCode) into tTL
   put tHTMCode before char tSta of fld id tIDNum of cd 1
   select before char (tSta+tTL) of fld id tIDNum of cd 1
   set the cSelectedChunk of fld id tIDNum to the selectedChunk
   unlock screen
end menuPick

function getHTMLUnicode pCategory,pEntity,pCombkey
   local tSpec,tLNum
   replace space with empty in pCategory
   put "c" before pCategory
   do "put the "&pCategory& " of btn id 1106 into tSpec"
   put lineOffset(pEntity,tSpec) into tLNum
   set the itemDel to "|"
   if pCombkey is "opt" and item 1 of line tLNum of tSpec is not "?" then return item 1 of line tLNum of tSpec else return item 3 of line tLNum of tSpec
   if pCombkey is empty then
      if char 3 to -2 of item 3 of tSpec is not a number then return item 3 of line tLNum of tSpec
      else 
         get char 3 to -2 of item 3 of tSpec
         if it < 256 and it <> 60 and it <> 62 then return item 1 of line tLNum of tSpec
         else return item 3 of line tLNum of tSpec
      end if
   end if
   set the itemDel to comma
end getHTMLUnicode



#####################
#####################

## Script of button "Customize" of group "STEP Menu 1" of card "card id 1002" of stack "/Users/adetienn/Documents/STEP Externals/STEP-LI 7.1.4/STEP Transcription Module.livecode" ID 1916 of CARD 1 of STACK STEP Transcription Module

on menuPick pItemName
   switch pItemName
      case "Customize TEI Tags..."
         modeless stack "TEI Tag Customization"
         break
      case "Customize Tag Colors..."
         modeless stack "TEI Tag Custom Colors"
         break
      case "Go to Table of TEI Elements"
         launch URL "http://www.tei-c.org/Vault/P5/1.0.1/doc/tei-p5-doc/html/REF-ELEMENTS.html"
         break
      case "Look Up Specific TEI Tag..."
         lookUpTag
         break
      case "Customize Pull-Down Tag Menus..."
         modeless stack "Customize Pull-Down Tag Menus"
         break
      case "Customize Pop-Up Tag Menus..."
         modeless stack "Customize Pop-Up Tag Menus"
         break
      case "Add or Manage Unicode Characters..."
         modeless stack "Add Special Character"
         break
      case "Edit Unicode Characters Menu..."
         modeless stack "Edit Unicode Characters Menu"
         break
      case "Add or Manage Special-Font Characters..."
         modeless stack "Special Font Characters"
         break
      case "Customize Tag Anchors..."
         modeless stack "Customize Tag Anchors"
         break   
      case "Customize Pagebreak Format..."
         modeless stack "Customize Pagebreak Self-Closing Tag"
         break   
      case "Customize Span Anchors..."
         answer "This utility does not exist yet." as sheet
         --modeless stack "Customize Span Anchors"
         break   
      case "Customize Note Anchors..."
         answer "This utility does not exist yet." as sheet
         --modeless stack "Customize Note Anchors"
         break   
      case "Assign Shortcuts to Function Keys..."
         modeless stack "Assign Tags to Function Keys"
         break   
      case "Customize Keyboard Shortcuts..."
         modeless stack "Customize Keyboard Shortcuts"
         break
      case "Shortcut Palette"
         palette stack "Shortcut Palette"
         break
   end switch
end menuPick


on lookUpTag
   local tTag
   ask "Type the TEI tag you’d like to look up online (look-up is case-sensitive: lowercase and uppercase letters need to be correct)." as sheet
   if it is empty or the result is "Cancel" then exit to top
   put it into tTag
   replace cr with empty in tTag
   put word 1 of tTag into tTag
   put toLower(char 1 of tTag) into char 1 of tTag
   launch URL "http://www.tei-c.org/release/doc/tei-p5-doc/en/html/ref-"&tTag&".html"
end lookUpTag




#####################
#####################

## Script of button "Window" of group "STEP Menu 1" of card "card id 1002" of stack "/Users/adetienn/Documents/STEP Externals/STEP-LI 7.1.4/STEP Transcription Module.livecode" ID 1150 of CARD 1 of STACK STEP Transcription Module

on menuPick pItemName
   switch pItemName
      case "Backdrop"
         setBackdrop
         break
      case "Remove Backdrop"
         removeBackdrop
         break
      default
         go stack pItemName
         break
   end switch
end menuPick


button "Help" of group "STEP Menu 1" of card "card id 1002" of stack "/Users/adetienn/Documents/STEP Externals/STEP-LI 7.1.4/STEP Transcription Module.livecode" ID 1084 of CARD 1 of STACK STEP Transcription Module

on menuPick pItemName
   local tDefaultFolder,tPath
   set the itemDelimiter to "|"
   switch (item 1 of pItemName)
      case "Help"
         answer "No help yet." as sheet
         break
      case "User Guide PDFs"
         put the defaultFolder into tDefaultFolder
         set the itemDel to slash
         put getPath2() into tPath
         set the itemDel to "|"
         if item 2 of pItemName is "About STEP Tools" then launch document "About STEP Tools.pdf"
         else if item 2 of pItemName is "STEP Transcriptor User Guide" then launch document "STEP Transcriptor User Guide.pdf"
         else if item 2 of pItemName is "STEP Emendator User Guide" then launch document "STEP Emendator User Guide.pdf"
         else if item 2 of pItemName is "STEP Image Browser User Guide" then launch document "STEP Image Browser User Guide.pdf"
         else 
            if item 2 of pItemName is "STEP Text Comparator User Guide" then launch document "STEP Text Comparator User Guide.pdf"
         end if
         set the defaultFolder to tDefaultFolder
         break
      case "Show Tooltips"
         set the toolTipDelay to 200
         put "Hide Tooltips" into line 10 of btn "Help" of group "STEP Menu 1" of stack "STEP Transcription Module"
         if there is a stack "STEP Tools" then put "Hide Tooltips" into line 10 of btn "Help" of group "Launcher Menu" of stack "STEP Tools"
         break
      case "Hide Tooltips"
         set the toolTipDelay to 0
         put "Show Tooltips" into line 10 of btn "Help" of group "STEP Menu 1" of stack "STEP Transcription Module"
         if there is a stack "STEP Tools" then put "Show Tooltips" into line 10 of btn "Help" of group "Launcher Menu" of stack "STEP Tools"
         break
      case "Show Tag Tips"
         set the cTagTip of stack "STEP Transcription Module" to "on"
         set the hilite of btn id 1944 of cd 1 of stack "STEP Transcription Module" to true
         put "Hide Tag Tips" into line 11 of btn "Help" of group "STEP Menu 1" of stack "STEP Transcription Module"
         if there is a stack "STEP Tools" then put "Hide Tag Tips" into line 11 of btn "Help" of group "Launcher Menu" of stack "STEP Tools"
         break
      case "Hide Tag Tips"
         set the cTagTip of stack "STEP Transcription Module" to "off"
         set the hilite of btn id 1944 of cd 1 of stack "STEP Transcription Module" to false
         put "Show Tag Tips" into line 11 of btn "Help" of group "STEP Menu 1" of stack "STEP Transcription Module"
         if there is a stack "STEP Tools" then put "Show Tag Tips" into line 11 of btn "Help" of group "Launcher Menu" of stack "STEP Tools"
         break
      case "Reset Window Geometry"
         readjustStack
         break
      case "About STEP Tools|About"
         answer "A set of utilities programmed by André De Tienne as a functional tool for STEP (an online, TEI-compliant, XML-based Scholarly Text-Editing Platform)."&cr&\
         cr&"They include STEP Transcriptor (which integrates STEP Descriptor), STEP Image Browser, and STEP Text Comparator. Others are being developed."&cr&\
         cr&"© André De Tienne and Peirce Edition Project, IUPUI, 2016"&cr&cr&"Built with LiveCode. Portions © 2000-2016 RunRev Ltd, All Rights Reserved Worldwide."
         break 
   end switch
end menuPick

private function getPath tStack
   local tPath
   set the itemDel to slash
   put the effective filename of this stack into tPath
   if the environment is "development" or the platform <> "MacOS" then
      set the defaultFolder to item 1 to -2 of tPath
      put tStack into item -1 of tPath
   else if the environment is "standalone application" and the platform is "MacOS" then
      put item 1 to -3 of tPath & "/Resources/MacOS" into tPath
      set the defaultFolder to tPath
      put "/"&tStack after tPath
   end if
   return tPath
end getPath

private function getPath2
   local tPath
   set the itemDel to slash
   put the effective filename of this stack into tPath
   set the defaultFolder to item 1 to -2 of tPath & "/STEP TOOLS USER GUIDES"
   return tPath
end getPath2




#####################
#####################

## Script of button "XMLTagger1”, ID 1089 of CARD 1 of STACK STEP Transcription Module

on menuPick pItemName
   local tPositions,tX,tY,tSel,tChunk,tClue,pTag,tFullTag,tIDNum,re,tReg,tTag,tTag1,tText,tVScroll,tTagToBeReplaced,tTagBase,tLTB,ot
   put 1004 into tIDNum
   put the cSelectedText of fld id 1004 of cd 1 into tSel
   put the cSelectedChunk of fld id 1004 of cd 1 into tChunk
   if tSel is empty then put "insert" into tClue else put "select" into tClue
   set the itemDelimiter to "|"
   if "outer" is not in pItemName and "Insert" is not in pItemName and "Undo" is not in pItemName and "Redo" is not in pItemName and "Copy" is not in pItemName \
         and "Replace" is not in pItemName and "Recolor" is not in pItemName and "attributes" is not in pItemName then put char 2 to -2 of item 1 of pItemName into item 1 of pItemName
   if segment 1 of pItemName is "Insert" then put "Insert displayed tags" into pItemName
   else if segment 1 to 2 of pItemName is "Copy tag" then put "Copy tag" into pItemName
   else if segment 1 to 2 of pItemName is "Replace tag" then put "Replace tag with copied tag" into pItemName
   else if segment 1 to 2 of pItemName is "Delete outer" then put "Delete outer tags" into pItemName
   else if segment 1 to 2 of pItemName is "Recolor selected" then 
      if the number of segments of pItemName > 3 then
         put char 1 to offset(">",segment 4 of pItemName) of segment 4 of pItemName into tTagBase
      else if tSel begins with "<" then
         put "<" & trueword 1 of tSel & ">" into tTagBase
      end if
      put "Recolor selected tag" into pItemName
   end if
   switch item 1 of pItemName
      case "Undo"
         undoEdit
         break
      case "Redo"
         redoEdit
         break
      case "Recolor selected tag"
         if tSel is not empty and char 1 of tSel is "<" and tTagBase <> empty then
            saveForUndoRedo 1004
            put the vScroll of fld id 1004 of cd 1 into tVScroll
            put fld id 1004 of cd 1 into tText
            set the itemDelimiter to comma
            if ".../>" is  not in tTagBase then 
               put length(tTagBase) into tLTB
               put segment 2 of tChunk into tX
               put offset("</"&char 2 to -1 of tTagBase,tText,segment 2 of tChunk) into ot
               put tX+ot+tLTB into tY
               put char tX to tY of tText into tSel
            else
               put segment 2 of tChunk into tX
            end if
            colorizeJustEnteredTag tSel,tX,,1004
            select after char tY of fld id 1004 of cd 1
            set the vScroll of fld id 1004 of cd 1 to tVScroll
            exit menuPick
         end if
         break
      case "Delete outer tags"
         if tSel is not empty and char 1 of tSel is "<" and char -1 of tSel is ">" then
            saveForUndoRedo 1004
            put the vScroll of fld id 1004 of cd 1 into tVScroll
            set the itemDelimiter to comma
            put offsets("</",tSel) into re
            delete char (item -1 of re) to -1 of tSel
            put offset(">",tSel) into re
            delete char 1 to re of tSel
            put tSel into char (word 2 of tChunk) to (word 4 of tChunk) of fld id 1004 of cd 1
            describeAlts
            colorizeJustEnteredTag tSel,(word 2 of tChunk),,1004
            select after char ((word 2 of tChunk)+length(tSel))-1 of fld id 1004 of cd 1
            set the vScroll of fld id 1004 of cd 1 to tVScroll
            exit menuPick
         end if
         break
      case "Delete all tags and attributes in selection"
         if tSel is not empty and char 1 of tSel is "<" and char -1 of tSel is ">" then
            saveForUndoRedo 1004
            put the vScroll of fld id 1004 of cd 1 into tVScroll
            set the itemDelimiter to comma
            put "<[/\w\d\s=:\-;#"&quote&"^>]+>" into tReg
            put replaceText(tSel,tReg,empty) into tSel
            put tSel into char (word 2 of tChunk) to (word 4 of tChunk) of fld id 1004 of cd 1
            send "mouseUp 1004" to btn "Color all tags" of cd 1
            describeAlts
            select after char ((word 2 of tChunk)+length(tSel))-1 of fld id 1004 of cd 1
            set the vScroll of fld id 1004 of cd 1 to tVScroll
            exit menuPick
         end if
         break
      case "Insert displayed tags"
         if fld id 1010 of cd 1 is empty then exit menuPick
         put the vScroll of fld id 1004 of cd 1 into tVScroll
         if tSel is not empty then 
            send "mouseUp 1004" to btn "Encode selection" of cd 1
         else 
            send "mouseUp 1004" to btn "Insert tag" of cd 1
         end if
         select after char ((word 2 of tChunk)+length(the text of fld id 1010 of cd 1)+length(tSel)-1) of fld id 1004 of cd 1
         set the vScroll of fld id 1004 of cd 1 to tVScroll
         exit menuPick
         break
      case "Copy tag"
         if the number of segments of line 7 of me > 2 then 
            set the cCopyTag of me to singleSlasher(segment 3 to -1 of line 7 of me)
         end if
         exit menuPick
         break
      case "Replace tag with copied tag"
         lock screen
         set the itemDel to "|"
         put the vScroll of fld id 1004 of cd 1 into tVScroll
         put item 2 of the cPopUpMenu of me into tPositions
         set the itemDel to comma
         put item 1 of tPositions into tX
         put item 2 of tPositions into tY
         put trueword 1 of segment 3 to segmentOffset("with copied",line 8 of me)-1 of line 8 of me into tTagToBeReplaced
         put singleSlasher(the cCopyTag of me) into tTag1
         put tTag1 into char tX to tY of fld id 1004 of cd 1
         put fld id 1004 of cd 1 into tText
         if "</" is in tTag1 then 
            put trueword 1 of tTag1 into tTag
            repeat with i = tX-1 down to 1
               if (char i to i+(length(tTag)) of tText is "<"&tTag) or (char i to i+(length(tTagToBeReplaced)) of tText is "<"&tTagToBeReplaced) then 
                  if (char i to i+(length(tTag)) of tText is "<"&tTag) then
                     put char i to tX+(length(tTag))+3 of tText into tTag
                     exit repeat
                  else if char i to i+(length(tTagToBeReplaced)) of tText is "<"&tTagToBeReplaced then 
                     put "<"&tTag into char i to i+(length(tTagToBeReplaced)) of tText
                     put "<"&tTag into char i to i+(length(tTagToBeReplaced)) of fld id 1004 of cd 1
                     put char i to tX+(length(tTag))+3 of tText into tTag
                     exit repeat
                  end if
               end if
            end repeat
         else if "</" is not in tTag1 then 
            put trueword 1 of tTag1 into tTag
            repeat with i = tX+1 to length(tText)
               if (char i to i+(length(tTag)+2) of tText is "</"&tTag&">") or (char i to i+(length(tTagToBeReplaced)+1) of tText is "</"&tTagToBeReplaced) then 
                  if (char i to i+(length(tTag)+2) of tText is "</"&tTag&">") then
                     put char tX to i+(length(tTag)+2) of tText into tTag
                     put tX into i
                     exit repeat
                  else if (char i to i+(length(tTagToBeReplaced)+1) of tText is "</"&tTagToBeReplaced) then
                     put "</"&tTag into char i to i+(length(tTagToBeReplaced)+1) of tText
                     put "</"&tTag into char i to i+(length(tTagToBeReplaced)+1) of fld id 1004 of cd 1
                     put char tX to i+(length(tTag))+2 of tText into tTag
                     put tX into i
                     exit repeat
                  end if
               end if
            end repeat
         end if
         colorizeJustEnteredTag tTag,i,,1004
         select after char i+length(tTag)-1 of fld id 1004 of cd 1
         set the vScroll of fld id 1004 of cd 1 to tVScroll
         exit menuPick
         break
      case "subst"
         put angleTag(pItemName) into pTag
         put angleTag("del")&angleTag("add") after char offset(">",pTag) of pTag
         break
      case "mod"
         answer "Regular <mod> tag or <mod><del><add> tags?" with "Cancel" or "<mod>" or "<mod><del><add>"
         if it is "Cancel" then exit menuPick
         else if it is "<mod><del><add>" then
            put angleTag("mod") into pTag
            put angleTag("del")&angleTag("add") after char offset(">",pTag) of pTag
            break
         else
            put angleTag("mod") into pTag
         end if
         break
      case "p"
      case "unclear"
      case "add"
      case "del"
         if item 2 of pItemName is not empty and item 3 of pItemName is not empty then
            if (item 3 of pItemName is 0) or (item 3 of pItemName is "none") or (item 3 of pItemName is "other") then 
               put "<"&item 1 of pItemName &"></"&(item 1 of pItemName)&">" into tFullTag
            else 
               put "<"&(item 1 of pItemName)&&(item 2 of pItemName)&"="&quote&(item 3 of pItemName)&quote&">"&"</"&(item 1 of pItemName)&">" into tFullTag
            end if
            insertOrEnterTag2 tFullTag,tSel,tIDNum,tChunk,tClue
            exit menuPick
            break
         end if
      case "del><add"
         if item 2 of pItemName is not empty and item 3 of pItemName is not empty then
            if (item 3 of pItemName is 0) or (item 3 of pItemName is "none") or (item 3 of pItemName is "other") then 
               put "<del><add></add></del>" into tFullTag
            else 
               put "<del"&&(item 2 of pItemName)&"="&quote&(item 3 of pItemName)&quote&"><add></add></del>" into tFullTag
            end if
            insertOrEnterTag2 tFullTag,tSel,tIDNum,tChunk,tClue
            exit menuPick
            break
         end if
      case "i"
         put "<hi rend="&quote&"italic"&quote&"></hi>" into tFullTag
         insertOrEnterTag2 tFullTag,tSel,tIDNum,tChunk,tClue
         exit menuPick
         break
      case "b"
         put "<hi rend="&quote&"bold"&quote&"></hi>" into tFullTag
         insertOrEnterTag2 tFullTag,tSel,tIDNum,tChunk,tClue
         exit menuPick
         break
      case "u"
         put "<hi rend="&quote&"underline"&quote&"></hi>" into tFullTag
         insertOrEnterTag2 tFullTag,tSel,tIDNum,tChunk,tClue
         exit menuPick
         break
      default
         if "<" is not in item 1 of pItemName then
            if item 3 of pItemName is not empty and item 4 of pItemName is not empty then
               if (item 4 of pItemName is 0) or (item 4 of pItemName is "none") or (item 4 of pItemName is "other") then 
                  put "<"&item 2 of pItemName&"></"&(item 2 of pItemName)&">" into tFullTag
               else 
                  put "<"&(item 2 of pItemName)&&(item 3 of pItemName)&"="&quote&(item 4 of pItemName)&quote&"></"&(item 2 of pItemName)&">" into tFullTag
                  insertOrEnterTag2 tFullTag,tSel,tIDNum,tChunk
               end if
            else
               put angleTag(pItemName) into pTag
            end if
         else if "<" is in item 1 of pItemName then
            if item 2 of pItemName is not empty and item 3 of pItemName is not empty then
               if (item 3 of pItemName is 0) or (item 3 of pItemName is "none") or (item 3 of pItemName is "other") then 
                  put "<"& (item 1 of pItemName) &"></"& (item 1 of pItemName)&">" into tFullTag
               else 
                  put "<"& (item 1 of pItemName)&&(item 2 of pItemName)&"="&quote&(item 3 of pItemName)&quote&"></"&(item 1 of pItemName)&">" into tFullTag
               end if
               insertOrEnterTag2 tFullTag,tSel,tIDNum,tChunk
            else 
               put angleTag(pItemName) into pTag
            end if
         end if
         break
   end switch
   if tClue is "insert" then insertTag pTag,tIDNum,tChunk else enterTag pTag,tSel,tIDNum,tChunk
end menuPick

on insertOrEnterTag2 pTag,tSel,tIDNum,tChunk,tClue
   if tClue is "insert" then insertTag pTag,tIDNum,tChunk else enterTag pTag,tSel,tIDNum,tChunk
end insertOrEnterTag2

on enterTag pTag,pSel,pIDNum,pChunk
   local tSta,tSto,tFirstTag,tSecondTag,tOffs,tFullTagged
   lock screen
   if pChunk is empty then exit enterTag
   saveForUndoRedo pIDNum
   put word 2 of pChunk into tSta
   if word 4 of pChunk is an integer then put word 4 of pChunk into tSto else put tSta into tSto
   put offsets(">",pTag) into tOffs
   if tOffs is empty or tOffs is 0 then exit to top
   if the number of items of tOffs < 3 then 
      put char 1 to (item 1 of tOffs) of pTag into tFirstTag
      put char (item 1 of tOffs)+1 to -1 of pTag into tSecondTag
   else 
      put char 1 to (item 2 of tOffs) of pTag into tFirstTag
      put char (item 2 of tOffs)+1 to -1 of pTag into tSecondTag
   end if
   put tFirstTag&(char tSta to tSto  of fld id pIDNum of cd 1)&tSecondTag into tFullTagged
   put tSecondTag after char tSto of fld id pIDNum of cd 1
   set the textStyle of char tSto+1 to (tSto+length(tSecondTag)-1) of fld id pIDNum to "plain"
   put tFirstTag before char tSta of fld id pIDNum of cd 1
   set the textStyle of char tSta to (tSta+length(tFirstTag)-1) of fld id pIDNum to "plain"
   colorizeJustEnteredTag tFullTagged,tSta,,1004
   describeAlts
   set the cSelectedChunk of fld id pIDNum of cd 1 to empty
   set the cSelectedText of fld id pIDNum of cd 1 to empty
   saveForUndoRedo pIDNum
   unlock screen
   select after char tSta+length(tFirstTag)-1 of fld id pIDNum of cd 1
end enterTag

on insertTag pTag,pIDNum,pChunk
   local tSta,tTL,tLastLeft,tLefts
   lock screen
   if pChunk is empty then exit to top
   saveForUndoRedo pIDNum
   put word 2 of pChunk into tSta
   put length(pTag) into tTL
   put pTag before char tSta of fld id pIDNum of cd 1
   put offsets("<",pTag) into tLefts
   put item -1 of tLefts into tLastLeft
   --send "mouseUp 1004" to btn "Color all tags" of cd 1
   colorizeJustEnteredTag pTag,tSta,tSta+length(pTag)-1,1004
   set the cSelectedChunk of fld id pIDNum of cd 1 to empty
   set the cSelectedText of fld id pIDNum of cd 1 to empty
   saveForUndoRedo pIDNum
   unlock screen
   select before char (tSta+tTL-tLastLeft) of fld id pIdNum of cd 1
end insertTag

function angleTag tTag
   if tTag is among the items of "lb/,pb/,gb/,cb/" then return "<"&tTag&">" else return "<"&tTag&"></"&tTag&">"
end angleTag



#####################
#####################

## Script of button "XMLTagger2”, ID 1090 of CARD 1 of STACK STEP Transcription Module

on menuPick pItemName
   local tFldID,tPositions,tX,tY,tSel,tChunk,tClue,pTag,tFullTag,tIDNum,re,tReg,tTag,tTag1,tText,tVScroll,tTagToBeReplaced,tTagBase,tLTB,ot
   if the visible of fld id 1041 of cd 1 then put "1041" into tFldID
   else if the visible of fld id 1151 of cd 1 then put "1151" into tFldID
   put the cSelectedText of fld id tFldID into tSel
   put the cSelectedChunk of fld id tFldID into tChunk
   put tFldID into tIDNum
   if segment 1 of pItemName is "Insert" then put "Insert displayed tags" into pItemName
   else if segment 1 to 2 of pItemName is "Copy tag" then put "Copy tag" into pItemName
   else if segment 1 to 2 of pItemName is "Replace tag" then put "Replace tag with copied tag" into pItemName
   else if segment 1 to 2 of pItemName is "Delete outer" then put "Delete outer tags" into pItemName
   else if segment 1 to 2 of pItemName is "Recolor selected" then 
      if the number of segments of pItemName > 3 then
         put char 1 to offset(">",segment 4 of pItemName) of segment 4 of pItemName into tTagBase
      else if tSel begins with "<" then
         put "<" & trueword 1 of tSel & ">" into tTagBase
      end if
      put "Recolor selected tag" into pItemName
   end if
   set the itemDelimiter to "|"
   switch item 1 of pItemName
      case "Undo"
         undoEdit
         break
      case "Redo"
         redoEdit
         break
      case "Recolor selected tag"
         if tSel is not empty and char 1 of tSel is "<" and tTagBase <> empty then
            saveForUndoRedo tFldID
            put the vScroll of fld id tFldID of cd 1 into tVScroll
            put fld id tFldID of cd 1 into tText
            set the itemDelimiter to comma
            if ".../>" is  not in tTagBase then 
               put length(tTagBase) into tLTB
               put segment 2 of tChunk into tX
               put offset("</"&char 2 to -1 of tTagBase,tText,segment 2 of tChunk) into ot
               put tX+ot+tLTB into tY
               put char tX to tY of tText into tSel
            else
               put segment 2 of tChunk into tX
            end if
            colorizeJustEnteredTag tSel,tX,,tFldID
            select after char tY of fld id tFldID of cd 1
            set the vScroll of fld id tFldID of cd 1 to tVScroll
            exit menuPick
         end if
         break
      case "Delete outer tags"
         if tSel is not empty and char 1 of tSel is "<" and char -1 of tSel is ">" then
            saveForUndoRedo tFldID
            put the vScroll of fld id tFldID of cd 1 into tVScroll
            set the itemDelimiter to comma
            put offsets("</",tSel) into re
            if re is 0 then exit menuPick
            delete char (item -1 of re) to -1 of tSel
            put offset(">",tSel) into re
            delete char 1 to re of tSel
            put tSel into char (word 2 of tChunk) to (word 4 of tChunk) of fld id tFldID of cd 1
            colorizeJustEnteredTag tSel,(word 2 of tChunk),,tFldID
            select after char ((word 2 of tChunk)+length(tSel))-1 of fld id tFldID of cd 1
            set the vScroll of fld id tFldID of cd 1 to tVScroll
            exit menuPick
         end if
         break
      case "Delete all tags and attributes in selection"
         if tSel is not empty and char 1 of tSel is "<" and char -1 of tSel is ">" then
            saveForUndoRedo tFldID
            put the vScroll of fld id tFldID of cd 1 into tVScroll
            set the itemDelimiter to comma
            put "<[/\w\d\s=:\-;#"&quote&"^>]+>" into tReg
            put replaceText(tSel,tReg,empty) into tSel
            put tSel into char (word 2 of tChunk) to (word 4 of tChunk) of fld id tFldID of cd 1
            send "mouseUp tFldID" to btn "Color all tags" of cd 1
            select after char ((word 2 of tChunk)+length(tSel))-1 of fld id tFldID of cd 1
            exit menuPick
         end if
         break
      case "Insert displayed tags"
         if fld id 1010 of cd 1 is empty then exit menuPick
         if tSel is not empty then 
            send "mouseUp" && tFldID to btn "Encode selection" of cd 1
         else 
            send "mouseUp" && tFldID to btn "Insert tag" of cd 1
         end if
         select after char ((word 2 of tChunk)+length(the text of fld id 1010 of cd 1)+length(tSel)-1) of fld id tFldID of cd 1
         exit menuPick
         break
      case "Copy tag"
         if the number of segments of line 7 of me > 2 then 
            set the cCopyTag of me to singleSlasher(segment 3 to -1 of line 7 of me)
         end if
         exit menuPick
         break
      case "Replace tag with copied tag"
         lock screen
         set the itemDel to "|"
         put the vScroll of fld id tFldID of cd 1 into tVScroll
         put item 2 of the cPopUpMenu of me into tPositions
         set the itemDel to comma
         put item 1 of tPositions into tX
         put item 2 of tPositions into tY
         put trueword 1 of segment 3 to segmentOffset("with copied",line 8 of me)-1 of line 8 of me into tTagToBeReplaced
         put singleSlasher(the cCopyTag of me) into tTag1
         put tTag1 into char tX to tY of fld id tFldID of cd 1
         put fld id tFldID of cd 1 into tText
         if "</" is in tTag1 then 
            put trueword 1 of tTag1 into tTag
            repeat with i = tX-1 down to 1
               if (char i to i+(length(tTag)) of tText is "<"&tTag) or (char i to i+(length(tTagToBeReplaced)) of tText is "<"&tTagToBeReplaced) then 
                  if (char i to i+(length(tTag)) of tText is "<"&tTag) then
                     put char i to tX+(length(tTag))+3 of tText into tTag
                     exit repeat
                  else if char i to i+(length(tTagToBeReplaced)) of tText is "<"&tTagToBeReplaced then 
                     put "<"&tTag into char i to i+(length(tTagToBeReplaced)) of tText
                     put "<"&tTag into char i to i+(length(tTagToBeReplaced)) of fld id tFldID of cd 1
                     put char i to tX+(length(tTag))+3 of tText into tTag
                     exit repeat
                  end if
               end if
            end repeat
         else if "</" is not in tTag1 then 
            put trueword 1 of tTag1 into tTag
            repeat with i = tX+1 to length(tText)
               if (char i to i+(length(tTag)+2) of tText is "</"&tTag&">") or (char i to i+(length(tTagToBeReplaced)+1) of tText is "</"&tTagToBeReplaced) then 
                  if (char i to i+(length(tTag)+2) of tText is "</"&tTag&">") then
                     put char tX to i+(length(tTag)+2) of tText into tTag
                     put tX into i
                     exit repeat
                  else if (char i to i+(length(tTagToBeReplaced)+1) of tText is "</"&tTagToBeReplaced) then
                     put "</"&tTag into char i to i+(length(tTagToBeReplaced)+1) of tText
                     put "</"&tTag into char i to i+(length(tTagToBeReplaced)+1) of fld id tFldID of cd 1
                     put char tX to i+(length(tTag))+2 of tText into tTag
                     put tX into i
                     exit repeat
                  end if
               end if
            end repeat
         end if
         colorizeJustEnteredTag tTag,i,,tFldID
         select after char i+length(tTag)-1 of fld id tFldID of cd 1
         set the vScroll of fld id tFldID of cd 1 to tVScroll
         exit menuPick
         break
      case "bibl tags"
      case "name tags"
         if item 2 of pItemName is not "<title>" then insertOrEnterTag1 tSel,tIDNum,tChunk,(item 2 of pItemName)
         else if item 3 of pItemName is not empty and item 4 of pItemName is not empty then
            if (item 4 of pItemName is 0) or (item 4 of pItemName is "none") then put item 2 of pItemName &"</"&(char 2 to -1 of item 2 of pItemName) into tFullTag
            else put (char 1 to -2 of item 2 of pItemName)&&(item 3 of pItemName)&"="&quote&(item 4 of pItemName)&quote&">"&"</"&(char 2 to -1 of item 2 of pItemName) into tFullTag
            insertOrEnterTag2 tFullTag,tSel,tIDNum,tChunk
            break
         end if
         break
      case "<p>"
      case "<foreign>"
      case "<emph>"
         if item 2 of pItemName is not empty and item 3 of pItemName is not empty then
            if (item 3 of pItemName is 0) or (item 3 of pItemName is "none") then put item 1 of pItemName &"</"&(char 2 to -1 of item 1 of pItemName) into tFullTag
            else put (char 1 to -2 of item 1 of pItemName)&&(item 2 of pItemName)&"="&quote&(item 3 of pItemName)&quote&">"&"</"&(char 2 to -1 of item 1 of pItemName) into tFullTag
            insertOrEnterTag2 tFullTag,tSel,tIDNum,tChunk
            break
         end if
      default
         if "<" is not in item 1 of pItemName then
            if item 3 of pItemName is not empty and item 4 of pItemName is not empty then
               if (item 4 of pItemName is 0) or (item 4 of pItemName is "none") then put item 2 of pItemName &"</"&(char 2 to -1 of item 2 of pItemName) into tFullTag
               else put (char 1 to -2 of item 2 of pItemName)&&(item 3 of pItemName)&"="&quote&(item 4 of pItemName)&quote&">"&"</"&(char 2 to -1 of item 2 of pItemName) into tFullTag
               insertOrEnterTag2 tFullTag,tSel,tIDNum,tChunk
            end if
         else if "<" is in item 1 of pItemName then
            if item 2 of pItemName is not empty and item 3 of pItemName is not empty then
               if (item 3 of pItemName is 0) or (item 3 of pItemName is "none") then 
                  put item 1 of pItemName &"</"&(char 2 to -1 of item 1 of pItemName) into tFullTag
               else 
                  put (char 1 to -2 of item 1 of pItemName)&&(item 2 of pItemName)&"="&quote&(item 3 of pItemName)&quote&">"&"</"&(char 2 to -1 of item 1 of pItemName) into tFullTag
               end if
               insertOrEnterTag2 tFullTag,tSel,tIDNum,tChunk
            else 
               insertOrEnterTag1 tSel,tIDNum,tChunk,pItemName
            end if
         end if
   end switch
end menuPick

on insertOrEnterTag1 tSel,tIDNum,tChunk,pItemName
   local tClue,pTag
   if tSel is empty then put "insert" into tClue else put "select" into tClue
   put char 2 to -2 of pItemName into pItemName
   put angleTag(pItemName) into pTag
   if tClue is "insert" or pTag is among the words of "<pb/> <lb/> <gb/> <cb/>" then insertTag pTag,tIDNum,tChunk else enterTag pTag,tSel,tIDNum,tChunk
end insertOrEnterTag1

on insertOrEnterTag2 pTag,tSel,tIDNum,tChunk
   local tClue
   if tSel is empty then put "insert" into tClue else put "select" into tClue
   if tClue is "insert" or pTag is among the words of "<pb/> <lb/> <gb/> <cb/>" then insertTag pTag,tIDNum,tChunk else enterTag pTag,tSel,tIDNum,tChunk
end insertOrEnterTag2

on enterTag pTag,pSel,pIDNum,pChunk
   local tSta,tSto,tFirstTag,tSecondTag,tOffs,tFullTagged
   lock screen
   if pChunk is empty then exit enterTag
   saveForUndoRedo pIDNum
   put word 2 of pChunk into tSta
   if word 4 of pChunk is an integer then put word 4 of pChunk into tSto else put tSta into tSto
   put offsets(">",pTag) into tOffs
   if tOffs is empty or tOffs is 0 then exit to top
   if the number of items of tOffs < 3 then 
      put char 1 to (item 1 of tOffs) of pTag into tFirstTag
      put char (item 1 of tOffs)+1 to -1 of pTag into tSecondTag
   else 
      put char 1 to (item 2 of tOffs) of pTag into tFirstTag
      put char (item 2 of tOffs)+1 to -1 of pTag into tSecondTag
   end if
   put tFirstTag&(char tSta to tSto  of fld id pIDNum of cd 1)&tSecondTag into tFullTagged
   put tSecondTag after char tSto of fld id pIDNum of cd 1
   set the textStyle of char tSto+1 to (tSto+length(tSecondTag)-1) of fld id pIDNum to "plain"
   put tFirstTag before char tSta of fld id pIDNum of cd 1
   set the textStyle of char tSta to (tSta+length(tFirstTag)-1) of fld id pIDNum to "plain"
   colorizeJustEnteredTag tFullTagged,tSta,,pIDNum
   set the cSelectedChunk of fld id pIDNum of cd 1 to empty
   set the cSelectedText of fld id pIDNum of cd 1 to empty
   saveForUndoRedo pIDNum
   unlock screen
   select after char tSta+length(tFirstTag)-1 of fld id pIDNum of cd 1
end enterTag

on insertTag pTag,pIDNum,pChunk
   local tSta,tTL,tLastLeft,tLefts
   lock screen
   if pChunk is empty then exit to top
   saveForUndoRedo pIDNum
   put word 2 of pChunk into tSta
   put length(pTag) into tTL
   put pTag before char tSta of fld id pIDNum of cd 1
   put offsets("<",pTag) into tLefts
   put item -1 of tLefts into tLastLeft
   colorizeJustEnteredTag pTag,tSta,tSta+length(pTag)-1,pIDNum
   set the cSelectedChunk of fld id pIDNum of cd 1 to empty
   set the cSelectedText of fld id pIDNum of cd 1 to empty
   saveForUndoRedo pIDNum
   unlock screen
   select before char (tSta+tTL-tLastLeft) of fld id pIdNum of cd 1
end insertTag


function angleTag tTag
   if tTag is among the items of "lb/,pb/,gb/,cb/" then return "<"&tTag&">" else return "<"&tTag&"></"&tTag&">"
end angleTag



#####################
#####################

## Script of button "Clear" of card "card id 1002" of stack "/Users/adetienn/Documents/STEP Externals/STEP-LI 7.1.4/STEP Transcription Module.livecode" ID 1099 of CARD 1 of STACK STEP Transcription Module

on mouseUp
  put empty into fld id 1014 of cd 1
end mouseUp

##TOOLTIP:
##Empty the field below.



#####################
#####################

## Script of field "Automatic Pragmatic Descriptions" of card "card id 1002" of stack "/Users/adetienn/Documents/STEP Externals/STEP-LI 7.1.4/STEP Transcription Module.livecode" ID 1049 of CARD 1 of STACK STEP Transcription Module

on selectionChanged pLineNumber
   local tLineNumber,tAltLine,tAltLocations,tAnchoredAltLocations,tAnchAlt,tSta,tLineInd,tNumLine,t8sp,tSto,tIA,tTaggedText,tStoTemp,tTemp,tOffs
   local tTranspositions,tAltIndentedLocations,tAltAnchoredLocations,tListTranspoIndentedLoc,tListTranspoRunLoc
   uncolorButtons
   if pLineNumber is empty then put the lineIndex of the selectedChunk into tLineNumber else put pLineNumber into tLineNumber
   put line tLineNumber of fld id 1017 of cd 1 into tAltLine
   colorBGLine tLineNumber,1049
   
   if the hilite of btn "Example" of cd 1 is true then 
      put the cExampleAltIndex of btn id 1020 of cd 1 of stack "STEP Transcription Module" into tAltLocations
      put  the cExampleIndentedIndex of btn id 1020 of cd 1 of stack "STEP Transcription Module" into tAltIndentedLocations
      put the cExampleTranspositionsHolder of fld id 1017 of cd 1 of stack "STEP Transcription Module" into tTranspositions
      put the cExampleIndentedTranspoAltsLoc of fld id 1017 of cd 1 of stack "STEP Transcription Module" into tListTranspoIndentedLoc
      put the cExampleRunTranspoAltsLoc of fld id 1017 of cd 1 of stack "STEP Transcription Module" into tListTranspoRunLoc
      put tListTranspoRunLoc after tAltLocations
      put tListTranspoIndentedLoc after tAltIndentedLocations
      sort lines of tAltLocations ascending numeric by item 1 of each
      sort lines of tAltIndentedLocations ascending numeric by item 1 of each
   else 
      put the cAllRunAltsLoc of fld id 1126 of cd 1 of stack "STEP Transcription Module" into tAltLocations
      put the cAllIndentedAltsLoc of fld id 1126 of cd 1 of stack "STEP Transcription Module" into tAltIndentedLocations
      put the cTranspositionsHolder of fld id 1017 of cd 1 of stack "STEP Transcription Module" into tTranspositions
   end if
   if the visible of fld id 1004 of cd 1 then
      get trueword 1 of line tLineNumber of tAltLocations
      select char (item 1 of it) to (item 2 of it) of fld id 1004 of cd 1
      scrollFld (item 1 of it),1004
      exit selectionChanged
   end if
   if the visible of fld id 1126 of cd 1 then
      get trueword 1 of line tLineNumber of tAltIndentedLocations
      select char (item 1 of it) to (item 2 of it) of fld id 1126 of cd 1
      scrollFld (item 1 of it),1126
      exit selectionChanged
   end if
   if the visible of fld id 1163 of cd 1 then
      local tAllIndentedAltLocs,tAnchoredText,tIndentedAltsLocsWithoutSC,tAnchorTag,tXMLIDTag,tTaggedSet,tSign1,tIndentAltLine,tPrefAnchor,ut,ot
      local tTagEnd,tTranspoTaggedSet
      put the cAllIndentedAltsLoc  of fld id 1126 of cd 1 of stack "STEP Transcription Module" into tAllIndentedAltLocs
      put line tLineNumber of tAllIndentedAltLocs into tIndentAltLine
      put fld id 1163 of cd 1 of stack "STEP Transcription Module" into tAnchoredText
      put the cAllIndentedAltsLocWithoutSC  of fld id 1126 of cd 1 of stack "STEP Transcription Module" into tIndentedAltsLocsWithoutSC
      put customAnchor() into tPrefAnchor
      set the itemDel to "|"
      put the cFirstSign of fld id 1126 of cd 1 of stack "STEP Transcription Module" into tSign1
      if item 2 of tIndentAltLine is in "sn" then
         put item 3 of line tLineNumber of tAllIndentedAltLocs into tTaggedSet
         put lineOffset(tTaggedSet,tIndentedAltsLocsWithoutSC) into tLineNumber
         put "<anchor xml:id="&quote&tPrefAnchor&tLineNumber&quote&"/>" into tAnchorTag
         put " xml:id="&quote&tPrefAnchor&tLineNumber&quote into tXMLIDTag
         replace tSign1 with cr in tTaggedSet
         put tXMLIDTag after trueword 1 of tTaggedSet
         put tAnchorTag before char offset("</",line -1 of tTaggedSet) of line -1 of tTaggedSet
         put offset(tTaggedSet,tAnchoredText) into ut
         put ut + length(tTaggedSet)-1 into ot
         select char ut to ot of fld id 1163 of cd 1  of stack "STEP Transcription Module"
         scrollFld ut,1163
         exit selectionChanged
      else if item 2 of tIndentAltLine is "cl" then  --self-closing alt tags
         put item 3 of line tLineNumber of tAllIndentedAltLocs into tTaggedSet
         replace tSign1 with cr in tTaggedSet
         put offset(tTaggedSet,tAnchoredText) into ut
         put ut + length(tTaggedSet)-1 into ot
         select char ut to ot of fld id 1163 of cd 1  of stack "STEP Transcription Module"
         scrollFld ut,1163
         exit selectionChanged
      else -- transpositions
         set the itemDel to "|"
         put lineOffset(tAltLine,tTranspositions) into tLineNumber
         put item 3 of line tLineNumber of tTranspositions into tTranspoTaggedSet
         put offset(char 1 to offset(">",tTranspoTaggedSet) of tTranspoTaggedSet,tAnchoredText) into ut
         set the itemDel to comma
         put char (item 2 of offsets("<metamark",tTranspoTaggedSet)) to -1 of tTranspoTaggedSet into tTagEnd
         set the itemDel to "|"
         put offset(tTagEnd,tAnchoredText)+length(tTagEnd)-1 into ot
         select char ut to ot of fld id 1163 of cd 1  of stack "STEP Transcription Module"
         scrollFld ut,1163
         exit selectionChanged
      end if
   end if
end selectionChanged

on selectionChanged1 pLineNumber
   local tLineNumber,tAltLine,tAltLocations,tAnchoredAltLocations,tAnchAlt,tSta,tLineInd,tNumLine,t8sp,tSto,tIA,tTaggedText,tStoTemp,tTemp,tOffs
   uncolorButtons
   if pLineNumber is empty then put the lineIndex of the selectedChunk into tLineNumber else put pLineNumber into tLineNumber
   put line tLineNumber of fld id 1017 of cd 1 into tAltLine
   if the hilite of btn "Example" of cd 1 is true then 
      put the cExampleAltIndex of btn id 1020 of cd 1 into tAltLocations
      put the cExampleAnchoredIndex of btn id 1020 of cd 1 into tAnchoredAltLocations
   else 
      put the cAltIndex of btn id 1020 of cd 1 into tAltLocations
      put the cAnchoredIndex of btn id 1020 of cd 1 into tAnchoredAltLocations
   end if
   if the visible of fld id 1004 of cd 1 then
      select char (item 1 of line tLineNumber of tAltLocations) to (item 2 of line tLineNumber of tAltLocations) of fld id 1004 of cd 1
      scrollFld (item 1 of line tLineNumber of tAltLocations),1004
      exit selectionChanged1
   end if
   put line tLineNumber of tAnchoredAltLocations into tAnchAlt
   if "||" is not in tAnchAlt then
      put item 1 of tAnchAlt into tSta
      put item 2 of tAnchAlt into tSto
      put char tSta to tSto of fld id 1126 of cd 1 into tAnchAlt
   else
      put char 1 to offset("||",tAnchAlt)-1 of tAnchAlt into tAnchAlt
      replace "{{{" with cr in tAnchAlt
      if tAnchAlt begins with "<seg " then
         put "        " into t8sp
         put t8sp before tAnchAlt
         replace "</seg><metamark" with cr&t8sp&"</seg>"&cr&t8sp&"<metamark" in tAnchAlt
         replace "></metamark>" with ">"&cr&t8sp&"</metamark>" in tAnchAlt
         replace "</metamark> " with "</metamark> "&cr&t8sp in tAnchAlt
      end if
   end if
   put offset(tAnchAlt,fld id 1126 of cd 1) into tSta
   if the visible of fld id 1126 of cd 1 then
      select char tSta to tSta+(length(tAnchAlt)-1) of fld id 1126 of cd 1
      scrollFld tSta,1126
   else if the visible of fld id 1163 of cd 1 then
      if the cIndentedStyle of fld id 1163 of cd 1 is true then
         put the lineIndex of char tSta of fld id 1126 into tLineInd
         put the number of lines of tAnchAlt into tNumLine
         if word 1 of tAnchAlt is not among the items of  "<addSpan,<delSpan,<substJoin,<alt" then
            put the charIndex of word 1 of line tLineInd of fld id 1163 of cd 1 into tSta
            put offset(">",line tLineInd+tNumLine-1 of fld id 1163 of cd 1) into tSto
            put length(line 1 to (tLineInd+tNumLine-2) of fld id 1163 of cd 1)+tSto+1 into tSto
         else
            put offset(tAnchAlt,fld id 1163 of cd 1) into tSta
            put tSta + length(tAnchAlt)-1 into tSto
         end if
         select char tSta to tSto of fld id 1163 of cd 1
         scrollFld tSta,1163
      else
         if the hilite of btn "Example" of cd 1 is true then put the cExampleIndentedAnchored of fld id 1163 of cd 1 into tIA else put the cIndentedAnchored of fld id 1163 of cd 1 into tIA
         put offset(tAnchAlt,fld id 1126 of cd 1) into tSta
         put the lineIndex of char tSta of fld id 1126 into tLineInd
         put the number of lines of tAnchAlt into tNumLine
         put line tLineInd to tLineInd+tNumLine-1 of tIA into tTaggedText
         replace cr with empty in tTaggedText
         replace "        " with empty in tTaggedText
         replace "    " with empty in tTaggedText
         put offset(tTaggedText,fld id 1163 of cd 1) into tSta
         put tSta + length(tTaggedText) into tStoTemp
         put char tSta to tStoTemp-1 of fld id 1163 of cd 1 into tTemp
         if "delend" is in tTemp or "addend" is in tTemp then
            if char 1 of tTemp is "<" and char 1 to 2 of tTemp <> "</" and char -2 to -1 of tTemp <>  "/>" then 
               put tSta+offset("/>",tTemp)+length(word 1 of tTemp)+2 into tSto
            else 
               put tSta+offset("spanTo",tTemp)-10 into tSta
               put (tStoTemp)-(length(tTemp)-(item -1 of offsets("/>",tTemp))) into tSto
            end if
         else
            put offsets(">",tTemp) into tOffs
            put (tSta+item-1 of tOffs)-1 into tSto
         end if
         select char tSta to tSto of fld id 1163 of cd 1
         scrollFld tSta,1163
      end if
   end if
end selectionChanged1

on selectionChanged4 pLineNumber
   local tLineNumber,tAltLine,tAltLine2,tSpans,tRetagged,tAltText,tTranspoDesc,ot,ut,tSps,tAnchorText,tIndentText,tSyntaDesc,tWnum,tStrokesLemma,tRetag2,tSpacedAngles,tRA,tEndTag,tBegTag,tBegs,tEnds,tEndAngle
   uncolorButtons
   if pLineNumber is empty then put the lineIndex of the selectedChunk into tLineNumber else put pLineNumber into tLineNumber
   put line tLineNumber of fld id 1017 of cd 1 into tAltLine
   put empty into tAltLine2
   if "] before del [" is in tAltLine then 
      put tAltLine into tAltLine2
      replace "before del" with "before deleted" in tAltLine2
   end if
   put the cSpanList of fld id 1017 of cd 1 into tSpans
   put empty into tRetagged
   put fld id 1004 of cd 1 into tAltText
   if the hilite of btn "Example" of cd 1 is true then put the cExampleTranspositionsHolder of fld id 1017 of cd 1 into tTranspoDesc
   else put the cTranspositionsHolder of fld id 1017 of cd 1 into tTranspoDesc
   if tAltLine&"||" is in tTranspoDesc then
      put lineOffset(tAltLine,tTranspoDesc) into ot
      put offset("||",line ot of tTranspoDesc) into ut
      put char ut +2 to -1 of line ot of tTranspoDesc into tRetagged
      if the visible of fld id 1163 of cd 1 then
         replace "<" with cr&"    <" in tRetagged
         delete char 1 of tRetagged
      end if
   end if
   if tALtLine is in tSpans or tAltLine2 is in tSpans then
      if tALtLine is in tSpans then put lineOffsets(tAltLine,tSpans) into tSps else if tALtLine2 is in tSpans then put lineOffsets(tAltLine2,tSpans) into tSps
      if tSps <> 0 then
         repeat with h = 1 to the number of items of tSps
            if line (item h of tSps) of tSpans ends with "||"&tAltLine then exit repeat
         end repeat
         put char 1 to offset("||",line (item h of tSps) of tSpans)-1 of line (item h of tSps) of tSpans into tRetagged
      end if
   end if
   if the visible of fld id 1163 then 
      if tRetagged is empty then
         selectAnchorText tLineNumber
         exit selectionChanged4
      else
         put fld id 1163 of cd 1 into tAnchorText
         get offset(tRetagged,tAnchorText)
         if it <> 0 then
            set the metadata of line tLineNumber of fld id 1017 of cd 1 to char it to (it+length(tRetagged)-1) of tAltText
            select char it to (it+length(tRetagged)-1) of fld id 1163 of cd 1
         end if
         scrollFld it,1163
         exit selectionChanged4
      end if
   end if
   if the visible of fld id 1126 of cd 1 then put fld id 1126 of cd 1 into tIndentText
   if the hilite of btn "Example" of cd 1 is true then put the cExampleSyntacticalDescriptionHolder of fld id 1017 of cd 1 into tSyntaDesc
   else put the cSyntacticalDescriptionHolder of fld id 1017 of cd 1 into tSyntaDesc
   if tRetagged is empty then
      put offset("]",tAltLine) into ut
      put the number of words of char 1 to ut of tAltLine into tWnum
      put "||"&word 1 to tWnum+1 of tAltLine into tStrokesLemma
      if tStrokesLemma is in tSyntaDesc then
         put char 1 to offset("||",line (lineOffset(tStrokesLemma,tSyntaDesc)) of tSyntaDesc)-1 of tSyntaDesc into tRetagged
      else
         put retaggingLine(line tLineNumber of fld id 1017 of cd 1,tLineNumber) into tRetagged
      end if
      put empty into tRetag2
      if line 2 of tRetagged is not empty then
         put line 2 of tRetagged into tRetag2
         put line 1 of tRetagged into tRetagged
      end if
   end if
   if char-2 to -1 of tRetagged <> "!!" then
      get offset(tRetagged,tAltText)
      if it <> 0 then 
         set the metadata of line tLineNumber of fld id 1017 of cd 1 to char it to (it+length(tRetagged)-1) of tAltText
         if the visible of fld id 1004 then 
            select char it to (it+length(tRetagged)-1) of fld id 1004 of cd 1
            scrollFld it,1004
         else if the visible of fld id 1126 then 
            put spaceMetadataTags(the metadata of line tLineNumber of fld id 1017 of cd 1) into tSpacedAngles
            if tSpacedAngles is not empty then
               get offset(tSpacedAngles,tIndentText)
               select char it to (it+length(tSpacedAngles)-1) of fld id 1126 of cd 1
            else
               get offset(tRetagged,tIndentText)
               select char it to (it+length(tRetagged)-1) of fld id 1126 of cd 1
            end if
            scrollFld it,1126
         end if
      else
         if tRetag2 is not empty then
            get offset(tRetag2,tAltText)
            if it <> 0 then 
               set the metadata of line tLineNumber of fld id 1017 of cd 1 to char it to (it+length(tRetag2)-1) of tAltText
               if the visible of fld id 1004 then 
                  select char it to (it+length(tRetag2)-1) of fld id 1004 of cd 1
                  scrollFld it,1004
               else if the visible of fld id 1126 then 
                  put spaceMetadataTags(the metadata of line tLineNumber of fld id 1017 of cd 1) into tSpacedAngles
                  get offset(tSpacedAngles,tIndentText)
                  select char it to (it+length(tSpacedAngles)-1) of fld id 1126 of cd 1
                  scrollFld it,1126
               end if
            end if
         end if
      end if
   else
      delete char -2 to -1 of tRetagged
      get offset(tRetagged,tAltText)
      if it <> 0 then 
         put offset(">",tRetagged) into tRA
         put char 1 of tRetagged &"/"&char 2 to tRA of tRetagged into tEndTag
         put char 1 to tRA of tRetagged into tBegTag
         put offsets(tBegTag,tAltText,it+length(tBegTag)) into tBegs
         put offsets(tEndTag,tAltText,it+length(tBegTag)) into tEnds
         if the number of items of tEnds = 1 then put tEnds into tEndAngle
         else
            repeat with x = 1 to the number of items of tBegs
               if item x of tBegs > item x of tEnds then 
                  put item x of tEnds into tEndAngle
                  exit repeat
               end if
            end repeat
         end if
         if tEndAngle is empty then put item -1 of tEnds into tEndAngle
         add (length(tEndTag)-1) to tEndAngle
         set the metadata of line tLineNumber of fld id 1017 of cd 1 to char it to tEndAngle of tAltText
         if the visible of fld id 1004 then 
            select char it to tEndAngle of fld id 1004 of cd 1
            scrollFld it,1004
         else if the visible of fld id 1126 then 
            put spaceMetadataTags(the metadata of line tLineNumber of fld id 1017 of cd 1) into tSpacedAngles
            get offset(tSpacedAngles,tIndentText)
            select char it to (it+length(tSpacedAngles)-1) of fld id 1126 of cd 1
            scrollFld it,1126
         end if
      end if
   end if
end selectionChanged4

function retaggingLine pLine,pLineNumber
   local pLine2,tLemma,tGloss,tBelDels,tCount,tTempAlt,tTopBelDel,tN1,tW1,tW2,tDelAbove,tW3,tBelowDel,tTempAlt1
   local tN2,ot,ut,tGloss1,sta,sto,tLemma1,tSta,tNestedGloss,tBg,tSubLemma,tSubGloss1,tDif,yt,tLemma2
   put pLine into pLine2
   if "gap due to" is in pLine or "gap caused by" is in pLine then put replaceGapTag(pLine) into pLine
   get offset("]",pLine)
   put char 1 to it-1 of pLine into tLemma
   put char it+2 to -1 of pLine into tGloss
   if "] intl ab del " is in pLine then
      delete char 1 to 12 of tGloss
      return "<subst><del>"&tGloss&"</del><add>"&tLemma&"</add></subst>"
   else if "] before del inserted " is in pLine then
      delete char 1 to 20 of tGloss
      return "<del><add>"&tGloss&"</add></del>"
   else if "] after del inserted " is in pLine then
      delete char 1 to 19 of tGloss
      return "<del><add>"&tGloss&"</add></del>"
   else if "] before del " is in pLine then
      delete char 1 to 11 of tGloss
      if "[" is not in tGloss and "•" is not in tGloss and "below del" is not in tGloss then 
         return "<del>"&tGloss&"</del>"
      else if "[" is not in tGloss and "•" is not in tGloss and "below del" is in tGloss then
         put offsets(" below del ",tGloss) into tBelDels
         put 0 into tCount
         put empty into tTempAlt
         put item-1 of tBelDels into tTopBelDel
         put tTopBelDel+11 into tN1
         put the number of words of char 1 to tN1-2 of tGloss into tW1
         repeat with r = tW1+1 to the number of words of tGloss
            if word r of tGloss is among the words of  " before below " then 
               put r-1 into r
               exit repeat
            end if
         end repeat
         put r into tW2
         put word tW1+1 to tW2 of tGloss into tDelAbove
         repeat with s = tW1-2 down to 1
            if word s of tGloss is among the words of  " del ins " then 
               put s+1 into s
               exit repeat
            end if
         end repeat
         put s into tW3
         put word tW3 to tW1-2 of tGloss into tBelowDel
         put "<del><subst><del>"&tBelowDel&"</del><add>"&tDelAbove&"</add></subst></del>" into tTempAlt1
         put 1 into tCount
         repeat with q = (the number of items of tBelDels)-1 down to 1
            add 1 to tCount
            put item q of tBelDels into tN2
            put the number of words of char 1 to tN2+5 of tGloss into tW2
            repeat with s = tW2-1 down to 1
               if word s of tGloss is among the words of  " del ins " then 
                  put s+1 into s
                  exit repeat
               end if
            end repeat
            put s into tW3
            put word tW3 to tW2-1 of tGloss into tBelowDel
            put "<subst><del>"&tBelowDel&"</del><add>" after char 5 of tTempAlt1
            put "</add></subst>" before char -6 of tTempALt1
         end repeat
         return tTempAlt1
      else
         if "] before del •" is in pLine then
            if "[intl ab del " is not in pLine then
               put offset("•",pLine) into ot
               put offset("[",pLine) into ut
               put char ot+1 to ut-2 of pLine into tGloss1
               if char -1 of tGloss1 is space then delete char -1 of tGloss1
               return "<del>"&tGloss1&"!!"
            else
               put offset("•",tGloss) into ot
               put offset("[",tGloss) into ut
               if char ut+1 to ut+7 of tGloss is "intl ab" then
                  put char 1 to ut-2 of tGloss into tGloss1
                  put offset("[intl ab del ",tGloss) into sta
                  put (offset("]",tGloss,sta+1))+sta+1 into sto
                  put char sta+13 to sto-1 of tGloss into tLemma1
                  replace "•" with empty in tGloss1
                  if char -1 of tGloss1 is space then delete char -1 of tGloss1
                  return "<del><subst><del>"&tLemma1&"</del><add>"&tGloss1&"</add></subst></del>"
               else
                  put char 1 to ut-1 of tGloss into tGloss1
                  replace "•" with empty in tGloss1
                  if char -1 of tGloss1 is space then delete char -1 of tGloss1
                  if char ut+1 to ut+8 of tGloss is not "inserted" then return "<del>"&tGloss1&"!!" else return  "<del><add>"&tGloss1&"!!"
               end if
            end if
         else if  "•" is in tGloss then
            put offset("•",tGloss) into ot
            put offset("[",tGloss) into ut
            if ot < ut then put char 1 to ot-1 of tGloss into tGloss1
            else if ut < ot then put char 1 to ut-1 of tGloss into tGloss1
            replace "•" with empty in tGloss1
            if char -1 of tGloss1 is space then delete char -1 of tGloss1
            return "<del>"&tGloss1&"!!"
         end if
      end if
   else if "] after del " is in pLine and "after del [" is not in pLine then
      delete char 1 to 10 of tGloss
      return "<del>"&tGloss&"</del>"
   else if "] after del [" is in pLine then
      delete char 1 to 10 of tGloss
      return "<del>"&tGloss&"</del>"
   else if "] inserted" is in pLine and word -1 of pLine is "inserted" then
      return "<add>"&tLemma&"</add>"
   else if "] inserted and " is in pLine then
      put offset("inserted and",pLine2) into tSta
      if the textStyle of char tSta to tSta+11 of line pLineNumber of fld id 1017 of cd 1 is in "mixed italic" then
         put offset("inserted and",pLine) into tSta
         put char tSta+13 to -1 of pLine into tNestedGloss
         if "before del" is in tNestedGloss then
            put offsets(" before del ",tNestedGloss) into tBg
            repeat with y = 1 to the number of items of tBg
               put char 1 to (item y of tBg)-1 of tNestedGloss into tSubLemma
               if y < (the number of items of tBg) then put (item y+1 of tBg)-1 into ut else put "-1" into ut
               put char (item y of tBg)+12 to ut of tNestedGloss into tSubGloss1
               put 0 into tDif
               if y < (the number of items of tBg) and " and " is in tSubGloss1 then 
                  put offset(" and ",tSubGloss1) into yt
                  put length(tSubGloss1)-yt into tDif
                  delete char yt to -1 of tSubGloss1
               end if
               delete char 1 to (ut-tDif+4) of tNestedGloss
               if y < (the number of items of tBg) then
                  repeat with x = y+1 to the number of items in tBg
                     put (item x of tBg)-(ut-tDif+4) into item x of tBg
                  end repeat
               end if
               put offset(tSubLemma,tLemma) into ot
               put tLemma into tLemma2
               put "<del>"&tSubGloss1&"</del>" after char ot+length(tSubLemma) of tLemma
               put "<del>"&tSubGloss1&"</del>" after char ot+length(tSubLemma)-1 of tLemma2
            end repeat
            put "<add>"&tLemma&"</add>" into tLemma
            put "<add>"&tLemma2&"</add>" into tLemma2
            put cr&tLemma2 after tLemma
            replace "/del>" with "/del> " in tLemma
            replace "/del>  " with "/del> " in tLemma
            return tLemma
         else
            return "<add>"&tLemma&"</add>"
         end if
      end if
   end if
   return pLine
end retaggingLine

function spaceMetadataTags pmeta
   local tSpaceUnit0,tSpaceUnit,tAddSpace,tListOfSpacedAngles,tAngSp,tSp,tAng
   if "/>" is in pmeta then exit spaceMetadataTags
   put "" into tSpaceUnit0
   put space&space&space&space into tSpaceUnit
   repeat with i = 1 to 10
      put empty into tAddSpace
      repeat i
         put tSpaceUnit after tAddSpace
      end repeat
      do "put tAddSpace into tSpaceUnit"&i
   end repeat
   put createAngleOrder(pmeta) into tListOfSpacedAngles
   repeat with j = (the number of items of tListOfSpacedAngles) down to 1
      put item j of tListOfSpacedAngles into tAngSp
      set the itemDel to ":"
      put item 1 of tAngSp into tAng
      put (item 2 of tAngSp)+1 into tSp
      set the itemDel to comma
      do "put cr & tSpaceUnit"&tSp&&"before char tAng of pmeta"
   end repeat
   delete char 1 of pmeta
   return pmeta
end spaceMetadataTags

function createAngleOrder @pmeta
   local tLeftAndRightAngles,tLeftAs,tRightAs,pNests,tSpaceList,tCount,tLA,tRA
   put gatherAngleLocs(pmeta) into tLeftAndRightAngles
   put line 1 of tLeftAndRightAngles into tLeftAs
   put line 2 of tLeftAndRightAngles into tRightAs
   if char -1 of tLeftAs is not comma then put comma after tLeftAs
   put tLeftAs & tRightAs into pNests
   sort items of pNests ascending numeric
   put empty into tSpaceList
   put 0 into tCount
   repeat with i = 1 to the number of items of pNests
      set the wholeMatches to true
      put itemOffset(item i of pNests,tLeftAs) into tLA
      set the wholeMatches to true
      put itemOffset(item i of pNests,tRightAs) into tRA
      if tLA <> 0 then 
         put ":"&tCount after item i of pNests
         add 1 to tCount
      else if tRA <> 0 then
         put ":"&tCount-1 after item i of pNests
         put tCount-1 into tCount
      end if
   end repeat
   return pNests
end createAngleOrder

function gatherAngleLocs @pmeta
   local tOpenTag,tRightTag,tAllAs,tRightAs
   put "<" into tOpenTag
   put "</" into tRightTag
   put offsets(tOpenTag,pmeta) into tAllAs
   put offsets(tRightTag,pmeta) into tRightAs
   repeat with x = the number of items of tAllAs down to 1
      if item x of tAllAs is among the items of tRightAs then delete item x of tAllAs
   end repeat
   return tAllAs&cr&tRightAs
end gatherAngleLocs

function replaceGapTag pString
   local tAltText,tBefLem,tAftLem,tAgent,tReason,tDue,tCaused,tLemma,tGloss,tPreGap,tReasonValue,tLastWord,tAgentValue,tFirstWord,tRepString,ots,tCharS,tBL,tWZ,tWZZ,tWZZZ
   put fld id 1004 of cd 1 into tAltText
   put empty into tBefLem
   put empty into tAftLem
   put empty into tAgent
   put empty into tReason
   put empty into tDue
   put empty into tCaused
   put char 1 to offset("]",pString)-1 of pString into tLemma
   put char offset("]",pString)+2 to -1 of pString into tGloss
   if "before gap" is in tGloss then
      get wordOffset("before",tGloss)
      put it into tFirstWord
      put "before gap" into tPreGap
      put word it-2 to it-1 of tGloss into tBefLem
   else if "after gap" is in tGloss then
      get wordOffset("after",tGloss)
      put it into tFirstWord
      put "after gap" into tPreGap
      put word it-2 to it-1 of tGloss into tAftLem
   end if
   if "due to" is in tGloss then
      get wordOffset("due",tGloss)
      put word it+2 of tGloss into tReasonValue
      put it + 2 into tLastWord
      put "due to "&tReasonValue into tDue
      put "reason="&quote&tReasonValue&quote into tReason
      if "caused by" is not in tGloss then put ">" after tReason
   end if
   if "caused by" is in tGloss then
      get wordOffset("caused",tGloss)
      put it + 2 into tLastWord
      put word it+2 of tGloss into tAgentValue
      put "caused by "&tAgentValue into tCaused
      put "agent="&quote&tAgentValue&quote&">" into tAgent
   end if
   put word tFirstWord to tLastWord of tGloss into tRepString
   replace tPreGap with "<gap" in tRepString
   replace tDue with tReason in tRepString
   replace tCaused with tAgent in tRepString
   put offsets(quote&">",tRepString) into ots
   put "</gap>" after char (item -1 of ots)+1 of tRepString
   if tBefLem is not empty then
      put offset(tBefLem,tLemma) into tCharS
      put length(tBefLem) into tBL
      put the number of words of char 1 to tChars+tBL-1 of tLemma into tWZ
      put word tWZ+1 of tLemma into tWZZ
      put tBefLem&space&tRepString&space&tWZZ into tWZZZ
      if tWZZZ is not in tAltText then put tBefLem&space&tRepString&tWZZ into tWZZZ
      if tWZZZ is not in tAltText then put tBefLem&tRepString&space&tWZZ into tWZZZ
      replace tBefLem&space&tWZZ with tWZZZ in tLemma
   else if tAftLem is not empty then 
      put space&tAftLem after char offset("</gap>",tRepString)+5 of tRepString
      if tRepString is not in tAltText then put tAftLem after char offset("</gap>",tRepString)+5 of tRepString
      replace tAftLem with tRepString in tLemma
   end if
   put empty into word tFirstWord-2 to tLastWord of tGloss
   replace "and and" with "and" in tGloss
   replace "and  and" with "and" in tGloss
   if word -2 to -1 of tGloss is "inserted and" or word -2 to -1 of tGloss is "deleted and" then delete word -1 of tGloss
   return tLemma&"] "&tGloss
end replaceGapTag


##TOOLTIP:
##Click any line to select its counterpart in the run-on or indented transcription.



#####################
#####################

## Script of button "Import Text for TEI Tagging”, ID 1101 of CARD 1 of STACK STEP Transcription Module

on mouseUp pClickNum,pPath,tfileType,theFile,tfilePath
   local tFileOption,ut
   if the hilite of btn "Example" of cd 1 is true then
      answer "You are in “Example” mode. Click the Example button to turn it off." as sheet
      exit mouseUp
   end if
   if fld id 1004 of cd 1 of stack "STEP Transcription Module" <> empty then
      answer "Importing a file will replace the current content of all transcription fields. If you do not want to lose them, you should first archive all contents by clicking the “Archive...” button. Then click the “Clear All...” button to empty all fields. At that point you'll be ready for importing a new text." with "Proceed anyway" or "Cancel" as sheet
      if it is "Cancel" then exit mouseUp
      else send "mouseUp "&"1,Skip" to btn "Clear All…" of cd 1 of stack "STEP Transcription Module"
   end if
   lock screen
   if pPath is empty or pPath is "pPath" or pPath is in "123" then
      fileImport
      put the dialogData into tFileOption
   else
      put offsets(".",pPath) into ut
      if ut = 0 then exit to top
      put char (item -1 of ut)+1 to -1 of pPath into tFileOption
   end if
   if tFileOption is empty or tFileOption is not among the items of "rtf,txt,step,stp,html,xml,doc,docx,odt" then exit mouseUp
   if tFileOption is "rtf" then 
      put "rtf" into tfileType
      if "/" is not in pPath then 
         answer file "Locate the RTF file containing the text to be imported." with type "Text|rtf,rtfd" titled "Locate the RTF file"
      end if
   else if tFileOption is "txt" then
      put "txt" into tfileType
      if "/" is not in pPath then
         answer file "Locate the file containing the plain text to be imported." with type "Text|txt" titled "Locate the plain text file"
      end if
   else if tFileOption is "step" then
      put "step" into tfileType
      if "/" is not in pPath then
         answer file "Locate the STEP file containing the plain text to be imported." with type "Text|step,stp" titled "Locate the STEP text file"
      end if
   else if tFileOption is "html" then
      put "html" into tfileType
      if "/" is not in pPath then
         answer file "Locate the HTML file containing the text to be imported." with type "HTML|html,htm" titled "Locate the HTML file"
      end if
   else if tFileOption is "xml" then
      put "xml" into tfileType
      if "/" is not in pPath then
         answer file "Locate the XML file containing the text to be imported." with type "XML|xml" titled "Locate the XML file"
      end if
   else if tFileOption is "docx" or tFileOption is "doc" or tFileOption is "odt" then
      if the platform is "Linux" then 
         answer "Sorry: in the Linux environment, please only import texts in RTF or HTML, not in Microsoft Word or OpenOffice."
         exit mouseUp
      end if
      if tFileOption is among the items of "doc,docx" and "/" is not in pPath then answer file "Locate the Microsoft Word file containing the text to be imported." with type "Text|doc,docx" titled "Locate the MS Word file"
      else if tFileOption is "odt" and "/" is not in pPath then 
         answer file "Locate the OpenOffice file containing the text to be imported." with type "Text|odt" titled "Locate the OpenOffice file"
         if the result is "Cancel" or it is empty then 
            exit to top
         end if
      end if
      if "/" is in pPath then put pPath into theFile else put it into theFile
      if wordlibSupports(theFile) then 
         get htmltextOfDocument(theFile)
         if item 1 of it is "error" then
            if item 2 of it is "cantOpenDoc" then 
               answer "Sorry, this file appears to be damaged or invalid."
            else
               answer item 3 to -1 of it
            end if
            exit to top
         else 
            if the platform is "Win32" then set the hideConsoleWindows to true
            set the fixedLineHeight of field id 1004 of cd 1 of this stack to false
            set the htmlText of field id 1004 of cd 1 of this stack to it
            set the fixedLineHeight of field id 1004 of cd 1 of this stack to true
            TEITagField
         end if
      else
         answer "Sorry, this file is not of a type that can be imported."
         exit to top
      end if
      if fld id 1004 of cd 1 of this stack is empty then
         answer "The file is empty. Importation is aborted."
         exit mouseUp
      end if
      if line 1 to 5 of fld id 1004 of cd 1 of this stack contains "syntax error: unexpected end of file" then
         set the HTMLText of fld id 1004 of cd 1 of this stack to empty
         answer "The file could not be imported because of an unexpected end of line error. Importation is aborted."
         exit mouseUp
      end if
      recordFilePath theFile
      exit mouseUp
   end if
   if (the result is "Cancel") or (it is empty) then exit to top
   put it into tfilePath
   open file tfilePath
   read from file tfilePath until EOF
   if it is empty then 
      close file tfilePath
      answer "The file is empty. Importation is aborted."
      exit mouseUp
   end if
   recordFilePath tfilePath
   close file tfilePath
   put uniDecode(uniEncode(it, "UTF8")) into it
   set the text of fld id 1004 of cd 1 of this stack to empty
   if tfileType is "rtf" then 
      replace "\qc" with "\ql" in it
      replace "\qr" with "\ql" in it
      replace "\li-1800 " with empty in it
      replace "_" with space&space in it
      if the platform is "MacOS" then
         correctANSICocoaToANSI it
         correctRTForHTML it
      end if
      if "\uc0\u8232" is in it then replace "\uc0\u8232" with "\line" in it
      if "\u8232" is in it then replace "\u8232" with "\line" in it
      if "\line" is in it then
         replace "\line" with "ZZQZZ" in it
      end if
      set the RTFText of field id 1004 of cd 1 of this stack to it
   else if tfileType is "html" then 
      if "&gt" is in it or "&lt" is in it then simplifyHTML it
      replace "_" with space&space in it
      correctRTForHTML it
      if "<br>" is in it or "<br /" is in it then
         set the cBrHTMLText of field id 1004 of cd 1 of this stack to it
         replace "<br>" with "ZOU2" in it
         replace "<br />" with "ZOU2" in it
      end if
      set the HTMLText of field id 1004 of cd 1 of this stack to it
      replace "ZOU2" with "<lb/>" in fld id 1004 of cd 1 of this stack
      exit mouseUp
   else set the text of fld id 1004 of cd 1 of this stack to it
   if not the visible of fld id 1004 of cd 1 then
      send "menuPick Transcription" to btn id 1025 of cd 1
      select line 1 of btn id 1025 of cd 1
   end if
   TEITagField
   unlock screen
end mouseUp

function escapeText pText
   replace space with "\ " in pText
   return pText
end escapeText

on correctRTForHTML @pText
   local tTableRTFandHTMLandMacRoman,tBadRTF,tBadHTML
   put the uTableMacRTFToHTMLtoMacRomanDecimalToANSIRTF of this stack into tTableRTFandHTMLandMacRoman
   repeat with k = 128 to 381
      if k > 244 and k < 352 then next repeat
      if k > 354 and k < 381 then next repeat
      if "\u"&k is in pText then
         put "\u"&k into tBadRTF
         if "\uc0"&tBadRTF&" "&cr is in pText then put "\uc0"&tBadRTF&" "&cr into tBadRTF
         if "cocoa" is not in pText then replace tBadRTF with getGoodRTFMac(k,tTableRTFandHTMLandMacRoman) in pText else  replace tBadRTF with getGoodRTFANSI(k,tTableRTFandHTMLandMacRoman) in pText 
      else if "&#"&k&";" is in pText then 
         put "&#"&k&";" into tBadHTML
         replace tBadHTML with getGoodHTML(k,tTableRTFandHTMLandMacRoman) in pText
      end if
   end repeat
end correctRTForHTML

on correctANSICocoaToANSI @pText
   local tTableChars,zt,tAlt
   If "ansi" is in pText and "cocoa" is in pText then
      put the uTableMacRTFToHTMLtoMacRomanDecimalToANSIRTF of this stack into tTableChars
      set the itemDel to "|"
      repeat for each line tLine in tTableChars
         get item 5 of tLine
         if it is among the items of "\'91|\'92|\'93|\'94|\'96|\'97" then next repeat
         if it is not empty and it is in pText then 
            put lineOffsets(it,tTableChars) into zt
            replace comma with "|" in zt
            if the number of items of zt = 2 then
               if it is in item 5 of line (item 1 of zt) of tTableChars then put item 5 of line (item 2 of zt) of tTableChars into tAlt
               else if it is in item 5 of line (item 2 of zt) of tTableChars then 
                  put item 5 of line (item 1 of zt) of tTableChars into tAlt
               end if
               replace it with tAlt in pText
            end if
         end if
      end repeat
      replace "\'d0" with "\'96" in pText
      replace "\'d1" with "\'97" in pText
      replace "\'a6" with "\'b6" in pText
      replace "\'9a" with "\'f6" in pText
      replace "\'f8" with "\'af" in pText
      replace "\'8a" with "\'e4" in pText
      replace " \'91" with "|www|" in pText
      replace "\'91" with "\'eb" in pText
      replace "\'be" with "\'e6" in pText
      replace "|www|" with "\'91" in pText
      replace "\'D9" with "\'9F" in pText
      replace "_" with space in pText
   end if
end correctANSICocoaToANSI

function getGoodRTFMac pString,@pTable
   local ut,tNewRTF
   put lineOffsets(pString,pTable) into ut
   replace comma with "|" in ut
   set the itemDelimiter to "|"
   repeat with x = 1 to the number of items of ut
      if pString is item 4 of line (item x of ut) of pTable then 
         put item 2 of line (item x of ut) of pTable into tNewRTF
         exit repeat
      end if
   end repeat
   set the itemDelimiter to comma
   return tNewRTF
end getGoodRTFMac

function getGoodRTFANSI pString,@pTable
   local ut,tNewRTF
   put lineOffsets(pString,pTable) into ut
   replace comma with "|" in ut
   set the itemDelimiter to "|"
   repeat with x = 1 to the number of items of ut
      if pString is item 4 of line (item x of ut) of pTable then 
         put item 5 of line (item x of ut) of pTable into tNewRTF
         exit repeat
      end if
   end repeat
   set the itemDelimiter to comma
   return tNewRTF
end getGoodRTFANSI

on RTFMacToANSI @pText
   local tTableChars,tNewRTF
   put the uTableMacRTFToHTMLtoMacRomanDecimalToANSIRTF of this stack into tTableChars
   set the itemDel to "|"
   repeat for each line tLine in tTableChars
      get item 2 of tLine
      if it is empty then next repeat
      put item 5 of tLine into tNewRTF
      if tNewRTF is empty then next repeat
      replace it with tNewRTF in pText
   end repeat
end RTFMacToANSI

on ANSIToMacRTF @pText
   local tTableChars,tNewRTF
   put the uTableMacRTFTOHTMLTOMacRomanDecimalTOANSIRTF of this stack into tTableChars
   set the itemDel to "|"
   repeat for each line tLine in tTableChars
      get item 5 of tLine
      if it is empty then next repeat
      put item 2 of tLine into tNewRTF
      if tNewRTF is empty then next repeat
      replace it with tNewRTF in pText
   end repeat
end ANSIToMacRTF

function findItemInLine twhatToFind,tContainer,tItemNumber,tLinesToSkip,tExactly
   if tExactly is true then set the wholeMatches to true else set the wholeMatches to false
   get lineOffsets(twhatToFind,tContainer)
   repeat for each item tItem in it
      if twhatToFind is in item tItemNumber of line tItem of tContainer then return tItem
   end repeat
   return empty
end findItemInLine

function getGoodHTML pString,@pTable
   local ut,tNewHTML
   put lineOffset(pString,pTable) into ut
   set the itemDelimiter to "|"
   put item 3 of line ut of pTable into tNewHTML
   set the itemDelimiter to comma
   return tNewHTML
end getGoodHTML

on improveSomeRTF @pText
   local tBad,tGood
   put "\'D9" into tBad
   put "\'9F" into tGood
   replace tBad with tGood in pText
end improveSomeRTF

on simplifyHTML @pText
   replace "&lt;" with "<" in pText
   replace "&gt;" with ">" in pText
   replace "<p><p>" with "<p>" in pText
   replace "</p></p>" with "</p>" in pText
   replace "<p><p " with "<p><" in pText
   replace "&amp;" with "&" in pText
end simplifyHTML

on recordFilePath pFP
   local tFPL
   put the cFilePathList of btn id 1101 of cd 1 of stack "STEP Transcription Module" into tFPL
   if tFPL is empty then put pFP into tFPL else put cr & pFP after tFPL
   put stripDuplicates(tFPL) into tFPL
   set the cFilePathList of btn id 1101 of cd 1 of stack "STEP Transcription Module" to tFPL
   fillOpenRecentFiles
end recordFilePath pFP
   

##TOOLTIP:
##Import either a STEP text file or a text (plain, RTF, HTML, XML, Word,
##OpenOffice) in need of alteration and/or descriptive tagging.



#####################
#####################

## Script of button "Export to STEP" of card "card id 1002" of stack "/Users/adetienn/Documents/STEP Externals/STEP-LI 7.1.4/STEP Transcription Module.livecode" ID 1102 of CARD 1 of STACK STEP Transcription Module

function gatheringContents
   local tText
   send "mouseUp" to btn id 1073 of cd 1
   put fld id 1004 of cd 1 into tText
   send "insertAnchor tText,"&"no" to btn id 1025 of cd 1
   return the text of fld id 1163 of cd 1
end gatheringContents

on exportData tContents,pFileType
   local tF
   if pFileType is "step" then
      ask file "Type the name of the file that will contain the current transcription of the text with alterations." with type "TEXT|txt,step,stp" titled "Type the name of the text file"
      if (it is empty) or (the result is "Cancel") then exit to top
      put ".step" after it
      put "<filetype module="&quote&"Transcriptor"&quote&"/>" before tContents
   else
      put "TEXT|"&pFileType into tF
      ask file "Type the name of the file that will contain the current transcription of the text with alterations." with type tF titled "Type the name of the text file"
      if (it is empty) or (the result is "Cancel") then exit to top
      if pFileType is "txt" and not(it ends with ".txt") then put ".txt" after it
      else if pFileType is "rtf" and not(it ends with ".rtf") then put ".rtf" after it
      else if pFileType is "html" and not(it ends with ".html") then put ".html" after it
      else if pFileType is "xhtml" and not(it ends with ".html") then put ".html" after it
      else if pFileType is "xml" and not(it ends with ".html") then put ".xml" after it
      if it ends with ".rtf" then
         put the RTFText of fld id 1163 of cd 1 into tContents
      else if it ends with ".html" and pFileType <> "xhtml" then
         put the HTMLText of fld id 1163 of cd 1 into tContents
      else if it ends with ".html" and pFileType is "xhtml" then
         put ConvertStyledTextToXHTML(the styledText of fld id 1163 of cd 1) into tContents
      else if it ends with ".xml" and pFileType is "xml" then
         put convertTextToXML(the text of fld id 1163 of cd 1) into tContents
      end if
   end if
   open file it for write
   write tContents to file it
   close file it
   unlock screen
   if pFileType is "step" then answer "The current transcription of the text with tagged alterations was exported successfully to file “" & it & ".” That file can now be uploaded to the STEP platform."
   else answer "The current transcription of the text with tagged alterations was exported successfully to file “" & it & ".”"
end exportData

on mouseUp
   local tFileType,tContents
   fileExport "Click the button below if you want to export the current transcription of the text with tagged alterations to a file importable into the STEP platform."
   put the dialogData into tFileType
   if tFileType is empty then exit mouseUp
   set the cursor to watch
   lock screen
   put gatheringContents() into tContents
   if tContents is not empty then 
      exportData tContents,tFileType
      unlock screen
   else
      answer "The field containing the current transcription of the text with alterations is empty; there is nothing to export."
   end if
end mouseUp

function convertTextToXML pText
   put "<?xml version="&quote&"1.0"&quote&"?>" before pText
   replace ">"&"Transcriptor"&"<" with "><" in pText
   return pText
end convertTextToXML


##TOOLTIP:
##Export the fully tagged and anchored transcription (in
##wrapped, unindented form) to a file importable into STEP
##or to some other type of file (txt, rtf, html, xhtml, xml).



#####################
#####################

## Script of button "Export TEI Description to STEP”, ID 1103 of CARD 1 of STACK STEP Transcription Module

function gatheringContents pFldID
   send "mouseUp" to btn id 1073 of cd 1
   return the text of fld id pFldID of cd 1
end gatheringContents

on exportData tContents,pFileType,pFldID
   local tF
   if pFileType is "step" then
      ask file "Type the name of file that will contain the TEI description of the base text." with type "TEXT|txt,step,stp" titled "Type the name of the text file"
      if (it is empty) or (the result is "Cancel") then exit to top
      put ".step" after it
   else
      put "TEXT|"&pFileType into tF
      ask file "Type the name of file that will contain the TEI description of the base text." with type tF titled "Type the name of the text file"
      if (it is empty) or (the result is "Cancel") then exit to top
      if pFileType is "txt" and not(it ends with ".txt") then put ".txt" after it
      else if pFileType is "rtf" and not(it ends with ".rtf") then put ".rtf" after it
      else if pFileType is "html" and not(it ends with ".html") then put ".html" after it
      else if pFileType is "xhtml" and not(it ends with ".html") then put ".html" after it
      if it ends with ".rtf" then
         put the RTFText of fld id pFldID of cd 1 into tContents
      else if it ends with ".html" and pFileType <> "xhtml" then
         put the HTMLText of fld id pFldID of cd 1 into tContents
      else if it ends with ".html" and pFileType is "xhtml" then
         put ConvertStyledTextToXHTML(the styledText of fld id pFldID of cd 1) into tContents
      end if
   end if
   open file it for write
   write tContents to file it
   close file it
   unlock screen
   if pFileType is "step" then answer "The current transcription of the tagged descriptive text was exported successfully to file “" & it & ".” That file can now be imported into the STEP platform."
   else answer "The current transcription of the tagged descriptive text was exported successfully to file “" & it & ".”"
end exportData

on mouseUp
   local tFldID,tFileType,tContents
   answer "Export the tagged base description text, or the tagged rendition description text?" with "Cancel" or "Rendition Text" or "Base Text"
   if it is "Cancel" then exit to top
   if it is "Rendition Text" then put "1151" into tFldID else put "1041" into tFldID
   fileExport "Click the button below if you want to export the tagged description of the text to a file importable into the STEP platform."
   put the dialogData into tFileType
   if tFileType is empty then exit mouseUp
   set the cursor to watch
   lock screen
   put gatheringContents(tFldID) into tContents
   if tContents is not empty then 
      exportData tContents,tFileType,tFldID
      unlock screen
   else
      answer "The field you want to export is empty."
   end if
end mouseUp

##TOOLTIP:
##Export either the fully tagged “TEI Base Description” or the 
##tagged “TEI Rendition Description” to a file importable into STEP
##or to some other type of file (txt, rtf, html, xhtml, xml).



#####################
#####################

## Script of button "Special Characters" of card "card id 1002" of stack "/Users/adetienn/Documents/STEP Externals/STEP-LI 7.1.4/STEP Transcription Module.livecode" ID 1106 of CARD 1 of STACK STEP Transcription Module

on mouseEnter
   local tMenuList,tFullMenu,tHyphen
   put the cVisibleSpecialCharactersSubMenus of btn id 1106 of stack "STEP Transcription Module" into tMenuList
   put empty into tFullMenu
   put "-" into tHyphen
   repeat for each line tSubMenu in tMenuList
      do "put the "&tSubMenu& " of me & cr & tHyphen & cr after tFullMenu"
   end repeat
   put "Add or Manage Unicode Characters..." & cr & "Edit Unicode Characters Menu..." after tFullMenu
   replace cr&cr with cr in tFullMenu
   put tFullMenu into me
end mouseEnter

on menuPick pItemName
   local tCombkey,tIDNum,tHTMCode,tChunk,tSta,tTL,tCategory
   if pItemName is "Add or Manage Unicode Characters..." then
      modeless stack "Add Special Character"
      exit menuPick
   end if
   if pItemName is "Edit Unicode Characters Menu..." then
      modeless stack "Edit Unicode Characters Menu"
      exit menuPick
   end if
   if the optionKey is down or the commandKey is down then put "opt" into tCombkey
   else put empty into tCombKey
   put word 3 of the focusedObject into tIDNum
   if tIDNum is among the items of "1004,1041" then set the cFldToReturnTo of cd 1 of this stack to tIDNum
   if tIDNum is empty and the cFldToReturnTo of cd 1 of this stack is not empty then put the cFldToReturnTo of cd 1 of this stack into tIDNum
   if (tIDNum is not empty) and ((the cFldToReturnTo of cd 1 of this stack is empty) or (tIDNum is not among the items of "1004,1041"))  then 
      answer "First make sure the pointer is in the Transcription field or the TEI Base Description field." as sheet
      exit menuPick
   end if
   set the itemDel to "|"
   put item 1 of pItemName into tCategory
   if the number of segments of item -1 of pItemName = 1 then put item -1 of pItemName into pItemName
   else
      if item 3 of pItemName is not empty then put segment 1 to -2 of item 3 of pItemName into pItemName else put segment 1 to -2 of item 2 of pItemName into pItemName
   end if
   set the itemDel to comma
   put getHTMLUnicode(tCategory,pItemName,tCombkey) into tHTMCode
   lock screen
   put the cSelectedChunk of fld id tIDNum of cd 1 into tChunk
   if tChunk is empty then exit menuPick
   put word 2 of tChunk into tSta
   put length(tHTMCode) into tTL
   put tHTMCode before char tSta of fld id tIDNum of cd 1
   select before char (tSta+tTL) of fld id tIDNum of cd 1
   set the cSelectedChunk of fld id tIDNum to the selectedChunk
   unlock screen
end menuPick

function getHTMLUnicode pCategory,pEntity,pCombkey
   local tSpec,tLNum
   replace space with empty in pCategory
   put "c" before pCategory
   do "put the "&pCategory& " of btn id 1106 into tSpec"
   put lineOffset(pEntity,tSpec) into tLNum
   set the itemDel to "|"
   if pCombkey is "opt" and item 1 of line tLNum of tSpec is not "?" then return item 1 of line tLNum of tSpec else return item 3 of line tLNum of tSpec
   if pCombkey is empty then
      if char 3 to -2 of item 3 of tSpec is not a number then return item 3 of line tLNum of tSpec
      else 
         get char 3 to -2 of item 3 of tSpec
         if it < 256 and it <> 60 and it <> 62 then return item 1 of line tLNum of tSpec
         else return item 3 of line tLNum of tSpec
      end if
   end if
   set the itemDel to comma
end getHTMLUnicode

##TOOLTIP:
##Insert special characters (sometimes in Unicode or HTML code form if the character cannot be rendered).
##OPTION(Alt)- or COMMAND(Ctrl)-CLICK the menu selection to insert the Numeric Character Reference
##(or sometimes the Character Entity Reference)  in lieu of the character itself [ex.: ç or &#231; or &ccedil;].
##NB: The easiest way of typing foreign scripts is to switch the keyboard to their corresponding
##language. Use the “U.S. Extended Keyboard” to type such characters as Å, ?, ?, ?, ?, and so on.



#####################
#####################

## Script of scrollbar "ScrollbarBySyntactical”, ID 1093 of CARD 1 of STACK STEP Transcription Module

on resizeFieldText pSize,@pText,pIDNum,pHF
   local tTemp
   if pText is not empty then
      if pSize < 7 then put 8 into pSize
      put replaceText(pText,"size="&quote&"[\d]+","size="&quote&pSize) into pText
      put fld id 1014 of cd 1 into tTemp
      put pText into fld id 1014 of cd 1
      set the HTMLText of fld id pIDNum of cd 1 to fld id 1014 of cd 1
      put tTemp into fld id 1014 of cd 1
   end if
   set the textHeight of fld id pIDNum of cd 1 to pHF
end resizeFieldText

on scrollbarLineDec
   lock screen
   local tIDNum,tHF,tText,ut,tSize
   put whichField() into tIDNum
   put the textHeight of fld id tIDNum of cd 1 into tHF
   put the HTMLText of fld id tIDNum of cd 1 into tText
   put offset("size=",tText) into ut
   if ut is not 0 then
      put char ut+6 to ut+7 of tText into tSize
      if char 2 of tSize is quote then delete char 2 of tSize
      add 1 to tSize
      resizeFieldText tSize,tText,tIDNum,tHF
   else
      put (the textSize of fld id tIDNum of cd 1) + 1 into tSize
      resizeFieldText2 tSize,tIDNum,tHF
   end if
   unlock screen
end scrollbarLineDec

on scrollbarLineInc
   lock screen
   local tIDNum,tHF,tText,ut,tSize
   put whichField() into tIDNum
   put the textHeight of fld id tIDNum of cd 1 into tHF
   put the HTMLText of fld id tIDNum of cd 1 into tText
   put offset("size=",tText) into ut
   if ut is not 0 then
      put char ut+6 to ut+7 of tText into tSize
      if char 2 of tSize is quote then delete char 2 of tSize
      put (tSize - 1) into tSize
      resizeFieldText tSize,tText,tIDNum,tHF
   else
      put (the textSize of fld id tIDNum of cd 1) - 1 into tSize
      resizeFieldText2 tSize,tIDNum,tHF
   end if
   unlock screen
end scrollbarLineInc

on resizeFieldText2 pSize,pIDNum,pHF
   set the textSize of fld id pIDNum of cd 1 to pSize
   set the textHeight of fld id pIDNum of cd 1 to pHF
end resizeFieldText2

function whichField
   local tListF
   put "1017,1064,1109,1171" into tListF
   repeat with x = 1 to (the number of items of tListF)
      if the visible of fld id (item x of tListF) of cd 1 then return item x of tListF
   end repeat
end whichField

##TOOLTIP:
##Change the text size of the field below.



#####################
#####################

## Script of scrollbar "ScrollbarByPragmatic”, ID 1094 of CARD 1 of STACK STEP Transcription Module

on resizeFieldText pSize,@pText,pIDNum,pHF
   local tTemp
   if pText is not empty then
      if pSize < 7 then put 8 into pSize
      put replaceText(pText,"size="&quote&"[\d]+","size="&quote&pSize) into pText
      put fld id 1014 of cd 1 into tTemp
      put pText into fld id 1014 of cd 1
      set the HTMLText of fld id pIDNum of cd 1 to fld id 1014 of cd 1
      put tTemp into fld id 1014 of cd 1
   end if
   set the textHeight of fld id pIDNum of cd 1 to pHF
end resizeFieldText

on scrollbarLineDec
   lock screen
   local tIDNum,tHF,tText,ut,tSize
   put whichField() into tIDNum
   put the textHeight of fld id tIDNum of cd 1 into tHF
   put the HTMLText of fld id tIDNum of cd 1 into tText
   put offset("size=",tText) into ut
   if ut is not 0 then
      put char ut+6 to ut+7 of tText into tSize
      if char 2 of tSize is quote then delete char 2 of tSize
      add 1 to tSize
      resizeFieldText tSize,tText,tIDNum,tHF
   else
      put (the textSize of fld id tIDNum of cd 1) + 1 into tSize
      resizeFieldText2 tSize,tIDNum,tHF
   end if
   unlock screen
end scrollbarLineDec

on scrollbarLineInc
   lock screen
   local tIDNum,tHF,tText,ut,tSize
   put whichField() into tIDNum
   put the textHeight of fld id tIDNum of cd 1 into tHF
   put the HTMLText of fld id tIDNum of cd 1 into tText
   put offset("size=",tText) into ut
   if ut is not 0 then
      put char ut+6 to ut+7 of tText into tSize
      if char 2 of tSize is quote then delete char 2 of tSize
      put (tSize - 1) into tSize
      resizeFieldText tSize,tText,tIDNum,tHF
   else
      put (the textSize of fld id tIDNum of cd 1) - 1 into tSize
      resizeFieldText2 tSize,tIDNum,tHF
   end if
   unlock screen
end scrollbarLineInc

on resizeFieldText2 pSize,pIDNum,pHF
   set the textSize of fld id pIDNum of cd 1 to pSize
   set the textHeight of fld id pIDNum of cd 1 to pHF
end resizeFieldText2

function whichField
   local tListF
   put "1049,1067,1112,1174" into tListF
   repeat with x = 1 to (the number of items of tListF)
      if the visible of fld id (item x of tListF) of cd 1 then return item x of tListF
   end repeat
end whichField

##TOOLTIP:
##Change the text size of the field below.



#####################
#####################

## Script of button "Export Alteration Descriptions to STEP”, ID 1107 of CARD 1 of STACK STEP Transcription Module

on menuPick pItemName
   local pIDNum,tContents,tFileType
   switch pItemName
      case "Automatic Syntactical Description"
         put "1017" into pIDNum
         break
      case "XML  Syntactical Description"
         put "1109" into pIDNum
         break
      case "Edited Syntactical Description"
         put "1064" into pIDNum
         break
      case "XML Edited Syntactical Description"
         put "1171" into pIDNum
         break
      case "Automatic Pragmatic Description"
         put "1049" into pIDNum
         break
      case "XML Pragmatic Description"
         put "1112" into pIDNum
         break         
      case "Edited Pragmatic Description"
         put "1067" into pIDNum
         break
      case "XML Edited Pragmatic Description"
         put "1174" into pIDNum
         break
   end switch
   fileExport "Click the button below if you want to export the "&(toLower(pItemName))&" of alterations to a Text or RTF or HTML file importable into STEP."
   put the dialogData into tFileType
   if tFileType is empty then exit menuPick
   set the cursor to watch
   lock screen
   put gatheringContents(pIDNum) into tContents
   if tContents is not empty then 
      exportData tContents,pItemName,pIDNum,tFileType
      unlock screen
   else
      answer "The field “"&pItemName&"” is empty; there is nothing to export."
   end if
end menuPick

function gatheringContents pIDNum
   send "mouseUp" to btn id 1073 of cd 1
   return the text of fld id pIDNum of cd 1
end gatheringContents

on exportData tContents,pItemName,pIDNum,pFileType
   local tF
   if pFileType is "step" then
      ask file "Type the name of file that will contain the "&(toLower(pItemName))&" of alterations." with type "TEXT|txt,step,stp" titled "Type the name of the text file"
      if (it is empty) or (the result is "Cancel") then exit to top
      put ".step" after it
   else
      put "TEXT|"&pFileType into tF
      ask file "Type the name of file that will contain the "&(toLower(pItemName))&" of alterations." with type tF titled "Type the name of the text file"
      if (it is empty) or (the result is "Cancel") then exit to top
      if pFileType is "txt" and not(it ends with ".txt") then put ".txt" after it
      else if pFileType is "rtf" and not(it ends with ".rtf") then put ".rtf" after it
      else if pFileType is "html" and not(it ends with ".html") then put ".html" after it
      else if pFileType is "xhtml" and not(it ends with ".html") then put ".html" after it
      if it ends with ".rtf" then
         put the RTFText of fld id pIDNum of cd 1 into tContents
      else if it ends with ".html" and pFileType <> "xhtml" then
         if pIDNum is 1017 and "metadata=" is in tContents then send "mouseUp" to btn "Describe alterations" of cd 1
         put the HTMLText of fld id pIDNum of cd 1 into tContents
      else if it ends with ".html" and pFileType is "xhtml" then
         if pIDNum is 1017 and "metadata=" is in tContents then send "mouseUp" to btn "Describe alterations" of cd 1
         put ConvertStyledTextToXHTML(the styledText of fld id pIDNum of cd 1) into tContents
      end if
   end if
   open file it for write
   write tContents to file it
   close file it
   unlock screen
   if pFileType is "step" then answer "The current transcription of the text with alterations was exported successfully to file “" & it & ".” That file can now be imported into the STEP platform."
   else answer "The current transcription of the text with alterations was exported successfully to file “" & it & ".”"
end exportData


##TOOLTIP:
##Turn any of the eight alterations description fields into a file importable
##into STEP or into some other type of file (txt, rtf, html, xhtml, xml).



#####################
#####################

## Script of field "Pragmatic Edited Alts Descriptions”, ID 1067 of CARD 1 of STACK STEP Transcription Module

on selectionChanged
   local tLineNumber
   if the optionKey is down then
      put (the lineIndex of the selectedChunk) into tLineNumber
      colorBGLine tLineNumber,1067
      send "selectionChanged"&&(tLineNumber) to fld id 1049 of cd 1
   end if
end selectionChanged

##TOOLTIP:
##OPTION (ALT)-click any line to select its counterpart in the run-on or indented transcription.
##This field shows the XML because, should you delete entries, those that remain must retain
##their correct anchors.



#####################
#####################

## Script of button "Clear”, ID 1097 of CARD 1 of STACK STEP Transcription Module

on mouseUp
   put "1017,1064,1109,1171" into tFLDs
   repeat with i = 1 to 4
      if the visible of fld id (item i of tFLDs) then
         put empty into fld id (item i of tFLDs) of cd 1
         exit repeat
      end if
   end repeat
   if fld id 1017 of cd 1 is empty and fld id 1064 of cd 1 is empty then
      put empty into fld id 1109 of cd 1
      put empty into  fld id 1049 of cd 1
      put empty into  fld id 1067 of cd 1
      put empty into fld id 1112 of cd 1
      put empty into fld id 1171 of cd 1
      put empty into fld id 1174 of cd 1
   else if fld id 1017 of cd 1 is not empty and fld id 1064 of cd 1 is empty then
      put empty into fld id 1171 of cd 1
   end if
end mouseUp

##TOOLTIP:
##Empty the field below.



#####################
#####################

## Script of button "Text Description Tab”, ID 1040 of CARD 1 of STACK STEP Transcription Module

on menuPick pItemName
   local tFldIDs,tFldList,tText,tHTML,tFontCommandList
   put "1041,1044,1139,1151,1154,1157" into tFldIDs
   repeat with c = 1 to the number of items of tFldIDs
      set the cVScroll of fld id (item c of tFldIDs) of cd 1 to the vScroll of fld id (item c of tFldIDs) of cd 1
   end repeat
   lock screen
   if pItemName is "TEI Base Descr." then set the menuHistory of btn id 1040 of cd 1 to 1
   switch (the menuHistory of btn id 1040 of cd 1)
      case 1
         show fld id 1041 of cd 1
         set the cLastTabOfMe of btn id 1040 of cd 1 to 1
         hide fld id 1044 of cd 1
         hide fld id 1139 of cd 1
         hide fld id 1151 of cd 1
         hide fld id 1154 of cd 1
         hide fld id 1157 of cd 1
         set the cFldID of stack "Automatic Tagging" to 1041
         break
      case 2
         put fld id 1041 into tText
         set the cLastTabOfMe of btn id 1040 of cd 1 to 2
         indentNew 1041,1139
         hide fld id 1041 of cd 1
         hide fld id 1044 of cd 1
         show fld id 1139 of cd 1
         hide fld id 1151 of cd 1
         hide fld id 1154 of cd 1
         hide fld id 1157 of cd 1
         break
      case 3
         set the HTMLText of fld id 1044 of cd 1 to the HTMLText of fld id 1041 of cd 1
         set the textColor of char 1 to -1 of fld id 1044 of cd 1 to empty
         put the HTMLText of fld id 1044 of cd 1 into tHTML
         removeTags tHTML,1044
         put the HTMLText of fld id 1044 of cd 1 into tHTML
         setStyle tHTML,1044
         show fld id 1044 of cd 1
         hide fld id 1041 of cd 1
         hide fld id 1139 of cd 1
         hide fld id 1151 of cd 1
         hide fld id 1154 of cd 1
         hide fld id 1157 of cd 1
         set the cLastTabOfMe of btn id 1040 of cd 1 to 3
         break
      case 4
         hide fld id 1041 of cd 1
         hide fld id 1044 of cd 1
         hide fld id 1139 of cd 1
         show fld id 1151 of cd 1
         hide fld id 1154 of cd 1
         hide fld id 1157 of cd 1
         set the cFldID of stack "Automatic Tagging" to 1151
         set the cLastTabOfMe of btn id 1040 of cd 1 to 4
         break
      case 5
         put fld id 1151 into tText
         indentNew 1151,1154
         hide fld id 1041 of cd 1
         hide fld id 1044 of cd 1
         hide fld id 1139 of cd 1
         hide fld id 1151 of cd 1
         show fld id 1154 of cd 1
         hide fld id 1157 of cd 1
         set the cLastTabOfMe of btn id 1040 of cd 1 to 5
         break
      case 6
         set the HTMLText of fld id 1157 of cd 1 to the HTMLText of fld id 1151 of cd 1
         set the textColor of char 1 to -1 of fld id 1157 of cd 1 to empty
         put the HTMLText of fld id 1157 of cd 1 into tHTML
         removeTags tHTML,1157
         put the HTMLText of fld id 1157 of cd 1 into tHTML
         setStyle tHTML,1157
         hide  fld id 1044 of cd 1
         hide fld id 1041 of cd 1
         hide fld id 1139 of cd 1
         hide fld id 1151 of cd 1
         hide fld id 1154 of cd 1
         show fld id 1157 of cd 1
         set the cLastTabOfMe of btn id 1040 of cd 1 to 6
         break
      case 7
         put "1041,1139,1044,1151,1154,1157" into tFldList
         repeat for each item tFldID in tFldList
            hide fld id tFldID of cd 1
         end repeat
         show btn id 1025 of cd 1
         put "1004,1026,1029,1126,1163" into tFldList
         repeat for each item tFldID in tFldList
            set the visible of fld id tFldID of cd 1 to the cVisibleStatus of fld id tFldID of cd 1
         end repeat
         hide graphic id 1160 of cd 1
         hide graphic id 1919 of cd 1
         show graphic id 1920 of cd 1
         hide btn id 1040 of cd 1
         hideDescriptiveTools
         set the menuHistory of btn id 1025 of cd 1 to the cLastTabOfMe of btn id 1025 of cd 1
         put "3,4,6,7,9,10" into tFontCommandList
         repeat for each item tItem in tFontCommandList
            if char 1 of line tItem of btn "Font" of group "STEP Menu 1" of cd 1 is "(" then delete char 1 of  line  tItem of btn "Font" of group "STEP Menu 1" of cd 1
         end repeat
         exit menuPick
         break
   end switch
   repeat with c = 1 to the number of items of tFldIDs
      set the vScroll of fld id (item c of tFldIDs) of cd 1 to the cVScroll of fld id (item c of tFldIDs) of cd 1
   end repeat
   setFieldVisibleStatus
   set the lockscreen to false
end menuPick

on scrollbarDrag pFldID
   lock screen
   local tLNs
   if the textHeight of fld id pFldID of cd 1 is empty then set the textHeight of fld id pFldID of cd 1 to 24
   repeat with i = 1 to round((the formattedHeight of fld id pFldID of cd 1)/(the textHeight of fld id pFldID of cd 1) + 100)
      put i & cr after tLNs
   end repeat
   put tLNs into fld id 1389 of cd 1
   set the vScroll of fld id 1389 of cd 1 to the vScroll of fld id pFldID of cd 1
end scrollbarDrag

on setFieldVisibleStatus
   local tFldList
   put "1004,1026,1029,1126,1163,1041,1139,1044,1151,1154,1157" into tFldList
   repeat for each item tFld in tFldLIst
      set the cVisibleStatus of fld id tFld to the visible of fld id tFld
      if the visible of fld id tFld then scrollbarDrag tFld
   end repeat
end setFieldVisibleStatus

on removeTags pHTML,pFldID
   replace "&lt;strike&gt;" with "&zz;strike&zz;" in pHTML
   replace "&lt;/strike&gt;" with "&zz;/strike&zz;" in pHTML
   replace "&lt;emph " with "&yy;emph " in pHTML
   replace "&lt;/emph&gt;" with "&zz;/emph&zz;" in pHTML
   replace "&lt;/hi&gt;" with "&zz;/hi&zz;" in pHTML
   replace "italic"&quote&"gt;" with "italic"&quote&"gw;" in pHTML
   replace "bold"&quote&"gt;" with "bold"&quote&"gw;" in pHTML
   replace "underline"&quote&"gt;" with "underline"&quote&"gw;" in pHTML
   put replaceText(pHTML,"&lt;[/\w\d]+&gt;",empty) into pHTML
   replace ">&lt;p " with space in pHTML
   replace quote&"&gt;" with quote&">" in pHTML
   replace "&yy;emph " with "&lt;emph " in pHTML
   replace "&zz;/emph&zz;" with "&lt;/emph&gt;" in pHTML
   replace "&zz;/hi&zz;" with "&lt;/hi&gt;" in pHTML
   replace "italic"&quote&"gw;" with "italic"&quote&"gt;" in pHTML
   replace "bold"&quote&"gw;" with "bold"&quote&"gt;" in pHTML
   replace "underline"&quote&"gw;" with "underline"&quote&"gt;" in pHTML
   replace "&zz;strike&zz;" with "&lt;strike&gt;" in pHTML
   replace "&zz;/strike&zz;" with "&lt;/strike&gt;" in pHTML
   set the HTMLText of fld id pFldID of cd 1 to pHTML
end removeTags

on setStyle pHTML,pFldID
   local tLA,tRA,tBT,tR,tFaces,tFIs,tAllNs,tN,tSoleNs,tFiA,tFiB,tFT,tLFA,tLGA,tTG
   replace "&amp;lt;" with "&lt;" in pHTML
   replace "&amp;gt;" with "&gt;" in pHTML
   put "&lt;" into tLA
   put "&gt;" into tRA
   put "ajm" into tBT
   repeat for each char tTB in tBT
      put tLA&"title level="&quote&tTB&quote&tRA into tR
      replace tR with tLA&"i"&tRA in pHTML
   end repeat
   put "italic,bold,underline" into tFaces
   repeat for each item tFA in tFaces
      put tLA&"emph rend="&quote&tFA&quote&tRA into tR
      replace tR with tLA&(char 1 of tFA)&tRA in pHTML
      replace tLA&"/emph"&tRA with tLA&"/"&(char 1 of tFA)&tRA in pHTML
   end repeat   
   if "&lt;p firstindent=" is in pHTML then
      put offsets("&lt;p firstindent=",pHTML) into tFIs
      put empty into tAllNs
      repeat with x = 1 to the number of items of tFIs
         put char (item x of tFIs)+19 to (item x of tFIs)+20 of pHTML into tN-----
         if char 2 of tN is quote then put char 1 of tN&comma after tAllNs else put tN&comma after tAllNs
      end repeat
      put empty into tSoleNs
      repeat for each item tItem in tAllNs
         if tItem is not among the items of tSoleNs then put tItem&comma after tSoleNs
      end repeat
      repeat for each item tItem in tSoleNs
         put "&lt;p firstindent="&quote&tItem&quote&"&gt;" into tFiA
         put "<p firstindent="&quote&tItem&quote&">" into tFiB
         replace tFiA with tFiB in pHTML
      end repeat
   end if
   replace "</title>" with tLA&"/i"&tRA in pHTML
   replace "<title>" with tLA&"i"&tRA in pHTML
   replace tLA&"title"&tRA with tLA&"i"&tRA in pHTML
   replace tLA&"/title"&tRA with tLA&"/i"&tRA in pHTML
   put replaceText(pHTML," xml:lang="&quote&"[\w\s]+"&quote,empty) into pHTML
   replace tLA&"foreign"&tRA with tLA&"i"&tRA in pHTML
   replace tLA&"/foreign"&tRA with tLA&"/i"&tRA in pHTML
   put "ibu" into tFT
   repeat for each char tTF in tFT
      put "/"&tTF into tTG
      put tLA&tTF&tRA into tLFA
      put tLA&tTG&tRA into tLGA
      replace "<"&tTF&">" with tLFA in pHTML
      replace "</"&tTF&">" with tLGA in pHTML
      replace tLFA&tLFA&tLFA with tLFA in pHTML
      replace tLFA&tLFA with tLFA in pHTML
      replace tLGA&tLGA&tLGA with tLGA in pHTML
      replace tLGA&tLGA with tLGA in pHTML
      replace tLFA&tLGA&tLFA&tLGA&tLFA&tLGA with tLFA&tLGA in pHTML
      replace tLFA&tLGA&tLFA&tLGA with tLFA&tLGA in pHTML
      replace tLA&tTF&tRA with "<"&tTF&">" in pHTML
      replace tLA&tTG&tRA with "</"&tTF&">" in pHTML
   end repeat
   replace "&lt;p&gt;" with "<p>" in pHTML
   replace "&lt;/p&gt;" with "</p>" in pHTML
   replace "<p><p>" with "<p>" in pHTML
   replace "&lt;p " with "<p " in pHTML
   replace quote&"&gt;" with quote&">" in pHTML
   replace "</p></p>" with "</p>" in pHTML
   replace "<p></p>" with empty in pHTML
   replace "</p> <p" with "</p><p" in pHTML
   replace "&lt;/strike&gt;" with "</strike>" in pHTML
   replace "&lt;strike&gt;" with "<strike>" in pHTML
   replace "amp;#" with "#" in pHTML
   replace "&amp;" with "&" in pHTML
   set the HTMLText of fld id pFldID of cd 1 to pHTML
   renderingTabWidths pFldID
end setStyle

on renderingTabWidths pFldID
   local tTabWidths,tText,tFindLine,tLN
   put the cTabWidths of fld id 1026 of cd 1 of stack "STEP Transcription Module" into tTabWidths
   if tTabWidths <> empty then
      filter tTabWidths without empty
      if pFldID is 1029 then set the tabStops of line 1 to -1 of fld id 1029 of cd 1 to empty
      put the HTMLText of fld id pFldID of cd 1 of stack "STEP Transcription Module" into tText
      set the itemDel to "|"
      repeat for each line tLine in tTabWidths
         replace tab with "&#9;" in tLine
         put item 1 of tLine into tFindLine
         put lineOffset(tFindLine,tText) into tLN
         if tLN <> 0 then 
            set the tabAlign of line tLN of fld id pFldID of cd 1 of stack "STEP Transcription Module" to item 3 of tLine
            set the tabWidths of line tLN of fld id pFldID of cd 1 of stack "STEP Transcription Module" to item 2 of tLine
         end if
      end repeat
   end if
end renderingTabWidths

on identifyTagAndNumberAngles pText,pFldID1
   local tAllTags,tParensList,tNumberList,tCount,tPreItem,tPre2Items,tSign1,tSign2,tChars,tItemBorder
   if pText is empty or "<" is not in pText then exit identifyTagAndNumberAngles
   put "%•@€¶§∞ºª∂∑√≤«ÆÚ∏Ø" into tChars
   repeat with i = 1 to length(tChars)
      if char i of tChars is not in pText then 
         put char i of tChars into tItemBorder
         exit repeat
      end if
   end repeat
   replace "<" with tItemBorder&"<" in pText
   replace ">" with ">"&tItemBorder in pText
   set the itemDel to tItemBorder
   filter items of pText with regex pattern "<[^>]+>" into tAllTags
   set the cAllTagsList of fld id 1041 of cd 1 of stack "STEP Transcription Module" to tAllTags
   repeat for each item tItem in tAllTags
      if char 2 of tItem is "/" then put ")," after tParensList
      else if char 2 of tItem is "!" then put "(0)," after tParensList
      else if char -2 of tItem is "/" then put "()," after tParensList
      else put "(," after tParensList
   end repeat
   delete char -1 of tParensList
   put "-1" into tCount
   set the itemDel to comma
   repeat for each item tItem in tParensList
      if tItem is "(" then 
         if tPreItem is ")" then
            put tCount&comma after tNumberList
         else if tCount is "-1" or tPreItem is "(" or (tPreItem is "(0)" and tPre2Items is "(") then 
            add 1 to tCount
            put tCount&comma after tNumberList
         else if tPreItem is "()" and tPre2Items is ")" then 
            put tCount&comma after tNumberList
         else if tPreItem is "()" and tPre2Items is "(" then 
            put tCount&comma after tNumberList
         else if tPreItem is "(0)" and tPre2Items is ")" then 
            put tCount&comma after tNumberList
         else if tPreItem is "()" and tPre2Items is "()" then 
            put tCount&comma after tNumberList
         end if
         put tPreItem into tPre2Items
         put tItem into tPreItem
      else if tItem is "()" then 
         if (tPreItem is "(") then add 1 to tCount
         put tCount&"|"&tCount &comma after tNumberList
         put tPreItem into tPre2Items
         put tItem into tPreItem
      else if tItem is "(0)" then 
         put "no" &comma after tNumberList
         put tPreItem into tPre2Items
         put tItem into tPreItem
      else if tItem is ")" then
         if tPreItem is "(" or ((tPreItem is "(0)" and tPre2Items is "(")) then 
            put comma after tNumberList
            put tPreItem into tPre2Items
            put tItem into tPreItem
         else if tPreItem is ")" or (tPreItem is "(0)" and tPre2Items is ")") then
            subtract 1 from tCount
            put tCount&comma after tNumberList
            put tPreItem into tPre2Items
            put tItem into tPreItem
         else if tPreItem is "()" then
            if tPre2Items is ")" or tpre2Items is "()" then 
               subtract 1 from tCount
               put tCount&comma after tNumberList
            else if tPre2Items is "(" then
               put comma after tNumberList
            end if
            put tPreItem into tPre2Items
            put tItem into tPreItem
         end if
      end if
   end repeat
   set the cAngleNumbers of fld id pFldID1 of cd 1 of stack "STEP Transcription Module" to tNumberList
end identifyTagAndNumberAngles

on indentNew pFldID1,pFldID2
   local tSpaceUnit,tSpaceUnit0,tListOfSpacedAngles,tAngSp,tAng,tSp,tAddSpace,tAngleNumbers,tHText,tHText2
   local tOffN,tN,tOpeningAnglesList,tOpAngle,tCount,tN1,tN2,tN3,tN4,tN5,tSta,tSto,tReg,tText,tCols,tCol
   put fld id pFldID1 of cd 1 into tText
   if tText is empty or "</" is not in tText then exit indentNew
   identifyTagAndNumberAngles tText,pFldID1
   put reverseItemList(the cAngleNumbers of fld id pFldID1 of cd 1 of stack "STEP Transcription Module") into tAngleNumbers
   put "" into tSpaceUnit0
   put "&#9;" into tSpaceUnit
   repeat with i = 1 to 12
      put empty into tAddSpace
      repeat i
         put tSpaceUnit after tAddSpace
      end repeat
      do "put tAddSpace into tSpaceUnit"&i
   end repeat
   set cursor to busy
   put the HTMLText of fld id pFldID1 of cd 1 into tHText
   put tHText into tHtext2
   put "(<font color="&quote&"#([\w\d]+)"&quote&">&gt;&lt;)" into tReg
   repeat until tN2 is false
      put matchText(tHText2,tReg,tN,tN1) into tN2
      if tN2 is true then put matchChunk(tHText2,tReg,tSta,tSto) into tN3
      if tN3 is true and char tSto+1 of tHText2 <> "/" then 
         put "<font color="&quote&"#"&tN1&quote&">&gt;</font><font color="&quote&"#"&tN1&quote&">&lt;" into char tSta to tSto of tHText
         put "<font color="&quote&"#"&tN1&quote&">&gt;</font><font color="&quote&"#"&tN1&quote&">&lt;" into char tSta to tSto of tHText2
      else if tN3 is true and char tSto+1 of tHText2 is "/" then put "<font color="&quote&"#"&tN1&quote&">&gt;%%%%" into char tSta to tSto of tHText2
      put empty into tN3
   end repeat
   put "(<font color="&quote&"#([\w\d]+)"&quote&">&lt;/([\w]+)&gt;&lt;/([\w]+)&gt;</font>)" into tReg
   repeat until tN4 is false
      put matchText(tHText,tReg,tN,tN1,tN2,tN3) into tN4
      if tN4 is true then put matchChunk(tHText,tReg,tSta,tSto) into tN5
      if tN4 is  true and tN5 is true then put "<font color="&quote&"#"&tN1&quote&">&lt;/"&tN2&"&gt;</font><font color="&quote&"#"&tN1&quote&">&lt;/"&tN3&"&gt;</font>" into char tSta to tSto of tHText
      put empty into tN5
   end repeat
   put "(<font color="&quote&"#([\w\d]+)"&quote&">&lt;/([\w]+)&gt;&lt;([\w]+)&gt;</font>)" into tReg
   put empty into tN4
   repeat until tN4 is false
      put matchText(tHText,tReg,tN,tN1,tN2,tN3) into tN4
      if tN4 is true then put matchChunk(tHText,tReg,tSta,tSto) into tN5
      if tN4 is  true and tN5 is true then put "<font color="&quote&"#"&tN1&quote&">&lt;/"&tN2&"&gt;</font><font color="&quote&"#"&tN1&quote&">&lt;"&tN3&"&gt;</font>" into char tSta to tSto of tHText
      put empty into tN5
   end repeat
   put reverseItemList(offsets("&lt;",tHText)) into tOpeningAnglesList
   put 0 into tCount
   repeat for each item tOpAngle in tAngleNumbers
      add 1 to tCount
      if tOpAngle is empty or tOpAngle is "no" then next repeat
      if tOpAngle is 0 then put "</p><p>" before char (item tCount of tOpeningAnglesList) of tHText
      if "|" is in tOpAngle or tOpAngle is an integer then 
         put item tCount of tOpeningAnglesList into tOffN
         put trueword 1 of tOpAngle into tN
         if char tOffN-2 to tOffN-1 of tHText is quote&">" then do "put "&quote&"</p><p>"&quote&"&tSpaceUnit"&tN&&"before char tOffN-22 of tHText"
         else do "put "&quote&"</p><p>"&quote&"&tSpaceUnit"&tN&&"before char tOffN of tHText"
      end if
   end repeat
   replace "<p></p><p>" with "<p>" in tHText
   replace "<p>     </p><p>" with "<p>" in tHText
   replace "<p> </p><p>" with "<p>" in tHText
   replace quote&"></p><p>&lt;" with quote&">&lt;"in tHText
   set the HTMLText of fld id pFldID2 of cd 1 of stack "STEP Transcription Module" to tHText
end indentNew


on indent pFldID1,pFldID2
   local tText,tSpaceUnit,tSpaceUnit0,tAddSpace,tListOfSpacedAngles,tAngSp,tAng,tSp
   put fld id pFldID1 of cd 1 into tText
   if tText is empty or "</" is not in tText then exit indent
   put doublequoteur(tText) into tText
   replace "</p><p" with "</p> <p" in tText
   replace "<l/>" with "<l></l>" in tText
   replace "<lb/>" with "<lb></lb>" in tText
   replace "<pb/>" with "<pb></pb>" in tText
   replace "<gb/>" with "<gb></gb>" in tText
   replace "<cb/>" with "<cb></cb>" in tText
   replace "<!--" with "%%$$" in tText
   replace "-->" with "$$%" in tText
   replace "<addSpan" with "{addSpan" in tText
   replace "<delSpan" with "{delSpan" in tText
   replace "<damageSpan" with "{damageSpan" in tText
   replace "<anchor" with "{anchor" in tText
   replace "<ptr" with "{ptr" in tText
   replace "/>" with "/}" in tText
   put "" into tSpaceUnit0
   put space&space&space&space into tSpaceUnit
   repeat with i = 1 to 10
      put empty into tAddSpace
      repeat i
         put tSpaceUnit after tAddSpace
      end repeat
      do "put tAddSpace into tSpaceUnit"&i
   end repeat
   put createAngleOrder(tText) into tListOfSpacedAngles
   repeat with j = (the number of items of tListOfSpacedAngles) down to 1
      put item j of tListOfSpacedAngles into tAngSp
      set the itemDel to ":"
      put item 1 of tAngSp into tAng
      put item 2 of tAngSp into tSp
      set the itemDel to comma
      do "put cr & tSpaceUnit"&tSp&&"before char tAng of tText"
   end repeat
   replace cr&"<p>" with "<p>" in tText 
   replace cr&"<p " with "<p " in tText 
   replace "%%$$" with "<!--" in tText
   replace "$$%" with "-->" in tText
   replace "{addSpan" with "<addSpan" in tText
   replace "{delSpan" with "<delSpan" in tText
   replace "{damageSpan" with "<damageSpan" in tText
   replace "{anchor" with "<anchor" in tText
   replace "{ptr" with "<ptr" in tText
   replace "/}" with "/>" in tText
   replace ">"&cr&cr&"    " with  ">"&cr&"    " in tText
   replace ">"&cr&cr&"</" with  ">"&cr&"</" in tText
   put tText into fld id pFldID2 of cd 1
   send "mouseUp pFldID2" to btn "Color all tags" of cd 1
end indent

function gatherAngleLocs pText
   local tOpenTag,tRightTag,tAllAs,tRightAs
   put "<" into tOpenTag
   put "</" into tRightTag
   put offsets(tOpenTag,pText) into tAllAs
   put offsets(tRightTag,pText) into tRightAs
   repeat with x = the number of items of tAllAs down to 1
      if item x of tAllAs is among the items of tRightAs then delete item x of tAllAs
   end repeat
   return tAllAs&cr&tRightAs
end gatherAngleLocs

private function doublequoteur tTextToCurl
   local tPuncts,tMinus,tCount,tQL
   if quote is not in tTextToCurl then return tTextToCurl
   if char 1 of tTextToCurl is quote then put "“" into char 1 of tTextToCurl
   replace quote&space&quote with "” “" in tTextToCurl
   replace space&quote with " “" in tTextToCurl
   put "([{¡¿" into tPuncts
   repeat for each char tChar in tPuncts
      replace tChar&quote with tChar&"“" in tTextToCurl
   end repeat
   put ")}]!?.,:;±" into tPuncts
   repeat for each char tChar in tPuncts
      replace quote&tChar with "”"&tChar in tTextToCurl
   end repeat
   replace quote with "”" in tTextToCurl
   repeat for each word tWord in tTextToCurl
      put 1 into tMinus
      add 1 to tCount
      if char -1 of tWord is in ",±;:)]}" then 
         delete char -1 of tWord
         put 2 into tMinus
      end if
      if char 1 of tWord is not in "“„" and char -tMinus of tWord is "”" and char 1 to -2 of tWord is a number then put quote into char -tMinus of word tCount of tTextToCurl
   end repeat
   replace "=”" with "="&quote in tTextToCurl
   replace "”>" with quote&">" in tTextToCurl
   put offsets("” ",tTextToCurl) into tQL
   if tQL is not 0 then
      repeat with x = 1 to the number of items of tQL
         if "=" is in word (the number of words of char 1 to (item x of tQL) of tTextToCurl) of tTextToCurl then
            put quote into char (item x of tQL) of tTextToCurl
         end if
      end repeat
   end if
   put 0 into tCount
   put uncurlyingClosingDoubleQuoteWithinTags(tTextToCurl) into tTextToCurl
   return tTextToCurl
end doublequoteur

function uncurlyingClosingDoubleQuoteWithinTags tTextToUncurl
   local ots
   put offsets("” ",tTextToUncurl) into ots
   if ots = 0 then return tTextToUncurl
   repeat for each item tItem in ots
      repeat with i = tItem-1 down to 1
         if char i of tTextToUncurl is ">" then exit repeat
         else if char i of tTextToUncurl is "<" then
            put quote into char tItem of tTextToUncurl
            exit repeat
         end if
      end repeat
   end repeat
   return tTextToUncurl
end uncurlyingClosingDoubleQuoteWithinTags


function createAngleOrder @pText
   local tLeftAndRightAngles,tLeftAs,tRightAs,pNests,tLA,tRA,tCount,tSpaceList
   put gatherAngleLocs(pText) into tLeftAndRightAngles
   put line 1 of tLeftAndRightAngles into tLeftAs
   put line 2 of tLeftAndRightAngles into tRightAs
   if char -1 of tLeftAs is not comma then put comma after tLeftAs
   put tLeftAs & tRightAs into pNests
   sort items of pNests ascending numeric
   put empty into tSpaceList
   put 0 into tCount
   repeat with i = 1 to the number of items of pNests
      set the wholeMatches to true
      put itemOffset(item i of pNests,tLeftAs) into tLA
      set the wholeMatches to true
      put itemOffset(item i of pNests,tRightAs) into tRA
      if tLA <> 0 then 
         put ":"&tCount after item i of pNests
         add 1 to tCount
      else if tRA <> 0 then
         put ":"&tCount-1 after item i of pNests
         put tCount-1 into tCount
      end if
   end repeat
   return pNests
end createAngleOrder

on mouseWithin
   get the mouseH
   if it > (30) and it < (146) then showtooltip(31)
   else if it > (145) and it < (211) then showtooltip(146)
   else if it > (210) and it < (281) then showtooltip(211)
   else if it > (283) and it < (406) then showtooltip(284)
   else if it > (405) and it < (471) then showtooltip(406)
   else if it > (470) and it < (541) then showtooltip(471)
   else if it > (543) and it < (731) then showtooltip(544)
end mouseWithin

on showtooltip pRect
   local tltp
   switch pRect
      case "31"
         put "Use the descriptive tags to mark up the content of"&cr&\
         "the base text (everyting except alterations)." into tltp
         break
      case "146"
         put "Shows an indented view of the base text description. It cannot"&cr&\
         "be typed into, but clicking any tag highlights its range." into tltp
         break
      case "211"
         put "Shows a rendered view of the base transcription that makes it"&cr&\
         "easier to see typefaced text." into tltp
         break
      case "284"
         put "Use the descriptive tags to mark up the content of the rendered"&cr&\
         "text (the text that shows the deletions). The aim here is to allow"&cr&\
         "you to tag/describe deleted matter for special purposes." into tltp
         break
      case "406"
         put "Shows an indented view of the rendition description. It cannot"&cr&\
         "be typed into, but clicking any tag highlights its range. Deleted matter"&cr&\
         "is shown undeleted for descriptive tagging purposes." into tltp
         break
      case "471"
         put "Shows a rendered view of the rendered transcription"&cr&\
         "that makes it easier to see typefaced text." into tltp
         break
      case "544"
         put "Move back to STEP Transcriptor." into tltp
         break
   end switch
   set the toolTip of btn id 1040 of cd 1 to tltp
end showtooltip


##TOOLTIP:
##Move back to STEP Transcriptor.



#####################
#####################

## Script of button "Transcription Tab Menu" of card "card id 1002" of stack "/Users/adetienn/Documents/STEP Externals/STEP-LI 7.1.4/STEP Transcription Module.livecode" ID 1025 of CARD 1 of STACK STEP Transcription Module

on mouseUp
   if the mouseH  > 215 and the mouseH < 298 and the menuHistory of btn id 1025 of cd 1 is 3 then menuPick "Anchored"
   else pass mouseUp
end mouseUp

on formatDescriptionText
   saveForUndoRedo 1041
   refacemphingText
   send "mouseUp 1041" to btn "Color all tags" of cd 1 of stack "STEP Transcription Module"
   send "mouseUp 1151" to btn "Color all tags" of cd 1 of stack "STEP Transcription Module"
   put empty into fld id 1044 of cd 1 of stack "STEP Transcription Module"
   saveForUndoRedo 1041
end formatDescriptionText

on refacemphingText
   local tHTML,tPara,tFIs,tFldID,tTwoFields,tN,tAllNs,tSoleNs,tFiA,tFiB,tFacing,tStackName,tN1,tN2,tN3,tSta,tSto,tRegex,tSta2,tSto2
   local tTempText,ots,yt,tGraph,tSta1,tUrl,tHT,tListBinfiles
   set the cBinFiles of cd 1 of stack "STEP Transcription Module" to empty
   put "STEP Transcription Module" into tStackName
   if "<br>" is in the cBrHTMLText of fld id 1029 of cd 1 of stack tStackName then
      set the text of fld id 1041 of cd 1 of stack tStackName to the cBrHTMLText of fld id 1029 of cd 1 of stack tStackName
      set the cBrHTMLText of fld id 1041 of cd 1 of stack tStackName to the cBrHTMLText of fld id 1029 of cd 1 of stack tStackName
   else
      set the HTMLText of fld id 1041 of cd 1 of stack tStackName to the HTMLText of fld id 1029 of cd 1 of stack tStackName
      set the cBrHTMLText of fld id 1041 of cd 1 of stack tStackName to empty
   end if
   if "<br>" is in the cBrHTMLText of fld id 1026 of cd 1 of stack tStackName then
      set the text of fld id 1151 of cd 1 of stack tStackName to the cBrHTMLText of fld id 1026 of cd 1 of stack tStackName
      set the cBrHTMLText of fld id 1151 of cd 1 of stack tStackName to the cBrHTMLText of fld id 1026 of cd 1 of stack tStackName
   else
      set the HTMLText of fld id 1151 of cd 1 of stack tStackName to the HTMLText of fld id 1026 of cd 1 of stack tStackName
      set the cBrHTMLText of fld id 1151 of cd 1 of stack tStackName to empty
   end if
   put "1041,1151" into tTwoFields
   repeat for each item tFldID in tTwoFields
      if "<br>" is in the cBrHTMLText of fld id tFldID of cd 1 of stack tStackName then put the cBrHTMLText of fld id tFldID of cd 1 of stack tStackName into tHTML else put the HTMLText of fld id tFldID of cd 1 of stack tStackName into tHTML
      if "<font bgcolor=" is in tHTML then
         put "(<font bgcolor="&quote&"#[^>]+>([^<]*)</font>)" into tRegex
         repeat until tN2 is false
            put matchText(tHTML,tRegex,tN,tN1) into tN2
            if tN2 is true then
               put matchChunk(tHTML,tRegex,tSta,tSto,tSta2,tSto2) into tN3
               if tN3 is true then 
                  put tN1 into char tSta to tSto of tHTML
                  put empty into tN3
               end if
               put empty into tN2
            else
               exit repeat
            end if
         end repeat
      end if
      put "&lt;p&gt;" into tPara
      replace "<p>" with tPara in tHTML
      put "&lt;/p&gt;</p>" into tPara
      replace "</p>" with tPara in tHTML
      put "<emph rend="&quote&"italic"&quote&">" into tFacing
      replace "<i>" with tFacing in tHTML
      put "<emph rend="&quote&"bold"&quote&">" into tFacing
      replace "<b>" with tFacing in tHTML
      put "<emph rend="&quote&"underline"&quote&">" into tFacing
      replace "<u>" with tFacing in tHTML
      put "</emph>" into tFacing
      replace "</i>" with tFacing in tHTML
      replace "</b>" with tFacing in tHTML
      replace "</u>" with tFacing in tHTML
      replace "&lt;/p&gt;</p>"  with "</p>" in tHTML
      replace "&lt;p&gt;"  with "<p>" in tHTML
      set the text of fld id tFldID of cd 1 of stack tStackName to tHTML
      put replaceText(fld id tFldID of cd 1 of stack tStackName,"<br>","<lb/>") into fld id tFldID of cd 1 of stack tStackName
      put fld id tFldID of cd 1 of stack tStackName into tTempText
      if "<img src=" is in tTempText then
         put offsets("<img src=",tTempText) into ots
         repeat with i = the number of items of ots down to 1
            put item i of ots into tSta
            put offset(">",tTempText,tSta) into yt
            put tSta+yt into tSto
            put char tSta to tSto of tTempText into tGraph
            put offset("="&quote,tGraph) into tSta1
            put char tSta1+10 to tSta1+offset(quote,tGraph,tSta1+2)+1 of tGraph into tUrl
            put space into char tSta to tSto of fld id tFldID of cd 1 of stack tStackName
            put tSta&"|"&tFldID&"|"&"binfile:"&tUrl & cr after tListBinfiles
         end repeat
      end if
   end repeat
   if not the visible of fld id 1041 of cd 1 of stack tStackName then select line 1 of btn id 1040 of cd 1 of stack tStackName
   set the cBinFiles of cd 1 of stack "STEP Transcription Module" to tListBinfiles
end refacemphingText

function removeExtraCodeUnits pHText
   local tReg
   put ";&#[\d]+;" into tReg
   put replaceText(pHText,tReg,";") into pHText
   return pHText
end removeExtraCodeUnits

on menuPick pItemName
   local tFldIDs,tDoIndent,tHText,tFldList,tText,tFontCommandList,tAppend,hj,tUpdate,tListBinfiles
   put "1004,1026,1029,1126,1163" into tFldIDs
   repeat with c = 1 to the number of items of tFldIDs
      set the cVScroll of fld id (item c of tFldIDs) of cd 1 to the vScroll of fld id (item c of tFldIDs) of cd 1
   end repeat
   if the optionKey is down then put "no" into tDoIndent else put "yes" into tDoIndent
   if the shiftKey is down then put "no" into tUpdate else put "yes" into tUpdate
   lock screen
   switch pItemName
      case ">> Descriptive Encoding"
         if fld id 1041 of cd 1 is not empty and tUpdate is "yes" then
            answer "Updating the current content of Description fields with new transcriptive data will make you lose current descriptive encoding if any. Select one option." with "Cancel" or "Update only" or "Update and Access" or "Access now" as sheet
            if it is "Cancel" then 
               set the menuHistory of btn id 1025 of cd 1 of stack "STEP Transcription Module" to the cLastTabOfMe of btn id 1025 of cd 1 of stack "STEP Transcription Module"
               exit to top
            else 
               if it contains "Update" then formatDescriptionText
               if it is "Update only" then 
                  set the menuHistory of btn id 1025 of cd 1 of stack "STEP Transcription Module" to the cLastTabOfMe of btn id 1025 of cd 1 of stack "STEP Transcription Module"
                  exit to top
               end if
            end if
         else if fld id 1041 of cd 1 of stack "STEP Transcription Module" is empty and tUpdate is "yes" then
            if fld id 1004 of cd 1 of stack "STEP Transcription Module" <> empty then formatDescriptionText
         end if
         put "1004,1026,1029,1126,1163" into tFldList
         repeat for each item tFldID in tFldList
            hide fld id tFldID of cd 1 of stack "STEP Transcription Module"
         end repeat
         uncolorBGLines
         hide btn id 1025 of cd 1 of stack "STEP Transcription Module"
         hide graphic id 1920 of cd 1 of stack "STEP Transcription Module"
         put "1041,1139,1044,1151,1154,1157" into tFldList
         repeat for each item tFldID in tFldList
            set the visible of fld id tFldID of cd 1 to the cVisibleStatus of fld id tFldID of cd 1 of stack "STEP Transcription Module"
         end repeat
         showDescriptiveTools
         show graphic id 1160 of cd 1 of stack "STEP Transcription Module"
         show graphic id 1919 of cd 1 of stack "STEP Transcription Module"
         show btn id 1040 of cd 1 of stack "STEP Transcription Module"
         set the menuHistory of btn id 1040 of cd 1 of stack "STEP Transcription Module" to the cLastTabOfMe of btn id 1040 of cd 1 of stack "STEP Transcription Module"
         put "3,4,6,7,9,10" into tFontCommandList
         repeat for each item tItem in tFontCommandList
            if char 1 of line tItem of btn "Font" of group "STEP Menu 1" of cd 1 of stack "STEP Transcription Module" <> "(" then put "(" before line  tItem of btn "Font" of group "STEP Menu 1" of cd 1 of stack "STEP Transcription Module"
         end repeat
         put the cBinFiles of cd 1 of stack "STEP Transcription Module" into tListBinfiles
         if tListBinfiles <> empty then
            set the itemDel to "|"
            repeat for each line tGraph in tListBinfiles
               set the imageSource of char (item 1 of tGraph) of fld id (item 2 of tGraph) of cd 1 of stack "STEP Transcription Module" to (item 3 of tGraph)
            end repeat
         end if
         set the lockscreen to false
         exit to top
         break
      case "Transcription"
         put the HTMLText of fld id 1004 into tHText
         if "font face=" is in tHText then
            put replaceText(tHText, "<font face[^>]+>","<font>") into tHText
            set the HTMLText of fld id 1004 of cd 1 of stack "STEP Transcription Module" to tHText
         end if
         show fld id 1004 of cd 1 of stack "STEP Transcription Module"
         hide fld id 1026 of cd 1 of stack "STEP Transcription Module"
         hide fld id 1029 of cd 1 of stack "STEP Transcription Module"
         hide fld id 1126 of cd 1 of stack "STEP Transcription Module"
         hide fld id 1163 of cd 1 of stack "STEP Transcription Module"
         set the cLastTabOfMe of btn id 1025 of cd 1 of stack "STEP Transcription Module" to 1
         break
      case "Indent View"
         put fld id 1004 into tText
         if "</" is in tText and tUpdate is "yes" then indent tText
         hide fld id 1004 of cd 1 of stack "STEP Transcription Module"
         hide fld id 1026 of cd 1 of stack "STEP Transcription Module"
         hide fld id 1029 of cd 1 of stack "STEP Transcription Module"
         show fld id 1126 of cd 1 of stack "STEP Transcription Module"
         hide fld id 1163 of cd 1 of stack "STEP Transcription Module"
         set the cLastTabOfMe of btn id 1025 of cd 1 of stack "STEP Transcription Module" to 2
         get lineOffset("</body>",fld id 1126 of cd 1 of stack "STEP Transcription Module")
         if char 1 of line it of fld id 1126 of cd 1 = tab then
            put ((offset("</body>",line it of fld id 1126 of cd 1 of stack "STEP Transcription Module"))-1) into hj
            if hj > 1 then put "there are "&hj& " tags left unclosed in the encoded text." into tAppend
            else put "there is one tag left unclosed in the encoded text." into tAppend
            answer "Warning: The closing </body> tag at the end of the indent view is not flushed left. It appears "&tAppend as sheet
         end if
         break
      case "Anchored"
         put  the cHTMLIndentText of fld id 1163 of cd 1 of stack "STEP Transcription Module" into tHText
         if "&lt;/" is in tHText and tUpdate is "yes" then insertAnchor2 tHText,tDoIndent
         hide fld id 1004 of cd 1 of stack "STEP Transcription Module"
         hide fld id 1026 of cd 1 of stack "STEP Transcription Module"
         hide fld id 1029 of cd 1 of stack "STEP Transcription Module"
         hide fld id 1126 of cd 1 of stack "STEP Transcription Module"
         show fld id 1163 of cd 1 of stack "STEP Transcription Module"
         set the cLastTabOfMe of btn id 1025 of cd 1 of stack "STEP Transcription Module" to 3
         break
      case "TEI Rendition"
         put fld id 1004 of cd 1 of stack "STEP Transcription Module" into tText
         if "</" is in tText then renderTEI tText
         hide fld id 1004 of cd 1 of stack "STEP Transcription Module"
         show fld id 1026 of cd 1 of stack "STEP Transcription Module"
         hide fld id 1029 of cd 1 of stack "STEP Transcription Module"
         hide fld id 1126 of cd 1 of stack "STEP Transcription Module"
         hide fld id 1163 of cd 1 of stack "STEP Transcription Module"
         set the cLastTabOfMe of btn id 1025 of cd 1 of stack "STEP Transcription Module" to 4
         break
      case "Base Text for Editing"
         if fld id 1026 of cd 1 of stack "STEP Transcription Module" <> empty then
            if the cBrHTMLText of fld id 1026 of cd 1 of stack "STEP Transcription Module" <> empty then put the cBrHTMLText of fld id 1026 of cd 1 of stack "STEP Transcription Module" into tHText else put the HTMLText of fld id 1026 of cd 1 of stack "STEP Transcription Module" into tHText
            showTextWithoutDeletions tHText
         end if
         hide fld id 1004 of cd 1 of stack "STEP Transcription Module"
         hide fld id 1026 of cd 1 of stack "STEP Transcription Module"
         show fld id 1029 of cd 1 of stack "STEP Transcription Module"
         hide fld id 1126 of cd 1 of stack "STEP Transcription Module"
         hide fld id 1163 of cd 1 of stack "STEP Transcription Module"
         set the cLastTabOfMe of btn id 1025 of cd 1 of stack "STEP Transcription Module" to 5
         break
   end switch
   repeat with c = 1 to the number of items of tFldIDs
      set the vScroll of fld id (item c of tFldIDs) of cd 1 to the cVScroll of fld id (item c of tFldIDs) of cd 1
   end repeat
   setFieldVisibleStatus
   set the textSize of fld id 1389 of cd 1 of stack "STEP Transcription Module" to 11 --fld "linecounter"
   set the textHeight of fld id 1389 of cd 1 of stack "STEP Transcription Module" to the textHeight of fld id whichField() of cd 1 of stack "STEP Transcription Module"
   set the vScroll of fld id 1389 of cd 1 of stack "STEP Transcription Module" to the cVScroll of fld id whichField() of cd 1 of stack "STEP Transcription Module"
   put empty into tText
   put empty into tHText
   unlock screen
end menuPick

function whichField
   local tFldList,tStackNAme
   put "STEP Transcription Module" into tStackName
   put "1004,1026,1029,1126,1163,1041,1139,1044,1151,1154,1157" into tFldList
   repeat for each item tFld in tFldLIst
      if the visible of fld id tFld of cd 1  of stack tStackName then return tFld
   end repeat
end whichField

on scrollbarDrag pFldID
   lock screen
   local tLNs,tStackName
   put "STEP Transcription Module" into tStackName
   if the textHeight of fld id pFldID of cd 1 of stack tStackName is empty then set the textHeight of fld id pFldID of cd 1 of stack tStackName to 24
   repeat with i = 1 to round((the formattedHeight of fld id pFldID of cd 1)/(the textHeight of fld id pFldID of cd 1) + 100)
      put i & cr after tLNs
   end repeat
   put tLNs into fld id 1389 of cd 1 of stack tStackName
   set the vScroll of fld id 1389 of cd 1 of stack tStackName to the vScroll of fld id pFldID of cd 1 of stack tStackName
end scrollbarDrag

on setFieldVisibleStatus
   local tFldList,tStackName
   put "STEP Transcription Module" into tStackName
   put "1004,1026,1029,1126,1163,1041,1139,1044,1151,1154,1157" into tFldList
   repeat for each item tFld in tFldLIst
      set the cVisibleStatus of fld id tFld of cd 1 of stack tStackName to the visible of fld id tFld of cd 1 of stack tStackName
      if the visible of fld id tFld of cd 1 of stack tStackName then scrollbarDrag tFld
   end repeat
end setFieldVisibleStatus

function removeExtraCodeUnits pHText
   local tReg
   put ";&#[\d]+;" into tReg
   put replaceText(pHText,tReg,";") into pHText
   return pHText
end removeExtraCodeUnits

on renderGraphics pHTML,pIDNum
   local ots,ut,yt,tGraphTag,tURL,tImageAddresses,tGraphic,tSta,tSto,tText
   put offsets("<figure><graphic url",pHTML) into ots
   if ots is empty then exit renderGraphics
   repeat with i = the  number of items of ots down to 1
      put item i of ots into yt
      put offset("</figure>",pHTML,yt) into ut
      put char yt to yt+ut+8 of pHTML into tGraphTag
      put char 23 to offset("/>",tGraphTag)-2 of tGraphTag into tURL
      put "G"&yt&"C" into char 9 to length(tGraphTag)-9 of tGraphTag
      put tGraphTag into char yt to yt+ut+8 of pHTML
      --put yt+9 & "|" & "G"&yt&"C"&"|"&"binfile:"&tURL & cr after tImageAddresses
      put yt+9 & "|" & "G"&yt&"C"&"|"&"binfile:"&tURL & cr after tImageAddresses
   end repeat
   delete char -1 of tImageAddresses
   set the HTMLText of fld id pIDNum of cd 1 of stack "STEP Transcription Module"  to pHTML
   put fld id pIDNum of cd 1 of stack "STEP Transcription Module" into tText
   set the itemDel to "|"
   repeat for each line tGraphic in tImageAddresses
      put offset(item 2 of tGraphic,tText) into tSta
      put tSta + length(item 2 of tGraphic) -1 into tSto
      put space into char tSta to tSto of fld id pIDNum of cd 1 of stack "STEP Transcription Module"
      set the imageSource of char tSta of fld id pIDNum of cd 1 of stack "STEP Transcription Module" to item 3 of tGraphic
   end repeat
   set the fixedLineHeight of fld id pIDNum  of cd 1 of stack "STEP Transcription Module" to false
end renderGraphics


on renderTEI pText
   local tHTML,tDocAb,tVar,tLeafAb,tAllVals,tANVals,tPBVals,tAllNotes,tLine,tTaggedStuff,tLocation,tDocV,ot,tPN,op
   local tPageNumber,tNoteNumber,tNoteStuff,ut,tRes,tSpanArray,tSpanList,tRanges,tSpanCol,tRg2,tRg1,tPageType,tAllSpecialFontChars
   local tReplacement
   put the SpecialFontCharacterList of stack "STEP Transcription Module" into tAllSpecialFontChars
   compilePageBreaks 1004
   compileAnchoredNotes
   put fld id 1206 of cd 1 into tDocAb
   put fld id 1207 of cd 1 into tVar
   put fld id 1208 of cd 1 into tLeafAb
   put empty into tAllVals
   put the cAnchoredNoteValues of fld id 1004 of cd 1 into tANVals
   put the cPBValues of fld id 1004 of cd 1 into tPBVals
   put tANVals&cr&tPBVals into tAllVals
   sort lines of tAllVals numeric by item 1 of each
   filter tAllVals without empty
   put empty into tAllNotes
   repeat with x = the number of lines of tAllVals down to 1
      put line x of tAllVals into tLine
      put char (item 1 of tLine) to (item 2 of tLine) of pText into tTaggedStuff
      if tLine is among the lines of tANVals then 
         put item 3 of tLine into tLocation
         put tDocAb&tVar into tDocV
         put offset(tDocV,tLocation) into ot
         put empty into tPN
         put empty into tPageNumber
         put empty into tNoteNumber
         if ot = 1 then
            put char (length(tDocV)+1) to -1 of tLocation into tPN
            put offset("-",tPN) into op
            if op <> 0 then
               put char 1 to op-1 of tPN into tPageNumber
               put char op+1 to -1 of tPN into tNoteNumber
            end if
         end if
         put offset(quote&">",tTaggedStuff) into ot
         put char ot+2 to -1 of tTaggedStuff into tNoteStuff
         put tLeafAb&". "&deleteZero(tPageNumber)&&"note #"&deleteZero(tNoteNumber)&&tNoteStuff&cr before tAllNotes
         put " [NOTE "&tPageNumber&"/"&tNoteNumber&"] " into char (item 1 of tLine) to (item 2 of tLine) of pText
      else if tLine is among the lines of tPBVals then
         put getXMLIDLastValueOriginPlusRV() into tPageType 
         --put offset("-",item -1 of tLine) into ut
         if tPageType is "n" then
            put item 3 of tLine into tPageNumber
            if tPageNumber begins with tLeafAb then 
               put char offset(tLeafAb,tPageNumber) +1 to -1 of tPageNumber into tPageNumber
            end if
         else if tPageType is "ed" then
            put item 5 of tLine into tPageNumber
            if tPageNumber begins with tLeafAb then 
               put char offset(tLeafAb,tPageNumber) +1 to -1 of tPageNumber into tPageNumber
            end if
         else if tPageType is "rend" then
            put item 6 of tLine into tPageNumber
            if tPageNumber begins with tLeafAb then 
               put char offset(tLeafAb,tPageNumber) +1 to -1 of tPageNumber into tPageNumber
            end if
         end if-- put char ut+1 to -1 of item -1 of tLine into tPageNumber
         put " [PAGE "&deleteZero(tPageNumber)&"] " into char (item 1 of tLine) to (item 2 of tLine) of pText
      end if
   end repeat
   filter pText without cr&cr&cr
   filter tAllNotes without empty
   put cr&cr&tAllNotes after pText
   replace space&space with space in pText
   replace "&amp;" with "&" in pText
   replace "<subst>" with empty in pText
   replace "</subst>" with empty in pText
   replace "<mod>" with empty in pText
   replace "</mod>" with empty in pText
   replace "<add>" with empty in pText
   replace "</add>" with empty in pText
   replace "<body>" with empty in pText
   replace "</body>" with empty in pText
   replace "<graphic>" with "<graphic><b>" in pText
   replace "</graphic>" with "</b></graphic>" in pText
   replace "-<lb break="&quote&"no"&quote&"/>" with empty in pText
   replace "<del>" with "<strike>" in pText
   replace "<figDesc>" with "<b>[" in pText
   replace "</figDesc>" with "]</b>" in pText
   --put replaceText(pText,"<del xml:id="&quote&"[-\w\d\s]+"&quote&">","<strike>") into pText
   put replaceText(pText,"<del [^>]+>","<strike>") into pText
   replace "</del>" with "</strike>" in pText
   completeTranspositions pText
   collectAndRenderTables pText,1026
   put pText into fld id 1026 of cd 1 of stack "STEP Transcription Module"
   put the HTMLText of fld id 1026 into tHTML
   set the itemDel to "|"
   repeat for each line tLine in tAllSpecialFontChars
      if item 2 of tLine is in tHTML then
         put replaceAbbrevWithSpecialCharacter(item 2 of tLine,tAllSpecialFontChars) into tReplacement
         replace (item 2 of tLine) with tReplacement in tHTML
      end if
   end repeat
   replace "&lt;" with "<" in tHTML
   replace "&gt;" with ">" in tHTML
   replace "  " with " " in tHTML
   replace "</p></p>" with "</p>" in tHTML
   replace "<p><p>" with "<p>" in tHTML
   replace "<p rend="&quote&"indent"&quote&">" with "<p firstIndent="&quote&"15"&quote&">" in tHTML
   replace "<p rend="&quote&"indent2"&quote&">" with "<p firstIndent="&quote&"30"&quote&">" in tHTML
   replace "<p rend="&quote&"indent3"&quote&">" with "<p firstIndent="&quote&"45"&quote&">" in tHTML
   replace "<p rend="&quote&"indent4"&quote&">" with "<p firstIndent="&quote&"60"&quote&">" in tHTML
   replace "<p rend="&quote&"indent5"&quote&">" with "<p firstIndent="&quote&"75"&quote&">" in tHTML
   replace "<p rend="&quote&"text-indent:1em"&quote&">" with "<p firstIndent="&quote&"15"&quote&">" in tHTML
   replace "<p rend="&quote&"text-indent:2em"&quote&">" with "<p firstIndent="&quote&"30"&quote&">" in tHTML
   replace "<p rend="&quote&"text-indent:3em"&quote&">" with "<p firstIndent="&quote&"45"&quote&">" in tHTML
   replace "<p rend="&quote&"text-indent:-1em"&quote&">" with "<p firstIndent="&quote&"-15"&quote&">" in tHTML
   replace "<p rend="&quote&"text-indent:-2em"&quote&">" with "<p firstIndent="&quote&"-30"&quote&">" in tHTML
   replace "<p rend="&quote&"text-indent:-3em"&quote&">" with "<p firstIndent="&quote&"-45"&quote&">" in tHTML
   replace "<p rend="&quote&"center"&quote&">" with "<p align="&quote&"center"&quote&">" in tHTML
   replace "<p rend="&quote&"right"&quote&">" with "<p align="&quote&"right"&quote&">" in tHTML
   replace "<p><p " with "<p " in tHTML
   replace "<lb/>" with "<br>" in tHTML
   replace "<l/>" with "<br>" in tHTML
   replace "amp;#" with "#" in tHTML
   put replaceEmphWithFace(tHTML) into tHTML
   put replaceHiWithFace(tHTML) into tHTML
   put backColoringSpans(tHTML) into tSpanArray
   if tSpanArray <> empty then
      put keys(tSpanArray) into tSpanList
      sort lines of tSpanList descending numeric by item 1 of tSpanArray[each]
      repeat for each line tSp in tSpanList
         put tSpanArray[tSp] into tRanges
         if "addSpan" is in tSp then put "#AF89FF" into tSpanCol
         else if "delSpan" is in tSp then put "#FFB0C4" into tSpanCol
         set the itemDel to "|"
         put item 2 of tRanges into tRg2
         set the itemDel to comma
         put "</font>" after char (item 2 of tRg2) of tHTML
         set the itemDel to "|"
         put item 1 of tRanges into tRg1
         set the itemDel to comma
         put "<font bgcolor="&quote&tSpanCol&quote&">" before char (item 1 of tRg1) of tHTML
      end repeat
   end if
   repeat until line 1 of tHTML <> "<p></p>"
      put empty into line 1 of tHTML
   end repeat
   set the HTMLText of fld id 1026 of cd 1 to tHTML
   if "<br>" is in tHTML then set the cBrHTMLText of fld id 1026 of cd 1 to tHTML else set the cBrHTMLText of fld id 1026 of cd 1 to empty
   renderingTabWidths 1026
   renderGraphics tHTML,1026
end renderTEI

function replaceAbbrevWithSpecialCharacter pAbbrev,@pAllSpecialFontChars
   local tFontInfo,tReplacement,tFontFace,tRealCharToType
   put line lineOffset("|"&pAbbrev&"|",pAllSpecialFontChars) of pAllSpecialFontChars into tFontInfo
   set the itemDel to "|"
   put item 3 of tFontInfo into tFontFace
   put item 4 of tFontInfo into tRealCharToType
   put "<font face="&quote&tFontFace&quote&">"&tRealCharToType&"</font>" into tReplacement
   return tReplacement
end replaceAbbrevWithSpecialCharacter

function replaceEmphWithFace pHText
   local emphi,emphb,emphu,emphs,sts,sti,stb,stu
   put "<emph rend="&quote&"italic"&quote&">" into emphi
   put "<emph rend="&quote&"bold"&quote&">" into emphb
   put "<emph rend="&quote&"underline"&quote&">" into emphu
   put "</emph>" into emphs
   if emphs is in pHText then
      put offsets(emphs,pHText) into sts
      put offsets(emphi,pHText) into sti
      put offsets(emphb,pHText) into stb
      put offsets(emphu,pHText) into stu
      if sti <> 0 then put comma&sti after sts
      if stb <> 0 then put comma&stb after sts
      if stu <> 0 then put comma&stu after sts
      sort items of sts ascending numeric
      repeat with i = (the number of items of sts)-1 down to 1 step -2
         if item i of sts is among the items of sti then
            get offset(">",pHText,item i of sts)
            put "</i>" into char (item i+1 of sts) to (item i+1 of sts)+6 of pHText
            put "<i>" into char item i of sts to (item i of sts+it) of pHText
         else if item i of sts is among the items of stb then
            get offset(">",pHText,item i of sts)
            put "</b>" into char (item i+1 of sts) to (item i+1 of sts)+6 of pHText
            put "<b>" into char item i of sts to (item i of sts+it) of pHText
         else if item i of sts is among the items of stu then
            get offset(">",pHText,item i of sts)
            put "</u>" into char (item i+1 of sts) to (item i+1 of sts)+6 of pHText
            put "<u>" into char item i of sts to (item i of sts+it) of pHText
         end if
      end repeat
      return pHText
   end if
   return pHText
end replaceEmphWithFace

function replaceHiWithFace pHText
   local emphi,emphb,emphu,emphs,sts,sti,stb,stu
   put "<hi rend="&quote&"italic"&quote&">" into emphi
   put "<hi rend="&quote&"bold"&quote&">" into emphb
   put "<hi rend="&quote&"underline"&quote&">" into emphu
   put "</hi>" into emphs
   if emphs is in pHText then
      put offsets(emphs,pHText) into sts
      put offsets(emphi,pHText) into sti
      put offsets(emphb,pHText) into stb
      put offsets(emphu,pHText) into stu
      if sti <> 0 then put comma&sti after sts
      if stb <> 0 then put comma&stb after sts
      if stu <> 0 then put comma&stu after sts
      sort items of sts ascending numeric
      repeat with i = (the number of items of sts)-1 down to 1 step -2
         if item i of sts is among the items of sti then
            get offset(">",pHText,item i of sts)
            put "</i>" into char (item i+1 of sts) to (item i+1 of sts)+4 of pHText
            put "<i>" into char item i of sts to (item i of sts+it) of pHText
         else if item i of sts is among the items of stb then
            get offset(">",pHText,item i of sts)
            put "</b>" into char (item i+1 of sts) to (item i+1 of sts)+4 of pHText
            put "<b>" into char item i of sts to (item i of sts+it) of pHText
         else if item i of sts is among the items of stu then
            get offset(">",pHText,item i of sts)
            put "</u>" into char (item i+1 of sts) to (item i+1 of sts)+4 of pHText
            put "<u>" into char item i of sts to (item i of sts+it) of pHText
         end if
      end repeat
      return pHText
   end if
   return pHText
end replaceHiWithFace

function removeTags2 @pText
   local tReg,ut
   put "<seg [^>]+>" into tReg
   put replaceText(pText,tReg,empty) into pText
   put "<metamark [^>]+>" into tReg
   put replaceText(pText,tReg,empty) into pText
   replace "</seg>" with empty in pText
   replace "</metamark>" with empty in pText
   get lineOffset("<ListTranspose>",pText)
   put lineOffset("</ListTranspose>",pText) into ut
   delete line it to ut of pText
   return pText
end removeTags2

function backColoringSpans pHText
   local tSpans,tSpan,tN1,tN2,tN3,tN4,tN5,tN6,tN7,tN8,tArray,tReg
   put "addSpan,delSpan" into tSpans
   repeat for each item tSpan in tSpans
      repeat while tN2 is not false
         put "(<"&tSpan&"[^>]+>)" into tReg
         put matchText(pHText,tReg,tN1) into tN2
         if tN2 is true then
            put matchChunk(pHText,tReg,tN3,tN4) into tN5
            put tN3,tN4 into tArray[tN1]
            put "@" into char tN3 of pHText
            put "(<anchor xml:id="&quote&char 1 to 3 of tSpan&"end[^>]+>)" into tReg
            put matchChunk(pHText,tReg,tN6,tN7) into tN8
            put "|"&tN6,tN7 after tArray[tN1]
            put "@" into char tN6 of pHText
            put empty into tN2
         else
            if tSpan <> item -1 of tSpans then put empty into tN2
            exit repeat
         end if
      end repeat
   end repeat
   return tArray
end backColoringSpans

on showTextWithoutDeletions pHText
   local tLeftAngles,tRightAngles
   put offsets("<strike>",pHText) into tLeftAngles
   put offsets("</strike>",pHText) into tRightAngles
   if tLeftAngles is not 0 then
      repeat with x = the number of items of tLeftAngles down to 1
         put empty into char (item x of tLeftAngles) to (item x of tRightAngles)+8 of pHText
      end repeat
      replace "  " with " " in pHText
      replace "&#9;"&space with "&#9;" in pHText
   end if
   replace "  " with " " in pHText
   replace "amp;#" with "#" in pHText
   replace "<sup shift="&quote&"-4"&quote&">" with "<sup>" in pHText
   replace "<sub shift="&quote&"4"&quote&">" with "<sub>" in pHText
   set the HTMLText of fld id 1029 of cd 1 of stack "STEP Transcription Module" to pHText
   if "<br>" is in pHText then set the cBrHTMLText of fld id 1029 of cd 1 of stack "STEP Transcription Module" to pHText else set the cBrHTMLText of fld id 1029 of cd 1 of stack "STEP Transcription Module" to empty
   renderingTabWidths 1029
end showTextWithoutDeletions

function offsets str,ctr
   local tmosList,tStartPoint,ofs
   put "" into tmosList
   put 0 into tStartPoint
   repeat
      put offset(str,ctr,tStartPoint) into ofs
      if ofs = 0 then exit repeat
      add ofs to tStartPoint
      put tStartPoint & comma after tmosList
   end repeat
   if char -1 of tmosList = comma then delete char -1 of tmosList
   if tmosList = "" then return 0
   return tmosList
end offsets

on identifyTagAndNumberAngles pText
   local tAllTags,tParensList,tNumberList,tCount,tPreItem,tPre2Items,tPre3Items,tPre4Items,tSign1,tSign2,tChars,tItemBorder
   if pText is empty or "<" is not in pText then exit identifyTagAndNumberAngles
   put "%•@€¶§∞ºª∂∑√≤«ÆÚ∏Ø" into tChars
   repeat with i = 1 to length(tChars)
      if char i of tChars is not in pText then 
         put char i of tChars into tItemBorder
         exit repeat
      end if
   end repeat
   replace "<" with tItemBorder&"<" in pText
   replace ">" with ">"&tItemBorder in pText
   set the itemDel to tItemBorder
   filter items of pText with regex pattern "<[^>]+>" into tAllTags
   set the cAllTagsList of fld id 1004 of cd 1 of stack "STEP Transcription Module" to tAllTags
   repeat for each item tItem in tAllTags
      if char 2 of tItem is "/" then put ")," after tParensList
      else if char 2 of tItem is "!" then put "(0)," after tParensList
      else if char -2 of tItem is "/" then put "()," after tParensList
      else put "(," after tParensList
   end repeat
   delete char -1 of tParensList
   put "-1" into tCount
   set the itemDel to comma
   repeat for each item tItem in tParensList
      if tItem is "(" then 
         if (tPreItem is ")" and tPre2Items is "()") then
            if ")" is not in tPre3Items then subtract 1 from tCount
            put tCount &comma after tNumberList
         else if tCount is "-1" or tPreItem is "(" or (tPreItem is "(0)" and tPre2Items is "(") then 
            add 1 to tCount
            put tCount&comma after tNumberList
         else if  tPreItem is "()" and tPre2Items is ")" and tPre3Items is "()" and tPre4Items is "(" then
            subtract 1 from tCount
            put tCount &comma after tNumberList
         else 
            put tCount&comma after tNumberList
         end if
      else if tItem is "()" then 
         if (tPreItem is "(") then add 1 to tCount
         put tCount&"|"&tCount &comma after tNumberList
      else if tItem is "(0)" then 
         put "no" &comma after tNumberList
      else if tItem is ")" then
         if tPreItem is "(" or ((tPreItem is "(0)" and tPre2Items is "(")) then 
            put comma after tNumberList
         else if tPreItem is ")" or (tPreItem is "(0)" and tPre2Items is ")") then
            subtract 1 from tCount
            put tCount&comma after tNumberList
         else if tPreItem is "(0)" and tPre2Items is "(0)" then
            put comma after tNumberList
         else if tPreItem is "()" then
            if tPre2Items is ")" or tPre2Items is "()" then 
               subtract 1 from tCount
               put tCount&comma after tNumberList
            else if tPre2Items is "(" then
               put comma after tNumberList
            end if
         end if
      end if
      put tPre3Items into tPre4Items
      put tPre2Items into tPre3Items
      put tPreItem into tPre2Items
      put tItem into tPreItem
   end repeat
   set the cAngleNumbers of fld id 1004 of cd 1 of stack "STEP Transcription Module" to tNumberList
end identifyTagAndNumberAngles

on indent tText
   local tSpaceUnit,tSpaceUnit0,tListOfSpacedAngles,tAngSp,tAng,tSp,tAddSpace,tAngleNumbers,tHText,tHText2
   local tOffN,tN,tOpeningAnglesList,tOpAngle,tCount,tN1,tN2,tN3,tN4,tN5,tSta,tSto,tReg
   put fld id 1004 of cd 1 into tText
   if tText is empty or "</" is not in tText then exit indent
   identifyTagAndNumberAngles tText
   put reverseItemList(the cAngleNumbers of fld id 1004 of cd 1 of stack "STEP Transcription Module") into tAngleNumbers
   put "" into tSpaceUnit0
   put "&#9;" into tSpaceUnit
   repeat with i = 1 to 12
      put empty into tAddSpace
      repeat i
         put tSpaceUnit after tAddSpace
      end repeat
      do "put tAddSpace into tSpaceUnit"&i
   end repeat
   set cursor to busy
   put the HTMLText of fld id 1004 of cd 1 into tHText
   put tHText into tHtext2
   put "(<font color="&quote&"#([\w\d]+)"&quote&">&gt;&lt;)" into tReg
   repeat until tN2 is false
      put matchText(tHText2,tReg,tN,tN1) into tN2
      if tN2 is true then put matchChunk(tHText2,tReg,tSta,tSto) into tN3
      if tN3 is true and char tSto+1 of tHText2 <> "/" then 
         put "<font color="&quote&"#"&tN1&quote&">&gt;</font><font color="&quote&"#"&tN1&quote&">&lt;" into char tSta to tSto of tHText
         put "<font color="&quote&"#"&tN1&quote&">&gt;</font><font color="&quote&"#"&tN1&quote&">&lt;" into char tSta to tSto of tHText2
      else if tN3 is true and char tSto+1 of tHText2 is "/" then put "<font color="&quote&"#"&tN1&quote&">&gt;%%%%" into char tSta to tSto of tHText2
      put empty into tN3
   end repeat
   put "(<font color="&quote&"#([\w\d]+)"&quote&">&lt;/([\w]+)&gt;&lt;/([\w]+)&gt;</font>)" into tReg
   repeat until tN4 is false
      put matchText(tHText,tReg,tN,tN1,tN2,tN3) into tN4
      if tN4 is true then put matchChunk(tHText,tReg,tSta,tSto) into tN5
      if tN4 is  true and tN5 is true then put "<font color="&quote&"#"&tN1&quote&">&lt;/"&tN2&"&gt;</font><font color="&quote&"#"&tN1&quote&">&lt;/"&tN3&"&gt;</font>" into char tSta to tSto of tHText
      put empty into tN5
   end repeat
   put "(<font color="&quote&"#([\w\d]+)"&quote&">&lt;/([\w]+)&gt;&lt;([\w]+)&gt;</font>)" into tReg
   put empty into tN4
   repeat until tN4 is false
      put matchText(tHText,tReg,tN,tN1,tN2,tN3) into tN4
      if tN4 is true then put matchChunk(tHText,tReg,tSta,tSto) into tN5
      if tN4 is  true and tN5 is true then put "<font color="&quote&"#"&tN1&quote&">&lt;/"&tN2&"&gt;</font><font color="&quote&"#"&tN1&quote&">&lt;"&tN3&"&gt;</font>" into char tSta to tSto of tHText
      put empty into tN5
   end repeat
   put reverseItemList(offsets("&lt;",tHText)) into tOpeningAnglesList
   put 0 into tCount
   repeat for each item tOpAngle in tAngleNumbers
      add 1 to tCount
      if tOpAngle is empty or tOpAngle is "no" then next repeat
      if tOpAngle is 0 then put "</p><p>" before char (item tCount of tOpeningAnglesList) of tHText
      if "|" is in tOpAngle or tOpAngle is an integer then 
         put item tCount of tOpeningAnglesList into tOffN
         put trueword 1 of tOpAngle into tN
         if char tOffN-2 to tOffN-1 of tHText is quote&">" then do "put "&quote&"</p><p>"&quote&"&tSpaceUnit"&tN&&"before char tOffN-22 of tHText"
         else do "put "&quote&"</p><p>"&quote&"&tSpaceUnit"&tN&&"before char tOffN of tHText"
      end if
   end repeat
   replace "<p></p><p>" with "<p>" in tHText
   replace "<p>     </p><p>" with "<p>" in tHText
   replace "<p> </p><p>" with "<p>" in tHText
   replace quote&"></p><p>&lt;" with quote&">&lt;"in tHText
   set the HTMLText of fld id 1126 of cd 1 of stack "STEP Transcription Module" to tHText
   set the cHTMLIndentText of fld id 1163 of cd 1 of stack "STEP Transcription Module" to tHText
end indent

function gatherAngleLocs @pText
   local tOpenTag,tRightTag,tAllAs,tRightAs
   put "<" into tOpenTag
   put "</" into tRightTag
   put offsets(tOpenTag,pText) into tAllAs
   put offsets(tRightTag,pText) into tRightAs
   repeat with x = the number of items of tAllAs down to 1
      if item x of tAllAs is among the items of tRightAs then delete item x of tAllAs
   end repeat
   return tAllAs&cr&tRightAs
end gatherAngleLocs

private function doublequoteur tTextToCurl
   local tPuncts,tMinus,tCount,tWord,tQL
   if quote is not in tTextToCurl then return tTextToCurl
   if char 1 of tTextToCurl is quote then put "“" into char 1 of tTextToCurl
   replace quote&space&quote with "” “" in tTextToCurl
   replace space&quote with " “" in tTextToCurl
   put "([¡¿" into tPuncts
   repeat for each char tChar in tPuncts
      replace tChar&quote with tChar&"“" in tTextToCurl
   end repeat
   put ")]!?.,:;±" into tPuncts
   repeat for each char tChar in tPuncts
      replace quote&tChar with "”"&tChar in tTextToCurl
   end repeat
   replace quote with "”" in tTextToCurl
   repeat for each word tWord in tTextToCurl
      put 1 into tMinus
      add 1 to tCount
      if char -1 of tWord is in ",±;:)]" then 
         delete char -1 of tWord
         put 2 into tMinus
      end if
      if char 1 of tWord is not in "“„" and char -tMinus of tWord is "”" and char 1 to -2 of tWord is a number then put quote into char -tMinus of word tCount of tTextToCurl
   end repeat
   replace "=”" with "="&quote in tTextToCurl
   replace "”>" with quote&">" in tTextToCurl
   replace "”/>" with quote&"/>" in tTextToCurl
   replace quote&space&"“" with quote&space&quote in tTextToCurl
   put offsets("” ",tTextToCurl) into tQL
   if tQL is not 0 then
      repeat with x = 1 to the number of items of tQL
         if "=" is in word (the number of words of char 1 to (item x of tQL) of tTextToCurl) of tTextToCurl then
            put quote into char (item x of tQL) of tTextToCurl
         end if
      end repeat
   end if
   put 0 into tCount
   put uncurlyingClosingDoubleQuoteWithinTags(tTextToCurl) into tTextToCurl
   return tTextToCurl
end doublequoteur

function createAngleOrder @pText
   local tLeftAndRightAngles,tLeftAs,tRightAs,pNests,pNests2,tSpaceList,tCount,tLA,tRA,tT1,tT2
   put gatherAngleLocs(pText) into tLeftAndRightAngles
   put line 1 of tLeftAndRightAngles into tLeftAs
   put line 2 of tLeftAndRightAngles into tRightAs
   if char -1 of tLeftAs is not comma then put comma after tLeftAs
   put tLeftAs & tRightAs into pNests
   sort items of pNests ascending numeric
   put empty into tSpaceList
   put 0 into tCount
   set the wholeMatches to true
   repeat for each item tItem in pNests
      put itemOffset(tItem,tLeftAs) into tLA
      put itemOffset(tItem,tRightAs) into tRA
      if tLA <> 0 then 
         put tItem&":"&tCount&comma after pNests2
         add 1 to tCount
      else if tRA <> 0 then
         put tItem&":"&tCount-1&comma after pNests2
         put tCount-1 into tCount
      end if
   end repeat
   return pNests2
end createAngleOrder

on mouseWithin
   get the mouseH
   if it > 19 and it < 126 then showtooltip(20)
   else if it > 125 and it < 222 then showtooltip(126)
   else if it > 221 and it < 306 then showtooltip(222)
   else if it > 305 and it < 413 then showtooltip(306)
   else if it > 412 and it < 542 then showtooltip(413)
   else if it > 543 and it < 717 then showtooltip(544)
end mouseWithin

on showtooltip pRect
   local tltp
   switch pRect
      case "20"
         put "Transcribe and tag the Author’s ALTERATIONS in the field below."&cr&\
         "Descriptive tags should be confined to Descriptive Encoding."&cr&\
         "The next four tabs show alternate views of the transcription and"&cr&\
         "cannot be typed into." into tltp
         break
      case "126"
         put "Updates and shows an indented view of the transcription. It cannot be typed into,"&cr&\
         "but clicking any tag highlights its range."&cr&\
         "SHIFT-click the “Indent View” tab to view the indented text without update." into tltp
         break
      case "222"
         put "Shows an indented view of the transcription with the double-end-point"&cr&\
         "XML anchoring method (see XML view of alteration descriptions for related anchors)."&cr&\
         "OPTION(ALT)-click the “Anchored” tab to get a non-indented view of the same." &cr&\
         "SHIFT-click the “Anchored” tab to view the anchored text without update." into tltp
         break
      case "306"
         put "Shows a rendered view of the transcription that makes it"&cr&\
         "easier to see especially what is deleted." into tltp
         break
      case "413"
         put "Shows a rendered view of the transcription without the deleted matter."&cr&\
         "This is the text intended for both descriptive encoding and critical editing." into tltp
         break
      case "544"
         put "Moves you to STEP Descriptor, where both the base text and"&cr&\
         "the rendered text are ready for descriptive encoding."&cr&\
         "SHIFT-click the “>> Descriptive Encoding” tab to access its fields without update." into tltp
         break
   end switch
   set the toolTip of btn id 1025 of cd 1 to tltp
end showtooltip

on insertAnchor2 pHText,pDoIndent
   local tTags,tAlterTags,tTagColorSet,tTagColorSet2,tAlter,tHexColor,tChars,tFirstDel,tSecondDel,tBegs,tEnds,ut,tCount,tLoc
   local tAnswer,tPrefAnchor,tAnchorTagBase,tAnchorTag,tValueColor,tAttributeColor,tGenColor,tAnchorColor,tCellColor,tC
   local tEndCellLoc,tEndCellLocs,tCellAlt,pHText3,pHText4,tLineN,ots,tHLine,tCount2,tBegs1,tEnds1,tResult
   local tXMLIDTag,tBtwTag,tReg1,tTarget,tBullet,tN1
   if pHText is empty or "&lt;/" is not in pHText then exit insertAnchor2
   set the cursor to watch
   put the cNamesOfOpeningClosingTags of fld id 1004 of cd 1 of stack "STEP Transcription Module" into tTags
   put "subst,add,del,mod,retrace,gap,damage" into tAlterTags
   put the cTagColorSet of cd 1 of stack "STEP Transcription Module" into tTagColorSet
   put tTagColorSet into tTagColorSet2
   replace cr with comma in tTagColorSet2
   put "€•¶§∞ºª∂∑√≤«ÆÚ∏Ø" into tChars
   put RGBtoHexaColor(the cAttributeColor of cd 1 of stack "STEP Transcription Module") into tAttributeColor
   put RGBtoHexaColor(the cValueColor of cd 1 of stack "STEP Transcription Module") into tValueColor
   put RGBtoHexaColor(the cGeneralColor of cd 1 of stack "STEP Transcription Module") into tGenColor
   put getHexaColorForTag("anchor",tTagColorSet,tTagColorSet2) into tAnchorColor
   put getHexaColorForTag("cell",tTagColorSet,tTagColorSet2) into tCellColor
   repeat with i = 1 to length(tChars)
      if char i of tChars is not in pHText then 
         put char i of tChars into tFirstDel
         delete char i of tChars
         exit repeat
      end if
   end repeat
   repeat with i = 1 to length(tChars)
      if char i of tChars is not in pHText then 
         put char i of tChars into tSecondDel
         exit repeat
      end if
   end repeat
   repeat for each item tAlter in tAlterTags
      if (tAlter is not among the items of tAlterTags) or ("&lt;"&tAlter is not in pHText) then next repeat
      put getHexaColorForTag(tAlter,tTagColorSet,tTagColorSet2) into tHexColor
      put empty into tN1
      put 0 into tC
      if tAlter <> "subst" then
         put pHText into pHText3
         replace "</p>" with "</p>"&cr in pHText3
         replace "</p>"&cr&cr&"<p>" with "</p>%"&cr&"<p>" in pHText3
         put reverseItemList(lineOffsets("<p>&#9;&#9;<font color="&quote&tHexColor&quote&">&lt;"&tAlter,pHText3)) into ots
         if ots = 0 then next repeat
         repeat for each item tLineN in ots
            add 1 to tC
            put line tLineN of pHText3 into tHLine
            if "<font color="&quote&tHexColor&quote&">&lt;/"&tAlter&"&gt;</font>" is in tHLine then
               put "</font>"&tFirstDel&"<font color="&quote&tHexColor&quote&">" before char offset("&gt;</font>",tHLine) of tHLine
               put tSecondDel before char (item 3 of offsets("<font color",tHLine)) of tHLine
               put tHLine into line tLineN of pHText3
            end if
         end repeat
         replace "</p>%"&cr&"<p>" with "</p>"&cr&cr&"<p>"in pHText3
         replace "</p>"&cr with "</p>" in pHText3
         put pHText3 into pHText
      end if
      replace "<p>&#9;&#9;<font color="&quote&tHexColor&quote&">&lt;"&tAlter&"&gt;</font>" with "<p>&#9;&#9;<font color="&quote&tHexColor&quote&">&lt;"&tAlter&tFirstDel&"&gt;</font>" in pHText
      replace "<p>&#9;&#9;<font color="&quote&tHexColor&quote&">&lt;"&tAlter&"</font> " with "<p>&#9;&#9;<font color="&quote&tHexColor&quote&">&lt;"&tAlter&tFirstDel&"</font> " in pHText
      replace "<p>&#9;&#9;<font color="&quote&tHexColor&quote&">&lt;"&tAlter&" </font>" with "<p>&#9;&#9;<font color="&quote&tHexColor&quote&">&lt;"&tAlter&tFirstDel&" </font>" in pHText
      replace "<p>&#9;&#9;<font color="&quote&tHexColor&quote&">&lt;/"&tAlter&"&gt;</font>" with "<p>&#9;&#9;"&tSecondDel&"<font color="&quote&tHexColor&quote&">&lt;/"&tAlter&"&gt;</font>" in pHText
      replace "<p>&#9;&#9;<font color="&quote&tHexColor&quote&">&lt;/"&tAlter&"&gt; </font>" with "<p>&#9;&#9;"&tSecondDel&"<font color="&quote&tHexColor&quote&">&lt;/"&tAlter&"&gt; </font>" in pHText
   end repeat
   if  "<p>&#9;&#9;&#9;<font color="&quote&tCellColor&quote&">&lt;/cell&gt;</font></p>" is in pHText then
      put reverseItemList(stringOffsets("<p>&#9;&#9;&#9;<font color="&quote&tCellColor&quote&">&lt;/cell&gt;</font></p>",pHText,,)) into tEndCellLocs
      put empty into tTarget
      put empty into tBullet
      repeat for each item tEndCellLoc in tEndCellLocs
         get offsetOfOnePrecedingString(char 1 to tEndCellLoc of pHText,"<p>&#9;&#9;&#9;<font color="&quote&tCellColor&quote&">&lt;cell",)
         put char it to tEndCellLoc of pHText into tCellAlt
         repeat for each item tAlter in tAlterTags
            if tAlter is not in tCellAlt then next repeat
            put getHexaColorForTag(tAlter,tTagColorSet,tTagColorSet2) into tHexColor
            put "<p>&#9;&#9;&#9;&#9;<font color="&quote&tHexColor&quote&">&lt;"&tAlter&"&gt;</font>([^<]*)<font color="&quote&tHexColor&quote&">&lt;/"&tAlter&"&gt;</font>" into tReg1
            put matchText(tCellAlt,tReg1,tBtwTag) into tN1
            if tN1 is true then
               put "<p>&#9;&#9;&#9;&#9;<font color="&quote&tHexColor&quote&">&lt;"&tAlter&"&gt;</font>"&tBtwTag&"<font color="&quote&tHexColor&quote&">&lt;/"&tAlter&"&gt;</font>" into tTarget
               put "<p>&#9;&#9;&#9;&#9;<font color="&quote&tHexColor&quote&">&lt;"&tAlter&"</font>"&tFirstDel&"<font color="&quote&tHexColor&quote&">&gt;</font>"&tBtwTag&tSecondDel&"<font color="&quote&tHexColor&quote&">&lt;/"&tAlter&"&gt;</font>" into tBullet
               replace tTarget with tBullet in tCellAlt
            else
               replace "<p>&#9;&#9;&#9;&#9;<font color="&quote&tHexColor&quote&">&lt;"&tAlter&"&gt;</font>" with "<p>&#9;&#9;&#9;&#9;<font color="&quote&tHexColor&quote&">&lt;"&tAlter&tFirstDel&"&gt;</font>" in tCellAlt
               replace "<p>&#9;&#9;&#9;&#9;<font color="&quote&tHexColor&quote&">&lt;"&tAlter&"</font> " with "<p>&#9;&#9;&#9;&#9;<font color="&quote&tHexColor&quote&">&lt;"&tAlter&tFirstDel&"</font> " in tCellAlt
               replace "<p>&#9;&#9;&#9;&#9;<font color="&quote&tHexColor&quote&">&lt;"&tAlter&" </font>" with "<p>&#9;&#9;&#9;&#9;<font color="&quote&tHexColor&quote&">&lt;"&tAlter&tFirstDel&" </font>" in tCellAlt
               replace "<p>&#9;&#9;&#9;&#9;<font color="&quote&tHexColor&quote&">&lt;/"&tAlter&"&gt;</font>" with "<p>&#9;&#9;&#9;&#9;"&tSecondDel&"<font color="&quote&tHexColor&quote&">&lt;/"&tAlter&"&gt;</font>" in tCellAlt
            end if
            put tCellAlt into char it to tEndCellLoc of pHText
         end repeat
      end repeat
   end if
   put offsets(tFirstDel,pHText) into tBegs1
   put offsets(tSecondDel,pHText) into tEnds1
   put reverseItemList(tBegs1) into tBegs
   put reverseItemList(tEnds1) into tEnds
   put (the number of items of tBegs)-(the number of items of tEnds) into ut
   if ut <> 0 then
      put findSeriesUnequaler(tBegs1,tEnds1) into tResult
      if ut > 0 then 
         if ut = 1 then put "There is one opening alteration tag discrepancy" into tAnswer
         else  put "There are " & ut & " opening alteration discrepancies (or just one or more with snowball effect)" into tAnswer
         answer tAnswer &&  " preventing fully accurate tag anchoring. They include alterations at character #"&line 1 of tResult&". The cause may be a recent yet unmapped tagging event. "&\
         "Go to Transcription view, click button “Check encoding” and repair all tagging errors; then click the “Color tags” button to reset the tag color map. "&\
         "If the problem is not solved, submit your archived text to the developer for software correction."
         --set the HTMLText of fld id 1163 of cd 1 of stack "STEP Transcription Module" to pHText
         --exit insertAnchor2
      end if
      if ut < 0 then 
         if ut = -1 then put "There is one closing alteration tag discrepancy" into tAnswer
         else  put "There are" & abs(ut) & " closing alteration discrepancies (or just one or more with snowball effect)" into tAnswer
         answer tAnswer && " preventing fully accurate tag anchoring. They include alterations at character #"&line 2 of tResult&". The cause may be a recent yet unmapped tagging event. "&\
         "Go to Transcription view, click button “Check encoding” and repair all tagging errors; then click the “Color tags” button to reset the tag color map. "&\
         "If the problem is not solved, submit your archived text to the developer for software correction."
         --set the HTMLText of fld id 1163 of cd 1 of stack "STEP Transcription Module" to pHText
         --exit insertAnchor2
      end if
   end if
   put (the number of items of tBegs)+1 into tCount
   put 0 into tCount2
   put customAnchor() into tPrefAnchor
   repeat for each item tTagXMLID in tBegs
      subtract 1 from tCount
      add 1 to tCount2
      put item tCount2 of tEnds into tAnchorTagBase
      put "<font color="&quote&tAnchorColor&quote&">&lt;anchor</font> <font color="&quote&tAttributeColor&quote&">xml:id</font>=<font color="&quote&tValueColor&quote&">"&quote&tPrefAnchor&tCount/*tAnchorTagBase*/&quote&"</font><font color="&quote&tAnchorColor&quote&">/&gt;</font>" into tAnchorTag
      put " <font color="&quote&tAttributeColor&quote&">xml:id=</font><font color="&quote&tValueColor&quote&">"&quote&tPrefAnchor&tCount/*tTagXMLID*/&quote&"</font>" into tXMLIDTag
      put tAnchorTag into char tAnchorTagBase of pHText
      put tXMLIDTag into char tTagXMLID of pHText
   end repeat
   set the HTMLText of fld id 1163 of cd 1 of stack "STEP Transcription Module" to pHText
end insertAnchor2

function findSeriesUnequaler tSeries1,tSeries2
   local tNum1,tNum2,tItem1,tItem2,tItem1Bis,tItem2Bis,tC1,tBadApples1,tBadApples2
   put the number of items of tSeries1 into tNum1
   put the number of items of tSeries2 into tNum2
   if tNum1 = tNum2 then return empty
   put 0 into tC1
   repeat with i = 1 to (the number of items of tSeries1)-1
      put item i of tSeries1 into tItem1
      put item i+1 of tSeries1 into tItem2
      add 1 to tC1
      put item tC1 of tSeries2 into tItem1Bis
      put item tC1+1 of tSeries2 into tItem2Bis
      set the itemDel to comma
      if tItem1 < tItem1Bis and tItem2 < tItem1Bis then
         put tItem1 & comma after tBadApples1
         put tC1-1 into tC1
      else if tItem1 > tItem1Bis and tItem1 < tItem2Bis then
         put tItem1Bis & comma after tBadApples2
         put tC1+1 into tC1
      end if
   end repeat
   if char -1 of tBadApples1 is comma then delete char -1 of tBadApples1
   if char -1 of tBadApples2 is comma then delete char -1 of tBadApples2
   return tBadApples1&cr&tBadApples2
end findSeriesUnequaler

function getHexaColorForTag pTag,pTagColorSet,pTagColorSet2
   local tNum,tTagLine
   set the wholematches to true
  put item itemOffset(pTag,pTagColorSet2) + 1 of pTagColorSet2 into tNum
  set the wholematches to false
  put line lineOffset(pTag&comma&tNum,pTagColorSet) of pTagColorSet into tTagLine
  return RGBtoHexaColor(item 2 to -1 of tTagLine) 
end getHexaColorForTag

function RGBtoHexaColor pRGB -- three comma-separated numbers, each <= 255
   if pRGB is empty then return empty
   if char 1 of pRGB is "#" then return pRGB
   if trueword 1 of item 1 of pRGB is not an integer then return RGBtoHexaColor(colorNameToRGB(pRGB))
   return format("#%02X%02X%02X",item 1 of pRGB,item 2 of pRGB,item 3 of pRGB)
end RGBtoHexaColor
   
function colorNameToRGB pColorName
   local tList
   put the cRGBtoColorNameList of btn id 1021 of cd 1 of stack "STEP Transcription Module" into tList
   replace cr with "|" in tList
   set the itemDel to "|"
   set the wholeMatches to true
   get itemOffset(pColorName,tList)
   if it is 0 then return empty
   return item it-1 of tList
end colorNameToRGB

on completeTranspositions @pText
   local tBefAfTranspo,tTranspoSource,tTV,tTr1,tTr2,uts
   if the hilite of btn "Example" of cd 1 is true then
      put the cExampleBeforeAfterTranspo of btn id 1020 of cd 1 into tBefAfTranspo
   else
      put the cBeforeAfterTranspo of btn id 1020 of cd 1 into tBefAfTranspo
   end if
   if tBefAfTranspo is empty then exit completeTranspositions
   put pText into tTranspoSource
   put compileTranspositions(tTranspoSource) into tTV
   repeat with x = 1 to (the number of lines of tTV)-1 step 2
      put (item 3 of line x of tTV)&quote&">"&item 4 to -1 of line x of tTV&"</seg>" into tTr1
      put (item 3 of line x+1 of tTV)&quote&">"&item 4 to -1 of line x+1 of tTV&"</seg>" into tTr2
      replace tTr1 with tTr2 in pText
      put offsets(tTr2,pText) into uts
      put tTr1 into char (item 2 of uts) to (item 2 of uts)+(length(tTr2))-1 of pText
   end repeat
   return removeTags2(pText)
end completeTranspositions

function compileTranspositions pTranspo
   local tP,tTRValues
   put findAllTranspositions(pTranspo) into tP
   set the itemDel to "|"
   put empty into tTRValues
   repeat with x = 1 to the number of lines of tP
      if item 2 of line x of tP is true then put item 1 of line x of tP&comma&item 3 of line x of tP&comma&item 4 of line x of tP&cr after tTRValues
   end repeat
   return tTRValues
end compileTranspositions

function findAllTranspositions @pTranspo
   local ots,yts,tTRValues,ot,yt,tString
   put offsets("<seg xml:id",pTranspo) into ots
   put offsets("</metamark>",pTranspo) into yts
   put empty into tTRValues
   if ots <> 0 then
      repeat with x = 1 to the number of items of ots
         put item x of ots into ot
         put (item x of yts)+10 into yt
         put char ot to yt of pTranspo into tString
         put ot&comma&yt&"|"&findTranspoValues(tString) into line (the number of lines of tTRValues)+1 of tTRValues
      end repeat
   end if
   return tTRValues
end findAllTranspositions

function findTranspoValues @pString
   local tM,tTrID,tTranspTxt,tZ
   put "<seg xml:id="&quote&"([\w\d\D]+)"&quote&">"&"([\w\d\D\s]+)"&"</seg>" into tM
   put matchText(pString,tM,tTrID,tTranspTxt) into tZ
   return tZ&"|"&tTrID&"|"&tTranspTxt
end findTranspoValues

on collectAndRenderTables @pText,pFldID
   local ots,uts,tSta,tSto,tLN1,tLN2,tTableString,tTableTemp,tPrelimTabWidths,tTS,tTabWidthsDistribution,tTableAlignment,tPrelimCellAligns
   if "<table" is not in pText then return empty
   put offsets("<table",pText) into ots
   put offsets("</table>",pText) into uts
   put 8 /*the textSize of fld id pFldID of cd 1*/ into tTS
   repeat with i = the number of items of ots down to 1
      put item i of ots into tSta
      put (item i of uts)+7 into tSto
      put char tSta to tSto of pText into tTableString
      put the number of lines of char 1 to tSta of pText into tLN1
      put tLN1 + the number of lines of tTableString - 1 into tLN2
      put extractCellAlignmentInfo(line 1 of tTableString) into tTableAlignment
      put renderTable(tTableString,tTableAlignment) into tTableTemp
      put line 1 to -3 of tTableTemp into line tLN1 to tLN2 of pText
      put line -2  of tTableTemp into tPrelimTabWidths
      put line -1  of tTableTemp into tPrelimCellAligns
      repeat with m = 1 to the number of items in tPrelimTabWidths
         put (item m of tPrelimTabWidths)*(tTS) into item m of tPrelimTabWidths
      end repeat
      set the itemDel to "|"
      repeat with n = 1 to (the number of lines of tTableTemp)-2
         put (line n of tTableTemp)&"|"& tPrelimTabWidths & "|" & item n of tPrelimCellAligns & cr after tTabWidthsDistribution
      end repeat
      set the itemDel to comma
   end repeat
   set the cTabWidths of fld id pFldID of cd 1 of stack "STEP Transcription Module" to tTabWidthsDistribution
end collectAndRenderTables

on renderingTabWidths pFldID
   local tTabWidths,tText,tFindLine,tLN,tTempField,ots,uts
   put the cTabWidths of fld id 1026 of cd 1 of stack "STEP Transcription Module" into tTabWidths
   if tTabWidths <> empty then
      filter tTabWidths without empty
      if pFldID is 1029 then 
         put fld id 1029 of cd 1 of stack "STEP Transcription Module" into tTempField
         set the tabStops of line 1 to -1 of fld id 1029 of cd 1 of stack "STEP Transcription Module" to empty
         if "<strike>" is in tTabWidths then
            put offsets("<strike",tTabWidths) into ots
            put offsets("</strike>",tTabWidths) into uts
            repeat with g = (the number of items of uts) down to 1
               delete char (item g of ots) to (item g of uts)+8 of tTabWidths
            end repeat
            replace "  " with space in tTabWidths
            replace tab&space with tab in tTabWidths
         end if
      end if
      put the HTMLText of fld id pFldID of cd 1 of stack "STEP Transcription Module" into tText
      set the itemDel to "|"
      repeat for each line tLine in tTabWidths
         replace tab with "&#9;" in tLine
         put item 1 of tLine into tFindLine
         put lineOffset(tFindLine,tText) into tLN
         if tLN <> 0 then 
            set the tabAlign of line tLN of fld id pFldID of cd 1 of stack "STEP Transcription Module" to item 3 of tLine
            set the tabWidths of line tLN of fld id pFldID of cd 1 of stack "STEP Transcription Module" to item 2 of tLine
         end if
      end repeat
   end if
end renderingTabWidths

function renderTable pString,pAlignment
   local tRowOpenings,tRowClosings,tCellLines,tNumberOfRows,tCellsPerRowNumber,tLA,tRA,tPA,tDiff,tTable,tCellLengths
   local tCellLengthList,tList,tAlign,tCellAligns,tCellALignList,tAlignRow,tData
   put lineOffsets("<row",pString) into tRowOpenings
   put lineOffsets("</row>",pString) into tRowClosings
   put the number of items of tRowOpenings into tNumberOfRows
   put ((item -1 of tRowClosings) - (item -1 of tRowOpenings) - 1) into tCellsPerRowNumber
   repeat with j = 1 to tNumberOfRows
      put extractRowAlignmentInfo(line (item j of tRowOpenings) of pString) into tAlignRow
      repeat with h = 1 to tCellsPerRowNumber
         put extractCoreDataFromTags(line (item j of tRowOpenings)+h of pString,"cell") into tData
         if tAlignRow is empty then put extractCellAlignmentInfo(line (item j of tRowOpenings)+h of pString) into tAlign else put tAlignRow into tAlign
         put line 1 of tData & tab after line j of tTable
         put line 2 of tData & cr after tCellLengths[h]
         put tAlign&comma after tCellAligns[j]
      end repeat
      if char -2 of line j of tTable <> tab then delete char -1 of line j of tTable
      if pAlignment is "center" then put "<p firstindent="&quote&"150"&quote&">" into tPA
      else if pAlignment is "left" or pAlignment is empty then put "<p>" into tPA
      else  if pAlignment is "right" then put "<p align="&quote&"right"&quote&">" into tPA
      put tPA before char 1 of line j of tTable
      put "</p>" after char -1 of line j of tTable
   end repeat
   repeat with k = 1 to tCellsPerRowNumber
      put tCellLengths[k] into tList
      sort lines of tList numeric descending
      if line 1 of tList is 0 then put 5 into line 1 of tList
      put line 1 of tList & comma after tCellLengthList
   end repeat
   repeat with k = 1 to tNumberOfRows
      put tCellAligns[k] into tList
      put "|" into char -1 of tList
      put tList after tCellALignList
   end repeat
   return tTable & cr & tCellLengthList & cr & tCellALignList
end renderTable

function extractCoreDataFromTags pTaggedData,pTag
   local tL,tR,tLength,tReg,pTaggedData2
   put offset(">",pTaggedData)+1 into tL
   put offset("</"&pTag,pTaggedData)-1 into tR
   if tL = tR-1 or tR = 0 then return empty
   put char tL to tR of pTaggedData into pTaggedData
   if "</" is in pTaggedData then
      put "<[/\w\d\s=\"&quote&"^>]+>" into tReg
      put replaceText(pTaggedData,tReg,empty) into pTaggedData2
   end if
   if pTaggedData2 <> empty then put length(pTaggedData2) into tLength else put length(pTaggedData) into tLength
   return pTaggedData & cr & tLength
end extractCoreDataFromTags

function extractDataFromTag pTaggedData,pTag
   local tL,tR,tLength
   put offset(">",pTaggedData)+1 into tL
   put offset("</"&pTag,pTaggedData)-1 into tR
   if tL = tR-1 or tR = 0 then return empty
   put (tR-tL)+1 into tLength
   return char tL to tR of pTaggedData & cr & tLength
end extractDataFromTag

function extractCellAlignmentInfo pString
   local tSta,tSto
   if " rend=" is not in pString then return "left"
   put offset("rend=",pString)+6 into tSta
   if char tSta of pString is quote then return "left"
   put tSta + offset(quote,pString,tSta) -1 into tSto
   return char tSta to tSto of pString   
end extractCellAlignmentInfo

function extractRowAlignmentInfo pString
   local tSta,tSto
   if " rend=" is not in pString then return empty
   put offset("rend=",pString)+6 into tSta
   if char tSta of pString is quote then return empty
   put tSta + offset(quote,pString,tSta) -1 into tSto
   return char tSta to tSto of pString   
end extractRowAlignmentInfo


##TOOLTIP:
##Moves you to STEP Descriptor, where both the base text and
##the rendered text are ready for descriptive encoding.
##SHIFT-click the “>> Descriptive Encoding” tab to access its fields without update.



#####################
#####################

## Script of button "Clear”, ID 1098 of CARD 1 of STACK STEP Transcription Module

on mouseUp
   put "1049,1067,1112,1174" into tFLDs
   repeat with i = 1 to 4
      if the visible of fld id (item i of tFLDs) of cd 1 then
         put empty into fld id (item i of tFLDs) of cd 1
         exit repeat
      end if
   end repeat
   if fld id 1049 of cd 1 is empty and fld id 1067 of cd 1 is empty then
      put empty into fld id 1112 of cd 1
      put empty into fld id 1174 of cd 1
   else if fld id 1049 of cd 1 is not empty and fld id 1067 of cd 1 is empty then
      put empty into fld id 1174 of cd 1
   end if
end mouseUp

##TOOLTIP:
##Empty the field below.



#####################
#####################

## Script of button "Clear All…”, ID 1077 of CARD 1 of STACK STEP Transcription Module

on mouseUp pNumClick,pProceed
   local tBtnList,tFldList
   if the hilite of btn "Example" of cd 1 is true then send "mouseUp" to btn id 1169 of cd 1
   uncolorBGLines
   if pProceed <> "Skip" then
      answer "Confirm you want to delete the content of ALL working fields. First archive them using the “Archive All STEP Fields...” command (File menu) if you need to preserve that content." with "Cancel" or "Clear all"
      if it is "Cancel" then exit mouseUp
   end if
   put "1004,1010,1014,1017,1026,1029,1041,1044,1049,1064,1067,1109,1112,1126,1139,1151,1154,1157,1163,1171,1174,1206,1207,1208,1209,1210,1211,1240,1921" into tFldList
   repeat for each item tItem in tFldList
      set the cSavedFieldHTMLContent of fld id tItem of cd 1 to empty
      put empty into fld id tItem of cd 1
   end repeat   
   put "1008,1034,1038,1060,1061" into tBtnList
   repeat for each item tItem in tBtnList
      set the label of btn id tItem of cd 1 to empty
   end repeat   
   set the cSyntacticalDescriptionHolder of fld id 1017 of cd 1 to empty
   set the cPasteTransit of fld id 1004 of cd 1 to empty
   set the cAltIndex of btn id 1020 of cd 1 to empty
   set the cAltIndex2 of btn id 1020 of cd 1 to empty
   set the cAltIndex3 of btn id 1020 of cd 1 to empty
   set the cAnchoredIndex of btn id 1020 of cd 1 to empty
   set the cTranscriptiveTag of fld id 1010 of cd 1 to empty
   set the cDescriptiveTag of fld id 1010 of cd 1 to empty
   set the cSelectionLocation of btn id 1012 of cd 1 to empty
   set the cSelectionLocation of btn id 1013 of cd 1 to empty
   set the cPopUpMenu of btn "XMLTagger1" of cd 1 to empty
   set the cCopyTag of btn "XMLTagger1" of cd 1 to empty
   set the cPopUpMenu of btn "XMLTagger2" of cd 1 to empty
   set the cCopyTag of btn "XMLTagger2" of cd 1 to empty
   set the cHTMLIndentText of fld id 1163 of cd 1 of stack "STEP Transcription Module" to empty
   set the cAngleNumbers of fld id 1004 of cd 1 of stack "STEP Transcription Module" to empty
   set  the cAnchoredNoteValues of fld id 1004 of cd 1 to empty
   set  the cPBValues of fld id 1004 of cd 1 to empty
   set the cSelfClosingTagsList of fld id 1004 of cd 1 to empty
   set  the cPragmaTranspoHolder of fld id 1017 of cd 1 to empty
   set  the cTranspositionsHolder of fld id 1017 of cd 1 to empty
   set  the cSpanList of fld id 1017 of cd 1 to empty
   set  the cAltIndex of btn id 1020 of cd 1 to empty
   set  the cAltIndex2 of btn id 1020 of cd 1 to empty
   set  the cAnchoredIndex of btn id 1020 of cd 1 to empty
   set  the cBeforeAfterTranspo of btn id 1020 of cd 1 to empty
   set  the cAllRunAltsLoc of fld id 1126 of cd 1 to empty
   set  the cAllIndentedAltsLoc of fld id 1126 of cd 1 to empty
   set  the cAllIndentedAltsLocWithoutSC of fld id 1126 of cd 1 to empty
   set  the cFirstSign of fld id 1126 of cd 1 to empty
   set  the cSecondSign of fld id 1126 of cd 1 to empty
   set the cPageBreakFormat of fld id 1004 of stack "STEP Transcription Module" to empty
   set the cPageNumberDisplay of stack "Customize Pagebreak Self-Closing Tag" to empty
   put "1026,1029,1041,1151" into tFldList
   repeat for each item tItem in tFldList
      set the cBrHTMLText of fld id tItem of cd 1 to empty
      set the cSavedBrHTMLText of fld id tItem of cd 1 to empty
   end repeat
   deleteUndoCustomKeys
end mouseUp


##TOOLTIP:
##Delete the content of all fields
##AND their internal saves.



#####################
#####################

## Script of field "Edited Syntactical Alts Descriptions" of card "card id 1002" of stack "/Users/adetienn/Documents/STEP Externals/STEP-LI 7.1.4/STEP Transcription Module.livecode" ID 1064 of CARD 1 of STACK STEP Transcription Module

on selectionChanged
   local tLineNumber
   if the optionKey is down then
      put (the lineIndex of the selectedChunk) into tLineNumber
      colorBGLine tLineNumber,1064
      send "selectionChanged tLineNumber" to fld id 1017 of cd 1
   end if
end selectionChanged

##TOOLTIP:
##OPTION (ALT)-click any line to select its counterpart in the run-on or indented transcription.
##This field shows the XML because, should you delete entries, those that remain must retain
##their correct anchors.



#####################
#####################

## Script of button "Customize Tags/Menus" of card "card id 1002" of stack "/Users/adetienn/Documents/STEP Externals/STEP-LI 7.1.4/STEP Transcription Module.livecode" ID 1108 of CARD 1 of STACK STEP Transcription Module

on menuPick pItemName
   switch pItemName
      case "Customize TEI Tags..."
         modeless stack "TEI Tag Customization"
         break
      case "Customize Tag Colors..."
         modeless stack "TEI Tag Custom Colors"
         break
      case "Go to Table of TEI Elements"
         launch URL "http://www.tei-c.org/Vault/P5/1.0.1/doc/tei-p5-doc/html/REF-ELEMENTS.html"
         break
      case "Look Up Specific TEI Tag..."
         lookUpTag
         break
      case "Customize Pull-Down Tag Menus..."
         modeless stack "Customize Pull-Down Tag Menus"
         break
      case "Customize Pop-Up Tag Menus..."
         modeless stack "Customize Pop-Up Tag Menus"
         break
      case "Add or Manage Unicode Characters..."
         modeless stack "Add Special Character"
         break
      case "Edit Unicode Characters Menu..."
         modeless stack "Edit Unicode Characters Menu"
         break
      case "Add or Manage Special-Font Characters..."
         modeless stack "Special Font Characters"
         break
      case "Customize Tag Anchors..."
         modeless stack "Customize Tag Anchors"
         break   
      case "Customize Span Anchors..."
         answer "This utility does not exist yet." as sheet
         --modeless stack "Customize Span Anchors"
         break   
      case "Customize Note Anchors..."
         answer "This utility does not exist yet." as sheet
         --modeless stack "Customize Note Anchors"
         break   
      case "Assign Shortcuts to Function Keys..."
         modeless stack "Assign Tags to Function Keys"
         break   
      case "Customize Keyboard Shortcuts..."
         modeless stack "Customize Keyboard Shortcuts"
         break
      case "Shortcut Palette"
         palette stack "Shortcut Palette"
         break
   end switch
end menuPick


on lookUpTag
   local tTag
   ask "Type the TEI tag you’d like to look up online (look-up is case-sensitive: lowercase and uppercase letters need to be correct)." as sheet
   if it is empty or the result is "Cancel" then exit to top
   put it into tTag
   replace cr with empty in tTag
   put word 1 of tTag into tTag
   put toLower(char 1 of tTag) into char 1 of tTag
   launch URL "http://www.tei-c.org/release/doc/tei-p5-doc/en/html/ref-"&tTag&".html"
end lookUpTag


##TOOLTIP:
##Access external dialogs to customize TEI tags, the content
##of TEI tag menus, anchor syntax, and keyboard shortcuts.



#####################
#####################

## Script of scrollbar "ScrollbarForDescriptionFields" of card "card id 1002" of stack "/Users/adetienn/Documents/STEP Externals/STEP-LI 7.1.4/STEP Transcription Module.livecode" ID 1092 of CARD 1 of STACK STEP Transcription Module

on resizeFieldText pSize,@pText,pIDNum,pHF
   local tTemp1
   if pText is not empty then
      if pSize < 7 then put 8 into pSize
      put replaceText(pText,"size="&quote&"[\d]+","size="&quote&pSize) into pText
      put fld id 1014 of cd 1 into tTemp1
      put pText into fld id 1014 of cd 1
      set the HTMLText of fld id pIDNum of cd 1 to fld id 1014 of cd 1
      put tTemp1 into fld id 1014 of cd 1
   end if
   set the textHeight of fld id pIDNum of cd 1 to pHF
end resizeFieldText

on scrollbarLineDec
   local tIDNum,tHF,tText,ut,tSize
   lock screen
   put whichField() into tIDNum
   put the textHeight of fld id tIDNum of cd 1 into tHF
   put the HTMLText of fld id tIDNum of cd 1 into tText
   put offset("size=",tText) into ut
   if ut is not 0 then
      put char ut+6 to ut+7 of tText into tSize
      if char 2 of tSize is quote then delete char 2 of tSize
      add 1 to tSize
      resizeFieldText tSize,tText,tIDNum,tHF
   else
      put (the textSize of fld id tIDNum of cd 1) + 1 into tSize
      resizeFieldText2 tSize,tIDNum,tHF
   end if
end scrollbarLineDec

on scrollbarLineInc
   local tIDNum,tHF,tText,tSize,ut
   lock screen
   put whichField() into tIDNum
   put the textHeight of fld id tIDNum of cd 1 into tHF
   put the HTMLText of fld id tIDNum of cd 1 into tText
   put offset("size=",tText) into ut
   if ut is not 0 then
      put char ut+6 to ut+7 of tText into tSize
      if char 2 of tSize is quote then delete char 2 of tSize
      put (tSize - 1) into tSize
      resizeFieldText tSize,tText,tIDNum,tHF
   else
      put (the textSize of fld id tIDNum of cd 1) - 1 into tSize
      resizeFieldText2 tSize,tIDNum,tHF
   end if
end scrollbarLineInc

on resizeFieldText2 pSize,pIDNum,pHF
   set the textSize of fld id pIDNum of cd 1 to pSize
   set the textHeight of fld id pIDNum of cd 1 to pHF
end resizeFieldText2

function whichField
   local tListF
   put "1041,1044,1139,1151,1154,1157" into tListF
   repeat with x = 1 to (the number of items of tListF)
      if the visible of fld id (item x of tListF) of cd 1 then return item x of tListF
   end repeat
end whichField

##TOOLTIP:
##Change the text size of the field below.



#####################
#####################

## Script of button "XHTML" of card "card id 1002" of stack "/Users/adetienn/Documents/STEP Externals/STEP-LI 7.1.4/STEP Transcription Module.livecode" ID 1162 of CARD 1 of STACK STEP Transcription Module

on mouseUp
   get the label of btn id 1062 of cd 1
   switch it
      case "HTML of Script Transcription"
         put 1004 into tFldID
         break
      case "HTML of Indented View"
         put 1126 into tFldID
         break
      case "HTML of TEI Rendition"
         put 1026 into tFldID
         break
      case "HTML of Description Base Text"
         put 1029 into tFldID
         break
      case "HTML of Anchored Transcription"
         put 1163 into tFldID
         break
      case "HTML of TEI Base Description"
         put 1041 into tFldID
         break
      case "HTML of Indented Description View"
         put 1139 into tFldID
         break
      case "HTML of Tagless Base Description"
         put 1044 into tFldID
         break
      case "HTML of TEI Rendition Description"
         put 1151 into tFldID
         break
      case "HTML of Indented Rendition View"
         put 1154 into tFldID
         break
      case "HTML of Tagless Rendition Text"
         put 1157 into tFldID
         break
      case "HTML of Automatic Syntactical Descriptions"
         put 1017 into tFldID
         break
      case "HTML of Edited Syntactical Descriptions"
         put 1064 into tFldID
         break
      case "HTML of XML Syntactical Descriptions"
         put 1109 into tFldID
         break
      case "HTML of Automatic Pragmatic Descriptions"
         put 1049 into tFldID
         break
      case "HTML of Edited Pragmatic Descriptions"
         put 1067 into tFldID
         break
      case "HTML of XML Edited Pragmatic Descriptions"
         put 1112 into tFldID
         break
   end switch
   set the text of fld id 1014 of cd 1 to ConvertStyledTextToXHTML(the styledText of fld id tFldID of cd 1)
   set the cCurrentFieldID of fld id 1014 of cd 1 to tFldID
   set the cHTMLStatus of fld id 1014 of cd 1 to false
   set the cXHTMLStatus of fld id 1014 of cd 1 to true
end mouseUp


##TOOLTIP:
##View the XHTML version of the same selected text.



#####################
#####################

## Script of button "Example”, ID 1169 of CARD 1 of STACK STEP Transcription Module

on mouseDoubleUp
   mouseUp
end mouseDoubleUp

on mouseUp
   local tFldList
   set the hilite of me to not the hilite of me
   uncolorBGLines
   if the hilite of me is false then 
      send "mouseUp" to btn "Restore" of cd 1
   else
      lock screen
      
      put "1004,1017,1026,1029,1041,1044,1049,1064,1067,1109,1112,1126,1139,1151,1154,1157,1163,1171,1174,1206,1207,1208,1209,1210,1211,1240,1921" into tFldList
      repeat for each item tItem in tFldList
         if fld id tItem of cd 1 is empty then next repeat
         set cursor to busy
         set the cSavedFieldHTMLContent of fld id tItem of cd 1 to the HTMLText of fld id tItem of cd 1
      end repeat   
      put "1026,1029,1041,1151" into tFldList
      repeat for each item tItem in tFldList
         set the cSavedBrHTMLText of fld id tItem of cd 1 to the cBrHTMLText of fld id tItem of cd 1
      end repeat   
      
      --send "mouseUp 1,2" to btn id 1073 of cd 1
      put "1004,1014,1017,1026,1029,1041,1044,1049,1064,1067,1109,1112,1126,1139,1151,1154,1157,1163,1171,1174,1206,1207,1208,1209,1210,1211,1240" into tFldList
      repeat for each item tItem in tFldList
         set cursor to busy
         set the HTMLText of fld id tItem of cd 1 to the cExample of fld id tItem of cd 1
      end repeat   
      put "1026,1029,1041,1151" into tFldList
      repeat for each item tItem in tFldList
         set cursor to busy
         set the cBrHTMLText of fld id tItem of cd 1 to empty
      end repeat   
   end if
   if the visible of btn id 1025 of cd 1 then
      set cursor to watch
      showTranscriptive
      set the menuHistory of btn id 1025 of cd 1 to 1
      set the menuHistory of btn id 1063 of cd 1 to 1
      set the menuHistory of btn id 1070 of cd 1 to 1
      set the label of btn id 1062 of cd 1 to "HTML of Script Transcription"
   else if the visible of btn id 1040 of cd 1 then
      set cursor to watch
      showDescriptive
      --send "menuPick" && (line 1 of btn id 1040 of cd 1) to btn id 1040 of cd 1
      set the menuHistory of btn id 1040 of cd 1 to 1
   end if
   compilePageBreaks 1004
end mouseUp      

on showTranscriptive
   lock screen
   local tFldList
   hideDescriptiveTools
   put "1026,1029,1126,1041,1044,1139,1151,1154,1157" into tFldList
   repeat for each item tFldId in tFldLIst
      hide fld id tFldID of cd 1
   end repeat
   show fld id 1004 of cd 1
end showTranscriptive

on showDescriptive
   lock screen
   local tFldList
   showDescriptiveTools
   put "1004,1026,1029,1126,1044,1139,1151,1154,1157" into tFldList
   repeat for each item tFldId in tFldLIst
      hide fld id tFldID of cd 1
   end repeat
   show fld id 1041 of cd 1
end showDescriptive

##TOOLTIP:
##Click to fill all fields with a comprehensive example.
##Click again to restore fields to their previous state.



#####################
#####################

## Script of button "Hide tags" of card "card id 1002" of stack "/Users/adetienn/Documents/STEP Externals/STEP-LI 7.1.4/STEP Transcription Module.livecode" ID 1224 of CARD 1 of STACK STEP Transcription Module

on mouseUp
   local tIDList,ut
   put "1004,1041,1151" into tIDList
   put 0 into ut
   repeat for each item tID in tIDList
      if the visible of fld id tID of cd 1 of stack "STEP Transcription Module" and the cHiddenTags of fld id tID of cd 1 of stack "STEP Transcription Module" is false then 
         hideAllTags2 tID
         put 1 into ut
      end if
   end repeat
   if the mode of stack "Tagging Area Palette" > 0 and ut is 1 then set the enabled of btn id 1019 of cd 1 of stack "Tagging Area Palette" to false
   if ut is 1 then set the enabled of btn id 1224 of cd 1 of stack "STEP Transcription Module" to false
end mouseUp

on hideAllTags pID
   local tMill
   put the milliseconds into tMill
   local tCustomProp,tText,tLAs,tRAs
   lock screen
   put "cTempColoredText"&pID into tCustomProp
   set the tCustomProp of me to the HTMLText of fld id pID of cd 1 of stack "STEP Transcription Module"
   put fld id pID of cd 1 of stack "STEP Transcription Module" into tText
   put offsets("<",tText) into tLAs
   put offsets(">",tText) into tRAs
   --bgcolor: #FDFBF5
   repeat with x = 1 to the number of items of tLAs
      set the textColor of char (item x of tLAs) to (item x of tRAs) of fld id pID of cd 1 of stack "STEP Transcription Module" to (the backgroundColor of fld id pID of cd 1 of stack "STEP Transcription Module")
   end repeat
   set the cHiddenTags of fld id pID of cd 1 of stack "STEP Transcription Module" to true
   put the milliseconds-tMill into msg
end hideAllTags

on hideAllTags2 pID
   local tMill
   put the milliseconds into tMill
   local tCustomProp,tText,tRegex,tHText,tHText2,tN1,tN2,tN3
   lock screen
   put "cTempColoredText"&pID into tCustomProp
   put the HTMLText of fld id pID of cd 1 of stack "STEP Transcription Module" into tHText
   set the tCustomProp of me to tHText
   put "color="&quote&"(#[^"&quote&"]+)"&quote into tRegex
   put tHText into tHText2
   repeat until tN3 is false
      put matchChunk(tHText2,tRegex,tN1,tN2) into tN3
      if tN3 is true then
         put "#FDFBF5" into char tN1 to tN2 of tHText
         put "@" into char tN1 of tHText2
      end if
   end repeat
   set the HTMLText of fld id pID to tHText
   set the cHiddenTags of fld id pID of cd 1 of stack "STEP Transcription Module" to true
   put the milliseconds-tMill into msg
end hideAllTags2

##TOOLTIP:
##This applies only to the editable transcription or description fields.



#####################
#####################

## Script of button "AttributeValue" of card "card id 1002" of stack "/Users/adetienn/Documents/STEP Externals/STEP-LI 7.1.4/STEP Transcription Module.livecode" ID 1385 of CARD 1 of STACK STEP Transcription Module

on mouseUp
   set the cTagTip2 of stack "STEP Transcription Module" to the cTagTip of stack "STEP Transcription Module"
   set the hilite of me to not the hilite of me
   if the mode of stack "Tagging Area Palette" > 0 then set the hilite of btn id 1021 of cd 1 of stack "Tagging Area Palette" to the hilite of me
   if the hilite of me is false then
      if the mode of stack "Insert Attributes and Values" > 0 then
         if the cTagTip2 of stack "STEP Transcription Module" is "on" then
            set the cTagTip of stack "STEP Transcription Module" to "on"
            put "Hide Tag Tips" into line 11 of btn "Help" of group "STEP Menu 1" of stack "STEP Transcription Module"
            if there is a stack "STEP Tools" then put "Hide Tag Tips" into line 11 of btn "Help" of group "Launcher Menu" of stack "STEP Tools"
         end if
         close stack "Insert Attributes and Values"
      end if
   end if
   if the hilite of me is true then
      set the cTagTip of stack "STEP Transcription Module" to "off"
      set the cTagTip2 of stack "STEP Transcription Module" to "off"
      put "Show Tag Tips" into line 11 of btn "Help" of group "STEP Menu 1" of stack "STEP Transcription Module"
      if there is a stack "STEP Tools" then put "Show Tag Tips" into line 11 of btn "Help" of group "Launcher Menu" of stack "STEP Tools"
   end if
end mouseUp

##TOOLTIP:
##Click to turn on or off access to the "Insert Attributes and Values" palette.
##When the button is turned on, move the cursor over any opening <tag> in
##the left field; select or type attributes and values in the palette’s menu
##buttons. Click "Insert" to insert them within the indicated tag.



#####################
#####################

## Script of button "tag iBeam" of card "card id 1002" of stack "/Users/adetienn/Documents/STEP Externals/STEP-LI 7.1.4/STEP Transcription Module.livecode" ID 1373 of CARD 1 of STACK STEP Transcription Module

on mouseUp
   if the mode of stack "TEI Encoding Cursor Palette" > 0 then 
      close stack "TEI Encoding Cursor Palette"
      set the hilited of me to false
      set the visited of me to false
      if the mode of stack "Tagging Area Palette" > 0 then
         set the hilited of btn id 1020 of cd 1 of stack "Tagging Area Palette" to false
         set the visited of btn id 1020 of cd 1 of stack "Tagging Area Palette" to false
      end if
   else
      palette stack "TEI Encoding Cursor Palette"
   end if
end mouseUp

##TOOLTIP:
##Click to display or close the TEI Encoding Cursor Palette. 
##This button is colored when the cursor is loaded with a tag.



#####################
#####################

## Script of button " " of card "card id 1002" of stack "/Users/adetienn/Documents/STEP Externals/STEP-LI 7.1.4/STEP Transcription Module.livecode" ID 1062 of CARD 1 of STACK STEP Transcription Module

on menuPick pItemName
   if "Export" is not in pItemName then set the label of me to pItemName
   switch pItemName
      case "HTML of Script Transcription"
         sendMenuPick 1025,1
         put 1004 into tFldID
         break
      case "HTML of Indented View"
         sendMenuPick 1025,2
         put 1126 into tFldID
         break
      case "HTML of Anchored Transcription"
         sendMenuPick 1025,3
         put "1163" into tFldID
         break
      case "HTML of TEI Rendition"
         sendMenuPick 1025,4
         put 1026 into tFldID
         break
      case "HTML of Description Base Text"
         sendMenuPick 1025,5
         put 1029 into tFldID
         break
      case "HTML of TEI Base Description"
         sendMenuPick 1040,1
         put 1041 into tFldID
         break
      case "HTML of Indented Description View"
         sendMenuPick 1040,2
         put 1139 into tFldID
         break
      case "HTML of Tagless Base Description"
         sendMenuPick 1040,3
         put 1044 into tFldID
         break
      case "HTML of TEI Rendition Description"
         sendMenuPick 1040,4
         put 1151 into tFldID
         break
      case "HTML of Indented Rendition View"
         sendMenuPick 1040,5
         put 1154 into tFldID
         break
      case "HTML of Tagless Rendition Text"
         sendMenuPick 1040,6
         put 1157 into tFldID
         break
      case "HTML of Automatic Syntactical Descriptions"
         sendMenuPick 1063,1
         put 1017 into tFldID
         break
      case "HTML of XML Syntactical Descriptions"
         sendMenuPick 1063,2
         put 1109 into tFldID
         break
      case "HTML of Edited Syntactical Descriptions"
         sendMenuPick 1063,4
         put 1064 into tFldID
         break
      case "HTML of XML Edited Syntactical Descriptions"
         sendMenuPick 1063,5
         put 1171 into tFldID
         break
      case "HTML of Automatic Pragmatic Descriptions"
         sendMenuPick 1070,1
         put 1049 into tFldID
         break
      case "HTML of XML Pragmatic Descriptions"
         sendMenuPick 1070,2
         put 1112 into tFldID
         break
      case "HTML of Edited Pragmatic Descriptions"
         sendMenuPick 1070,4
         put 1067 into tFldID
         break
      case "HTML of XML Edited Pragmatic Descriptions"
         sendMenuPick 1070,5
         put 1174 into tFldID
         break
      case "Export HTML to an HTML file..."
         set the label of btn id 1062 of cd 1 to the cLabelTemp of btn id 1062 of cd 1
         if the cHTMLStatus of fld id 1014 of cd 1 is false then
            set the text of fld id 1014 of cd 1 to the HTMLText of fld id (the cCurrentFieldID of fld id 1014 of cd 1) of cd 1
         end if
         exporting "HTML"
         exit menuPick
         break
      case "Export XHTML to an HTML file..."
         set the label of btn id 1062 of cd 1 to the cLabelTemp of btn id 1062 of cd 1
         if the cXHTMLStatus of fld id 1014 of cd 1 is false then
            set the text of fld id 1014 of cd 1 to ConvertStyledTextToXHTML(the styledText of fld id (the cCurrentFieldID of fld id 1014 of cd 1) of cd 1)
         end if
         exporting "XHTML"
         exit menuPick
         break
   end switch
   put the HTMLText of fld id tFldID of cd 1 into tHTML
   replace "amp;#" with "#" in tHTML
   set the text of fld id 1014 of cd 1 to tHTML
   set the cCurrentFieldID of fld id 1014 of cd 1 to tFldID
   set the cHTMLStatus of fld id 1014 of cd 1 to true
   set the cXHTMLStatus of fld id 1014 of cd 1 to false
   set the cLabelTemp of btn id 1062 of cd 1 to pItemName
end menuPick

function gatheringContents
   return the text of fld id 1014 of cd 1
end gatheringContents

on exportData tContents,pFileType
   ask file "Type the name of file that contains the current "&pFileType&" view." with type "TEXT|HTM,HTML" titled "Type the name of the file."
   if (it is empty) or (the result is "Cancel") then exit to top
   if not(it ends with ".html") then put ".html" after it
   if pFileType is "XHTML" then put "<!DOCTYPE html PUBLIC "&quote&"-//W3C//DTD XHTML 1.0 Strict//EN"&quote&cr\ 
   &quote&"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"&quote&">" & cr before tContents
   open file it for write
   write tContents to file it
   close file it
   unlock screen
   answer "The current "&pFileType&" view was exported successfully to file “" & it & ".”"
end exportData

on exporting pHorXH
   answer "Confirm you want to export the current "&pHorXH&" view to an "&pHorXH&" file." with "Cancel" or "Export"
   if it is "Cancel" then exit to top
   set the cursor to watch
   lock screen
   put gatheringContents() into tContents
   if tContents is not empty then 
      exportData tContents,pHorXH
      unlock screen
   else
      answer "The field containing the current "&pHorXH&" view is empty; there is nothing to export."
   end if
end exporting

on mouseEnter
   if the label of btn id 1062 of cd 1 begins with "HTML of " then set the cLabelTemp of btn id 1062 of cd 1 to the label of btn id 1062 of cd 1
end mouseEnter

##TOOLTIP:
##View the HTML of any text field. Click the XHTML button at
##right to switch to XHTML. Export either view to an HTML file.



#####################
#####################

## Script of button "Tagging Tools”, ID 1223 of CARD 1 of STACK STEP Transcription Module

on menuPick pItemName
   switch pItemName
      case "Nested Alterations Tagging Tool"
         modeless stack "Stacked Alteration Tagger"
         break
      case "Transposition Tagging Tool"
         modeless stack "Transposition Tagging Tool"
         break
      case "Alternation Tagging Tool"
         answer "This utility does not exist yet." as sheet
         --modeless stack "Alternation Tagging Tool"
         break
      case "TEI Encoding Cursor Palette"
         palette stack "TEI Encoding Cursor Palette"
         break
   end switch
end menuPick


##TOOLTIP:
##Select a tool that automatize complex tagging tasks.



#####################
#####################

## Script of field "XML Pragmatic Descriptions”, ID 1112 of CARD 1 of STACK STEP Transcription Module

on selectionChanged
   local tLineNumber
   put (the lineIndex of the selectedChunk) into tLineNumber
   colorBGLine tLineNumber,1112
   if tLineNumber is 1 or tLineNumber is (the number of lines of fld id 1112 of cd 1) then exit selectionChanged
   send "selectionChanged"&&(tLineNumber-1) to fld id 1049 of cd 1
end selectionChanged


##TOOLTIP:
##Click any line to select its counterpart in the run-on or indented transcription.



#####################
#####################

## Script of field "XML Syntactical Alts”, ID 1109 of CARD 1 of STACK STEP Transcription Module

on selectionChanged
   local tLineNumber
   put (the lineIndex of the selectedChunk)-1 into tLineNumber
   colorBGLine tLineNumber,1109
   if tLineNumber is 0 or tLineNumber is (the number of lines of fld id 1109 of cd 1)-1 then exit selectionChanged
   send "selectionChanged tLineNumber" to fld id 1017 of cd 1
end selectionChanged
   
function spaceMetadataTags pmeta
   local tSpaceUnit0,tSpaceUnit,tAddSpace,tListOfSpacedAngles,tANgSp,tAng,tSp
    if "/>" is in pmeta then exit spaceMetadataTags
   put "" into tSpaceUnit0
   put space&space&space&space into tSpaceUnit
   repeat with i = 1 to 10
      put empty into tAddSpace
      repeat i
         put tSpaceUnit after tAddSpace
      end repeat
      do "put tAddSpace into tSpaceUnit"&i
   end repeat
   put createAngleOrder(pmeta) into tListOfSpacedAngles
   repeat with j = (the number of items of tListOfSpacedAngles) down to 1
      put item j of tListOfSpacedAngles into tAngSp
      set the itemDel to ":"
      put item 1 of tAngSp into tAng
      put (item 2 of tAngSp)+1 into tSp
      set the itemDel to comma
      do "put cr & tSpaceUnit"&tSp&&"before char tAng of pmeta"
   end repeat
   delete char 1 of pmeta
   return pmeta
end spaceMetadataTags

function createAngleOrder @pmeta
   local tLeftAndRightAngles,tLeftAs,tRightAs,pNests,tLA,tRA,tSpaceList,tCount
   put gatherAngleLocs(pmeta) into tLeftAndRightAngles
   put line 1 of tLeftAndRightAngles into tLeftAs
   put line 2 of tLeftAndRightAngles into tRightAs
   if char -1 of tLeftAs is not comma then put comma after tLeftAs
   put tLeftAs & tRightAs into pNests
   sort items of pNests ascending numeric
   put empty into tSpaceList
   put 0 into tCount
   repeat with i = 1 to the number of items of pNests
      set the wholeMatches to true
      put itemOffset(item i of pNests,tLeftAs) into tLA
      set the wholeMatches to true
      put itemOffset(item i of pNests,tRightAs) into tRA
      if tLA <> 0 then 
         put ":"&tCount after item i of pNests
         add 1 to tCount
      else if tRA <> 0 then
         put ":"&tCount-1 after item i of pNests
         put tCount-1 into tCount
      end if
   end repeat
   return pNests
end createAngleOrder

function gatherAngleLocs @pmeta
   local tOpenTag,tRightTag,tAllAs,tRightAs
    put "<" into tOpenTag
   put "</" into tRightTag
   put offsets(tOpenTag,pmeta) into tAllAs
   put offsets(tRightTag,pmeta) into tRightAs
   repeat with x = the number of items of tAllAs down to 1
      if item x of tAllAs is among the items of tRightAs then delete item x of tAllAs
   end repeat
   return tAllAs&cr&tRightAs
end gatherAngleLocs

##TOOLTIP:
##Click any line to select its counterpart in the run-on or indented transcription.



#####################
#####################

## Script of field "Tagless View 2”, ID 1157 of CARD 1 of STACK STEP Transcription Module

on mouseUp
   if the visible of group id 1931 of cd 1 then set the loc of group id 1931 of cd 1 to (((the width of fld id 1157 of cd 1)/2)+41,(the clickV+8))
end mouseUp

on scrollbarDrag
   lock screen
   local tLNs
   if the textHeight of me is empty then set the textHeight of me to 24
   repeat with i = 1 to round((the formattedHeight of me)/(the textHeight of me) + 100)
      put i & cr after tLNs
   end repeat
   put tLNs into fld id 1389 of cd 1
   set the vScroll of fld id 1389 of cd 1 to the vScroll of me
end scrollbarDrag



#####################
#####################

## Script of field "Indented View 2" of card "card id 1002" of stack "/Users/adetienn/Documents/STEP Externals/STEP-LI 7.1.4/STEP Transcription Module.livecode" ID 1154 of CARD 1 of STACK STEP Transcription Module

on mouseWithin
   local tC,ot,ut,tContent
   put fld id 1154 of cd 1 into tContent
   if the cTagTip of this stack is "off" then exit mouseWithin
   get the mouseText
   put the mouseChunk into tC
   if "<!" is in it then pass mouseWithin
   if char (word 2 of tC)-1 of tContent  is in "</" then
      if char (word 4 of tC)+1 of tContent is in " />" then put length(it) into ot
      get char 1 to ot of it
      if char 2 of it is "/" then delete char 2 of it
      float it
   else if "="&quote is in char (word 4 of tC)+1 to (word 4 of tC)+2 of tContent then
      put getAttributeTEIExplanation(it) into ut
      floating ut
   else
      set the vis of fld "Floater" of cd 1 to false
   end if
   put empty into tContent
end mouseWithin

on mouseLeave
   set the vis of fld "Floater" of cd 1 to false
end mouseLeave

on float pmsg--behaves like a tooltip
   local pExpanded
   put desabbreviateSomeTags(pmsg) into pExpanded
   if pExpanded is not empty then 
      if pExpanded is not in fld "Floater" of cd 1 then set the vis of fld "Floater" of cd 1 to false
      put pExpanded into fld "Floater" of cd 1
      set the height of fld "Floater" of cd 1 to (the formattedHeight of fld "Floater" of cd 1)/*-6*/
      set the dontWrap of fld "Floater" to true
      set the textAlign of fld "Floater" to "center"
      set the width of fld "Floater" of cd 1 to (the formattedWidth of fld "Floater" of cd 1)-4
      set the topLeft of  fld "Floater" of cd 1 to ((item 1 of the mouseLoc)+16,(item 2 of the mouseLoc))
      set the vis of fld "Floater" of cd 1 to true
   else
      set the vis of fld "Floater" of cd 1 to false
   end if
end float

on mouseUp
   local tLineNum,tFieldText,tFirstCharNum,tSecondCharNum,tSpaceTag1,tSpC,tBlankSpaces
   local tBegTag,tEndTag,tFindNextTag,tLineEnd,tSel,tFld,tCh,sta,sto,tTag,tAttribute,tValue,dy,da,tdo,tFldID,et,tStartChar,tAngCh,tEndChar
   if the optionKey is down then set the dontwrap of fld id 1154 of cd 1 to not(the dontwrap of fld id 1154 of cd 1)
   if the visible of group id 1931 of cd 1 then set the loc of group id 1931 of cd 1 to (((the width of fld id 1154 of cd 1)/2)+41,(the clickV+8))
   put word 2 of the clickLine into tLineNum
   put fld id 1154 of cd 1 into tFieldText
   put the charIndex of line tLineNum of fld id 1154 of cd 1 into tFirstCharNum
   put the charIndex of char -1 of word 1 of line tLineNum of fld id 1154 of cd 1 into tSecondCharNum
   put char tFirstCharNum to tSecondCharNum of tFieldText into tSpaceTag1
   put spaceCount(tSpaceTag1) into tSpC
   if tSpC > 0 then put char 1 to tSpC of tSpaceTag1 into tBlankSpaces else put empty into tBlankSpaces
   put word 1 of tSpaceTag1 into tBegTag
   if char -1 of tBegTag is not ">" and ">" is in tBegTag then put char 1 to offset(">",tBegTag) of tBegTag into tBegTag
   if char 1 to 2 of tBegTag is "</" then
      put tBegTag into tEndTag
      delete char 2 of tBegTag
   else if char 1 of tBegTag is "<" then
      put tBegTag into tEndTag
      put "/" after char 1 of tEndTag
   end if
   if char -1 of tBegTag is ">" then delete char -1 of tBegTag
   if tBegTag is in tSpaceTag1 then
      put tBlankSpaces&tEndTag into tFindNextTag
      repeat with c = tLineNum+1 to the number of lines of tFieldText
         if line c of tFieldText begins with tFindNextTag then exit repeat
      end repeat
      put c into tLineEnd
   else if tEndTag is in tSpaceTag1 then
      put tBlankSpaces&tBegTag into tFindNextTag
      repeat with c = tLineNum-1 down to 1
         if line c of tFieldText begins with tFindNextTag then exit repeat
      end repeat
      put c into tLineEnd
   end if
   set the cSelectedChunk of fld id 1154 of cd 1 to the clickChunk
   set the cSelectedText of fld id 1154 of cd 1 to the clickText
   put the cSelectedText of fld id 1154 of cd 1 into tSel
   put fld id 1154 of cd 1 into tFld
   put word 2 of the cSelectedChunk of fld id 1154 of cd 1 into tCh
   put empty into sta
   put empty into sto
   repeat with c = tCh down to 1
      if char c of tFld is ">" and c <> tCh then exit mouseUp
      else if char c of tFld is "<" then
         put c into sta
         exit repeat
      end if
   end repeat
   repeat with c = tCh to length(tFld)
      if char c of tFld is "<" then 
         if sta is not empty then put c-1 into sto
         else
            exit mouseUp
         end if
      else if char c of tFld is ">" then 
         put c into sto
         exit repeat
      end if
   end repeat
   put char sta to sto of tFld into tTag
   if char 2 of tTag is "/" then delete char 2 of tTag
   put empty into tAttribute
   put empty into tValue
   if space is in tTag then
      put offset(space,tTag) into dy
      put offset("=",tTag) into da
      put char dy+1 to da-1 of tTag into tAttribute
      put offset(quote,tTag,da+2) into tdo
      put char da+2 to da+2+tdo-1 of tTag into tValue
      delete char dy to -1 of tTag
   end if
   if char 1 of tValue is quote then put empty into tValue
   if char 1 of tTag is "<" then delete char 1 of tTag
   if char -1 of tTag is ">" then delete char -1 of tTag
   replace "b/" with "b" in tTag
   set the wholeMatches to true
   if tTag is in "iub" then put "1034" into tFldID else put "1038" into tFldID
   put lineOffset(tTag,btn id tFldID of cd 1) into et
   send "menuPick tTag" to btn id tFldID of cd 1
   set the label of btn id 1060 of cd 1 to tAttribute
   set the label of btn id 1061 of cd 1 to tValue
   if tLineEnd > tLineNum then 
      put the charIndex of char 1 of line tLineNum of fld id 1154 of cd 1 into tStartChar
      put offset(">",line tLineEnd of fld id 1154 of cd 1) into tAngCh
      put the charIndex of char tAngCh line tLineEnd of fld id 1154 of cd 1 into tEndChar
   else 
      put the charIndex of char 1 of line tLineEnd of fld id 1154 of cd 1 into tStartChar
      put offset(">",line tLineNum of fld id 1154 of cd 1) into tAngCh
      put the charIndex of char tAngCh line tLineNum of fld id 1154 of cd 1 into tEndChar
   end if
   select char tStartChar to tEndChar of fld id 1154 of cd 1
end mouseUp

function spaceCount pLineStart
   repeat with x = 1 to length(pLineStart)
      if char x of pLineStart is not space then exit repeat
   end repeat
   return (x - 1)
end spaceCount

on scrollbarDrag
   lock screen
   local tLNs
   if the textHeight of me is empty then set the textHeight of me to 24
   repeat with i = 1 to round((the formattedHeight of me)/(the textHeight of me) + 100)
      put i & cr after tLNs
   end repeat
   put tLNs into fld id 1389 of cd 1
   set the vScroll of fld id 1389 of cd 1 to the vScroll of me
end scrollbarDrag

##TOOLTIP:
##Option(Alt)-click the field to turn line-wrapping on or off.
##Click tags to highlight their range.



#####################
#####################

## Script of field "XML Edited Pragmatic Descriptions”, ID 1174 of CARD 1 of STACK STEP Transcription Module

on selectionChanged
   local tLineNumber
   put (the lineIndex of the selectedChunk) into tLineNumber
   colorBGLine tLineNumber,1174
   if tLineNumber is 1 or tLineNumber is (the number of lines of fld id 1174 of cd 1) then exit selectionChanged
   send "selectionChanged"&&(tLineNumber-1) to fld id 1049 of cd 1
end selectionChanged

##TOOLTIP:
##Click any line to select its counterpart in the run-on or indented transcription.



#####################
#####################

## Script of field "XML Edited Syntactical Alts”, ID 1171 of CARD 1 of STACK STEP Transcription Module

on selectionChanged
   local tLineNumber
   put (the lineIndex of the selectedChunk)-1 into tLineNumber
   colorBGLine tLineNumber,1171
   if tLineNumber is 0 or tLineNumber is (the number of lines of fld id 1171 of cd 1)-1 then exit selectionChanged
   send "selectionChanged tLineNumber" to fld id 1017 of cd 1
end selectionChanged


##TOOLTIP:
##Click any line to select its counterpart in the run-on or indented transcription.



#####################
#####################

## Script of field "TEI Rendition Description”, ID 1151 of CARD 1 of STACK STEP Transcription Module

on tabKey
   lock screen
   local tSC
   put the selectedChunk into tSC
   if tSC <> empty then
      get word 2 of tSC
      if the shiftKey is up then
         repeat with i = it+1 to length(me)
            if char i of me is ">" then
               select after char i of me
               exit repeat
            end if
         end repeat
      else if the shiftKey is down then
         repeat with i = it-2 down to 1
            if char i of me is ">" then
               select after char i of me
               exit repeat
            end if
         end repeat
      end if
   end if
end tabKey

on keyUp theKey
   lock screen
   local tSC,ut,tText,tWN,tWord
   put the selectedChunk into tSC
   get word 2 of tSC
   put the text of me into tText
   if theKey is space and char it-2 of me is "&" then
      put "&amp;" into char it-2 of me
      select after char it+3 of me
   else if theKey is space and char it-2 of me is space then
      delete char it-1 of me
      select after char it-2 of me
      beep
      exit keyUp
   else if theKey is space and char it of me is space then
      delete char it-1 of me
      select after char it-1 of me
      beep
      exit keyUp
   else if theKey is space and char it-2 of me is "<" then
      if it-3 > 1 then
         if char it-3 of me is not in " <>" and  char it-3 of me is not cr then
            put  char it-3 of me&space&"<" into char it-3 to it-1 of me
         else
            delete char it-1 of me
            select after char it-2 of me
            beep
         end if
      else
         delete char it-1 of me
         select after char it-2 of me
         beep
         exit keyUp
      end if
   else if theKey is space and char it-2 of me is cr then 
      if char it-1 of me is space then delete char it-1 of me
      select after char it-2 of me
      beep
      exit keyUp
   else if theKey is space and char it-1 of me is cr then 
      if char it of me is space then delete char it of me
      select after char it-1 of me
      beep
      exit keyUp
   else if theKey is "/" then
      put it-3 into ut
      if char ut to ut+1 of me is " <" then
         put "</" into char  ut to ut+2 of me
         colorAll  1151
         select after char ut+1 of me
         exit keyUp
      end if
   else if theKey is "<" then
      if char it of me is space then
         put " <" into char  it-1 to it of me
         select after char it of me
         exit keyUp
      end if
   else if theKey is space and char it-2 of me is ">" then
      put it-3 into ut
      repeat with i = ut down to 1
         if char i of me is not in "</" then next repeat
         else if char i-1 to i+2 of me is among the items of "</p>,</l>" then 
            delete char it-1 of me
            beep
            exit keyUp
         else if char i-1 to i of me is "</" then pass keyUp
         else if char i of me is "<" then
            if char i-1 of me is not in " <>" and char i-1 of me <> cr and i <> 1 then
               delete char it-1 of me
               put space before char i of me
               select after char ut+2 of me
               exit keyUp
            else
               delete char it-1 of me
               beep
               exit keyUp
            end if
         end if
      end repeat
   else if theKey is ">" then
      if char it-2 of me is not in "-/ " then
         put (word 2 of tSC)-2 into ut
         repeat with i = ut down to 1
            if char i of me is "<"  then 
               if char i+1 of me is not in "!/" then
                  if segment 1 of (char i+1 to ut of me) <> "body" then put "</"&segment 1 of (char i+1 to ut of me)&">" after char ut+1 of me
                  describeAlts
                  colorAll  1151
                  select after char ut+1 of me
                  exit repeat
               end if
            else if char i of me is ">" then
               pass keyUp
            end if
         end repeat
      else
         if char it-2 of me is space then
            put "> " into char it-2 to it-1 of me
            colorAll  1151
            select after  char it-1 of me
         end if 
      end if
      pass keyUp
   else
      pass keyUp
   end if
end keyUp

on keyDown theKey 
   local tSC,tTog,tTog2,tLN,tText,tText2,tAngs,tAngOp,tAngCl,tPrevKey,tBackChars
   if the mouseLoc is within the rect of me then set the screenMouseLoc to ((the left of fld id 1017 of cd 1)+(the left of this stack)+100),((the top of this stack)+(the top of fld id 1017 of cd 1)+100)
   uncolorButtons
   put the text of me into tText
   put the selectedChunk into tSC
   get word 2 of tSC
   if it > length(tText)-400 then scrollFld it,1151
   put the cPrevKey of me into tPrevKey
   if tPrevKey is empty then put char it-1 of tText into tPrevKey
   if isTypableFast(theKey,tPrevKey) is true then 
      put empty into tText
      pass keyDown
   end if
   set the cPrevKey of me to theKey
   if (word 4 of tSC >= word 2 of tSC) and (the id of fld (segment -1 of the selectedChunk) is 1151) then put empty into the selectedChunk
   put char it-5 to it-1 of tText into tBackChars
   if theKey is space then
      if ((tPrevKey is cr) or (it is 1 and char 1 of tText is "<")) then 
         put empty into theKey
         put empty into tText
         exit to top
      end if
   end if
   if theKey is not in "<>& " then
      if ((tPrevKey is cr) or (it is 1 and char 1 of tText is "<")) then 
         put empty into theKey
         put empty into tText
         exit to top
      end if
      if char 2 to 5 of tBackChars is among the items of "</p>,</l>" then 
         put char 2 to 5 of tBackChars into tTog2
         put "<"&char 3 to -1 of tTog2 into tTog
         put cr&tTog&theKey&tTog2 before char it of me
         colorizeJustEnteredTag tTog&theKey&tTog2,it+1,it+length(tTog&theKey&tTog2),1151
         select after char it+4 of me
         put empty into tText
         exit keyDown
      else if tBackChars is among the items of "</p> ,</l> " then 
         put char 1 to 4 of tBackChars into tTog2
         put "<"&char 3 to -1 of tTog2 into tTog
         put cr&tTog&theKey&tTog2 into char it-1 of me
         colorizeJustEnteredTag tTog&theKey&tTog2,it,it+length(tTog&theKey&tTog2)-1,1151
         select after char it+4 of me
         put empty into tText
         exit keyDown
      else
         put char 1 to it-1 of tText into tText2
         put lastOffsetOfTwoDistinctChars(tText2,"<",">") into tAngs
         put item 1 of tAngs into tAngOp
         put item 2 of tAngs  into tAngCl
         if (tAngCl > tAngOp) or (tAngOp = 0 and tAngCl = 0) then
            put theKey before char it of me
            set the textColor of char tAngCl+1 to it of me to empty
            put empty into tText
            exit keyDown
         else if (tAngOp > tAngCl) then
            put theKey before char it of me
            set the textColor of char it of me to the textColor of char it-1 of me
            put empty into tText
            exit keyDown
         end if
      end if
   end if
   if theKey is "<" then
      if char 2 to 5 of tBackChars is among the items of "</p>,</l>" then 
         put cr&"<" before char it of me
         select before char it+2 of me
         put empty into tText
         exit keyDown
      else if tBackChars is  among the items of "</p> ,<l/> " then 
         put cr&"<" into char it-1 of me
         select before char it+1 of me
         put empty into tText
         exit keyDown
      else 
         put empty into tText
         pass keyDown
      end if
   else if theKey is ">" then
      if tPrevKey is ">" or tPrevKey is cr then 
         put empty into tText
         exit to top
      else 
         put empty into tText
         pass keyDown
      end if
   else
      put empty into tText
      pass keyDown
   end if
   put empty into tText
 end keyDown

on mouseWithin
   local tContent,tCh,tNW,pFTag,pPosition,ots,pTag,pTagEnd,ut,yts,uts,pEndTag,yt,ot,pML,tC,pAttr1,pValu1,pAttr2,pValu2,pAttr3,pValu3,pAttr4,pValu4,tX,tY,tZ,tNumSeg,ots1,tStackName
   put "STEP Transcription Module" into tStackName
   if the cCursorID of fld id 1151 of cd 1 of stack tStackName is not empty then 
      set the cursor to line 1 of the cCursorID of fld id 1151 of cd 1 of stack tStackName
      set the lockCursor to true
   else 
      set the cursor to iBeam
      set the lockCursor to false
   end if
   put fld id 1151 of cd 1 of stack tStackName into tContent
   get the mouseText
   put the mouseChunk into tCh
   put returnTagPosition(tContent,word 2 of tCh) into pPosition
   if pPosition <> false then
      put item 1 of pPosition into tX
      put item 2 of pPosition into tY
      put char tX to tY of tContent into pFTag
      set the cPopUpMenu of btn "XMLTagger2" of cd 1 of stack tStackName to "Copy tag "&pFTag&"|"&tX,tY
   else
      set the cPopUpMenu of btn "XMLTagger2" of cd 1 of stack tStackName to empty
   end if
   if the hilite of btn id 1385 of cd 1 of stack tStackName is true then
      get the mouseText
      put the mouseChunk into tCh
      if word 2 of tCh = word 4 of tCh and char (word 2 of tCh) of tContent is not in "pl" then 
         put empty into tContent
         pass mouseWithin
      end if
      put returnTagPosition3(tContent,word 2 of tCh) into pPosition
      if pPosition <> false then
         put item 1 of pPosition into tX
         put item 2 of pPosition into tY
      else
         put empty into tContent
         set the cPopUpMenu of btn "XMLTagger2" of cd 1 to empty
         pass mouseWithin
      end if
      put char tX to tY of tContent into pFTag
      set the cPopUpMenu of btn "XMLTagger2" of cd 1 to "Copy tag "&pFTag
      put char 2 to -2 of pFTag into pFTag
      if char -1 of pFTag is "/" then delete char -1 of pFTag
      repeat with r = 1 to 4
         do "put empty into pAttr"&r
         do "put empty into pValu"&r
      end repeat
      put the number of segments of pFTag into tNumSeg
      put segment 1 of pFTag into pTag
      if tNumSeg > 1 then
         put space&segment 2 to -1 of pFTag into pFTag
         if "="&quote is not in pFTag then pass mouseWithin
         if space is in pFTag then
            put offset(space,pFTag) into ots1
            put offsets(quote&space,pFTag) into yts
            put ots1-1,yts into ots
            put offsets(quote,pFTag) into uts
            put 0 into tZ
            repeat with z = 1 to (the number of items of uts)-1 step 2
               add 1 to tZ
               do "put char (item tZ of ots)+2 to (item z of uts) -2 of pFTag into pAttr"&tZ
               if tZ <> the number of items of ots then
                  do "put char (item z of uts)+1 to (item z+1 of uts)-1 of pFTag into pValu"&tZ
               else
                  do "put char (item z of uts)+1 to -2 of pFTag into pValu"&tZ
               end if
               do "replace quote with empty in pValu"&tZ
            end repeat
         end if
      end if
      if pTag is among the items of "body" then pass mouseWithin
      if char (item 2 of pPosition)-1 of tContent is not "/" and pTag <> "p" then
         put "</"&pTag&">" into pEndTag
         put offset(pEndTag,tContent,item 2 of pPosition) into yt
         put length(pEndTag)+(item 2 of pPosition)+yt-1 into pTagEnd
      else
         put item 2 of pPosition into pTagEnd
      end if
      put the mouseLoc into pML
      callAttributeValuePalette pTag,"1151",pPosition,pAttr1,pValu1,pAttr2,pValu2,pAttr3,pValu3,pAttr4,pValu4,pML,pTagEnd
      pass mouseWithin
   else
      get the mouseText
      put the mouseChunk into tCh
      put checkIfInsideClosingTag(tContent,word 2 of tCh) into pPosition
      if pPosition is not false then
         put item 1 of pPosition into tX
         if char tX-1 of tContent is space then
            delete char tX-1 of me
         end if
      end if
   end if
   if the cTagTip of stack "STEP Transcription Module" is "on" then
      get the mouseText
      put the mouseChunk into tC
      if "<!" is in it then pass mouseWithin
      if char (word 2 of tC)-1 of tContent  is in "</" then
         if char (word 4 of tC)+1 of tContent is in " />" then put length(it) into ot
         get char 1 to ot of it
         if char 2 of it is "/" then delete char 2 of it
         float it
      else if "="&quote is in char (word 4 of tC)+1 to (word 4 of tC)+2 of tContent then
         put getAttributeTEIExplanation(it) into ut
         floating ut
      else
         set the vis of fld "Floater" of cd 1 to false
      end if
   end if
   put empty into tContent
end mouseWithin

function checkIfInsideTag2 pText,pPosition
   local x,y
   repeat with i = pPosition down to 1
      if i = pPosition and char i of pText = ">" and char i-1 of pText <> "-" then 
         put i into y
         exit repeat
      else if char i of pText is ">" and i < pPosition then return false
      else if char i of pText is "<" and char i+1 of pText is not in "/-!" then 
         put i into x
         exit repeat
      else next repeat
   end repeat
   repeat with i = pPosition to length(pText)
      if i = pPosition and char i of pText = "<" and char i+1 of pText <> "/" then put i into x
      else if char i of pText is "<" and i > pPosition  then return false
      else if char i of pText is ">" and char i-1 of pText is not "-" then 
         put i into y
         exit repeat
      else next repeat
   end repeat
   return x,y
end checkIfInsideTag2

function returnTagPosition pText,pPosition
   local tX,tY
   repeat with i = pPosition down to 1
      if char i of pText is ">" and i < pPosition then return false
      else if char i of pText is ">" and i is pPosition then put i into tY
      else if char i of pText is "<" then
         put i into tX
         exit repeat
      else next repeat
   end repeat
   if tX is empty then return false
   repeat with i = pPosition to length(pText)
      if char i of pText is "<" and i > pPosition then return false
      --else if char i of pText is "<" and i is pPosition then put i into tX
      else if char i of pText is ">" then
         put i into tY
         return tX,tY
         exit repeat
      else next repeat
   end repeat
   return false
end returnTagPosition

function returnTagPosition3 pText,pPosition
   local tX,tY,pText2,ut,tEnd,tTag
   put char pPosition-79 to pPosition of pText into pText2
   repeat with i = length(pText2) down to 1
      if char i of pText2 is ">" and i < length(pText2) then return false
      else if char i of pText2 is ">" and i is length(pText2) then put pPosition into tY
      else if char i of pText2 is "<" then
         if char i+1 of pText2 <> "/" then put (pPosition-(79-i)-1) into tX
         else 
            put char (pPosition-(79-i)) to (pPosition-(79-i))+15 of pText into tTag
            put "<"&trueword 1 of tTag into tTag
            put pPosition-(79-offsetOfOnePrecedingString(pText2,tTag,,))+1 into tX
         end if
         exit repeat
      else next repeat
   end repeat
   if tX is empty then return false
   put length(pText) into ut
   if ut > (pPosition+79) then put (pPosition+79) into tEnd else put ut into tEnd
   put char pPosition to tEnd of pText into pText2
   repeat with i = 1 to length(pText2)
      if char i of pText2 is "<" and i > 1 then return false
      else if char i of pText2 is ">" then
         put pPosition+i-1 into tY
         return tX,tY
         exit repeat
      else next repeat
   end repeat
   return false
end returnTagPosition3

on mouseLeave
   set the vis of fld "Floater" of cd 1 to false
   set the cursor to arrow
   set the lockCursor to false
end mouseLeave

on float pmsg--behaves like a tooltip
   local pExpanded
   put desabbreviateSomeTags(pmsg) into pExpanded
   if pExpanded is not empty then 
      if pExpanded is not in fld "Floater" of cd 1 then set the vis of fld "Floater" of cd 1 to false
      put pExpanded into fld "Floater" of cd 1
      set the height of fld "Floater" of cd 1 to (the formattedHeight of fld "Floater" of cd 1)/*-6*/
      set the dontWrap of fld "Floater" to true
      set the textAlign of fld "Floater" to "center"
      set the width of fld "Floater" of cd 1 to (the formattedWidth of fld "Floater" of cd 1)-4
      set the topLeft of  fld "Floater" of cd 1 to ((item 1 of the mouseLoc)+16,(item 2 of the mouseLoc))
      set the vis of fld "Floater" of cd 1 to true
   else
      set the vis of fld "Floater" of cd 1 to false
   end if
end float

on callAttributeValuePalette pTag,PFldID,pPosition,pAttr1,pValu1,pAttr2,pValu2,pAttr3,pValu3,pAttr4,pValu4,pML,pTagEnd
   set the cCharToCharPosition of stack "Insert Attributes and Values" to pPosition
   set the cFieldID of stack "Insert Attributes and Values" to pFldID
   palette stack "Insert Attributes and Values"
   lock screen
   set the topLeft of  stack "Insert Attributes and Values" to ((the left of stack "STEP Transcription Module")+(item 1 of pML-215),(the top of stack "STEP Transcription Module")+(item 2 of pML)+8)
   put pTag into fld id 1004 of cd 1 of stack "Insert Attributes and Values"
   send "resumeStack" to stack "Insert Attributes and Values"
   set the label of btn id 1017 of cd 1 of stack "Insert Attributes and Values" to pAttr1
   set the label of btn id 1019 of cd 1 of stack "Insert Attributes and Values" to pAttr2
   set the label of btn id 1021 of cd 1 of stack "Insert Attributes and Values" to pAttr3
   set the label of btn id 1023 of cd 1 of stack "Insert Attributes and Values" to pAttr4
   set the label of btn id 1018 of cd 1 of stack "Insert Attributes and Values" to pValu1
   set the label of btn id 1020 of cd 1 of stack "Insert Attributes and Values" to pValu2
   set the label of btn id 1022 of cd 1 of stack "Insert Attributes and Values" to pValu3
   set the label of btn id 1024 of cd 1 of stack "Insert Attributes and Values" to pValu4
   if fld id 1004 of cd 1 of stack "Insert Attributes and Values" <> empty then put char (item 1 of pPosition) to pTagEnd of fld id pFldID of stack "STEP Transcription Module" into fld id 1037 of cd 1 of stack "Insert Attributes and Values"
   else put empty into fld id 1037 of cd 1 of stack "Insert Attributes and Values"
end callAttributeValuePalette

on selectionChanged
   local tSel,tFld,tFld2,tCh,tCh2,tIBeamID,tTag,tTag2,tBtnID,pBtns,tLN,tAttrib,tVal,pAtts,pVals,pToxt,tCol
   local tSta,tSto,ry,tDif,pats,pats1,pats2,pits,tStart,tOpA,tClA,tStop,sta,sto,tAttribute,tValue,dy,da,tdo,tFldID,et,tAngs,tAngOp,tAngCl
   set the cSelectedChunk of fld id 1151 of cd 1 to the selectedChunk
   set the cSelectedText of fld id 1151 of cd 1 to the selectedText
   put the cSelectedText of fld id 1151 of cd 1 into tSel
   put fld id 1151 of cd 1 into tFld
   put word 2 of the cSelectedChunk of fld id 1151 of cd 1 into tCh
   put word 4 of the cSelectedChunk of fld id 1151 of cd 1 into tCh2
   if tCh2 = tCh-1 then 
      set the cPrevKey of me to char tCh2 of tFld
      set the backgroundColor of btn id 1013 of cd 1 to "#CC9999"
      set the backgroundColor of btn id 1012 of cd 1 to empty
      set the cSelectionLocation of btn id 1013 of cd 1 to the cSelectedChunk of fld id 1151 of cd 1
      set the cSelectionLocation of btn id 1012 of cd 1 to empty
      set the cBetweenOpeningAndClosingTags of btn id 1013 of cd 1 to betweenWhichTags(tFld,tCh,tCh2)
   else
      set the cPrevKey of me to empty
      set the backgroundColor of btn id 1013 of cd 1 to empty
      set the backgroundColor of btn id 1012 of cd 1 to "#CC9999"
      set the cSelectionLocation of btn id 1012 of cd 1 to the cSelectedChunk of fld id 1151 of cd 1
      set the cSelectionLocation of btn id 1013 of cd 1 to empty
   end if
   if the visible of group id 1931 of cd 1 then set the loc of group id 1931 of cd 1 to (((the width of fld id 1151 of cd 1)/2)+41,(the clickV+8))
    if the cCursorID of fld id 1151 of cd 1 <> empty then
      lock screen
      saveForUndoRedo 1151
      put line 1 of (the cCursorID of fld id 1151 of cd 1) into tIBeamID
      put line 2 of (the cCursorID of fld id 1151 of cd 1) into tTag
      put empty into tTag2
      if (tTag begins with "hi-") or (tTag begins with "emph-") then 
         put tTag into tTag2
         put char 1 to offset("-",tTag)-1 of tTag into tTag
      end if
      put identifyPullDownMenu(tTag) into tBtnID
      if tBtnID is empty then exit selectionChanged
      put btn id tBtnID of cd 1 into pBtns
      put lineOffset(tTag,pBtns) into tLN
      if tLN = 0 then exit selectionChanged
      set the label of btn id tBtnID to tTag
      select line tLN of btn id tBtnID of cd 1
      put empty into tAttrib
      put empty into tVal
      if tTag2 begins with "emph-" and tIBeamID is among the items of "1356,1357,1358" then
         if tIBeamID = 1356 then put "bold" into tVal
         else if tIBeamID = 1357 then put "italic" into tVal
         else if tIBeamID = 1358 then put "underline" into tVal
         put "rend" into tAttrib
      end if
      if tTag2 begins with "hi-" and tIBeamID is among the items of "1359,1361,1362" then
         if tIBeamID = 1359 then put "bold" into tVal
         else if tIBeamID = 1361 then put "italic" into tVal
         else if tIBeamID = 1362 then put "underline" into tVal
         put "rend" into tAttrib
      end if
      if tAttrib <> empty then
         set the label of btn id 1060 of cd 1 to tAttrib
         put btn id 1060 of cd 1 into pAtts
         put lineOffset(tAttrib,pAtts) into tLN
         if tLN <> 0 then select line tLN of btn id 1060 of cd 1
      end if 
      if tVal <> empty then
         set the label of btn id 1061 of cd 1 to tVal
         put btn id 1061 of cd 1 into pVals
         put lineOffset(tVal,pVals) into tLN
         if tLN <> 0 then select line tLN of btn id 1061 of cd 1
      end if 
      --updateTagArea
      if (tCh2 <> tCh-1) then 
         if char tCh of fld id 1151 of cd 1 is space then add 1 to tCh
         if char tCh2 of fld id 1151 of cd 1 is space then subtract 1 from tCh2
         select char tCh to tCh2 of fld id 1151 of cd 1
         send "mouseUp" to btn id 1012 of cd 1
         exit selectionChanged
      else
         select before char tCh of fld id 1151 of cd 1
         send "mouseUp 1151" to btn id 1013 of cd 1
         exit selectionChanged
      end if
   end if
   
   if the optionKey is down then
      put tFld into pToxt
      put word 2 of the cSelectedChunk of fld id 1151 of cd 1 into tCh
      if the textColor of char tCh of fld id 1151 of cd 1 is not empty then
         put the textColor of char tCh of fld id 1151 of cd 1 into tCol
         repeat with x = tCh-1 down to 0
            if the textColor of char x of fld id 1151 of cd 1 is not tCol then 
               put x+1 into tSta
               exit repeat
            end if
         end repeat
         repeat with x = tCh+1 to length(pToxt)
            if the textColor of char x of fld id 1151 of cd 1 is not tCol then 
               put x-1 into tSto
               exit repeat
            end if
         end repeat
         if tSto is empty then put length(pToxt) into tSto
         put char tSta to tSto of pToxt into tTag
         if ">"&cr&"<" is in tTag then 
            put  offset(">"&cr&"<",tTag) into ry
            if tSta+ry >= tCh then 
               put char 1 to ry of tTag into tTag
               put tSta into tCh
               put tSta+length(tTag)-1 into tSto
            else 
               put char ry+2 to -1 of tTag into tTag
               put ry+tSta into tSta
               put ry+tSta into tCh
            end if
         end if
         if "><" is in tTag then 
            put  offset("><",tTag) into ry
            if tSta+ry >= tCh then 
               put char 1 to ry of tTag into tTag
               put tSta into tCh
               put tSta+length(tTag)-1 into tSto
            else 
               put char ry+1 to -1 of tTag into tTag
               put ry+tSta into tSta
               put ry+tSta into tCh
            end if
         end if
         if word 1 of tTag is not tTag then 
            put word 1 of tTag into tTag
            put tSta+length(tTag)-1 into tSto
         end if
         if char -1 of tTag is not ">" then 
            put ">" after tTag
            put 0 into tDif
            replace " >" with ">" in tTag
         else put 0 into tDif
         if "=" is in tTag then exit to top
         if char 2 of tTag is "/" then
            put tTag into tTag2
            delete char 2 of tTag
            delete char -1 of tTag
            put empty into pats
            put offsets(tTag&space,char 1 to tCh-1 of pToxt) into pats1
            put offsets(tTag&">",char 1 to tCh-1 of pToxt) into pats2
            if pats1 is 0 then put empty into pats else put pats1&comma into pats
            if pats2 is not 0 then put pats2 after pats
            if pats is not empty then sort items of pats ascending numeric
            put offsets(tTag2,char 1 to tCh-1 of pToxt) into pits
            put empty into tStart
            repeat with x = the number of items of pats down to 1
               put item x of pats into tOpA
               put item x of pits into tClA
               if tOpA > tClA or tClA is empty or tClA is 0 then 
                  put tOpA into tStart
                  exit repeat
               end if
            end repeat
            if tStart is not empty then 
               select char tStart to tSto of fld id 1151 of cd 1
            end if
         else if char 2 of tTag is not "/" then
            put tTag into tTag2
            put "/" after char 1 of tTag2
            put empty into pats
            put offsets(tTag&space,char tCh+1 to length(pToxt) of pToxt) into pats1
            put offsets(tTag&">",char tCh+1 to length(pToxt) of pToxt) into pats2
            if pats1 is 0 then put empty into pats else put pats1&comma into pats
            if pats2 is not 0 then put pats2 after pats
            if pats is not empty then sort items of pats ascending numeric
            put offsets(tTag2,char tCh+1 to length(pToxt) of pToxt) into pits
            put empty into tStop
            repeat with x = 1 to the number of items of pits
               put item x of pits into tClA
               put item x of pats into tOpA
               if tClA < tOpA or tOpA is empty or tOpA is 0 then 
                  put tClA+tCh+length(tTag)+tDif into tStop
                  exit repeat
               end if
            end repeat
            if tStop is not empty then 
               select char tSta to tStop of fld id 1151 of cd 1
            end if
         end if
         exit selectionChanged
      end if
   else
      put empty into sta
      put empty into sto
      put char 1 to tCh of tFld into tFld2
      put offsetOfTwoPrecedingDistinctChars(tFld2,"<",">") into tAngs
      put item 1 of tAngs into tAngOp
      put item 2 of tAngs  into tAngCl
      if tAngCl <> 0 then
         if tAngOp <> 0 then
            if tAngCl > tAngOp and tAngCl <> tCh then 
               exit selectionChanged
            else if tAngCl < tAngOp then 
               put tAngOp into sta
            end if
         end if
      else if tAngCl = 0 then
         if tAngOp <> 0 then put tAngOp into sta
      end if
      repeat with c = tCh to length(tFld)
         if char c of tFld is "<" then 
            if sta is not empty then put c-1 into sto
            else
               exit selectionChanged
            end if
         else if char c of tFld is ">" then 
            put c into sto
            exit repeat
         end if
      end repeat
      put char sta to sto of tFld into tTag
      if char 2 of tTag is "/" then delete char 2 of tTag
      put empty into tAttribute
      put empty into tValue
      if space is in tTag then
         put offset(space,tTag) into dy
         put offset("=",tTag) into da
         put char dy+1 to da-1 of tTag into tAttribute
         put offset(quote,tTag,da+2) into tdo
         put char da+2 to da+2+tdo-1 of tTag into tValue
         delete char dy to -1 of tTag
      end if
      if char 1 of tValue is quote then put empty into tValue
      if char 1 of tTag is "<" then delete char 1 of tTag
      if char -1 of tTag is ">" then delete char -1 of tTag
      replace "b/" with "b" in tTag
      if tTag is "emph" then put "emphasis" into tTag
      if tTag is among the items of "i,u,b,choice,div,div1,div2,div3,div4,div5,head,item,list,orig,reg,seg,figure,figDesc,graphic" then put "1034" into tFldID 
      else if tTag is "p" then put "1008" into tBtnID
      else put "1038" into tBtnID
      set the wholeMatches to true
      put lineOffset(tab&tTag,btn id tBtnID of cd 1) into et
      if et <> 0 then send "menuPick tTag" to btn id tBtnID of cd 1
      set the label of btn id 1060 of cd 1 to tAttribute
      set the label of btn id 1061 of cd 1 to tValue
      --updateTagArea
   end if
end selectionChanged

on scrollbarDrag
   lock screen
   local tLNs
   if the textHeight of me is empty then set the textHeight of me to 24
   repeat with i = 1 to round((the formattedHeight of me)/(the textHeight of me) + 100)
      put i & cr after tLNs
   end repeat
   put tLNs into fld id 1389 of cd 1
   set the vScroll of fld id 1389 of cd 1 to the vScroll of me
end scrollbarDrag

function lastOffsetOfTwoDistinctChars tContainer,pChar1,pChar2
   local x,y,tContainer2,tChar,tcontL
   put length(tContainer) into tcontL
   if tcontL > 10000 then put char (tcontL-9999) to -1 of tContainer into tContainer
   repeat for each char tChar in tContainer
      put tChar before tContainer2
   end repeat
   get offset(pChar1,tContainer2)
   if it = 0 then put 0 into x
   else put tcontL-(it-1) into x
   get offset(pChar2,tContainer2)
   if it = 0 then put 0 into y
   else put tcontL-(it-1) into y
   return x,y
end lastOffsetOfTwoDistinctChars

function offsetOfTwoPrecedingDistinctChars tContainer,pChar1,pChar2,pReduce
   local x,y,tContainer2,tChar,tcontL
   put length(tContainer) into tcontL
   if tcontL > 10000 and pReduce <> false then put char (tcontL-9999) to -1 of tContainer into tContainer
   repeat for each char tChar in tContainer
      put tChar before tContainer2
   end repeat
   get offset(pChar1,tContainer2)
   if it = 0 then put 0 into x
   else put tcontL-(it-1) into x
   get offset(pChar2,tContainer2)
   if it = 0 then put 0 into y
   else put tcontL-(it-1) into y
   return x,y
end OffsetOfTwoPrecedingDistinctChars

function offsetOfTwoCloselyPrecedingDistinctChars tContainer,pChar1,pChar2,pReduce
   local x,y,tContainer2,tChar,tcontL
   put length(tContainer) into tcontL
   if tcontL > 1000 and pReduce <> false then put char (tcontL-999) to -1 of tContainer into tContainer
   repeat for each char tChar in tContainer
      put tChar before tContainer2
   end repeat
   get offset(pChar1,tContainer2)
   if it = 0 then put 0 into x
   else put tcontL-(it-1) into x
   get offset(pChar2,tContainer2)
   if it = 0 then put 0 into y
   else put tcontL-(it-1) into y
   return x,y
end offsetOfTwoCloselyPrecedingDistinctChars

function lastOffsetOfOneString tContainer,pString
   local tContainer2,tReverseString,tcontL
   put length(tContainer) into tcontL
   if tcontL > 10000 then put char (tcontL-9999) to -1 of tContainer into tContainer
   repeat for each char tChar in tContainer
      put tChar before tContainer2
   end repeat
   repeat for each char tChar in pString
      put tChar before tReverseString
   end repeat
   get offset(tReverseString,tContainer2)
   if it = 0 then return 0
   else return ((tcontL-(it-1)) - ((length(tReverseString))+1))
end lastOffsetOfOneString


##TOOLTIP:
##Click tags to fill the pull-down tag menus with related data.
##OPTION( ALT)-click tags to see their range.



#####################
#####################

## Script of field "TextWithoutTags" of card "card id 1002" of stack "/Users/adetienn/Documents/STEP Externals/STEP-LI 7.1.4/STEP Transcription Module.livecode" ID 1044 of CARD 1 of STACK STEP Transcription Module

on mouseUp
   if the visible of group id 1931 of cd 1 then set the loc of group id 1931 of cd 1 to (((the width of fld id 1044 of cd 1)/2)+41,(the clickV+8))
end mouseUp

on scrollbarDrag
   lock screen
   local tLNs
   if the textHeight of me is empty then set the textHeight of me to 24
   repeat with i = 1 to round((the formattedHeight of me)/(the textHeight of me) + 100)
      put i & cr after tLNs
   end repeat
   put tLNs into fld id 1389 of cd 1
   set the vScroll of fld id 1389 of cd 1 to the vScroll of me
end scrollbarDrag



#####################
#####################

## Script of field "TEI Description" of card "card id 1002" of stack "/Users/adetienn/Documents/STEP Externals/STEP-LI 7.1.4/STEP Transcription Module.livecode" ID 1041 of CARD 1 of STACK STEP Transcription Module

on tabKey
   lock screen
   local tSC
   put the selectedChunk into tSC
   if tSC <> empty then
      get word 2 of tSC
      if the shiftKey is up then
         repeat with i = it+1 to length(me)
            if char i of me is ">" then
               select after char i of me
               exit repeat
            end if
         end repeat
      else if the shiftKey is down then
         repeat with i = it-2 down to 1
            if char i of me is ">" then
               select after char i of me
               exit repeat
            end if
         end repeat
      end if
   end if
end tabKey

on keyUp theKey
   lock screen
   local tSC,ut,tText,tWN,tWord
   put the selectedChunk into tSC
   get word 2 of tSC
   put the text of me into tText
   if theKey is space and char it-2 of me is "&" then
      put "&amp;" into char it-2 of me
      select after char it+3 of me
   else if theKey is space and char it-2 of me is space then
      delete char it-1 of me
      select after char it-2 of me
      beep
      exit keyUp
   else if theKey is space and char it of me is space then
      delete char it-1 of me
      select after char it-1 of me
      beep
      exit keyUp
   else if theKey is space and char it-2 of me is "<" then
      if it-3 > 1 then
         if char it-3 of me is not in " <>" and  char it-3 of me is not cr then
            put  char it-3 of me&space&"<" into char it-3 to it-1 of me
         else
            delete char it-1 of me
            select after char it-2 of me
            beep
         end if
      else
         delete char it-1 of me
         select after char it-2 of me
         beep
         exit keyUp
      end if
   else if theKey is space and char it-2 of me is cr then 
      if char it-1 of me is space then delete char it-1 of me
      select after char it-2 of me
      beep
      exit keyUp
   else if theKey is space and char it-1 of me is cr then 
      if char it of me is space then delete char it of me
      select after char it-1 of me
      beep
      exit keyUp
   else if theKey is "/" then
      put it-3 into ut
      if char ut to ut+1 of me is " <" then
         put "</" into char  ut to ut+2 of me
         colorAll  1041
         select after char ut+1 of me
         exit keyUp
      end if
   else if theKey is "<" then
      if char it of me is space then
         put " <" into char  it-1 to it of me
         select after char it of me
         exit keyUp
      end if
   else if theKey is space and char it-2 of me is ">" then
      put it-3 into ut
      repeat with i = ut down to 1
         if char i of me is not in "</" then next repeat
         else if char i-1 to i+2 of me is among the items of "</p>,</l>" then 
            delete char it-1 of me
            beep
            exit keyUp
         else if char i-1 to i of me is "</" then pass keyUp
         else if char i of me is "<" then
            if char i-1 of me is not in " <>" and char i-1 of me <> cr and i <> 1 then
               delete char it-1 of me
               put space before char i of me
               select after char ut+2 of me
               exit keyUp
            else
               delete char it-1 of me
               beep
               exit keyUp
            end if
         end if
      end repeat
   else if theKey is ">" then
      if char it-2 of me is not in "-/ " then
         put (word 2 of tSC)-2 into ut
         repeat with i = ut down to 1
            if char i of me is "<"  then 
               if char i+1 of me is not in "!/" then
                   if segment 1 of (char i+1 to ut of me) <> "body" then put "</"&segment 1 of (char i+1 to ut of me)&">" after char ut+1 of me
                  describeAlts
                  colorAll  1041
                  select after char ut+1 of me
                  exit repeat
               end if
            else if char i of me is ">" then
               pass keyUp
            end if
         end repeat
      else
         if char it-2 of me is space then
            put "> " into char it-2 to it-1 of me
            colorAll  1041
            select after  char it-1 of me
         end if 
      end if
      pass keyUp
   else
      pass keyUp
   end if
end keyUp

on keyDown theKey 
   local tSC,tTog,tTog2,tLN,tText,tText2,tAngs,tAngOp,tAngCl,tPrevKey,tBackChars
   if the mouseLoc is within the rect of me then set the screenMouseLoc to ((the left of fld id 1017 of cd 1)+(the left of this stack)+100),((the top of this stack)+(the top of fld id 1017 of cd 1)+100)
   uncolorButtons
   put the text of me into tText
   put the selectedChunk into tSC
   get word 2 of tSC
   
   if it > length(tText)-400 then scrollFld it,1041
   put the cPrevKey of me into tPrevKey
   if tPrevKey is empty then put char it-1 of tText into tPrevKey
   if isTypableFast(theKey,tPrevKey) is true then 
      put empty into tText
      pass keyDown
   end if
   set the cPrevKey of me to theKey
   if (word 4 of tSC >= word 2 of tSC) and (the id of fld (segment -1 of the selectedChunk) is 1041) then put empty into the selectedChunk
   put char it-5 to it-1 of tText into tBackChars
   
   if theKey is space then
      if ((tPrevKey is cr) or (it is 1 and char 1 of tText is "<")) then 
         put empty into theKey
         put empty into tText
         exit to top
      end if
   end if
   if theKey is not in "<>& " then
      if ((tPrevKey is cr) or (it is 1 and char 1 of tText is "<")) then 
         put empty into theKey
         put empty into tText
         exit to top
      end if
      if char 2 to 5 of tBackChars is among the items of "</p>,</l>" then 
         put char 2 to 5 of tBackChars into tTog2
         put "<"&char 3 to -1 of tTog2 into tTog
         put cr&tTog&theKey&tTog2 before char it of me
         colorizeJustEnteredTag tTog&theKey&tTog2,it+1,it+length(tTog&theKey&tTog2),1041
         select after char it+4 of me
         put empty into tText
         exit keyDown
      else if tBackChars is among the items of "</p> ,</l> " then 
         put char 1 to 4 of tBackChars into tTog2
         put "<"&char 3 to -1 of tTog2 into tTog
         put cr&tTog&theKey&tTog2 into char it-1 of me
         colorizeJustEnteredTag tTog&theKey&tTog2,it,it+length(tTog&theKey&tTog2)-1,1041
         select after char it+4 of me
         put empty into tText
         exit keyDown
      else
         put char 1 to it-1 of tText into tText2
         put lastOffsetOfTwoDistinctChars(tText2,"<",">") into tAngs
         put item 1 of tAngs into tAngOp
         put item 2 of tAngs  into tAngCl
         if (tAngCl > tAngOp) or (tAngOp = 0 and tAngCl = 0) then
            put theKey before char it of me
            set the textColor of char tAngCl+1 to it of me to empty
            put empty into tText
            exit keyDown
         else if (tAngOp > tAngCl) then
            put theKey before char it of me
            set the textColor of char it of me to the textColor of char it-1 of me
            put empty into tText
            exit keyDown
         end if
      end if
   end if
   if theKey is "<" then
      if char 2 to 5 of tBackChars is among the items of "</p>,</l>" then 
         put cr&"<" before char it of me
         --colorAll  1041
         select before char it+2 of me
         put empty into tText
         exit keyDown
      else if tBackChars is  among the items of "</p> ,<l/> " then 
         put cr&"<" into char it-1 of me
         --colorAll  1041
         select before char it+1 of me
         put empty into tText
         exit keyDown
      else 
         put empty into tText
         pass keyDown
      end if
   else if theKey is ">" then
      if tPrevKey is ">" or tPrevKey is cr then 
         put empty into tText
         exit to top
      else 
         put empty into tText
         pass keyDown
      end if
   else
      put empty into tText
      pass keyDown
   end if
   put empty into tText
end keyDown

on mouseWithin
   local tContent,tCh,tNW,pFTag,pPosition,ots,pTag,pTagEnd,ut,yts,uts,pEndTag,yt,ot,pML,tC,pAttr1,pValu1,pAttr2,pValu2,pAttr3,pValu3,pAttr4,pValu4,tX,tY,tZ,tNumSeg,ots1,tStackName
   put "STEP Transcription Module" into tStackName
   if the cCursorID of fld id 1041 of cd 1 of stack tStackName is not empty then 
      set the cursor to line 1 of the cCursorID of fld id 1041 of cd 1 of stack tStackName
      set the lockCursor to true
   else 
      set the cursor to iBeam
      set the lockCursor to false
   end if
   put fld id 1041 of cd 1 of stack tStackName into tContent
   get the mouseText
   put the mouseChunk into tCh
   put returnTagPosition(tContent,word 2 of tCh) into pPosition
   if pPosition <> false then
      put item 1 of pPosition into tX
      put item 2 of pPosition into tY
      put char tX to tY of tContent into pFTag
      set the cPopUpMenu of btn "XMLTagger2" of cd 1 of stack tStackName to "Copy tag "&pFTag&"|"&tX,tY
   else
      set the cPopUpMenu of btn "XMLTagger2" of cd 1 stack tStackName to empty
   end if
   if the hilite of btn id 1385 of cd 1 is true then
      get the mouseText
      put the mouseChunk into tCh
      if word 2 of tCh = word 4 of tCh and char (word 2 of tCh) of tContent is not in "pl" then 
         put empty into tContent
         pass mouseWithin
      end if
      put returnTagPosition3(tContent,word 2 of tCh) into pPosition
      if pPosition <> false then
         put item 1 of pPosition into tX
         put item 2 of pPosition into tY
      else
         put empty into tContent
         set the cPopUpMenu of btn "XMLTagger2" of cd 1 to empty
         pass mouseWithin
      end if
      put char tX to tY of tContent into pFTag
      set the cPopUpMenu of btn "XMLTagger2" of cd 1 to "Copy tag "&pFTag
      put char 2 to -2 of pFTag into pFTag
      if char -1 of pFTag is "/" then delete char -1 of pFTag
      repeat with r = 1 to 4
         do "put empty into pAttr"&r
         do "put empty into pValu"&r
      end repeat
      put the number of segments of pFTag into tNumSeg
      put segment 1 of pFTag into pTag
      if tNumSeg > 1 then
         put space&segment 2 to -1 of pFTag into pFTag
         if "="&quote is not in pFTag then pass mouseWithin
         if space is in pFTag then
            put offset(space,pFTag) into ots1
            put offsets(quote&space,pFTag) into yts
            put ots1-1,yts into ots
            put offsets(quote,pFTag) into uts
            put 0 into tZ
            repeat with z = 1 to (the number of items of uts)-1 step 2
               add 1 to tZ
               do "put char (item tZ of ots)+2 to (item z of uts) -2 of pFTag into pAttr"&tZ
               if tZ <> the number of items of ots then
                  do "put char (item z of uts)+1 to (item z+1 of uts)-1 of pFTag into pValu"&tZ
               else
                  do "put char (item z of uts)+1 to -2 of pFTag into pValu"&tZ
               end if
               do "replace quote with empty in pValu"&tZ
            end repeat
         end if
      end if
      if pTag is among the items of "body" then pass mouseWithin
      if char (item 2 of pPosition)-1 of tContent is not "/" and pTag <> "p" then
         put "</"&pTag&">" into pEndTag
         put offset(pEndTag,tContent,item 2 of pPosition) into yt
         put length(pEndTag)+(item 2 of pPosition)+yt-1 into pTagEnd
      else
         put item 2 of pPosition into pTagEnd
      end if
      put the mouseLoc into pML
      callAttributeValuePalette pTag,"1041",pPosition,pAttr1,pValu1,pAttr2,pValu2,pAttr3,pValu3,pAttr4,pValu4,pML,pTagEnd
      pass mouseWithin
   else
      get the mouseText
      put the mouseChunk into tCh
      put checkIfInsideClosingTag(tContent,word 2 of tCh) into pPosition
      if pPosition is not false then
         put item 1 of pPosition into tX
         if char tX-1 of tContent is space then
            delete char tX-1 of me
         end if
      end if
   end if
   if the cTagTip of stack tStackName is "on" then
      get the mouseText
      put the mouseChunk into tC
      if "<!" is in it then pass mouseWithin
      if char (word 2 of tC)-1 of tContent  is in "</" then
         if char (word 4 of tC)+1 of tContent is in " />" then put length(it) into ot
         get char 1 to ot of it
         if char 2 of it is "/" then delete char 2 of it
         float it
      else if "="&quote is in char (word 4 of tC)+1 to (word 4 of tC)+2 of tContent then
         put getAttributeTEIExplanation(it) into ut
         floating ut
      else
         set the vis of fld "Floater" of cd 1 to false
      end if
   end if
end mouseWithin

function checkIfInsideTag2 pText,pPosition
   local x,y
   repeat with i = pPosition down to 1
      if i = pPosition and char i of pText = ">" and char i-1 of pText <> "-" then 
         put i into y
         exit repeat
      else if char i of pText is ">" and i < pPosition then return false
      else if char i of pText is "<" and char i+1 of pText is not in "/-!" then 
         put i into x
         exit repeat
      else next repeat
   end repeat
   repeat with i = pPosition to length(pText)
      if i = pPosition and char i of pText = "<" and char i+1 of pText <> "/" then put i into x
      else if char i of pText is "<" and i > pPosition  then return false
      else if char i of pText is ">" and char i-1 of pText is not "-" then 
         put i into y
         exit repeat
      else next repeat
   end repeat
   return x,y
end checkIfInsideTag2

function returnTagPosition pText,pPosition
   local tX,tY
   repeat with i = pPosition down to 1
      if char i of pText is ">" and i < pPosition then return false
      else if char i of pText is ">" and i is pPosition then put i into tY
      else if char i of pText is "<" then
         put i into tX
         exit repeat
      else next repeat
   end repeat
   if tX is empty then return false
   repeat with i = pPosition to length(pText)
      if char i of pText is "<" and i > pPosition then return false
      --else if char i of pText is "<" and i is pPosition then put i into tX
      else if char i of pText is ">" then
         put i into tY
         return tX,tY
         exit repeat
      else next repeat
   end repeat
   return false
end returnTagPosition

function returnTagPosition3 pText,pPosition
   local tX,tY,pText2,ut,tEnd,tTag
   put char pPosition-79 to pPosition of pText into pText2
   repeat with i = length(pText2) down to 1
      if char i of pText2 is ">" and i < length(pText2) then return false
      else if char i of pText2 is ">" and i is length(pText2) then put pPosition into tY
      else if char i of pText2 is "<" then
         if char i+1 of pText2 <> "/" then put (pPosition-(79-i)-1) into tX
         else 
            put char (pPosition-(79-i)) to (pPosition-(79-i))+15 of pText into tTag
            put "<"&trueword 1 of tTag into tTag
            put pPosition-(79-offsetOfOnePrecedingString(pText2,tTag,,))+1 into tX
         end if
         exit repeat
      else next repeat
   end repeat
   if tX is empty then return false
   put length(pText) into ut
   if ut > (pPosition+79) then put (pPosition+79) into tEnd else put ut into tEnd
   put char pPosition to tEnd of pText into pText2
   repeat with i = 1 to length(pText2)
      if char i of pText2 is "<" and i > 1 then return false
      else if char i of pText2 is ">" then
         put pPosition+i-1 into tY
         return tX,tY
         exit repeat
      else next repeat
   end repeat
   return false
end returnTagPosition3

on mouseLeave
   set the vis of fld "Floater" of cd 1 to false
   set the cursor to arrow
   set the lockCursor to false
end mouseLeave

on float pmsg--behaves like a tooltip
   local pExpanded
   put desabbreviateSomeTags(pmsg) into pExpanded
   if pExpanded is not empty then 
      if pExpanded is not in fld "Floater" of cd 1 then set the vis of fld "Floater" of cd 1 to false
      put pExpanded into fld "Floater" of cd 1
      set the height of fld "Floater" of cd 1 to (the formattedHeight of fld "Floater" of cd 1)/*-6*/
      set the dontWrap of fld "Floater" to true
      set the textAlign of fld "Floater" to "center"
      set the width of fld "Floater" of cd 1 to (the formattedWidth of fld "Floater" of cd 1)-4
      set the topLeft of  fld "Floater" of cd 1 to ((item 1 of the mouseLoc)+16,(item 2 of the mouseLoc))
      set the vis of fld "Floater" of cd 1 to true
   else
      set the vis of fld "Floater" of cd 1 to false
   end if
end float

on callAttributeValuePalette pTag,PFldID,pPosition,pAttr1,pValu1,pAttr2,pValu2,pAttr3,pValu3,pAttr4,pValu4,pML,pTagEnd
   set the cCharToCharPosition of stack "Insert Attributes and Values" to pPosition
   set the cFieldID of stack "Insert Attributes and Values" to pFldID
   palette stack "Insert Attributes and Values"
   lock screen
   set the topLeft of  stack "Insert Attributes and Values" to ((the left of stack "STEP Transcription Module")+(item 1 of pML-215),(the top of stack "STEP Transcription Module")+(item 2 of pML)+8)
   put pTag into fld id 1004 of cd 1 of stack "Insert Attributes and Values"
   send "resumeStack" to stack "Insert Attributes and Values"
   set the label of btn id 1017 of cd 1 of stack "Insert Attributes and Values" to pAttr1
   set the label of btn id 1019 of cd 1 of stack "Insert Attributes and Values" to pAttr2
   set the label of btn id 1021 of cd 1 of stack "Insert Attributes and Values" to pAttr3
   set the label of btn id 1023 of cd 1 of stack "Insert Attributes and Values" to pAttr4
   set the label of btn id 1018 of cd 1 of stack "Insert Attributes and Values" to pValu1
   set the label of btn id 1020 of cd 1 of stack "Insert Attributes and Values" to pValu2
   set the label of btn id 1022 of cd 1 of stack "Insert Attributes and Values" to pValu3
   set the label of btn id 1024 of cd 1 of stack "Insert Attributes and Values" to pValu4
   if fld id 1004 of cd 1 of stack "Insert Attributes and Values" <> empty then put char (item 1 of pPosition) to pTagEnd of fld id pFldID of stack "STEP Transcription Module" into fld id 1037 of cd 1 of stack "Insert Attributes and Values"
   else put empty into fld id 1037 of cd 1 of stack "Insert Attributes and Values"
end callAttributeValuePalette

on selectionChanged
   local tSel,tFld,tFld2,tCh,tCh2,tIBeamID,tTag,tTag2,tBtnID,pBtns,tLN,tAttrib,tVal,pAtts,pVals,pToxt,tCol, tStackName
   local tSta,tSto,ry,tDif,pats,pats1,pats2,pits,tStart,tOpA,tClA,tStop,sta,sto,tAttribute,tValue,dy,da,tdo,tFldID,et,tAngs,tAngOp,tAngCl
   put "STEP Transcription Module" into tStackName
   set the cSelectedChunk of fld id 1041 of cd 1 of stack tStackName to the selectedChunk
   set the cSelectedText of fld id 1041 of cd 1 of stack tStackName to the selectedText
   put the cSelectedText of fld id 1041 of cd 1 of stack tStackName into tSel
   put fld id 1041 of cd 1 of stack tStackName into tFld
   put word 2 of the cSelectedChunk of fld id 1041 of cd 1 of stack tStackName into tCh
   put word 4 of the cSelectedChunk of fld id 1041 of cd 1 of stack tStackName into tCh2
   if tCh2 = tCh-1 then 
      set the cPrevKey of me to char tCh2 of tFld
      set the backgroundColor of btn id 1013 of cd 1 of stack tStackName to "#CC9999"
      set the backgroundColor of btn id 1012 of cd 1 of stack tStackName to empty
      set the cSelectionLocation of btn id 1013 of cd 1 of stack tStackName to the cSelectedChunk of fld id 1041 of cd 1 of stack tStackName
      set the cSelectionLocation of btn id 1012 of cd 1 of stack tStackName to empty
      set the cBetweenOpeningAndClosingTags of btn id 1013 of cd 1 of stack tStackName to betweenWhichTags(tFld,tCh,tCh2)
   else
      set the cPrevKey of me to empty
      set the backgroundColor of btn id 1013 of cd 1 of stack tStackName to empty
      set the backgroundColor of btn id 1012 of cd 1 of stack tStackName to "#CC9999"
      set the cSelectionLocation of btn id 1012 of cd 1 of stack tStackName to the cSelectedChunk of fld id 1041 of cd 1 of stack tStackName
      set the cSelectionLocation of btn id 1013 of cd 1 of stack tStackName to empty
   end if
   --hiliteTagButtons tCh,tCh2
   --set the cFocusedObject of cd 1 of stack "Tagging Area Palette" to 1041
   if the visible of group id 1931 of cd 1 of stack tStackName then set the loc of group id 1931 of cd 1 of stack tStackName to (((the width of fld id 1041 of cd 1 of stack tStackName)/2)+41,(the clickV+8))
   if the cCursorID of fld id 1041 of cd 1 of stack tStackName <> empty then
      lock screen
      saveForUndoRedo 1041
      put line 1 of (the cCursorID of fld id 1041 of cd 1 of stack tStackName) into tIBeamID
      put line 2 of (the cCursorID of fld id 1041 of cd 1 of stack tStackName) into tTag
      put empty into tTag2
      if (tTag begins with "hi-") or (tTag begins with "emph-") then 
         put tTag into tTag2
         put char 1 to offset("-",tTag)-1 of tTag into tTag
      end if
      put identifyPullDownMenu(tTag) into tBtnID
      if tBtnID is empty then exit selectionChanged
      put btn id tBtnID of cd 1 into pBtns
      put lineOffset(tTag,pBtns) into tLN
      if tLN = 0 then exit selectionChanged
      set the label of btn id tBtnID to tTag
      select line tLN of btn id tBtnID of cd 1 of stack tStackName
      put empty into tAttrib
      put empty into tVal
      if tTag2 begins with "emph-" and tIBeamID is among the items of "1356,1357,1358" then
         if tIBeamID = 1356 then put "bold" into tVal
         else if tIBeamID = 1357 then put "italic" into tVal
         else if tIBeamID = 1358 then put "underline" into tVal
         put "rend" into tAttrib
      end if
      if tTag2 begins with "hi-" and tIBeamID is among the items of "1359,1361,1362" then
         if tIBeamID = 1359 then put "bold" into tVal
         else if tIBeamID = 1361 then put "italic" into tVal
         else if tIBeamID = 1362 then put "underline" into tVal
         put "rend" into tAttrib
      end if
      if tAttrib <> empty then
         set the label of btn id 1060 of cd 1 to tAttrib
         put btn id 1060 of cd 1 into pAtts
         put lineOffset(tAttrib,pAtts) into tLN
         if tLN <> 0 then select line tLN of btn id 1060 of cd 1 of stack tStackName
      end if 
      if tVal <> empty then
         set the label of btn id 1061 of cd 1 to tVal
         put btn id 1061 of cd 1 into pVals
         put lineOffset(tVal,pVals) into tLN
         if tLN <> 0 then select line tLN of btn id 1061 of cd 1 of stack tStackName
      end if 
      if (tCh2 <> tCh-1) then 
         if char tCh of fld id 1041 of cd 1 is space then add 1 to tCh
         if char tCh2 of fld id 1041 of cd 1 is space then subtract 1 from tCh2
         select char tCh to tCh2 of fld id 1041 of cd 1 of stack tStackName
         send "mouseUp" to btn id 1012 of cd 1 of stack tStackName
         exit selectionChanged
      else
         select before char tCh of fld id 1041 of cd 1 of stack tStackName
         send "mouseUp 1041" to btn id 1013 of cd 1 of stack tStackName
         exit selectionChanged
      end if
   end if
   
   if the optionKey is down then
      put tFld into pToxt
      put word 2 of the cSelectedChunk of fld id 1041 of cd 1 of stack tStackName into tCh
      if the textColor of char tCh of fld id 1041 of cd 1 of stack tStackName is not empty then
         put the textColor of char tCh of fld id 1041 of cd 1 of stack tStackName into tCol
         repeat with x = tCh-1 down to 1
            if the textColor of char x of fld id 1041 of cd 1 of stack tStackName is not tCol then 
               put x+1 into tSta
               exit repeat
            end if
         end repeat
         repeat with x = tCh+1 to length(pToxt)
            if the textColor of char x of fld id 1041 of cd 1 of stack tStackName is not tCol then 
               put x-1 into tSto
               exit repeat
            end if
         end repeat
         if tSto is empty then put length(pToxt) into tSto
         put char tSta to tSto of pToxt into tTag
         if ">"&cr&"<" is in tTag then 
            put  offset(">"&cr&"<",tTag) into ry
            if tSta+ry >= tCh then 
               put char 1 to ry of tTag into tTag
               put tSta into tCh
               put tSta+length(tTag)-1 into tSto
            else 
               put char ry+2 to -1 of tTag into tTag
               put ry+tSta into tSta
               put ry+tSta into tCh
            end if
         end if
         if "><" is in tTag then 
            put  offset("><",tTag) into ry
            if tSta+ry >= tCh then 
               put char 1 to ry of tTag into tTag
               put tSta into tCh
               put tSta+length(tTag)-1 into tSto
            else 
               put char ry+1 to -1 of tTag into tTag
               put ry+tSta into tSta
               put ry+tSta into tCh
            end if
         end if
         if word 1 of tTag is not tTag then 
            put word 1 of tTag into tTag
            put tSta+length(tTag)-1 into tSto
         end if
         if char -1 of tTag is not ">" then 
            put ">" after tTag
            put 0 into tDif
            replace " >" with ">" in tTag
         else put 0 into tDif
         if "=" is in tTag then exit to top
         if char 2 of tTag is "/" then
            put tTag into tTag2
            delete char 2 of tTag
            delete char -1 of tTag
            put empty into pats
            put offsets(tTag&space,char 1 to tCh-1 of pToxt) into pats1
            put offsets(tTag&">",char 1 to tCh-1 of pToxt) into pats2
            if pats1 is 0 then put empty into pats else put pats1&comma into pats
            if pats2 is not 0 then put pats2 after pats
            if pats is not empty then sort items of pats ascending numeric
            put offsets(tTag2,char 1 to tCh-1 of pToxt) into pits
            put empty into tStart
            repeat with x = the number of items of pats down to 1
               put item x of pats into tOpA
               put item x of pits into tClA
               if tOpA > tClA or tClA is empty or tClA is 0 then 
                  put tOpA into tStart
                  exit repeat
               end if
            end repeat
            if tStart is not empty then 
               select char tStart to tSto of fld id 1041 of cd 1 of stack tStackName
            end if
         else if char 2 of tTag is not "/" then
            put tTag into tTag2
            put "/" after char 1 of tTag2
            put empty into pats
            put offsets(tTag&space,char tCh+1 to length(pToxt) of pToxt) into pats1
            put offsets(tTag&">",char tCh+1 to length(pToxt) of pToxt) into pats2
            if pats1 is 0 then put empty into pats else put pats1&comma into pats
            if pats2 is not 0 then put pats2 after pats
            if pats is not empty then sort items of pats ascending numeric
            put offsets(tTag2,char tCh+1 to length(pToxt) of pToxt) into pits
            put empty into tStop
            repeat with x = 1 to the number of items of pits
               put item x of pits into tClA
               put item x of pats into tOpA
               if tClA < tOpA or tOpA is empty or tOpA is 0 then 
                  put tClA+tCh+length(tTag)+tDif into tStop
                  exit repeat
               end if
            end repeat
            if tStop is not empty then 
               select char tSta to tStop of fld id 1041 of cd 1 of stack tStackName
            end if
         end if
         exit selectionChanged
      end if
   else
      put empty into sta
      put empty into sto
      put char 1 to tCh of tFld into tFld2
      put offsetOfTwoPrecedingDistinctChars(tFld2,"<",">") into tAngs
      put item 1 of tAngs into tAngOp
      put item 2 of tAngs  into tAngCl
      if tAngCl <> 0 then
         if tAngOp <> 0 then
            if tAngCl > tAngOp and tAngCl <> tCh then 
               exit selectionChanged
            else if tAngCl < tAngOp then 
               put tAngOp into sta
            end if
         end if
      else if tAngCl = 0 then
         if tAngOp <> 0 then put tAngOp into sta
      end if
      repeat with c = tCh to length(tFld)
         if char c of tFld is "<" then 
            if sta is not empty then put c-1 into sto
            else
               exit selectionChanged
            end if
         else if char c of tFld is ">" then 
            put c into sto
            exit repeat
         end if
      end repeat
      put char sta to sto of tFld into tTag
      if char 2 of tTag is "/" then delete char 2 of tTag
      put empty into tAttribute
      put empty into tValue
      if space is in tTag then
         put offset(space,tTag) into dy
         put offset("=",tTag) into da
         put char dy+1 to da-1 of tTag into tAttribute
         put offset(quote,tTag,da+2) into tdo
         put char da+2 to da+2+tdo-1 of tTag into tValue
         delete char dy to -1 of tTag
      end if
      if char 1 of tValue is quote then put empty into tValue
      if char 1 of tTag is "<" then delete char 1 of tTag
      if char -1 of tTag is ">" then delete char -1 of tTag
      replace "b/" with "b" in tTag
      if tTag is "emph" then put "emphasis" into tTag
      if tTag is among the items of "i,u,b,choice,div,div1,div2,div3,div4,div5,div6,div7,head,item,list,orig,reg,seg,figure,figDesc,graphic" then put "1034" into tFldID 
      else if tTag is "p" then put "1008" into tBtnID
      else put "1038" into tBtnID
      set the wholeMatches to true
      put lineOffset(tab&tTag,btn id tBtnID of cd 1) into et
      if et <> 0 then send "menuPick tTag" to btn id tBtnID of cd 1 of stack tStackName
      set the label of btn id 1060 of cd 1 of stack tStackName to tAttribute
      set the label of btn id 1061 of cd 1 of stack tStackName to tValue
   end if
end selectionChanged

on scrollbarDrag
   lock screen
   local tLNs
   if the textHeight of me is empty then set the textHeight of me to 24
   repeat with i = 1 to round((the formattedHeight of me)/(the textHeight of me) + 100)
      put i & cr after tLNs
   end repeat
   put tLNs into fld id 1389 of cd 1
   set the vScroll of fld id 1389 of cd 1 to the vScroll of me
end scrollbarDrag


function lastOffsetOfTwoDistinctChars tContainer,pChar1,pChar2
   local x,y,tContainer2,tChar,tcontL
   put length(tContainer) into tcontL
   if tcontL > 10000 then put char (tcontL-9999) to -1 of tContainer into tContainer
   repeat for each char tChar in tContainer
      put tChar before tContainer2
   end repeat
   get offset(pChar1,tContainer2)
   if it = 0 then put 0 into x
   else put tcontL-(it-1) into x
   get offset(pChar2,tContainer2)
   if it = 0 then put 0 into y
   else put tcontL-(it-1) into y
   return x,y
end lastOffsetOfTwoDistinctChars

function offsetOfTwoPrecedingDistinctChars tContainer,pChar1,pChar2,pReduce
   local x,y,tContainer2,tChar,tcontL
   put length(tContainer) into tcontL
   if tcontL > 10000 and pReduce <> false then put char (tcontL-9999) to -1 of tContainer into tContainer
   repeat for each char tChar in tContainer
      put tChar before tContainer2
   end repeat
   get offset(pChar1,tContainer2)
   if it = 0 then put 0 into x
   else put tcontL-(it-1) into x
   get offset(pChar2,tContainer2)
   if it = 0 then put 0 into y
   else put tcontL-(it-1) into y
   return x,y
end OffsetOfTwoPrecedingDistinctChars

function offsetOfTwoCloselyPrecedingDistinctChars tContainer,pChar1,pChar2,pReduce
   local x,y,tContainer2,tChar,tcontL
   put length(tContainer) into tcontL
   if tcontL > 1000 and pReduce <> false then put char (tcontL-999) to -1 of tContainer into tContainer
   repeat for each char tChar in tContainer
      put tChar before tContainer2
   end repeat
   get offset(pChar1,tContainer2)
   if it = 0 then put 0 into x
   else put tcontL-(it-1) into x
   get offset(pChar2,tContainer2)
   if it = 0 then put 0 into y
   else put tcontL-(it-1) into y
   return x,y
end offsetOfTwoCloselyPrecedingDistinctChars

function lastOffsetOfOneString tContainer,pString
   local tContainer2,tReverseString,tcontL
   put length(tContainer) into tcontL
   if tcontL > 10000 then put char (tcontL-9999) to -1 of tContainer into tContainer
   repeat for each char tChar in tContainer
      put tChar before tContainer2
   end repeat
   repeat for each char tChar in pString
      put tChar before tReverseString
   end repeat
   get offset(tReverseString,tContainer2)
   if it = 0 then return 0
   else return ((tcontL-(it-1)) - ((length(tReverseString))+1))
end lastOffsetOfOneString


##TOOLTIP:
##Click tags to fill the pull-down tag menus with related data.
##OPTION( ALT)-click tags to see their range.



#####################
#####################

## Script of field "Script Transcription”, ID 1004 of CARD 1 of STACK STEP Transcription Module

on tabKey
   lock screen
   local tSC,ut,ot
   set the cPrevKey of me to empty
   put the selectedChunk into tSC
   if tSC <> empty then
      get word 2 of tSC
      if the shiftKey is up then
         repeat with i = it+1 to length(me)
            if char i of me is ">" then
               select after char i of me
               if " </" is in char it to i of me then 
                  put char it to i of me into ot
                  put offset(" </",ot) into ut
                  if char i+1 of me is not in " ,.?!;:" and "</p>" is not in ot then
                     put space after char i of me
                  end if
                  delete char it+ut-1 of me
                  select after char i of me
               end if
               exit repeat
            end if
         end repeat
      else if the shiftKey is down then
         repeat with i = it-2 down to 1
            if char i of me is ">" then
               select after char i of me
               exit repeat
            end if
         end repeat
      end if
   end if
end tabKey

on keyUp theKey
   lock screen
   local tSC,ut,ot,ita,tText,tWN,tWord,tChars,tTagName,tFirstPrev,tSecondPrev,tCurrentChar,tCurrentFourChars,tThirdPrev
   put space & quote & "'/<>" into tChars
   if theKey is not in tChars then pass keyUp
   put the selectedChunk into tSC
   /*if word 4 of tSC < word 2 of tSC then get word 4 of tSC else */get word 2 of tSC
   put the text of me into tText
   if it >= 80 then put it-80 into ita else put 1 into ita
   put char it-3 to it of tText into tCurrentFourChars
   put char 1 of tCurrentFourChars into tThirdPrev
   put char 2 of tCurrentFourChars into tSecondPrev
   put char 3 of tCurrentFourChars into tFirstPrev
   put char 4 of tCurrentFourChars into tCurrentChar
   if (theKey is quote and tFirstPrev <> "=") or theKey is "'" then
      if the cCurlyQuoting of this stack is true and checkIfInsideTag(char ita to it-1 of tText,it) is false then
         if theKey is "'" then
            if tSecondPrev is cr or tSecondPrev is in " ([{¡¿>’"  then
               put "‘" into char it-1 of me
            else put "’" into char it-1 of me
            put empty into tText
            exit keyUp
         end if
         if theKey is quote then
            if tSecondPrev is cr or tSecondPrev is in " ([{¡¿>”"  then
               put "“" into char it-1 of me
            else put "”" into char it-1 of me
            put empty into tText
            exit keyUp
         end if
      end if
   end if
   if theKey is space and tSecondPrev is "&" then
      put "&amp;" into char it-2 of me
      select after char it+3 of me
   else if theKey is space and tSecondPrev is space then
      delete char it-1 of me
      select after char it-2 of me
      put empty into tText
      beep
      exit keyUp
   else if theKey is space and tCurrentChar is space then
      delete char it-1 of me
      select after char it-1 of me
      put empty into tText
      beep
      exit keyUp
   else if theKey is space and tSecondPrev is "<" then
      if it-3 > 1 then
         if tThirdPrev is not in " <>" and tThirdPrev is not cr then
            put  tThirdPrev&space&"<" into char it-3 to it-1 of me
         else
            delete char it-1 of me
            select after char it-2 of me
            beep
            put empty into tText
            exit keyUp
         end if
      else
         delete char it-1 of me
         select after char it-2 of me
         beep
         put empty into tText
         exit keyUp
      end if
   else if theKey is space and tSecondPrev is cr then 
      if char it-1 of tText is space then delete char it-1 of me
      select after char it-2 of me
      beep
      put empty into tText
      exit keyUp
   else if theKey is space and tFirstPrev is cr then 
      if tCurrentChar is space then delete char it of me
      select after char it-1 of me
      beep
      put empty into tText
      exit keyUp
   else if theKey is "/" then
      put it-3 into ut
      if tThirdPrev&tSecondPrev /*char ut to ut+1 of tText*/ is " <" then
         put "</" into char  ut to ut+2 of me
         --colorAll  1004
         select after char ut+1 of me
         put empty into tText
         exit keyUp
      end if
   else if theKey is "<" then
      if tCurrentChar is space then
         put " <" into char  it-1 to it of me
         select after char it of me
         put empty into tText
         exit keyUp
      end if
   else if theKey is space and tSecondPrev is ">" then
      put it-3 into ut
      repeat with i = ut down to 1
         if char i of tText is not in "</" then next repeat
         else if char i-1 to i+2 of tText is among the items of "</p>,</l>" then 
            delete char it-1 of me
            beep
            put empty into tText
            exit keyUp
         else if char i-1 to i of tText is "</" then pass keyUp
         else if char i of tText is "<" then
            if char i-1 of tText is not in " <>" and char i-1 of tText <> cr and i <> 1 then
               delete char it-1 of me
               put space before char i of me
               select after char ut+2 of me
               put empty into tText
               exit keyUp
            else
               delete char it-1 of me
               beep
               put empty into tText
               exit keyUp
            end if
         end if
      end repeat
   else if theKey is ">" then
      if tSecondPrev is not in "-/ " then
         put (word 2 of tSC)-2 into ut
         repeat with i = ut down to 1
            if char i of tText is "<"  then 
               if char i+1 of tText is not in "!/" then
                  put segment 1 of (char i+1 to ut of tText) into tTagName
                  if tTagName is not among the segments of "body subst" then put "</"&tTagName&">" after char ut+1 of me
                  else if tTagName is "subst" then put "<del></del><add></add></subst>" after char ut+1 of me
                  describeAlts
                  put the text of me into tText
                  if tTagName is not among the segments of "body subst" then 
                     colorizeJustEnteredTag (char i to (ut+4+length(tTagName)) of tText),i,(ut+4+length(tTagName)),1004--colorAll  1004
                     select after char ut+1 of me
                  else if tTagName is "subst" then
                     colorizeJustEnteredTag (char i to (ut+31) of tText),i,(ut+31),1004
                     select after char ut+6 of me
                  end if
                  exit repeat
               end if
            else if char i of tText is ">" then
               put empty into tText
               pass keyUp
            end if
         end repeat
      else
         if tSecondPrev is space then
            put "> " into char it-2 to it-1 of me
            select after  char it-1 of me
         end if 
      end if
      put empty into tText
      pass keyUp
   else
      put empty into tText
      pass keyUp
   end if
   put empty into tText
end keyUp

private function isTypableFast pChar,pChar2
   if pChar is not in "</> " and pChar is not cr and pChar2 is not in "</> " and pChar2 is not cr then return true
   return false
end isTypableFast

on keyDown theKey
   local tSC,tTog,tTog2,tLN,tText,tText2,tAngs,tAngOp,tAngCl,tPrevKey,tBackChars
   if the mouseLoc is within the rect of me then set the screenMouseLoc to ((the left of fld id 1017 of cd 1)+(the left of this stack)+100),((the top of this stack)+(the top of fld id 1017 of cd 1)+100)
   if the text of me is empty then
      checkForDocData
      put "<body>"&cr&"<p>"&theKey&"</p>"&cr&"</body>" into me
      colorAll 1004
      select after char 4 of line 2 of me
      exit keyDown
   end if
   uncolorButtons
   put the text of me into tText
   put the selectedChunk into tSC
   get word 2 of tSC
   if it > length(tText)-400 then scrollFld it,1004
   put the cPrevKey of me into tPrevKey
   if tPrevKey is empty then put char it-1 of tText into tPrevKey
   if isTypableFast(theKey,tPrevKey) is true then 
      put empty into tText
      pass keyDown --(char it-1 of tText)
   end if
   set the cPrevKey of me to theKey
   if (word 4 of tSC >= word 2 of tSC) and (the id of fld (segment -1 of the selectedChunk) is 1004) then put empty into the selectedChunk
   put char it-5 to it-1 of tText into tBackChars
    if theKey is space then
      if ((tPrevKey is cr) or (it is 1 and char 1 of tText is "<")) then 
         put empty into theKey
         put empty into tText
         exit to top
      end if
   end if
   
   if theKey is not in "<>& " then
      if ((tPrevKey is cr) or (it is 1 and char 1 of tText is "<")) then 
         put empty into theKey
         put empty into tText
         exit to top
      end if
      if char 2 to 5 of tBackChars is among the items of "</p>,</l>" then 
         put char 2 to 5 of tBackChars into tTog2
         put "<"&char 3 to -1 of tTog2 into tTog
         put cr&tTog&theKey&tTog2 before char it of me
         colorizeJustEnteredTag tTog&theKey&tTog2,it+1,it+length(tTog&theKey&tTog2),1004
         select after char it+4 of me
         put empty into tText
         exit keyDown
      else if tBackChars is among the items of "</p> ,</l> " then 
         put char 1 to 4 of tBackChars into tTog2
         put "<"&char 3 to -1 of tTog2 into tTog
         put cr&tTog&theKey&tTog2 into char it-1 of me
         colorizeJustEnteredTag tTog&theKey&tTog2,it,it+length(tTog&theKey&tTog2)-1,1004
         select after char it+4 of me
         put empty into tText
         exit keyDown
      else
         put char 1 to it-1 of tText into tText2
         put lastOffsetOfTwoDistinctChars(tText2,"<",">") into tAngs
         put item 1 of tAngs into tAngOp
         put item 2 of tAngs  into tAngCl
         if (tAngCl > tAngOp) or (tAngOp = 0 and tAngCl = 0) then
            put theKey before char it of me
            set the textColor of char tAngCl+1 to it of me to empty
            put empty into tText
            exit keyDown
         else if (tAngOp > tAngCl) then
            put theKey before char it of me
            set the textColor of char it of me to the textColor of char it-1 of me
            put empty into tText
            exit keyDown
         end if
      end if
   end if
   if theKey is "<" then
      if char 2 to 5 of tBackChars is among the items of "</p>,</l>" then 
         put cr&"<" before char it of me
         select before char it+2 of me
         put empty into tText
         exit keyDown
      else if tBackChars is  among the items of "</p> ,<l/> " then 
         put cr&"<" into char it-1 of me
         select before char it+1 of me
         put empty into tText
         exit keyDown
      else 
         put empty into tText
         pass keyDown
      end if
   else if theKey is ">" then
      if tPrevKey is ">" or tPrevKey is cr then 
         put empty into tText
         exit to top
      else 
         put empty into tText
         pass keyDown
      end if
   else
      put empty into tText
      pass keyDown
   end if
   put empty into tText
end keyDown

on mouseEnter
   if the cCursorID of fld id 1004 of cd 1 is not empty then 
      set the lockCursor to true
      set the cursor to line 1 of the cCursorID of fld id 1004 of cd 1
      set the lockCursor to true
   end if
end mouseEnter

on mouseWithin
   local tContent,tCh,tNW,pFTag,pPosition,ots,pTag,pTagEnd,ut,yts,uts,pEndTag,yt,ot,ots1,pML,tC,pAttr1,pValu1,pAttr2,pValu2,pAttr3,pValu3,pAttr4,pValu4,tX,tY,tZ,tNumSeg
   put fld id 1004 of cd 1 into tContent
   get the mouseText
   put the mouseChunk into tCh
   put returnTagPosition2(tContent,word 2 of tCh) into pPosition
   if pPosition <> false then
      put item 1 of pPosition into tX
      put item 2 of pPosition into tY
      put char tX to tY of tContent into pFTag
      set the cPopUpMenu of btn "XMLTagger1" of cd 1 to "Copy tag "&pFTag&"|"&tX,tY
   else
      set the cPopUpMenu of btn "XMLTagger1" of cd 1 to empty
   end if
   if the hilite of btn id 1385 of cd 1 is true then
      get the mouseText
      put the mouseChunk into tCh
      if word 2 of tCh = word 4 of tCh and char (word 2 of tCh) of tContent is not in "pl" then 
         put empty into tContent
         pass mouseWithin
      end if
      put returnTagPosition3(tContent,word 2 of tCh) into pPosition
      if pPosition <> false then
         put item 1 of pPosition into tX
         put item 2 of pPosition into tY
      else
         put empty into tContent
         set the cPopUpMenu of btn "XMLTagger1" of cd 1 to empty
         pass mouseWithin
      end if
      put char tX to tY of tContent into pFTag
      set the cPopUpMenu of btn "XMLTagger1" of cd 1 to "Copy tag "&pFTag
      put char 2 to -2 of pFTag into pFTag
      if char -1 of pFTag is "/" then delete char -1 of pFTag
      repeat with r = 1 to 4
         do "put empty into pAttr"&r
         do "put empty into pValu"&r
      end repeat
      put the number of segments of pFTag into tNumSeg
      put trueword 1 of pFTag into pTag
      if tNumSeg > 1 then
         put space&segment 2 to -1 of pFTag into pFTag
         if "="&quote is not in pFTag then pass mouseWithin
         if space is in pFTag then
            put offset(space,pFTag) into ots1
            put offsets(quote&space,pFTag) into yts
            put ots1-1,yts into ots
            put offsets(quote,pFTag) into uts
            put 0 into tZ
            repeat with z = 1 to (the number of items of uts)-1 step 2
               add 1 to tZ
               do "put char (item tZ of ots)+2 to (item z of uts) -2 of pFTag into pAttr"&tZ
               if tZ <> the number of items of ots then
                  do "put char (item z of uts)+1 to (item z+1 of uts)-1 of pFTag into pValu"&tZ
               else
                  do "put char (item z of uts)+1 to -2 of pFTag into pValu"&tZ
               end if
               do "replace quote with empty in pValu"&tZ
            end repeat
         end if
      end if
      if pTag is among the items of "body" then 
         put empty into tContent
         pass mouseWithin
      end if
      if "</" is not in segment -1 of pFTag then
         if char (item 2 of pPosition)-1 of tContent is not "/" and pTag is not among the items of "p,table,row,note" then
            put "</"&pTag&">" into pEndTag
            put offset(pEndTag,tContent,item 2 of pPosition) into yt
            put length(pEndTag)+(item 2 of pPosition)+yt-1 into pTagEnd
         else
            put item 2 of pPosition into pTagEnd
         end if
      else
         put item 2 of pPosition into pTagEnd
      end if
      put the mouseLoc into pML
      callAttributeValuePalette pTag,"1004",pPosition,pAttr1,pValu1,pAttr2,pValu2,pAttr3,pValu3,pAttr4,pValu4,pML,pTagEnd
      put empty into tContent
      pass mouseWithin
   end if
   if the cTagTip of stack "STEP Transcription Module" is "on" then
      get the mouseText
      put the mouseChunk into tC
      if "<!" is in it then 
         put empty into tContent
         pass mouseWithin
      end  if
      if char (word 2 of tC)-1 of tContent  is in "</" then
         if char (word 4 of tC)+1 of tContent is in " />" then put length(it) into ot
         get char 1 to ot of it
         if char 2 of it is "/" then delete char 2 of it
         float it
      else if "="&quote is in char (word 4 of tC)+1 to (word 4 of tC)+2 of tContent then
         put getAttributeTEIExplanation(it) into ut
         floating ut
      else
         set the vis of fld "Floater" of cd 1 to false
      end if
   end if
   put empty into tContent
end mouseWithin

on mouseLeave
   set the vis of fld "Floater" of cd 1 to false
   set the cursor to arrow
   set the lockCursor to false
end mouseLeave

on callAttributeValuePalette pTag,PFldID,pPosition,pAttr1,pValu1,pAttr2,pValu2,pAttr3,pValu3,pAttr4,pValu4,pML,pTagEnd
   set the cCharToCharPosition of stack "Insert Attributes and Values" to pPosition
   set the cFieldID of stack "Insert Attributes and Values" to pFldID
   palette stack "Insert Attributes and Values"
   lock screen
   set the topLeft of  stack "Insert Attributes and Values" to ((the left of stack "STEP Transcription Module")+(item 1 of pML-215),(the top of stack "STEP Transcription Module")+(item 2 of pML)+8)
   put pTag into fld id 1004 of cd 1 of stack "Insert Attributes and Values"
   send "resumeStack" to stack "Insert Attributes and Values"
   set the label of btn id 1017 of cd 1 of stack "Insert Attributes and Values" to pAttr1
   set the label of btn id 1019 of cd 1 of stack "Insert Attributes and Values" to pAttr2
   set the label of btn id 1021 of cd 1 of stack "Insert Attributes and Values" to pAttr3
   set the label of btn id 1023 of cd 1 of stack "Insert Attributes and Values" to pAttr4
   set the label of btn id 1018 of cd 1 of stack "Insert Attributes and Values" to pValu1
   set the label of btn id 1020 of cd 1 of stack "Insert Attributes and Values" to pValu2
   set the label of btn id 1022 of cd 1 of stack "Insert Attributes and Values" to pValu3
   set the label of btn id 1024 of cd 1 of stack "Insert Attributes and Values" to pValu4
   if fld id 1004 of cd 1 of stack "Insert Attributes and Values" <> empty then put char (item 1 of pPosition) to pTagEnd of fld id pFldID of stack "STEP Transcription Module" into fld id 1037 of cd 1 of stack "Insert Attributes and Values"
   else put empty into fld id 1037 of cd 1 of stack "Insert Attributes and Values"
end callAttributeValuePalette

on float pmsg--behaves like a tooltip
   local pExpanded
   put desabbreviateSomeTags(pmsg) into pExpanded
   if pExpanded is not empty then 
      if pExpanded is not in fld "Floater" of cd 1 then set the vis of fld "Floater" of cd 1 to false
      put pExpanded into fld "Floater" of cd 1
      set the height of fld "Floater" of cd 1 to (the formattedHeight of fld "Floater" of cd 1)/*-6*/
      set the dontWrap of fld "Floater" to true
      set the textAlign of fld "Floater" to "center"
      set the width of fld "Floater" of cd 1 to (the formattedWidth of fld "Floater" of cd 1)-4
      set the topLeft of  fld "Floater" of cd 1 to ((item 1 of the mouseLoc)+16,(item 2 of the mouseLoc))
      set the vis of fld "Floater" of cd 1 to true
   else
      set the vis of fld "Floater" of cd 1 to false
   end if
end float

on selectionChanged
   local tSel,tFld,tCh,tCh2,tLineNum,tIBeamID,tTag,tTag2,tAppendAttVals,tCompleteTag,tExtraLength,pMenuID
   local pBtns,tLN,tAttrib,tVal,pAtts,pVals,tExtra,pToxt,tCol,tSta,tSto,ry,tDif,pats,pats1,pats2,pits,tStart,tOpA,tClA
   local tStop,sta,sto,tAttribute,tValue,dy,da,tdo,tFldID,tFld2,tAngs,tAngOp,tAngCl
   lock screen
   compilePageBreaks 1004
   compileAnchoredNotes
   uncolorBGLines
   if checkUltimateTick(1004) then saveForUndoRedo 1004
   set the cSelectedChunk of fld id 1004 of cd 1 to the selectedChunk
   set the cSelectedText of fld id 1004 of cd 1 to the selectedText
   put the cSelectedText of fld id 1004 of cd 1 into tSel
   put fld id 1004 of cd 1 into tFld
   put word 2 of the cSelectedChunk of fld id 1004 of cd 1 into tCh
   put word 4 of the cSelectedChunk of fld id 1004 of cd 1 into tCh2
   if tCh2 = tCh-1 then 
      set the cPrevKey of me to char tCh2 of tFld
      set the backgroundColor of btn id 1013 of cd 1 to "#CC9999"
      set the backgroundColor of btn id 1012 of cd 1 to empty
      set the cSelectionLocation of btn id 1013 of cd 1 to the cSelectedChunk of fld id 1004 of cd 1
      set the cSelectionLocation of btn id 1012 of cd 1 to empty
      set the cBetweenOpeningAndClosingTags of btn id 1013 of cd 1 to betweenWhichTags(tFld,tCh,tCh2)
   else
      set the cPrevKey of me to empty
      set the backgroundColor of btn id 1013 of cd 1 to empty
      set the backgroundColor of btn id 1012 of cd 1 to "#CC9999"
      set the cSelectionLocation of btn id 1012 of cd 1 to the cSelectedChunk of fld id 1004 of cd 1
      set the cSelectionLocation of btn id 1013 of cd 1 to empty
   end if
   --hiliteTagButtons tCh,tCh2
   locatePagebreak tCh,1004
   --set the cFocusedObject of cd 1 of stack "Tagging Area Palette" to 1004
   put the lineIndex of char tCh  of fld id 1004 of cd 1 into tLineNum
   if the visible of group id 1931 of cd 1 then set the loc of group id 1931 of cd 1 to (((the width of fld id 1004 of cd 1)/2)+41,(the clickV+8))
   if the cCursorID of fld id 1004 of cd 1 <> empty then
      lock screen
      saveForUndoRedo 1004
      put line 1 of (the cCursorID of fld id 1004 of cd 1) into tIBeamID
      put line 2 of (the cCursorID of fld id 1004 of cd 1) into tTag
      put 0 into tExtraLength
      if "av.png" is in the short name of image id tIBeamID of cd 1 of stack "STEP Transcription Module" and the cTagAppend of stack "TEI Encoding Cursor Palette" <> empty then
         put the cTagAppend of stack "TEI Encoding Cursor Palette" into tAppendAttVals
         put "<"&tTag & tAppendAttVals&rightAngles(tTag) into tCompleteTag
         put length(tCompleteTag) into tExtraLength
         put tCompleteTag into fld id 1010 of cd 1  of stack "STEP Transcription Module"
      else 
         put empty into tAppendAttVals
         put empty into tTag2
         if (tTag begins with "hi-") or (tTag begins with "emph-") then 
            put tTag into tTag2
            put char 1 to offset("-",tTag)-1 of tTag into tTag
         end if
         put identifyPullDownMenu(tTag) into pMenuID
         if pMenuID is empty then exit selectionChanged
         put btn id pMenuID of cd 1 into pBtns
         put lineOffset(tTag,pBtns) into tLN
         if tLN = 0 then exit selectionChanged
         set the label of btn id pMenuID to tTag
         select line tLN of btn id pMenuID of cd 1
         put empty into tAttrib
         put empty into tVal
         if tTag2 begins with "emph-" and tIBeamID is among the items of "1356,1357,1358" then
            if tIBeamID = 1356 then put "bold" into tVal
            else if tIBeamID = 1357 then put "italic" into tVal
            else if tIBeamID = 1358 then put "underline" into tVal
            put "rend" into tAttrib
         end if
         if tTag2 begins with "hi-" and tIBeamID is among the items of "1359,1361,1362" then
            if tIBeamID = 1359 then put "bold" into tVal
            else if tIBeamID = 1361 then put "italic" into tVal
            else if tIBeamID = 1362 then put "underline" into tVal
            put "rend" into tAttrib
         end if
         if tAttrib <> empty then
            set the label of btn id 1060 of cd 1 to tAttrib
            put btn id 1060 of cd 1 into pAtts
            put lineOffset(tAttrib,pAtts) into tLN
            if tLN <> 0 then select line tLN of btn id 1060 of cd 1
         end if 
         if tVal <> empty then
            set the label of btn id 1061 of cd 1 to tVal
            put btn id 1061 of cd 1 into pVals
            put lineOffset(tVal,pVals) into tLN
            if tLN <> 0 then select line tLN of btn id 1061 of cd 1
         end if 
      end if
      if tExtraLength = 0 then
         put true into tExtra
         if tAttrib is empty then put (length(tTag)*2)+5 into tExtraLength
         else
            if tVal is empty then put length(tTag)+length(tAttrib)+6 into tExtraLength
            else put length(tTag)+length(tAttrib)+length(tVal)+6 into tExtraLength
         end if
      else 
         put false into tExtra
      end if
      if (tCh2 <> tCh-1) then 
         if char tCh of fld id 1004 of cd 1 of stack "STEP Transcription Module" is space then add 1 to tCh
         if char tCh2 of fld id 1004 of cd 1 of stack "STEP Transcription Module" is space then subtract 1 from tCh2
         select char tCh to tCh2 of fld id 1004 of cd 1 of stack "STEP Transcription Module"
         send "mouseUp 1004" to btn id 1012 of cd 1 of stack "STEP Transcription Module"
         select char tCh to (tCh2+tExtraLength) of fld id 1004 of cd 1 of stack "STEP Transcription Module"
         exit selectionChanged
      else
         if checkIfInsideTag(tFld,tCh2) is true then exit selectionChanged
         select before char tCh of fld id 1004 of cd 1 of stack "STEP Transcription Module"
         send "mouseUp 1004" to btn id 1013 of cd 1 of stack "STEP Transcription Module"
         if tExtra is true then select after char tCh+tExtraLength-1 of fld id 1004 of cd 1 of stack "STEP Transcription Module"
         else select after char tCh+tExtraLength-(length(tTag)+4) of fld id 1004 of cd 1 of stack "STEP Transcription Module"
         exit selectionChanged
      end if
   end if
   
   if the optionKey is down then
      put tFld into pToxt
      put word 2 of the cSelectedChunk of fld id 1004 of cd 1 into tCh
      if the textColor of char tCh of fld id 1004 of cd 1 is not empty then
         put the textColor of char tCh of fld id 1004 of cd 1 into tCol
         repeat with x = tCh-1 down to 0
            if the textColor of char x of fld id 1004 of cd 1 is not tCol then 
               put x+1 into tSta
               exit repeat
            end if
         end repeat
         repeat with x = tCh+1 to length(pToxt)
            if the textColor of char x of fld id 1004 of cd 1 is not tCol then 
               put x-1 into tSto
               exit repeat
            end if
         end repeat
         if tSto is empty then put length(pToxt) into tSto
         put char tSta to tSto of pToxt into tTag
         if "<" is not in tTag then exit selectionChanged
         if "Span" is in tTag or "anchor" is in tTag then
            repeat with x = tSto+1 to length(pToxt)
               if char x of pToxt is "/" and char x+1 of pToxt is ">" then exit repeat
            end repeat
            select char tSta to x+1 of of fld id 1004 of cd 1
            exit selectionChanged
         end if
         if ">"&cr&"<" is in tTag then 
            put  offset(">"&cr&"<",tTag) into ry
            if tSta+ry >= tCh then 
               put char 1 to ry of tTag into tTag
               put tSta into tCh
               put tSta+length(tTag)-1 into tSto
            else 
               put char ry+2 to -1 of tTag into tTag
               put ry+tSta into tSta
               put ry+tSta into tCh
            end if
         end if
         if "><" is in tTag then 
            put  offset("><",tTag) into ry
            if tSta+ry >= tCh then 
               put char 1 to ry of tTag into tTag
               put tSta into tCh
               put tSta+length(tTag)-1 into tSto
            else 
               put char ry+1 to -1 of tTag into tTag
               put ry+tSta into tSta
               put ry+tSta into tCh
            end if
         end if
         if word 1 of tTag is not tTag then 
            put word 1 of tTag into tTag
            put tSta+length(tTag)-1 into tSto
         end if
         if char -1 of tTag is not ">" then
            put ">" after tTag
            put 0 into tDif
            replace " >" with ">" in tTag
         else put 0 into tDif
         if "=" is in tTag then exit to top
         if char 2 of tTag is "/" then
            put tTag into tTag2
            delete char 2 of tTag
            delete char -1 of tTag
            put empty into pats
            put offsets(tTag&space,char 1 to tCh-1 of pToxt) into pats1
            put offsets(tTag&">",char 1 to tCh-1 of pToxt) into pats2
            if pats1 is 0 then put empty into pats else put pats1&comma into pats
            if pats2 is not 0 then put pats2 after pats
            if pats is not empty then sort items of pats ascending numeric
            put offsets(tTag2,char 1 to tCh-1 of pToxt) into pits
            put empty into tStart
            repeat with x = the number of items of pats down to 1
               put item x of pats into tOpA
               put item x of pits into tClA
               if tOpA > tClA or tClA is empty or tClA is 0 then 
                  put tOpA into tStart
                  exit repeat
               end if
            end repeat
            if tStart is not empty then 
               select char tStart to tSto of fld id 1004 of cd 1
            end if
         else if char 2 of tTag is not "/" then
            put tTag into tTag2
            put "/" after char 1 of tTag2
            put empty into pats
            put offsets(tTag&space,char tCh+1 to length(pToxt) of pToxt) into pats1
            put offsets(tTag&">",char tCh+1 to length(pToxt) of pToxt) into pats2
            if pats1 is 0 then put empty into pats else put pats1&comma into pats
            if pats2 is not 0 then put pats2 after pats
            if pats is not empty then sort items of pats ascending numeric
            put offsets(tTag2,char tCh+1 to length(pToxt) of pToxt) into pits
            put empty into tStop
            repeat with x = 1 to the number of items of pits
               put item x of pits into tClA
               put item x of pats into tOpA
               if tClA < tOpA or tOpA is empty or tOpA is 0 then 
                  put tClA+tCh+length(tTag)+tDif into tStop
                  exit repeat
               end if
            end repeat
            if tStop is not empty then 
               select char tSta to tStop of fld id 1004 of cd 1
            end if
         end if
         exit selectionChanged
      end if
      
   else
      put empty into sta
      put empty into sto
      put char 1 to tCh of tFld into tFld2
      put offsetOfTwoPrecedingDistinctChars(tFld2,"<",">") into tAngs
      put item 1 of tAngs into tAngOp
      put item 2 of tAngs  into tAngCl
      if tAngCl <> 0 then
         if tAngOp <> 0 then
            if tAngCl > tAngOp and tAngCl <> tCh then 
               exit selectionChanged
            else if tAngCl < tAngOp then 
               put tAngOp into sta
            end if
         end if
      else if tAngCl = 0 then
         if tAngOp <> 0 then put tAngOp into sta
      end if
      repeat with c = tCh to length(tFld)
         if char c of tFld is "<" then 
            if char c+1 to c+2 of tFld is "p>" then exit selectionChanged
            if sta is not empty then put c-1 into sto
            else
               exit selectionChanged
            end if
         else if char c of tFld is ">" then 
            put c into sto
            exit repeat
         end if
      end repeat
      put char sta to sto of tFld into tTag
      if tTag is "<mod>" and char sto+1 to sto+4 of tFld is "<del" then put "mod/del/add" into tTag
      if tTag is "<mod type="&quote&"subst"&quote&">" and char sto+1 to sto+4 of tFld is "<del" then put "mod/del/add" into tTag
      if tTag is "</mod>" and char sta-6 to sta-1 of tFld is "</add>" then put "mod/del/add" into tTag
      if "!--" is in tTag then exit selectionChanged
      if char 2 of tTag is "/" then delete char 2 of tTag
      put empty into tAttribute
      put empty into tValue
      put empty into tTag2
      if space is in tTag then
         put offset(space,tTag) into dy
         put offset("=",tTag) into da
         put char dy+1 to da-1 of tTag into tAttribute
         put offset(quote,tTag,da+2) into tdo
         put char da+2 to da+2+tdo-1 of tTag into tValue
         if trueword 1 of tTag is "pb" and tAttribute is "n" then replace space with "_" in tValue
         if char 1 of tValue is quote then put empty into tValue
         put deleteValues(tTag) into tTag2
         delete char dy to -1 of tTag
         if char -2 to -1 of tTag2 <> "/>" then put "</"&tTag&">" after tTag2
      end if
      if char 1 of tTag is "<" then delete char 1 of tTag
      if char -1 of tTag is ">" then delete char -1 of tTag
      replace "b/" with "b" in tTag
      put identifyPullDownMenu(tTag) into tFldID
      if tFldID is empty then exit selectionChanged
      set the wholeMatches to true
      send "menuPick tTag" to btn id tFldID of cd 1
      set the label of btn id 1060 of cd 1 to tAttribute
      if tAttribute <> empty and tAttribute is among the lines of btn id 1060 of cd 1 and "pb" is not in tTag and tAttribute <> "target" then send "menuPick"&& (the label of btn id 1060 of cd 1) to btn id 1060 of cd 1
      if fld id 1206 of cd 1 <> empty and fld id 1206 of cd 1 is not in tValue then 
         set the label of btn id 1061 of cd 1 to tValue
         if tValue is not in btn id 1061 of cd 1 then put tValue into line (the number of lines of btn id 1061 of cd 1)+1 of btn id 1061 of cd 1
         if tValue <> empty and tValue is among the lines of btn id 1061 of cd 1 and "pb" is not in tTag then 
            send "menuPick"&& (the label of btn id 1061 of cd 1) to btn id 1061 of cd 1
         end if
      else if tTag2 <> empty and "pb " is not in tTag2 then 
         put tTag2 into fld id 1010 of cd 1
      end if
      select char tCh to tCh2 of fld id 1004 of cd 1
   end if
   saveForUndoRedo 1004
end selectionChanged

function deleteValues pTagV
   local tL
   put offsets(quote,pTagV) into tL
   if tL <> 0 then
      repeat with x = (the number of items of tL) down to 1
         put empty into char (item x-1 of tL)+1 to (item x of tL)-1 of pTagV
         put x-1 into x
      end repeat
   end if
   return pTagV
end deleteValues

on returnInField
   lock screen
   local tC,tC2,tText,tText2,tCPrev,tLN
   put word 2 of the selectedChunk into tC
   put word 4 of the selectedChunk into tC2
   put the lineIndex of char tC of me into tLN
   put fld id 1004 of cd 1 into tText
   if fld id 1004 of cd 1 is empty then
      saveForUndoRedo 1004
      put "<body>"&cr&"<p></p>"&cr&"</body>" into fld id 1004 of cd 1
      set the textColor of char 1 to -1 of fld id 1004  of cd 1 of stack "STEP Transcription Module" to the cGeneralColor of cd 1 of stack "STEP Transcription Module"
      select after char 3 of line 2 of fld id 1004 of cd 1
      saveForUndoRedo 1004
      checkForDocData
      exit returnInField
   else if tC2 is 6 and char 7 to 9 of me is "<pb" then 
      put cr after char 6 of me
      saveForUndoRedo 1004
      exit returnInField
   else if "<body>" is in char tC to -1 of tText then
      put cr before char tC of fld id 1004 of cd 1
      saveForUndoRedo 1004
      exit returnInField
   else if "</body>" is in char 1 to tC-1 of tText then
      put cr after char tC-1 of fld id 1004 of cd 1
      saveForUndoRedo 1004
      exit returnInField
   else if line tLN of tText begins with "<table" then
      put cr after line tLN of me
      saveForUndoRedo 1004
      exit returnInField
   else if trueword -1 of line tLN of tText is among the items of "row,cell,head" and ((char -2 to -1  of line tLN of tText is "\>") or ((char -1 of line tLN of tText is ">") and (char -(length(trueword -1 of line tLN of tText)+2) of line tLN of tText is "/"))) then
      put cr after line tLN of me
      saveForUndoRedo 1004
      exit returnInField
   else if trueword 1 of line tLN of tText is among the items of "row,cell,head" and char 1 of segment 1 of line tLN of tText is "<" then
      exit returnInField
   else if checkIfInsideTag(tText,tC-1) is true then exit to top
   else
      saveForUndoRedo 1004
      if char tC to tC+2 of tText is "<p>" then 
         if char tC-1 of tText is ">" then put cr before char tC of me
         else
            if char tC-1 of tText is cr then put "<p></p>"&cr before char tC of me
         end if
         saveForUndoRedo 1004
         set the textColor of char tC to tC+6 of fld id 1004  of cd 1 of stack "STEP Transcription Module" to the cGeneralColor of cd 1 of stack "STEP Transcription Module"--colorAll 1004
         exit returnInField
      else if char tC to tC+3 of tText is "</p>" then put tC+4 into tC
      if char tC of tText is cr then 
         put "<p></p>"&cr after char tC of fld id 1004 of cd 1
         colorizeJustEnteredTag "<p></p>",tC+1,,1004
         select after char tC+3 of fld id 1004 of cd 1
      else if char tC-4 to tC-1 of tText is "</p>" and char tC to tC+2 of tText is among the items of "<p>,<p " then
         put cr before char tC of fld id 1004 of cd 1
         saveForUndoRedo 1004
         exit returnInField
      else
         put char tC to -1 of fld id 1004 of cd 1 into tText2
         get checkForNextPTag(tText2,tC,tC) 
         if it is not empty then 
            put line 1 of it into tC
            put line 2 of it into tCPrev
            answer "You may not insert a paragraph within a paragraph. Add a new paragraph after the current one, split the paragraph into two, or cancel?" with "Cancel" or "Split" or "Add" as sheet
            if it is "Cancel" then exit to top
            if it is "Split" then 
               put "</p>"&cr&"<p>" before char tCPrev of fld id 1004 of cd 1 of stack "STEP Transcription Module"
               saveForUndoRedo 1004
               replace " </p>" with  "</p>" in fld id 1004 of cd 1 preserving styles
               replace "<p> " with  "<p>" in fld id 1004 of cd 1 preserving styles
               colorAllParagraphMarkers 1004
               if  char tCPrev+6 of tText is ">" then select after char tCPrev+6 of fld id 1004 of cd 1
               else if  char tCPrev+7 of tText is ">" then select after char tCPrev+7 of fld id 1004 of cd 1
               exit to top
            end if
         end if
         put cr&"<p></p>" before char tC of fld id 1004 of cd 1
         colorizeJustEnteredTag "<p></p>",tC,,1004
         select after char tC+3 of fld id 1004 of cd 1
      end if
      saveForUndoRedo 1004
   end if
end returnInField

function checkIfInsideTag pText,pPosition
   local pBeg
   if length(pText) > 80 then put length(pText) - 80 into pBeg else put 0 into pBeg
   repeat with i = length(pText) down to pBeg
      if char i of pText is ">" then return false
      else if (char i of pText is "<") or (char i-1 to i of pText is "="&quote) then return true
      else next repeat
   end repeat
   return false
end checkIfInsideTag

function checkIfInsideRegOrSCTag pText,pPosition
   local pBeg
   if length(pText) > 80 then put length(pText) - 80 into pBeg else put 0 into pBeg
   repeat with i = length(pText) down to pBeg
      if char i of pText is ">" then return false
      else if ((char i of pText is "<") and (char i+1 of pText <> "!")) or (char i-1 to i of pText is "="&quote) then return true
      else next repeat
   end repeat
   return false
end checkIfInsideRegOrSCTag


function checkIfInsideTag4 pText,pPosition
   repeat with i = 1 to length(pText)
      if i = (pPosition + 300) then return false
      if char i to i+1 of pText is among the items of "</,<!" then return false
      else if char i of pText is ">" then return true
      else next repeat
   end repeat
   return false
end checkIfInsideTag4


function checkIfInsideTag3 pText,pPosition
   local tAngs,tAngOp,tAngCl,sta
   put offsetOfTwoCloselyPrecedingDistinctChars(char 1 to pPosition of pText,"<",">") into tAngs
   put item 1 of tAngs into tAngOp
   put item 2 of tAngs  into tAngCl
   if tAngCl <> 0 then
      if tAngOp <> 0 then
         if tAngCl > tAngOp and tAngCl <> pPosition then 
            return false
         else if tAngCl < tAngOp then 
            return true
         end if
      end if
   else if tAngCl = 0 then
      if tAngOp <> 0 then return true
   end if
end checkIfInsideTag3

function checkIfInsideTag2 pText,pPosition
   local x,y
   repeat with i = pPosition down to 1
      if i = pPosition and char i of pText = ">" and char i-1 of pText <> "-" then 
         put i into y
         exit repeat
      else if char i of pText is ">" and i < pPosition then return false
      else if char i of pText is "<" and char i+1 of pText is not in "/-!" then 
         put i into x
         exit repeat
      else next repeat
   end repeat
   repeat with i = pPosition to length(pText)
      if i = pPosition and char i of pText = "<" and char i+1 of pText <> "/" then put i into x
      else if char i of pText is "<" and i > pPosition  then return false
      else if char i of pText is ">" and char i-1 of pText is not "-" then 
         put i into y
         exit repeat
      else next repeat
   end repeat
   return x,y
end checkIfInsideTag2

function returnTagPosition pText,pPosition
   local tX,tY
   repeat with i = pPosition down to 1
      if char i of pText is ">" and i < pPosition then return false
      else if char i of pText is ">" and i is pPosition then put i into tY
      else if char i of pText is "<" then
         put i into tX
         exit repeat
      else next repeat
   end repeat
   if tX is empty then return false
   repeat with i = pPosition to length(pText)
      if char i of pText is "<" and i > pPosition then return false
      else if char i of pText is ">" then
         put i into tY
         return tX,tY
         exit repeat
      else next repeat
   end repeat
   return false
end returnTagPosition

function returnTagPosition2 pText,pPosition
   local tX,tY,pText2,ut,tEnd
   put char pPosition-79 to pPosition of pText into pText2
   repeat with i = length(pText2) down to 1
      if char i of pText2 is ">" and i < length(pText2) then return false
      else if char i of pText2 is ">" and i is length(pText2) then put pPosition into tY
      else if char i of pText2 is "<" then
         put (pPosition-(79-i)-1) into tX
         exit repeat
      else next repeat
   end repeat
   if tX is empty then return false
   put length(pText) into ut
   if ut > (pPosition+79) then put (pPosition+79) into tEnd else put ut into tEnd
   put char pPosition to tEnd of pText into pText2
   repeat with i = 1 to length(pText2)
      if char i of pText2 is "<" and i > 1 then return false
      else if char i of pText2 is ">" then
         put pPosition+i-1 into tY
         return tX,tY
         exit repeat
      else next repeat
   end repeat
   return false
end returnTagPosition2

function returnTagPosition3 pText,pPosition
   local tX,tY,pText2,ut,tEnd,tTag
   put char pPosition-79 to pPosition of pText into pText2
   repeat with i = length(pText2) down to 1
      if char i of pText2 is ">" and i < length(pText2) then return false
      else if char i of pText2 is ">" and i is length(pText2) then put pPosition into tY
      else if char i of pText2 is "<" then
         if char i+1 of pText2 <> "/" then put (pPosition-(79-i)-1) into tX
         else 
            put char (pPosition-(79-i)) to (pPosition-(79-i))+15 of pText into tTag
            put "<"&trueword 1 of tTag into tTag
            put pPosition-(79-offsetOfOnePrecedingString(pText2,tTag,,))+1 into tX
         end if
         exit repeat
      else next repeat
   end repeat
   if tX is empty then return false
   put length(pText) into ut
   if ut > (pPosition+79) then put (pPosition+79) into tEnd else put ut into tEnd
   put char pPosition to tEnd of pText into pText2
   repeat with i = 1 to length(pText2)
      if char i of pText2 is "<" and i > 1 then return false
      else if char i of pText2 is ">" then
         put pPosition+i-1 into tY
         return tX,tY
         exit repeat
      else next repeat
   end repeat
   return false
end returnTagPosition3

function rightAngles pTag
   if pTag is not among the items of "anchor,pb,lb,substJoin,addSpan,delSpan,damageSpan,gap,handshift,alt,milestone,graphic,space" then return "></"&pTag&">"
   else return "/>"
end rightAngles

on scrollbarDrag
   lock screen
   local tLNs,tEndLine,tLiNum,tH
   put fld id 1389 of cd 1 into tLNs
   put the number of lines of tLNs into tLiNum
   /*if tH is empty or tH is 0 then*/ put (the textSize of fld id 1004 of cd 1) + 11 into tH
   put round(((the formattedHeight of fld id 1004 of cd 1)/(tH)) + 100) into tEndLine
   if tLiNum < tEndLine then
      repeat with i = tLiNum+1 to tEndLine
         put i & cr after tLNs
      end repeat
      put tLNs into fld id 1389 of cd 1
   end if
   set the vScroll of fld id 1389 of cd 1 to the vScroll of fld id 1004 of cd 1
end scrollbarDrag

## dropping a file onto the field
on dragEnter
   if the dragData["text"] is not empty then pass dragEnter
   get the dragData["files"]
   if it is empty then pass dragEnter
   if hasTextFiles(it) then
      set the acceptDrop to true
      focus me
   else
      pass dragEnter
   end if
end dragEnter

function hasTextFiles pFileList
   local tOldDir,tTextFiles,tDir,tTypeCreator,tCreatorTypeList,tLine,tFile,tFiles,uts,tEnding
   lock screen
   put the directory into tOldDir
   set the itemDel to "/"
   put ".step/.stp/.txt/.htm/.html/.xml/.doc/.docx/.odt/.rtf" into tCreatorTypeList
   repeat for each line tFile in pFileList
      if tTextFiles = "" then
         put tFile into tDir
         delete item -1 of tDir
         if tDir = "" then put "/" into tDir  -- happens at root
         set the directory to tDir
         put the files into tFiles
         replace "," with "/" in tFiles
         filter tFiles without ".*"
      end if
      put lineOffset(item -1 of tFile,tFiles) into tLine
      if tLine <> 0 then
         put offsets(".",tFile) into uts
         if uts = 0 then next repeat
         set the itemDel to comma
         put char (item -1 of uts) to -1 of tFile into tEnding
         set the itemDel to "/"
         if (char -4 to -1 of tEnding is among the items of tCreatorTypeList) or (char -5 to -1 of tEnding  is among the items of tCreatorTypeList)
         then put tFile & cr after tTextFiles
      end if
   end repeat
   set the directory to tOldDir
   delete last char of tTextFiles
   set the uTextFiles of me to tTextFiles
   return (tTextFiles <> "")
end hasTextFiles

on dragDrop
   if the dragData["text"] is not empty then pass dragDrop
   local tFiles,tEnding,uts,tFileOption,tTempFileContent,tProcessedFile
   put the uTextFiles of me into tFiles
   if tFiles is empty then pass dragDrop
   lock screen
   repeat for each line tFile in tFiles
      set the itemDel to "/"
      put item -1 of tFile into tEnding
      put offsets(".",tEnding) into uts
      set the itemDel to comma
      put char (item -1 of uts) to length(tEnding) of tEnding into tFileOption
      set the itemDel to "/"
      put /*me & */url ("file:" & tFile) & cr into tTempFileContent
      put _CleanseNonPrintingCharacters(tTempFileContent) into tTempFileContent
      put processFile(tFileOption,tTempFileContent,tFile) & cr after tProcessedFile
   end repeat
   if tFileOption is among the items of ".doc/.docx/.odt" then
      if the platform is "Win32" then set the hideConsoleWindows to true
      set the fixedLineHeight of field id 1004 of cd 1 of this stack to false
      set the htmlText of field id 1004 of cd 1 of this stack to tProcessedFile
      set the fixedLineHeight of field id 1004 of cd 1 of this stack to true
   else if tFileOption is ".rtf" then set the RTFText of me to tProcessedFile
   else if tFileOption is ".html" or tFileOption is ".htm" then 
      set the HTMLText of me to tProcessedFile
      replace "ZOU2" with "<lb/>" in me
   else set the text of me to tProcessedFile
   if not the visible of me then
      send "menuPick Transcription" to btn id 1025 of cd 1
      select line 1 of btn id 1025 of cd 1
   end if
   TEITagField
   unlock screen
end dragDrop

private function _CleanseNonPrintingCharacters pStr
   repeat for each item theNum in "0,1,2,3,4,5,6,7,8"
      replace numToNativeChar(theNum) with empty in pStr
   end repeat
   return pStr
end _CleanseNonPrintingCharacters

function processFile pFileOption,pFileContent,theFile
   local tFileTitle
   lock screen
   set the itemDel to comma
   if pFileOption is empty or pFileOption is not among the items of ".rtf,.txt,.step,.stp,.html,.htm,.xml,.doc,.docx,.odt" then exit processFile
   if pFileOption is ".docx" or pFileOption is ".doc" or pFileOption is ".odt" then
      if the platform is "Linux" then 
         answer "Sorry: in the Linux environment, please only import texts in RTF or HTML, not in Microsoft Word or OpenOffice."
         exit processFile
      end if
      if pFileOption is among the items of ".doc,.docx,.odt" then 
         set the itemDel to "/"
         put item -1 of theFile into tFileTitle
         if wordlibSupports(theFile) then 
            get htmltextOfDocument(theFile)
            if item 1 of it is "error" then
               if item 2 of it is "cantOpenDoc" then 
                  answer "Sorry, file “"&tFileTitle&"” appears to be damaged or invalid."
               else
                  answer item 3 to -1 of it
               end if
               exit processFile
            else 
               return it
            end if
         else
            answer "Sorry,  file “"&tFileTitle&"”  is not of a type that can be imported."
            exit processFile
         end if
         if fld id 1004 of cd 1 of this stack is empty then
            answer "File “"&tFileTitle&"”  is empty. Importation is aborted."
            exit processFile
         end if
         if line 1 to 5 of fld id 1004 of cd 1 of this stack contains "syntax error: unexpected end of file" then
            set the HTMLText of fld id 1004 of cd 1 of this stack to empty
            answer "File “"&tFileTitle&"”  could not be imported because of an unexpected end of line error. Importation of it is aborted."
            exit processFile
         end if
         recordFilePath theFile
         exit processFile
      end if
   end if
   recordFilePath theFile
   get pFileContent
   put uniDecode(uniEncode(it, "UTF8")) into it
   if pFileOption is ".rtf" then 
      set cursor to watch
      replace "\qc" with "\ql" in it
      replace "\qr" with "\ql" in it
      replace "\li-1800 " with empty in it
      replace "_" with space&space in it
      if the platform is "MacOS" then
         correctANSICocoaToANSI it
         correctRTForHTML it
      end if
      if "\uc0\u8232" is in it then replace "\uc0\u8232" with "\line" in it
      if "\u8232" is in it then replace "\u8232" with "\line" in it
      if "\line" is in it then
         replace "\line" with "ZZQZZ" in it
      end if
      return it
   else if pFileOption is ".html" or pFileOption is ".htm" then 
      if "&gt" is in it or "&lt" is in it then simplifyHTML it
      replace "_" with space&space in it
      correctRTForHTML it
      if "<br>" is in it or "<br /" is in it then
         set the cBrHTMLText of me to it
         replace "<br>" with "ZOU2" in it
         replace "<br />" with "ZOU2" in it
      end if
      return it
      exit processFile
   else return it
end processFile

function escapeText pText
   replace space with "\ " in pText
   return pText
end escapeText

on correctRTForHTML @pText
   local tTableRTFandHTMLandMacRoman,tBadRTF,tBadHTML
   put the uTableMacRTFToHTMLtoMacRomanDecimalToANSIRTF of this stack into tTableRTFandHTMLandMacRoman
   repeat with k = 128 to 381
      if k > 244 and k < 352 then next repeat
      if k > 354 and k < 381 then next repeat
      if "\u"&k is in pText then
         put "\u"&k into tBadRTF
         if "\uc0"&tBadRTF&" "&cr is in pText then put "\uc0"&tBadRTF&" "&cr into tBadRTF
         if "cocoa" is not in pText then replace tBadRTF with getGoodRTFMac(k,tTableRTFandHTMLandMacRoman) in pText 
         else replace tBadRTF with getGoodRTFANSI(k,tTableRTFandHTMLandMacRoman) in pText 
      else if "&#"&k&";" is in pText then 
         put "&#"&k&";" into tBadHTML
         replace tBadHTML with getGoodHTML(k,tTableRTFandHTMLandMacRoman) in pText
      end if
   end repeat
end correctRTForHTML
   
on correctANSICocoaToANSI @pText
   local tTableChars,zt,tAlt
   If "ansi" is in pText and "cocoa" is in pText then
      put the uTableMacRTFToHTMLtoMacRomanDecimalToANSIRTF of this stack into tTableChars
      set the itemDel to "|"
      repeat for each line tLine in tTableChars
         get item 5 of tLine
         if it is among the items of "\'91|\'92|\'93|\'94|\'96|\'97" then next repeat
         if it is not empty and it is in pText then 
            put lineOffsets(it,tTableChars) into zt
            replace comma with "|" in zt
            if the number of items of zt = 2 then
               if it is in item 5 of line (item 1 of zt) of tTableChars then put item 5 of line (item 2 of zt) of tTableChars into tAlt
               else if it is in item 5 of line (item 2 of zt) of tTableChars then 
                  put item 5 of line (item 1 of zt) of tTableChars into tAlt
               end if
               replace it with tAlt in pText
            end if
         end if
      end repeat
      replace "\'d0" with "\'96" in pText
      replace "\'d1" with "\'97" in pText
      replace "\'a6" with "\'b6" in pText
      replace "\'9a" with "\'f6" in pText
      replace "\'f8" with "\'af" in pText
      replace "\'8a" with "\'e4" in pText
      replace " \'91" with "|www|" in pText
      replace "\'91" with "\'eb" in pText
      replace "\'be" with "\'e6" in pText
      replace "|www|" with "\'91" in pText
      replace "\'D9" with "\'9F" in pText
      replace "_" with space in pText
   end if
end correctANSICocoaToANSI

function getGoodRTFMac pString,@pTable
   local ut,tNewRTF
   put lineOffsets(pString,pTable) into ut
   replace comma with "|" in ut
   set the itemDelimiter to "|"
   repeat with x = 1 to the number of items of ut
      if pString is item 4 of line (item x of ut) of pTable then 
         put item 2 of line (item x of ut) of pTable into tNewRTF
         exit repeat
      end if
   end repeat
   set the itemDelimiter to comma
   return tNewRTF
end getGoodRTFMac

function getGoodRTFANSI pString,@pTable
   local ut,tNewRTF
   put lineOffsets(pString,pTable) into ut
   replace comma with "|" in ut
   set the itemDelimiter to "|"
   repeat with x = 1 to the number of items of ut
      if pString is item 4 of line (item x of ut) of pTable then 
         put item 5 of line (item x of ut) of pTable into tNewRTF
         exit repeat
      end if
   end repeat
   set the itemDelimiter to comma
   return tNewRTF
end getGoodRTFANSI

on RTFMacToANSI @pText
   local tTableChars,tNewRTF
   put the uTableMacRTFToHTMLtoMacRomanDecimalToANSIRTF of this stack into tTableChars
   set the itemDel to "|"
   repeat for each line tLine in tTableChars
      get item 2 of tLine
      if it is empty then next repeat
      put item 5 of tLine into tNewRTF
      if tNewRTF is empty then next repeat
      replace it with tNewRTF in pText
   end repeat
end RTFMacToANSI

on ANSIToMacRTF @pText
   local tTableChars,tNewRTF
   put the uTableMacRTFTOHTMLTOMacRomanDecimalTOANSIRTF of this stack into tTableChars
   set the itemDel to "|"
   repeat for each line tLine in tTableChars
      get item 5 of tLine
      if it is empty then next repeat
      put item 2 of tLine into tNewRTF
      if tNewRTF is empty then next repeat
      replace it with tNewRTF in pText
   end repeat
end ANSIToMacRTF

function findItemInLine twhatToFind,tContainer,tItemNumber,tLinesToSkip,tExactly
   if tExactly is true then set the wholeMatches to true else set the wholeMatches to false
   get lineOffsets(twhatToFind,tContainer)
   repeat for each item tItem in it
      if twhatToFind is in item tItemNumber of line tItem of tContainer then return tItem
   end repeat
   return empty
end findItemInLine

function getGoodHTML pString,@pTable
   local ut,tNewHTML
   put lineOffset(pString,pTable) into ut
   set the itemDelimiter to "|"
   put item 3 of line ut of pTable into tNewHTML
   set the itemDelimiter to comma
   return tNewHTML
end getGoodHTML

on improveSomeRTF @pText
   local tBad,tGood
   put "\'D9" into tBad
   put "\'9F" into tGood
   replace tBad with tGood in pText
end improveSomeRTF

on simplifyHTML @pText
   replace "&lt;" with "<" in pText
   replace "&gt;" with ">" in pText
   replace "<p><p>" with "<p>" in pText
   replace "</p></p>" with "</p>" in pText
   replace "<p><p " with "<p><" in pText
   replace "&amp;" with "&" in pText
end simplifyHTML

on recordFilePath pFP
   local tFPL
   put the cFilePathList of btn id 1101 of cd 1 of stack "STEP Transcription Module" into tFPL
   if tFPL is empty then put pFP into tFPL else put cr & pFP after tFPL
   put stripDuplicates(tFPL) into tFPL
   set the cFilePathList of btn id 1101 of cd 1 of stack "STEP Transcription Module" to tFPL
   fillOpenRecentFiles
end recordFilePath pFP

function lastOffsetOfTwoDistinctChars tContainer,pChar1,pChar2
   local x,y,tContainer2,tChar,tcontL
   put length(tContainer) into tcontL
   if tcontL > 10000 then put char (tcontL-9999) to -1 of tContainer into tContainer
   repeat for each char tChar in tContainer
      put tChar before tContainer2
   end repeat
   get offset(pChar1,tContainer2)
   if it = 0 then put 0 into x
   else put tcontL-(it-1) into x
   get offset(pChar2,tContainer2)
   if it = 0 then put 0 into y
   else put tcontL-(it-1) into y
   return x,y
end lastOffsetOfTwoDistinctChars

function offsetOfTwoPrecedingDistinctChars tContainer,pChar1,pChar2,pReduce
   local x,y,tContainer2,tChar,tcontL
   put length(tContainer) into tcontL
   if tcontL > 10000 and pReduce <> false then put char (tcontL-9999) to -1 of tContainer into tContainer
   repeat for each char tChar in tContainer
      put tChar before tContainer2
   end repeat
   get offset(pChar1,tContainer2)
   if it = 0 then put 0 into x
   else put tcontL-(it-1) into x
   get offset(pChar2,tContainer2)
   if it = 0 then put 0 into y
   else put tcontL-(it-1) into y
   return x,y
end OffsetOfTwoPrecedingDistinctChars

function offsetOfTwoCloselyPrecedingDistinctChars tContainer,pChar1,pChar2,pReduce
   local x,y,tContainer2,tChar,tcontL
   put length(tContainer) into tcontL
   if tcontL > 1000 and pReduce <> false then put char (tcontL-999) to -1 of tContainer into tContainer
   repeat for each char tChar in tContainer
      put tChar before tContainer2
   end repeat
   get offset(pChar1,tContainer2)
   if it = 0 then put 0 into x
   else put tcontL-(it-1) into x
   get offset(pChar2,tContainer2)
   if it = 0 then put 0 into y
   else put tcontL-(it-1) into y
   return x,y
end offsetOfTwoCloselyPrecedingDistinctChars

function lastOffsetOfOneString tContainer,pString
   local tContainer2,tReverseString,tcontL
   put length(tContainer) into tcontL
   if tcontL > 10000 then put char (tcontL-9999) to -1 of tContainer into tContainer
   repeat for each char tChar in tContainer
      put tChar before tContainer2
   end repeat
   repeat for each char tChar in pString
      put tChar before tReverseString
   end repeat
   get offset(tReverseString,tContainer2)
   if it = 0 then return 0
   else return ((tcontL-(it-1)) - ((length(tReverseString))+1))
end lastOffsetOfOneString


##TOOLTIP:
##Click tags to fill the pull-down tag menus with related data.
##OPTION( ALT)-click tags to see their range.
##Blue linemark: Option(alt)-Arrow Left or Right to turn on/off. 
##Option (Alt)-Arrow Up or Down to move it (or drag it instead).
##Tab or Shift-Tab to move forth or back from tag to tag.



#####################
#####################

## Script of field "VAR#”, ID 1207 of CARD 1 of STACK STEP Transcription Module

on tabKey
   set the cAbbreviation of stack "Customize Tag Anchors" to fld "DOC#" of cd 1 & fld "VAR#" of cd 1
   if the shiftKey is up then select the text of fld id 1208 of cd 1 else select the text of fld id 1206 of cd 1
end tabKey

on returnInField
   tabKey
end returnInField

on closeField
   set the cAbbreviation of stack "Customize Tag Anchors" to fld "DOC#" of cd 1 & fld "VAR#" of cd 1
end closeField

on exitField
   set the cAbbreviation of stack "Customize Tag Anchors" to fld "DOC#" of cd 1 & fld "VAR#" of cd 1
end exitField

##TOOLTIP:
##Letter and/or number. This optional value is attached to the
##document abbreviation without space in the xml:id value.



#####################
#####################

## Script of field "LEAFABBR”, ID 1208 of CARD 1 of STACK STEP Transcription Module

on tabKey
   if the shiftKey is up then select the text of fld id 1209 of cd 1 else select the text of fld id 1207 of cd 1
end tabKey

on returnInField
   tabKey
end returnInField

on mouseEnter
   set the toolTip of me to "p: page" & cr & "fo: folio" & cr &"f: feuille" & cr &"lf: leaf" & cr &"sh: sheet" & cr & "fac: facsimile"
end mouseEnter

##TOOLTIP:
##p: page
##fo: folio
##f: feuille
##lf: leaf
##sh: sheet
##fac: facsimile



#####################
#####################

## Script of field "INITLF#”, ID 1209 of CARD 1 of STACK STEP Transcription Module

on tabKey
   if fld id 1209 of cd 1 <> empty then
      if fld id 1211 of cd 1 <> empty then
         get length(fld id 1211 of cd 1)
         if length(me) < it then
            repeat until length(me) = it  
               put 0 before fld id 1209 of cd 1
            end repeat
         else if length(me) > it then
            put removeSomeZeroes(the text of me,it) into fld id 1209 of cd 1
         end if
      end if
   end if
   updateInitNumber
   if the shiftKey is up then select the text of fld id 1210 of cd 1 else select the text of fld id 1208 of cd 1
end tabKey

on returnInField
   tabKey
end returnInField

on updateInitNumber
   local pItemName
   put the cPageNumberDisplay of stack "Customize Pagebreak Self-Closing Tag" into pItemName
   if pItemName is empty then
      set the cPageNumberDisplay of stack "Customize Pagebreak Self-Closing Tag" to "Transcriptional"
      put "Transcriptional" into pItemName
   end if
   switch pItemName
      case "Transcriptional"
         set the cTranscInitNum of stack "Customize Pagebreak Self-Closing Tag" to fld id 1209 of cd 1 of stack "STEP Transcription Module"
         put fld id 1209 of cd 1 of stack "STEP Transcription Module" into fld "TranscInitNum" of cd 1 of stack "Customize Pagebreak Self-Closing Tag"
         break
      case "Authorial"
         set the cAuthorInitNum of stack "Customize Pagebreak Self-Closing Tag" to fld id 1209 of cd 1 of stack "STEP Transcription Module"
         put fld id 1209 of cd 1 of stack "STEP Transcription Module" into fld "AuthorInitNum" of cd 1 of stack "Customize Pagebreak Self-Closing Tag"
         break
      case "Archival"
         set the cArchiveInitNum of stack "Customize Pagebreak Self-Closing Tag" to fld id 1209 of cd 1 of stack "STEP Transcription Module"
         put fld id 1209 of cd 1 of stack "STEP Transcription Module" into fld "ArchiveInitNum" of cd 1 of stack "Customize Pagebreak Self-Closing Tag"
         break
   end switch
end  updateInitNumber

on mouseEnter
   get toLower(the cPageNumberDisplay of stack "Customize Pagebreak Self-Closing Tag")
   if it is empty then get "transcriptional"
   set the tooltip of me to   "Lowest "&it&" page or leaf number in the document."
end mouseEnter

##TOOLTIP:
##Lowest transcriptional page or leaf number in the document.



#####################
#####################

## Script of field "CURRENTLF#”, ID 1210 of CARD 1 of STACK STEP Transcription Module

on tabKey
   if fld id 1210 of cd 1 <> empty then
      if fld id 1211 of cd 1 <> empty then
         get length(fld id 1211 of cd 1)
         if length(fld id 1210 of cd 1) < it then
            repeat until length(me) = it  
               put 0 before fld id 1210 of cd 1
            end repeat
         else if length(fld id 1210 of cd 1) > it then
            put removeSomeZeroes(fld id 1210 of cd 1,it) into fld id 1210 of cd 1
         end if
         if fld id 1209 of cd 1 <> empty then
            get length(fld id 1211 of cd 1)
            if length(fld id 1209 of cd 1) < it then
               repeat until length(fld id 1209 of cd 1) = it  
                  put 0 before fld id 1209 of cd 1
               end repeat
            else if length(fld id 1209 of cd 1) > it then
               put removeSomeZeroes(fld id 1209 of cd 1,it) into fld id 1209 of cd 1
            end if
         end if
      end if
   end if
   if the shiftKey is up then select the text of fld id 1240 of cd 1 else select the text of fld id 1209 of cd 1
end tabKey

on returnInField
   tabKey
end returnInField

on mouseEnter
   get the cPageNumberDisplay of stack "Customize Pagebreak Self-Closing Tag"
   if it is empty then get "Transcriptional"
   set the tooltip of me to it&&"number with leading zeroes"&cr&"(depending on the length of the highest number)."
end mouseEnter

##TOOLTIP:
##Transcriptional number with leading zeroes
##(depending on the length of the highest number).



#####################
#####################

## Script of field "FINALLF#”, ID 1211 of CARD 1 of STACK STEP Transcription Module

on tabKey
   if fld id 1211 of cd 1 <> empty then
      if fld id 1209 of cd 1 <> empty then
         get length(me)
         if length(fld id 1209 of cd 1) < it then
            repeat until length(fld id 1209 of cd 1) = it  
               put 0 before fld id 1209 of cd 1
            end repeat
         else if length(fld id 1209 of cd 1) > it then
            put removeSomeZeroes(fld id 1209 of cd 1,it) into fld id 1209 of cd 1
         end if
      end if
      if fld id 1210 of cd 1 <> empty then
         get length(me)
         if length(fld id 1210 of cd 1) < it then
            repeat until length(fld id 1210 of cd 1) = it  
               put 0 before fld id 1210 of cd 1
            end repeat
         else if length(fld id 1210 of cd 1) > it then
            put removeSomeZeroes(fld id 1210 of cd 1,it) into fld id 1210 of cd 1
         end if
      end if
   end if
   updateFinalNumber
   if the shiftKey is up then select the text of fld id 1206 of cd 1 else select the text of fld id 1240 of cd 1
end tabKey

on returnInField
   tabKey
end returnInField

on mouseEnter
   get toLower(the cPageNumberDisplay of stack "Customize Pagebreak Self-Closing Tag")
   if it is empty then get "transcriptional"
   set the tooltip of me to "Highest "&it&" page or leaf number in the document."
end mouseEnter

on updateFinalNumber
   local pItemName
   put the cPageNumberDisplay of stack "Customize Pagebreak Self-Closing Tag" into pItemName
   if pItemName is empty then
      set the cPageNumberDisplay of stack "Customize Pagebreak Self-Closing Tag" to "Transcriptional"
      put "Transcriptional" into pItemName
   end if
   switch pItemName
      case "Transcriptional"
         set the cTranscLastNum of stack "Customize Pagebreak Self-Closing Tag" to fld id 1211 of cd 1 of stack "STEP Transcription Module"
         put fld id 1211 of cd 1 of stack "STEP Transcription Module" into fld "TranscLastNum" of cd 1 of stack "Customize Pagebreak Self-Closing Tag"
         break
      case "Authorial"
         set the cAuthorLastNum of stack "Customize Pagebreak Self-Closing Tag" to fld id 1211 of cd 1 of stack "STEP Transcription Module"
         put fld id 1211 of cd 1 of stack "STEP Transcription Module" into fld "AuthorLastNum" of cd 1 of stack "Customize Pagebreak Self-Closing Tag"
         break
      case "Archival"
         set the cArchiveLastNum of stack "Customize Pagebreak Self-Closing Tag" to fld id 1211 of cd 1 of stack "STEP Transcription Module"
         put fld id 1211 of cd 1 of stack "STEP Transcription Module" into fld "ArchiveLastNum" of cd 1 of stack "Customize Pagebreak Self-Closing Tag"
         break
   end switch
end  updateFinalNumber

##TOOLTIP:
##Highest transcriptional page or leaf number in the document.



#####################
#####################

## Script of field "Initial leaf”, ID 1236 of CARD 1 of STACK STEP Transcription Module

on mouseUp
   popup btn "WhichPageNumberToDisplay" of cd 1 of this stack at the clickLoc
end mouseUp

on mouseEnter
   local tPND,tList
   put the cPageNumberDisplay of stack "Customize Pagebreak Self-Closing Tag" into tPND
   put line 1 to 3 of btn "WhichPageNumberToDisplay" of cd 1 of stack "STEP Transcription Module" into tList
   if tPND <> empty then
      set the tooltip of me to "CLICK HERE to choose which pagination to display."&cr&"Currently:"&&tPND &"."
      repeat with i = 1 to 3
         if tPND is in line i of tList then 
            if char 1 to 2 of line i of tList is "!c" then next repeat
            else if char 1 to 2 of line i of tList is "!n" then put "!c" into char 1 to 2 of line i of tList
            else if char 1 to 2 of line i of tList is char 1 to 2 of tPND then
               put "!c" before line i of tList
            end if
         else
            if char 1 to 2 of line i of tList is "!c" then put empty into char 1 to 2 of line i of tList
         end if            
      end repeat
      put tList into line 1 to 3 of btn "WhichPageNumberToDisplay" of cd 1 of stack "STEP Transcription Module"
   else  
      set the tooltip of me to "CLICK HERE to choose which pagination to display."&cr&"Currently: none selected."
      repeat with i = 1 to 3
         if char 1 to 2 of line i of tList is "!c" then put empty into char 1 to 2 of line i of tList
      end repeat
      put tList into line 1 to 3 of btn "WhichPageNumberToDisplay" of cd 1 of stack "STEP Transcription Module"
   end if
end mouseEnter

##TOOLTIP:
##CLICK HERE to choose which pagination to display.
##Currently: Transcriptional.



#####################
#####################

## Script of field "ArrowDownInitLeaf”, ID 1951 of CARD 1 of STACK STEP Transcription Module

on mouseUp
   popup btn "WhichPageNumberToDisplay" of cd 1 of this stack at the clickLoc
end mouseUp

on mouseEnter
   local tPND,tList
   put the cPageNumberDisplay of stack "Customize Pagebreak Self-Closing Tag" into tPND
   put line 1 to 3 of btn "WhichPageNumberToDisplay" of cd 1 of stack "STEP Transcription Module" into tList
   if tPND <> empty then
      set the tooltip of me to "CLICK HERE to choose which pagination to display."&cr&"Currently:"&&tPND &"."
      repeat with i = 1 to 3
         if tPND is in line i of tList then 
            if char 1 to 2 of line i of tList is "!c" then next repeat
            else if char 1 to 2 of line i of tList is "!n" then put "!c" into char 1 to 2 of line i of tList
            else if char 1 to 2 of line i of tList is char 1 to 2 of tPND then
               put "!c" before line i of tList
            end if
         else
            if char 1 to 2 of line i of tList is "!c" then put empty into char 1 to 2 of line i of tList
         end if            
      end repeat
      put tList into line 1 to 3 of btn "WhichPageNumberToDisplay" of cd 1 of stack "STEP Transcription Module"
   else  
      set the tooltip of me to "CLICK HERE to choose which pagination to display."&cr&"Currently: none selected."
      repeat with i = 1 to 3
         if char 1 to 2 of line i of tList is "!c" then put empty into char 1 to 2 of line i of tList
      end repeat
      put tList into line 1 to 3 of btn "WhichPageNumberToDisplay" of cd 1 of stack "STEP Transcription Module"
   end if
end mouseEnter

##TOOLTIP:
##CLICK HERE to choose which pagination to display.
##Currently: Transcriptional.



#####################
#####################

## Script of field "Current leaf”, ID 1237 of CARD 1 of STACK STEP Transcription Module

on mouseEnter
   get toLower(the cPageNumberDisplay of stack "Customize Pagebreak Self-Closing Tag")
   if it is empty then get "transcriptional"
   set the tooltip of me to "Enter the current" &&it&&"leaf number (mandatory)."
end mouseEnter

##TOOLTIP:
##Enter the current transcriptional leaf number (mandatory).



#####################
#####################

## Script of field "Last Leaf”, ID 1239 of CARD 1 of STACK STEP Transcription Module

on mouseEnter
   get toLower(the cPageNumberDisplay of stack "Customize Pagebreak Self-Closing Tag")
   if it is empty then get "transcriptional"
   set the tooltip of me to "Enter the final" &&it&&"leaf number (optional)."
end mouseEnter

##TOOLTIP:
##Enter the final transcriptional leaf number (optional).



#####################
#####################

## Script of field "RECTOVERSO”, ID 1240 of CARD 1 of STACK STEP Transcription Module

on keyDown whichKey
   set the wholeMatches to true
   if whichKey is not "r" and whichKey is not "v" then exit keyDown else pass keyDown
end keyDown

on tabKey
   if the shiftKey is up then select the text of fld id 1211 of cd 1 else select the text of fld id 1210 of cd 1
end tabKey

##TOOLTIP:
##r (recto)  or  v (verso)



#####################
#####################

## Script of field "Indented View”, ID 1139 of CARD 1 of STACK STEP Transcription Module

on mouseWithin
   local tC,ot,ut,tContent
   put fld id 1139 of cd 1 into tContent
   if the cTagTip of this stack is "off" then exit mouseWithin
   get the mouseText
   put the mouseChunk into tC
   if "<!" is in it then pass mouseWithin
   if char (word 2 of tC)-1 of tContent  is in "</" then
      if char (word 4 of tC)+1 of tContent is in " />" then put length(it) into ot
      get char 1 to ot of it
      if char 2 of it is "/" then delete char 2 of it
      float it
   else if "="&quote is in char (word 4 of tC)+1 to (word 4 of tC)+2 of tContent then
      put getAttributeTEIExplanation(it) into ut
      floating ut
   else
      set the vis of fld "Floater" of cd 1 to false
   end if
   put empty into tContent
end mouseWithin

on mouseLeave
   set the vis of fld "Floater" of cd 1 to false
end mouseLeave

on float pmsg--behaves like a tooltip
   local pExpanded
   put desabbreviateSomeTags(pmsg) into pExpanded
   if pExpanded is not empty then 
      if pExpanded is not in fld "Floater" of cd 1 then set the vis of fld "Floater" of cd 1 to false
      put pExpanded into fld "Floater" of cd 1
      set the height of fld "Floater" of cd 1 to (the formattedHeight of fld "Floater" of cd 1)/*-6*/
      set the dontWrap of fld "Floater" to true
      set the textAlign of fld "Floater" to "center"
      set the width of fld "Floater" of cd 1 to (the formattedWidth of fld "Floater" of cd 1)-4
      set the topLeft of  fld "Floater" of cd 1 to ((item 1 of the mouseLoc)+16,(item 2 of the mouseLoc))
      set the vis of fld "Floater" of cd 1 to true
   else
      set the vis of fld "Floater" of cd 1 to false
   end if
end float

on mouseUp
   local tLineNum,tFieldText,tFirstCharNum,tSecondCharNum,tSpaceTag1,tSpC,tBlankSpaces
   local tBegTag,tEndTag,tFindNextTag,tLineEnd,tSel,tFld,tCh,sta,sto,tTag,tAttribute,tValue,dy,da,tdo,tFldID,et,tStartChar,tAngCh,tEndChar
   if the optionKey is down then set the dontwrap of fld id 1139 of cd 1 to not(the dontwrap of fld id 1139 of cd 1)
   if the visible of group id 1931 of cd 1 then set the loc of group id 1931 of cd 1 to (((the width of fld id 1139 of cd 1)/2)+41,(the clickV+8))
   put word 2 of the clickLine into tLineNum
   put fld id 1139 of cd 1 into tFieldText
   put the charIndex of line tLineNum of fld id 1139 of cd 1 into tFirstCharNum
   put the charIndex of char -1 of word 1 of line tLineNum of fld id 1139 of cd 1 into tSecondCharNum
   put char tFirstCharNum to tSecondCharNum of tFieldText into tSpaceTag1
   put spaceCount(tSpaceTag1) into tSpC
   if tSpC > 0 then put char 1 to tSpC of tSpaceTag1 into tBlankSpaces else put empty into tBlankSpaces
   put word 1 of tSpaceTag1 into tBegTag
   if char -1 of tBegTag is not ">" and ">" is in tBegTag then put char 1 to offset(">",tBegTag) of tBegTag into tBegTag
   if char 1 to 2 of tBegTag is "</" then
      put tBegTag into tEndTag
      delete char 2 of tBegTag
   else if char 1 of tBegTag is "<" then
      put tBegTag into tEndTag
      put "/" after char 1 of tEndTag
   end if
   if char -1 of tBegTag is ">" then delete char -1 of tBegTag
   if tBegTag is in tSpaceTag1 then
      put tBlankSpaces&tEndTag into tFindNextTag
      repeat with c = tLineNum+1 to the number of lines of tFieldText
         if line c of tFieldText begins with tFindNextTag then exit repeat
      end repeat
      put c into tLineEnd
   else if tEndTag is in tSpaceTag1 then
      put tBlankSpaces&tBegTag into tFindNextTag
      repeat with c = tLineNum-1 down to 1
         if line c of tFieldText begins with tFindNextTag then exit repeat
      end repeat
      put c into tLineEnd
   end if
   set the cSelectedChunk of fld id 1139 of cd 1 to the clickChunk
   set the cSelectedText of fld id 1139 of cd 1 to the clickText
   put the cSelectedText of fld id 1139 of cd 1 into tSel
   put fld id 1139 of cd 1 into tFld
   put word 2 of the cSelectedChunk of fld id 1139 of cd 1 into tCh
   put empty into sta
   put empty into sto
   repeat with c = tCh down to 1
      if char c of tFld is ">" and c <> tCh then exit mouseUp
      else if char c of tFld is "<" then
         put c into sta
         exit repeat
      end if
   end repeat
   repeat with c = tCh to length(tFld)
      if char c of tFld is "<" then 
         if sta is not empty then put c-1 into sto
         else
            exit mouseUp
         end if
      else if char c of tFld is ">" then 
         put c into sto
         exit repeat
      end if
   end repeat
   put char sta to sto of tFld into tTag
   if char 2 of tTag is "/" then delete char 2 of tTag
   put empty into tAttribute
   put empty into tValue
   if space is in tTag then
      put offset(space,tTag) into dy
      put offset("=",tTag) into da
      put char dy+1 to da-1 of tTag into tAttribute
      put offset(quote,tTag,da+2) into tdo
      put char da+2 to da+2+tdo-1 of tTag into tValue
      delete char dy to -1 of tTag
   end if
   if char 1 of tValue is quote then put empty into tValue
   if char 1 of tTag is "<" then delete char 1 of tTag
   if char -1 of tTag is ">" then delete char -1 of tTag
   replace "b/" with "b" in tTag
   set the wholeMatches to true
   if tTag is in "iub" then put "1034" into tFldID else put "1038" into tFldID
   put lineOffset(tTag,btn id tFldID of cd 1) into et
   send "menuPick tTag" to btn id tFldID of cd 1
   set the label of btn id 1060 of cd 1 to tAttribute
   set the label of btn id 1061 of cd 1 to tValue
   if tLineEnd > tLineNum then 
      put the charIndex of char 1 of line tLineNum of fld id 1139 of cd 1 into tStartChar
      put offset(">",line tLineEnd of fld id 1139 of cd 1) into tAngCh
      put the charIndex of char tAngCh line tLineEnd of fld id 1139 of cd 1 into tEndChar
   else 
      put the charIndex of char 1 of line tLineEnd of fld id 1139 of cd 1 into tStartChar
      put offset(">",line tLineNum of fld id 1139 of cd 1) into tAngCh
      put the charIndex of char tAngCh line tLineNum of fld id 1139 of cd 1 into tEndChar
   end if
   select char tStartChar to tEndChar of fld id 1139 of cd 1
end mouseUp

function spaceCount pLineStart
   repeat with x = 1 to length(pLineStart)
      if char x of pLineStart is not space then exit repeat
   end repeat
   return (x - 1)
end spaceCount

on scrollbarDrag
   lock screen
   local tLNs
   if the textHeight of me is empty then set the textHeight of me to 24
   repeat with i = 1 to round((the formattedHeight of me)/(the textHeight of me) + 100)
      put i & cr after tLNs
   end repeat
   put tLNs into fld id 1389 of cd 1
   set the vScroll of fld id 1389 of cd 1 to the vScroll of me
end scrollbarDrag

##TOOLTIP:
##Option(Alt)-click the field to turn line-wrapping on or off.
##Click tags to highlight their range.



#####################
#####################

## Script of field "Indented View" of card "card id 1002" of stack "/Users/adetienn/Documents/STEP Externals/STEP-LI 7.1.4/STEP Transcription Module.livecode" ID 1126 of CARD 1 of STACK STEP Transcription Module

on mouseWithin
   local tC,ot,ut,tContent
   put fld id 1126 of cd 1 into tContent
   if the cTagTip of this stack is "off" then exit mouseWithin
   get the mouseText
   put the mouseChunk into tC
   if "<!" is in it then pass mouseWithin
   if char (word 2 of tC)-1 of tContent  is in "</" then
      if char (word 4 of tC)+1 of tContent is in " />" then put length(it) into ot
      get char 1 to ot of it
      if char 2 of it is "/" then delete char 2 of it
      float it
   else if "="&quote is in char (word 4 of tC)+1 to (word 4 of tC)+2 of tContent then
      put getAttributeTEIExplanation(it) into ut
      floating ut
   else
      set the vis of fld "Floater" of cd 1 to false
   end if
   put empty into tContent
end mouseWithin

on mouseLeave
   set the vis of fld "Floater" of cd 1 to false
end mouseLeave

on float pmsg--behaves like a tooltip
   local pExpanded
   put desabbreviateSomeTags(pmsg) into pExpanded
   if pExpanded is not empty then 
      if pExpanded is not in fld "Floater" of cd 1 then set the vis of fld "Floater" of cd 1 to false
      put pExpanded into fld "Floater" of cd 1
      set the height of fld "Floater" of cd 1 to (the formattedHeight of fld "Floater" of cd 1)/*-6*/
      set the dontWrap of fld "Floater" to true
      set the textAlign of fld "Floater" to "center"
      set the width of fld "Floater" of cd 1 to (the formattedWidth of fld "Floater" of cd 1)-4
      set the topLeft of  fld "Floater" of cd 1 to ((item 1 of the mouseLoc)+16,(item 2 of the mouseLoc))
      set the vis of fld "Floater" of cd 1 to true
   else
      set the vis of fld "Floater" of cd 1 to false
   end if
end float

on mouseUp
   local tLineNum,tFieldText,tFirstCharNum,tSecondCharNum,tSpaceTag1,tSpC,tBlankSpaces,tRealBegTag,ut1,ut2
   local tBegTag,tEndTag,tFindNextTag,tLineEnd,tSel,tFld,tCh,sta,sto,tTag,tAttribute,tValue,dy,da,tdo,tFldID,et,tStartChar,tAngCh,tEndChar
   compilePageBreaks 1126
   uncolorBGLines
   if the optionKey is down then set the dontwrap of fld id 1126 of cd 1 to not(the dontwrap of fld id 1126 of cd 1)
   put word 2 of the clickLine into tLineNum
   put fld id 1126 of cd 1 into tFieldText
   put the charIndex of line tLineNum of fld id 1126 of cd 1 into tFirstCharNum
   locatePagebreak tFirstCharNum,1126
   if the visible of group "lineMark" of cd 1 then set the loc of group "LineMark" of cd 1 to (((the width of fld id 1126 of cd 1)/2)+41,(the clickV+8))
   put the charIndex of char -1 of word 1 of line tLineNum of fld id 1126 of cd 1 into tSecondCharNum
   put char tFirstCharNum to tSecondCharNum of tFieldText into tSpaceTag1
   put spaceCount(tSpaceTag1) into tSpC
   if tSpC > 0 then put char 1 to tSpC of tSpaceTag1 into tBlankSpaces else put empty into tBlankSpaces
   put word 1 of tSpaceTag1 into tBegTag
   if char 1 of tBegTag is "<" and char 2 of tBegTag <> "/" then
      put trueword 1 of tBegTag into tRealBegTag
      if "</"&tRealBegTag&">" is in line tLineNum of fld id 1126 of cd 1 then
         put offset("<"&tRealBegTag,line tLineNum of fld id 1126 of cd 1) into ut1
         put offset("</"&tRealBegTag&">",line tLineNum of fld id 1126 of cd 1) into ut2
         select char ut1 to (ut2+length("</"&tRealBegTag&">")-1) of line tLineNum of fld id 1126 of cd 1
         exit mouseUp
      end if
   end if
   if char -1 of tBegTag is not ">" and ">" is in tBegTag then put char 1 to offset(">",tBegTag) of tBegTag into tBegTag
   if char 1 to 2 of tBegTag is "</" then
      put tBegTag into tEndTag
      delete char 2 of tBegTag
   else if char 1 of tBegTag is "<" then
      put tBegTag into tEndTag
      put "/" after char 1 of tEndTag
   end if
   if char -1 of tBegTag is ">" then delete char -1 of tBegTag
   if tBegTag is in tSpaceTag1 then
      put tBlankSpaces&tEndTag into tFindNextTag
      repeat with c = tLineNum+1 to the number of lines of tFieldText
         if line c of tFieldText begins with tFindNextTag then exit repeat
      end repeat
      put c into tLineEnd
   else if tEndTag is in tSpaceTag1 then
      put tBlankSpaces&tBegTag into tFindNextTag
      repeat with c = tLineNum-1 down to 1
         if line c of tFieldText begins with tFindNextTag then exit repeat
      end repeat
      put c into tLineEnd
   end if
   set the cSelectedChunk of fld id 1126 of cd 1 to the clickChunk
   set the cSelectedText of fld id 1126 of cd 1 to the clickText
   put the cSelectedText of fld id 1126 of cd 1 into tSel
   put fld id 1126 of cd 1 into tFld
   put word 2 of the cSelectedChunk of fld id 1126 of cd 1 into tCh
   put empty into sta
   put empty into sto
   repeat with c = tCh down to 1
      if char c of tFld is ">" and c <> tCh then exit mouseUp
      else if char c of tFld is "<" then
         put c into sta
         exit repeat
      end if
   end repeat
   repeat with c = tCh to length(tFld)
      if char c of tFld is "<" then 
         if sta is not empty then put c-1 into sto
         else
            exit mouseUp
         end if
      else if char c of tFld is ">" then 
         put c into sto
         exit repeat
      end if
   end repeat
   put char sta to sto of tFld into tTag
   if char 2 of tTag is "/" then delete char 2 of tTag
   if char -2 to -1 of tTag is "/>" then
      select char sta to sto of fld id 1126 of cd 1
      exit mouseUp
   end if
   put empty into tAttribute
   put empty into tValue
   if space is in tTag then
      put offset(space,tTag) into dy
      put offset("=",tTag) into da
      put char dy+1 to da-1 of tTag into tAttribute
      put offset(quote,tTag,da+2) into tdo
      put char da+2 to da+2+tdo-1 of tTag into tValue
      delete char dy to -1 of tTag
   end if
   if char 1 of tValue is quote then put empty into tValue
   if char 1 of tTag is "<" then delete char 1 of tTag
   if char -1 of tTag is ">" then delete char -1 of tTag
   replace "b/" with "b" in tTag
   set the wholeMatches to true
   if tTag is in "iub" then put "1034" into tFldID else put "1008" into tFldID
   put lineOffset(tTag,btn id tFldID of cd 1) into et
   send "menuPick tTag" to btn id tFldID of cd 1
   set the label of btn id 1060 of cd 1 to tAttribute
   set the label of btn id 1061 of cd 1 to tValue
   if tLineEnd > tLineNum then 
      put the charIndex of char 1 of line tLineNum of fld id 1126 of cd 1 into tStartChar
      put offset(">",line tLineEnd of fld id 1126 of cd 1) into tAngCh
      put the charIndex of char tAngCh line tLineEnd of fld id 1126 of cd 1 into tEndChar
   else 
      put the charIndex of char 1 of line tLineEnd of fld id 1126 of cd 1 into tStartChar
      put offset(">",line tLineNum of fld id 1126 of cd 1) into tAngCh
      put the charIndex of char tAngCh line tLineNum of fld id 1126 of cd 1 into tEndChar
   end if
   select char tStartChar to tEndChar of fld id 1126 of cd 1
end mouseUp

function spaceCount2 pLineStart
   repeat with x = 1 to length(pLineStart)
      if char x of pLineStart is not space then exit repeat
   end repeat
   return (x - 1)
end spaceCount2

function spaceCount pLineStart
   repeat with x = 1 to length(pLineStart)
      if char x of pLineStart is not tab then exit repeat
   end repeat
   return (x - 1)
end spaceCount

on scrollbarDrag
   lock screen
   local tLNs
   if the textHeight of me is empty then set the textHeight of me to 24
   repeat with i = 1 to round((the formattedHeight of me)/(the textHeight of me) + 100)
      put i & cr after tLNs
   end repeat
   put tLNs into fld id 1389 of cd 1
   set the vScroll of fld id 1389 of cd 1 to the vScroll of me
end scrollbarDrag

##TOOLTIP:
##Option(Alt)-click the field to turn line-wrapping on or off.
##Click tags to highlight their range.
##Blue linemark: Option(alt)-Arrow Left or Right to turn on/off. 
##Option (Alt)-Arrow Up or Down to move it (or drag it).



#####################
#####################

## Script of field "Anchored Transcription" of card "card id 1002" of stack "/Users/adetienn/Documents/STEP Externals/STEP-LI 7.1.4/STEP Transcription Module.livecode" ID 1163 of CARD 1 of STACK STEP Transcription Module

on mouseWithin
   local tC,ot,ut,tContent
   put fld id 1163 of cd 1 into tContent
   if the cTagTip of this stack is "off" then exit mouseWithin
   get the mouseText
   put the mouseChunk into tC
   if "<!" is in it then pass mouseWithin
   if char (word 2 of tC)-1 of tContent  is in "</" then
      if char (word 4 of tC)+1 of tContent is in " />" then put length(it) into ot
      get char 1 to ot of it
      if char 2 of it is "/" then delete char 2 of it
      float it
   else if "="&quote is in char (word 4 of tC)+1 to (word 4 of tC)+2 of tContent then
      put getAttributeTEIExplanation(it) into ut
      floating ut
   else
      set the vis of fld "Floater" of cd 1 to false
   end if
   put empty into tContent
end mouseWithin

on mouseLeave
   set the vis of fld "Floater" of cd 1 to false
end mouseLeave

on float pmsg--behaves like a tooltip
   local pExpanded
   put desabbreviateSomeTags(pmsg) into pExpanded
   if pExpanded is not empty then 
      if pExpanded is not in fld "Floater" of cd 1 then set the vis of fld "Floater" of cd 1 to false
      put pExpanded into fld "Floater" of cd 1
      set the height of fld "Floater" of cd 1 to (the formattedHeight of fld "Floater" of cd 1)/*-6*/
      set the dontWrap of fld "Floater" to true
      set the textAlign of fld "Floater" to "center"
      set the width of fld "Floater" of cd 1 to (the formattedWidth of fld "Floater" of cd 1)-4
      set the topLeft of  fld "Floater" of cd 1 to ((item 1 of the mouseLoc)+16,(item 2 of the mouseLoc))
      set the vis of fld "Floater" of cd 1 to true
   else
      set the vis of fld "Floater" of cd 1 to false
   end if
end float

on mouseUp
   local tLineNum,tFieldText,tFirstCharNum,tSecondCharNum,tSpaceTag1,tSpC,tBlankSpaces
   local tBegTag,tEndTag,tFindNextTag,tLineEnd,tSel,tFld,tCh,sta,sto,tTag,tAttribute,tValue,dy,da,tdo,tFldID,et,tStartChar,tAngCh,tEndChar
   compilePageBreaks 1163
   uncolorBGLines
   if the optionKey is down then set the dontwrap of fld id 1163 of cd 1 to not(the dontwrap of fld id 1163 of cd 1)
   put word 2 of the clickLine into tLineNum
   put fld id 1163 of cd 1 into tFieldText
   put the charIndex of line tLineNum of fld id 1163 of cd 1 into tFirstCharNum
   locatePagebreak tFirstCharNum,1163
   if the visible of group id 1931 of cd 1 then set the loc of group id 1931 of cd 1 to (((the width of fld id 1163 of cd 1)/2)+41,(the clickV+8))
   put the charIndex of char -1 of word 1 of line tLineNum of fld id 1163 of cd 1 into tSecondCharNum
   put char tFirstCharNum to tSecondCharNum of tFieldText into tSpaceTag1
   put spaceCount(tSpaceTag1) into tSpC
   if tSpC > 0 then put char 1 to tSpC of tSpaceTag1 into tBlankSpaces else put empty into tBlankSpaces
   put word 1 of tSpaceTag1 into tBegTag
   if char -1 of tBegTag is not ">" and ">" is in tBegTag then put char 1 to offset(">",tBegTag) of tBegTag into tBegTag
   if char 1 to 2 of tBegTag is "</" then
      put tBegTag into tEndTag
      delete char 2 of tBegTag
   else if char 1 of tBegTag is "<" then
      put tBegTag into tEndTag
      put "/" after char 1 of tEndTag
   end if
   if char -1 of tBegTag is ">" then delete char -1 of tBegTag
   if tBegTag is in tSpaceTag1 then
      put tBlankSpaces&tEndTag into tFindNextTag
      repeat with c = tLineNum+1 to the number of lines of tFieldText
         if line c of tFieldText begins with tFindNextTag then exit repeat
      end repeat
      put c into tLineEnd
   else if tEndTag is in tSpaceTag1 then
      put tBlankSpaces&tBegTag into tFindNextTag
      repeat with c = tLineNum-1 down to 1
         if line c of tFieldText begins with tFindNextTag then exit repeat
      end repeat
      put c into tLineEnd
   end if
   set the cSelectedChunk of fld id 1163 of cd 1 to the clickChunk
   set the cSelectedText of fld id 1163 of cd 1 to the clickText
   put the cSelectedText of fld id 1163 of cd 1 into tSel
   put fld id 1163 of cd 1 into tFld
   put word 2 of the cSelectedChunk of fld id 1163 of cd 1 into tCh
   put empty into sta
   put empty into sto
   repeat with c = tCh down to 1
      if char c of tFld is ">" and c <> tCh then exit mouseUp
      else if char c of tFld is "<" then
         put c into sta
         exit repeat
      end if
   end repeat
   repeat with c = tCh to length(tFld)
      if char c of tFld is "<" then 
         if sta is not empty then put c-1 into sto
         else
            exit mouseUp
         end if
      else if char c of tFld is ">" then 
         put c into sto
         exit repeat
      end if
   end repeat
   put char sta to sto of tFld into tTag
   if char 2 of tTag is "/" then delete char 2 of tTag
   if char -2 to -1 of tTag is "/>" then
      select char sta to sto of fld id 1163 of cd 1
      exit mouseUp
   end if
   put empty into tAttribute
   put empty into tValue
   if space is in tTag then
      put offset(space,tTag) into dy
      put offset("=",tTag) into da
      put char dy+1 to da-1 of tTag into tAttribute
      put offset(quote,tTag,da+2) into tdo
      put char da+2 to da+2+tdo-1 of tTag into tValue
      delete char dy to -1 of tTag
   end if
   if char 1 of tValue is quote then put empty into tValue
   if char 1 of tTag is "<" then delete char 1 of tTag
   if char -1 of tTag is ">" then delete char -1 of tTag
   replace "b/" with "b" in tTag
   set the wholeMatches to true
   if tTag is in "iub" then put "1034" into tFldID else put "1008" into tFldID
   put lineOffset(tTag,btn id tFldID of cd 1) into et
   send "menuPick tTag" to btn id tFldID of cd 1
   set the label of btn id 1060 of cd 1 to tAttribute
   set the label of btn id 1061 of cd 1 to tValue
   if tLineEnd > tLineNum then 
      put the charIndex of char 1 of line tLineNum of fld id 1163 of cd 1 into tStartChar
      put offset(">",line tLineEnd of fld id 1163 of cd 1) into tAngCh
      put the charIndex of char tAngCh line tLineEnd of fld id 1163 of cd 1 into tEndChar
   else 
      put the charIndex of char 1 of line tLineEnd of fld id 1163 of cd 1 into tStartChar
      put offset(">",line tLineNum of fld id 1163 of cd 1) into tAngCh
      put the charIndex of char tAngCh line tLineNum of fld id 1163 of cd 1 into tEndChar
   end if
   select char tStartChar to tEndChar of fld id 1163 of cd 1
end mouseUp

function spaceCount pLineStart
   repeat with x = 1 to length(pLineStart)
      if char x of pLineStart is not space then exit repeat
   end repeat
   return (x - 1)
end spaceCount

on scrollbarDrag
   local tLNs
   lock screen
   put empty into tLNs
   if the textHeight of me is empty then set the textHeight of me to 24
   repeat with i = 1 to round((the formattedHeight of me)/(the textHeight of me) + 100)
      put i & cr after tLNs
   end repeat
   put tLNs into fld id 1389 of cd 1
   set the vScroll of fld id 1389 of cd 1 to the vScroll of me
end scrollbarDrag


##TOOLTIP:
##Option(Alt)-click the field to turn line-wrapping on or off.
##Click tags to highlight their range.
##Option(Alt)-click the Anchored tab for a non-indented view.
##Click the Anchored tab normally for an indented view.
##Blue linemark: Option(alt)-Arrow Left or Right to turn on/off. 
##Option (Alt)-Arrow Up or Down to move it (or drag it).



#####################
#####################

## Script of field "TEI-Rendered Transcript" of card "card id 1002" of stack "/Users/adetienn/Documents/STEP Externals/STEP-LI 7.1.4/STEP Transcription Module.livecode" ID 1026 of CARD 1 of STACK STEP Transcription Module

on mouseUp
   if the visible of group id 1931 of cd 1 then set the loc of group id 1931 of cd 1 to (((the width of fld id 1026 of cd 1)/2)+41,(the clickV+8))
   set the cSelectedChunk of fld id 1026 of cd 1 to the selectedChunk
   set the cSelectedText of fld id 1026 of cd 1 to the selectedText
end mouseUp

on scrollbarDrag
   lock screen
   local tLNs
   if the textHeight of me is empty then set the textHeight of me to 24
   repeat with i = 1 to round((the formattedHeight of me)/(the textHeight of me) + 100)
      put i & cr after tLNs
   end repeat
   put tLNs into fld id 1389 of cd 1
   set the vScroll of fld id 1389 of cd 1 to the vScroll of me
end scrollbarDrag

##TOOLTIP:
##Blue linemark: Option(alt)-Arrow Left or Right to turn on/off. 
##Option (Alt)-Arrow Up or Down to move it (or drag it).



#####################
#####################

## Script of field "Description Base Text”, ID 1029 of CARD 1 of STACK STEP Transcription Module

on mouseUp
   if the visible of group id 1931 of cd 1 then set the loc of group id 1931 of cd 1 to (((the width of fld id 1029 of cd 1)/2)+41,(the clickV+8))
   set the cSelectedChunk of fld id 1029 of cd 1 to the selectedChunk
   set the cSelectedText of fld id 1029 of cd 1 to the selectedText
end mouseUp

on scrollbarDrag
   local tLNs
   lock screen
   put empty into tLNs
   if the textHeight of me is empty then set the textHeight of me to 24
   repeat with i = 1 to round((the formattedHeight of me)/(the textHeight of me) + 100)
      put i & cr after tLNs
   end repeat
   put tLNs into fld id 1389 of cd 1
   set the vScroll of fld id 1389 of cd 1 to the vScroll of me
end scrollbarDrag

##TOOLTIP:
##Blue linemark: Option(alt)-Arrow Left or Right to turn on/off. 
##Option (Alt)-Arrow Up or Down to move it (or drag it).



#####################
#####################

## Script of field "DOC#”, ID 1206 of CARD 1 of STACK STEP Transcription Module

on tabKey
   set the cAbbreviation of stack "Customize Tag Anchors" to fld "DOC#" of cd 1 & fld "VAR#" of cd 1
   if the shiftKey is up then select the text of fld id 1207 of cd 1 else select the text of fld id 1211 of cd 1
end tabKey

on keyDown whichKey
   if whichKey is space or whichKey is in ".,;/|\<>" then exit keyDown
   pass keyDown
end keyDown

on returnInField
   tabKey
end returnInField

on closeField
   set the cAbbreviation of stack "Customize Tag Anchors" to fld "DOC#" of cd 1 & fld "VAR#" of cd 1
end closeField

on exitField
   set the cAbbreviation of stack "Customize Tag Anchors" to fld "DOC#" of cd 1 & fld "VAR#" of cd 1
end exitField



#####################
#####################

## Script of field "LineCounter”, ID 1389 of CARD 1 of STACK STEP Transcription Module

on mouseUp
   lock screen
   set the loc of group "GoToLineNumber" of cd 1 to (54,(item 2 of the mouseLoc + 23))
   if the bottom of group "GoToLineNumber" of cd 1 > the top of fld id 1204 of cd 1 then set the bottom of group "GoToLineNumber" of cd 1 to (the top of fld id 1204 of cd 1)-1
   show group "GoToLineNumber" of cd 1
   unlock screen
   select after fld id 1405 of cd 1
end mouseUp

##TOOLTIP:
##Click to enter a line number to jump to.



#####################
#####################

## Script of scrollbar "Scrollbar”, ID 1091 of CARD 1 of STACK STEP Transcription Module

on resizeFieldText pSize,@pText,pIDNum,pHF
   local tTemp1
   if pText is not empty then
      if pSize < 7 then put 8 into pSize
      put replaceText(pText,"size="&quote&"[\d]+","size="&quote&pSize) into pText
      put fld id 1014 of cd 1 into tTemp1
      put pText into fld id 1014 of cd 1
      set the HTMLText of fld id pIDNum of cd 1 to fld id 1014 of cd 1
      put tTemp1 into fld id 1014 of cd 1
   end if
   set the textHeight of fld id pIDNum of cd 1 to pHF
end resizeFieldText

on scrollbarLineDec
   local tIDNum,tHF,tText,ut,tSize,tVScroll,tFLH
   lock screen
   put whichField() into tIDNum
   put the vScroll of fld id tIDNum of cd 1 into tVScroll
   put the textHeight of fld id tIDNum of cd 1 into tHF
   put the HTMLText of fld id tIDNum of cd 1 into tText
   if "<img src=" is in tText then put false into tFLH else put true into tFLH
   put offset("size=",tText) into ut
   if ut is not 0 then
      put char ut+6 to ut+7 of tText into tSize
      if char 2 of tSize is quote then delete char 2 of tSize
      add 1 to tSize
      /*if tHF is empty then*/ put tSize+11 into tHF
      resizeFieldText tSize,tText,tIDNum,tHF
      resizeFieldText2 tSize,tIDNum,tHF
   else
      put (the textSize of fld id tIDNum of cd 1) + 0.5 into tSize
      /*if tHF is empty then*/ put tSize+11 into tHF
      resizeFieldText2 tSize,tIDNum,tHF
   end if
   set the vScroll of fld id tIDNum of cd 1 to tVScroll
   set the textSize of fld id 1389 of cd 1 to 11
   set the textHeight of fld id 1389 of cd 1 to tHF
   set the fixedLineHeight of fld id tIDNum of cd 1 to tFLH
   unlock screen
end scrollbarLineDec

on scrollbarLineInc
   lock screen
   local tIDNum,tHF,tText,ut,tSize,tVScroll,tFLH
   put whichField() into tIDNum
   put the vScroll of fld id tIDNum of cd 1 into tVScroll
   put the textHeight of fld id tIDNum of cd 1 into tHF
   put the HTMLText of fld id tIDNum of cd 1 into tText
   if "<img src=" is in tText then put false into tFLH else put true into tFLH
   put offset("size=",tText) into ut
   if ut is not 0 then
      put char ut+6 to ut+7 of tText into tSize
      if char 2 of tSize is quote then delete char 2 of tSize
      put (tSize - 1) into tSize
      /*if tHF is empty then*/ put tSize+11 into tHF
      resizeFieldText tSize,tText,tIDNum,tHF
      resizeFieldText2 tSize,tIDNum,tHF
   else
      put (the textSize of fld id tIDNum of cd 1) - (1) into tSize
      /*if tHF is empty then*/ put tSize+11 into tHF
      resizeFieldText2 tSize,tIDNum,tHF
   end if
   set the vScroll of fld id tIDNum of cd 1 to tVScroll
   set the textSize of fld id 1389 of cd 1 to 11
   set the textHeight of fld id 1389 of cd 1 to tHF
   set the fixedLineHeight of fld id tIDNum of cd 1 to tFLH
   unlock screen
end scrollbarLineInc

on resizeFieldText2 pSize,pIDNum,pHF
   set the textSize of fld id pIDNum of cd 1 to pSize
   set the textHeight of fld id pIDNum of cd 1 to pHF
end resizeFieldText2

function whichField
   local tListF
   put "1004,1026,1029,1126,1163,1041,1044,1139,1151,1154,1157" into tListF
   repeat with x = 1 to (the  number of items of tListF)
      if the visible of fld id (item x of tListF) of cd 1 then return item x of tListF
   end repeat
end whichField

on mouseEnter
   set the tooltip of me to the cTooltip of me
end mouseEnter

##TOOLTIP:
##Change the text size of the
##visible field below right.



#####################
#####################

## Script of field "LineNumber" of group "GoToLineNumber" of card "card id 1002" of stack "/Users/adetienn/Documents/STEP Externals/STEP-LI 7.1.4/STEP Transcription Module.livecode" ID 1405 of CARD 1 of STACK STEP Transcription Module

on keyDown whichKey
   if whichKey is not an integer then exit keyDown
   else pass keyDown
end keyDown

on returnInField
   send mouseUp to btn "Go to line #" of cd 1
end returnInField

on tabKey
   send mouseUp to btn "Go to line #" of cd 1
end tabKey



#####################
#####################

## Script of button "Go to line #" of group "GoToLineNumber" of card "card id 1002" of stack "/Users/adetienn/Documents/STEP Externals/STEP-LI 7.1.4/STEP Transcription Module.livecode" ID 1408 of CARD 1 of STACK STEP Transcription Module

on mouseUp
   lock screen
   get fld id 1405 of cd 1
   put empty into fld id 1405 of cd 1
   if it is not an integer or it is empty then exit mouseUp
   put whichField() into tFldID
   if the textHeight of fld id tFldID of cd 1 is empty then set the textHeight of fld id tFldID of cd 1 to 14
   put the textHeight of fld id tFldID of cd 1 into tTH
   set the textHeight of fld id 1389 of cd 1 to tTH
   put it * tTH into tFN
   set the vScroll of fld id tFldID of cd 1 to (tFN-tTH)
   set the vScroll of fld id 1389 of cd 1 to the vScroll of fld id tFldID of cd 1
   hide group "GoToLineNumber" of cd 1
end mouseUp

function whichField
   put "1004,1026,1029,1126,1163,1041,1139,1044,1151,1154,1157" into tFldList
   repeat for each item tFld in tFldLIst
      if the visible of fld id tFld then return tFld
   end repeat
end whichField



#####################
#####################

## Script of button "Cancel" of group "GoToLineNumber" of card "card id 1002" of stack "/Users/adetienn/Documents/STEP Externals/STEP-LI 7.1.4/STEP Transcription Module.livecode" ID 1409 of CARD 1 of STACK STEP Transcription Module

on mouseUp
   put empty into fld id 1405 of cd 1
   hide group "GoToLineNumber" of cd 1
end mouseUp



#####################
#####################

## Script of button "Save”, ID 1073 of CARD 1 of STACK STEP Transcription Module

on mouseUp pClick,pNumClick
   local tFldList
   if the hilite of btn "Example" of cd 1 is true then
      answer "Modifications in “Example” mode may not be saved. Click the Example button to turn it off." as sheet
      exit to top
   end if
   put "1004,1017,1026,1029,1041,1044,1049,1064,1067,1109,1112,1126,1139,1151,1154,1157,1163,1171,1174,1206,1207,1208,1209,1210,1211,1240,1921" into tFldList
   repeat for each item tItem in tFldList
      if fld id tItem of cd 1 is empty then next repeat
      set cursor to busy
      set the cSavedFieldHTMLContent of fld id tItem of cd 1 to the HTMLText of fld id tItem of cd 1
   end repeat   
   put "1026,1029,1041,1151" into tFldList
   repeat for each item tItem in tFldList
      set the cSavedBrHTMLText of fld id tItem of cd 1 to the cBrHTMLText of fld id tItem of cd 1
   end repeat   
   set cursor to watch
end mouseUp

##TOOLTIP:
##Save all contents internally. Click the “Restore Last Save” menu
##command to recover the previously saved content in all fields.



#####################
#####################

## Script of button "Upload”, ID 1894 of CARD 1 of STACK STEP Transcription Module

on mouseUp
   modeless stack "Upload File To Server"
end mouseUp

##TOOLTIP:
##Upload a .step file to the STEP platform or any other type
##of file (txt, rtf, html, xhtml, xml) to any FTP server host.



#####################
#####################

## Script of button "TagTipsOnOff”, ID 1944 of CARD 1 of STACK STEP Transcription Module

on mouseUp
   set the cTagTip2 of stack "STEP Transcription Module" to the cTagTip of stack "STEP Transcription Module"
   set the hilite of me to not the hilite of me
   if the hilite of me is true then
      set the cTagTip of stack "STEP Transcription Module" to "on"
      set the cTagTip2 of stack "STEP Transcription Module" to "on"
      put "Hide Tag Tips" into line 11 of btn "Help" of group "STEP Menu 1" of stack "STEP Transcription Module"
      if there is a stack "STEP Tools" then 
         put "Hide Tag Tips" into line 11 of btn "Help" of group "Launcher Menu" of stack "STEP Tools"
      end if
   else if the hilite of me is false then
      set the cTagTip of stack "STEP Transcription Module" to "off"
      set the cTagTip2 of stack "STEP Transcription Module" to "off"
      put "Show Tag Tips" into line 11 of btn "Help" of group "STEP Menu 1" of stack "STEP Transcription Module"
      if there is a stack "STEP Tools" then put "Show Tag Tips" into line 11 of btn "Help" of group "Launcher Menu" of stack "STEP Tools"
   end if
end mouseUp

##TOOLTIP:
##Click to turn Tag Tips on or off.



#####################
#####################

## Script of button "AltDescriptionOnOff”, ID 1934 of CARD 1 of STACK STEP Transcription Module

on mouseUp
   if the hilite of me is true then 
      set the hilite of me to false
      set the tooltip of me to "Click this radio button to turn automatic Alterations Description on"&cr&\
      "—but this will slow down the encoding of alterations in long documents."
   else 
      set the hilite of me to true
      set the tooltip of me to "Click this radio button to turn automatic Alterations Description off."&cr&\
      "Turning it off saves time in alteration-heavy documents."
   end if
end mouseUp

##TOOLTIP:
##Click this radio button to turn automatic Alterations Description on
##—but this will slow down the encoding of alterations in long documents.



#####################
#####################

## Script of button "Clear…”, ID 1924 of CARD 1 of STACK STEP Transcription Module

on mouseUp
   local tFldList
   answer "Confirm you want to delete the content of the field below. First archive it using the “Archive...” button if you need to preserve its content." with "Cancel" or "Clear"
   if it is "Cancel" then exit mouseUp
   put "1921" into tFldList
   repeat for each item tItem in tFldList
      set the cSavedFieldHTMLContent of fld id tItem of cd 1 of stack "STEP Transcription Module" to empty
      put empty into fld id tItem of cd 1 of stack "STEP Transcription Module"
   end repeat   
end mouseUp

##TOOLTIP:
##Delete the content of the field
##above and its internal save.


button "Extract Descriptive Data…”, ID 1120 of CARD 1 of STACK STEP Transcription Module

on menuPick pItemName
   local tFldID,pText,tListOfStrings,tTagList,tBib,pTitle,tTags,tListOfStringsTemp,tListOfStringsTemp1,tList1,tList1b,tAV2,tHeaders,tAttVals,ot,tList2,tRAEnd,tReg
   if the visible of fld id 1041 of cd 1 then put "1041" into tFldID
   else if the visible of fld id 1151 of cd 1 then put "1151" into tFldID
   else 
      answer "Please display either the TEI Base Descr. field or the TEI Rend. Descr. field before clicking this button." as sheet
      exit menuPick
   end if
   if fld id tFldID of cd 1 is empty then exit menuPick
   put fld id tFldID of cd 1 into pText
   switch pItemName
      case "Bibliographical Elements"
         put "bibl,author,editor,title,publisher,pubPlace,date" into tTagList
         put "Bibliographical Items,Authors,Editors,Titles,Publishers,Modifiers,Publication Places,Dates" into tHeaders
         break
      case "Proper Nouns"
         put "name,persName,surname,forename,roleName,addName,placeName,country,settlement,orgName" into tTagList
         put "Proper Nouns,Personal Names,Surnames,Forenames,Role Names,Name Modifiers,Place Names,Countries,Settlements,Organization Names" into tHeaders
         break
      case "Quotations//Citations"
      case "Quotations/Citations"
         put "q,quote,cit,mentioned,said,soCalled" into tTagList
         put "Quotemarked Elements,Quotations,Cited Quotations/Citations,Mentions,Spoken Elements,Scarequoted Elements" into tHeaders
         break
   end switch
   repeat with x = 1 to the number of items in tTagList
      put item x of tTagList into tBib
      put item x of tHeaders into pTitle
      put "<"&tBib&comma&"</"&tBib&">" into tTags
      put empty into tListOfStringsTemp
      put empty into tListOfStringsTemp1
      put offsets(item 1 of tTags,pText) into tList1
      if tList1 is 0 then next repeat
      put offsets(item 1 of tTags&">",pText) into tList1b
      put empty into tAV2
      put empty into tAttVals
      if tList1b <> 0 and tList1 <> tList1b then
         repeat for each item tAV in tList1
            if tAV is not among the items of tList1b then put tAV&comma after tAV2
         end repeat
      end if
      if tList1b = 0 and tList1 is not empty then put tList1 into tAV2
      if tAV2 is not empty then
         repeat with z = the number of items of tAV2 down to 1
            put offset(quote&">",pText,(item z of tAV2)+1) into ot
            put char (item z of tAV2) to ((item z of tAV2)+ot+2) of pText &cr after tAttVals
         end repeat
         put stripDuplicates2(tAttVals) into tAttVals
      end if
      put offsets(item 2 of tTags,pText) into tList2
      if tList2 is 0 then next repeat
      put length(item 2 of tTags) into tRAEnd
      repeat with i = 1 to the number of items of tList1
         put char (item i of tList1)+tRAEnd-1 to (item i of tList2)-1 of pText & cr after tListOfStringsTemp1
      end repeat
      put stripDuplicates2(tListOfStringsTemp1) into tListOfStringsTemp
      replace (item 2 of tTags) with empty in tListOfStringsTemp
      repeat for each line tValAtt in tAttVals
         replace tValAtt with empty in tListOfStringsTemp
         replace tValAtt with empty in tListOfStrings
         put word 2 to -1 of tValAtt into tValAtt
         replace tValAtt with empty in tListOfStringsTemp
         replace tValAtt with empty in tListOfStrings
      end repeat
      put toUpper(pTitle) &cr&cr before tListOfStringsTemp
      put tListOfStringsTemp & cr &cr after tListOfStrings
   end repeat
   put "<[/\w\d\s=\"&quote&"^>]+>" into tReg
   put replaceText(tListOfStrings,tReg,empty) into tListOfStrings
   if tListOfStrings is not empty then
      put tListOfStrings into fld id 1921 of cd 1 of stack "STEP Transcription Module"
      put tListOfStrings into fld id 1004 of cd 1 of stack "Extracted Strings"
      --modeless stack "Extracted Strings"
   else answer "The text contains no "&(toLower(pItemName))&"."
end menuPick


##TOOLTIP:
##Extract categories of data from the TEI Description Text,
##and visualize them in the field below.



#####################
#####################

## Script of button "Autotag”, ID 1130 of CARD 1 of STACK STEP Transcription Module

on mouseUp
   if the visible of fld id 1041 of cd 1 then put "1041" into tFldID
   else if the visible of fld id 1151 of cd 1 then put "1151" into tFldID
   else 
      answer "Please display either the TEI Base Descr. field or the TEI Rend. Descr. field before clicking this button." as sheet
      exit mouseUp
   end if
   modeless stack "Automatic Tagging"
   set the cFldID of stack "Automatic Tagging" to tFldID
end mouseUp

##TOOLTIP:
##Tag words and phrases automatically in the descriptive field.



#####################
#####################

## Script of button "Archive”, ID 1925 of CARD 1 of STACK STEP Transcription Module

function gatheringContents
   local tStackName,tFldList,tArchive
   put "STEP Transcription Module" into tStackName
   send mouseUp to btn id 1928 of cd 1 of stack tStackName
   put "1921" into tFldList
   repeat for each item tItem in tFldList
      put "Fld id "&tItem&" of cd 1 of stack "&tStackName&cr & the cSavedFieldHTMLContent of fld id tItem of cd 1& cr & "//Fld id "&tItem&" of cd 1 of stack "&tStackName&"//"&cr after tArchive
   end repeat   
   return tArchive
end gatheringContents

 on exportData tContents
   ask file "Type the name of file that will contain the STEP Transcription archive." with type "HTML|html,htm" titled "Type the name of the new file"
   if (it is empty) or (the result is "Cancel") then exit to top
   if ".htm" is not in it then put ".html" after it
   if ".htm" is in it then
      put tContents into fld id 1014 of cd 1 of stack "STEP Transcription Module"
      put the HTMLText of fld id 1014 of cd 1 of stack "STEP Transcription Module" into tContents
      put empty into fld id 1014 of cd 1 of stack "STEP Transcription Module"
   end if
   open file it for write
   write tContents to file it
   close file it
   unlock screen
   answer "All current STEP transcription data were exported successfully to file “" & it & ".”"
end exportData

on mouseUp
   local tStackName,tContents
   put "STEP Transcription Module" into tStackName
   if fld id 1921 of cd 1 of stack tStackName is empty then exit mouseUp
   answer "Confirm you want to export into one HTML file the extracted strings of text in the field above." with "Cancel" or "Export"
   if it is "Cancel" then exit to top
   set the cursor to watch
   lock screen
   put gatheringContents() into tContents
   exportData tContents
   unlock screen
   answer "Operation done. All data have been exported. You may now safely click the button “Clear...” to delete current data." 
end mouseUp

##TOOLTIP:
##Archive the content of the field above into one file.



#####################
#####################

## Script of button "Restore”, ID 1926 of CARD 1 of STACK STEP Transcription Module

on mouseUp
   local tFldList
   put "1921" into tFldList
   repeat for each item tItem in tFldList
      if the cSavedFieldHTMLContent of fld id tItem of cd 1 of stack "STEP Transcription Module" is empty then next repeat
      set the HTMLText of fld id tItem of cd 1 of stack "STEP Transcription Module" to the cSavedFieldHTMLContent of fld id tItem of cd 1 of stack "STEP Transcription Module"
   end repeat   
end mouseUp

##TOOLTIP:
##Recover extracted data from last save.



#####################
#####################

## Script of button "Print" of card "card id 1002" of stack "/Users/adetienn/Documents/STEP Externals/STEP-LI 7.1.4/STEP Transcription Module.livecode”, ID 1927 of CARD 1 of STACK STEP Transcription Module

on mouseUp
   local tTextToPrint,tStackName
   put "STEP Transcription Module" into tStackName
   if fld id 1921 of cd 1 of stack tStackName is empty then exit to top
   if the platform is "MacOS" then revShowPrintDialog false,true else if the platform is "Win32" then revShowPrintDialog true
   if "<p>" is in fld id 1921 of cd 1 of stack tStackName then 
      put the HTMLText of fld id 1921 of cd 1 of stack tStackName into tTextToPrint
      revPrintText tTextToPrint,toUpper("extracted strings") & tab&tab&"<%pageNumber%>"&cr,the date & comma && the time,(the long name of fld id 1921 of cd 1 of stack tStackName)
   else
      put the HTMLText of fld id 1921 of cd 1 of stack tStackName into tTextToPrint
      revPrintText tTextToPrint,toUpper("extracted strings") & tab&tab&"<%pageNumber%>"&cr,the date & comma && the time,(the long name of fld id 1921 of cd 1 of stack tStackName)
   end if
end mouseUp

##TOOLTIP:
##Print the content of the field above.



#####################
#####################

## Script of button "Save Extracted Data”, ID 1928 of CARD 1 of STACK STEP Transcription Module

on mouseUp
   local tFldList
   put "1921" into tFldList
   repeat for each item tItem in tFldList
      if fld id tItem of cd 1 of stack "STEP Transcription Module" is empty then next repeat
      set the cSavedFieldHTMLContent of fld id tItem of cd 1 of stack "STEP Transcription Module" to the HTMLText of fld id tItem of cd 1 of stack "STEP Transcription Module"
   end repeat   
end mouseUp

##TOOLTIP:
##Save extracted data content internally. Click the Restore
##button to recover previously saved content in the field above.



#####################
#####################

## Script of group "LineMark" of card "card id 1002" of stack "/Users/adetienn/Documents/STEP Externals/STEP-LI 7.1.4/STEP Transcription Module.livecode" ID 1931 of CARD 1 of STACK STEP Transcription Module

local sIsDragging,sVisibleField

on mouseEnter
   put empty into sIsDragging
   lock cursor
   if the platform is "MacOS" then set the cursor to 1200 else if the platform is "Win32" then set the cursor to 1634
end mouseEnter

on mouseLeave
   put empty into sIsDragging
   unlock cursor
end mouseLeave

on mouseDown
   put true into sIsDragging
end mouseDown

on mouseUp
   put empty into sIsDragging
end mouseUp

on mouseDoubleUp
   set the showBorder of me to not the showBorder of me
end mouseDoubleUp

on mouseRelease
   put empty into sIsDragging
end mouseRelease

on mouseMove x,y
   lock screen
   if sIsDragging is true then
      put (the top of fld id 1004 of cd 1) into tH1
      put (the bottom of fld id 1004 of cd 1) into tH2
      if y >= tH1-11 and y <= tH2-11 then 
         set the top of me to y-2
      else if y > tH2-11 then
         set the top of me to tH2-22
      else if y < tH1 then
         set the top of me to tH1-11
      end if
   end if
   setLocLineMark
   recordLinemarkMove
   unlock screen
   pass mouseMove
end mouseMove



#####################
#####################

## Script of button "WhichPageNumberToDisplay”, ID 1941 of CARD 1 of STACK STEP Transcription Module

on menuPick pItemName
   if pItemName is "Customize pagebreak format..." then
      modeless stack "Customize Pagebreak Self-Closing Tag"
      exit menuPick
   end if
   set the label of me to pItemName
   put trueword 1 of pItemName into pItemName
   set the cPageNumberDisplay of stack "Customize Pagebreak Self-Closing Tag" to pItemName
   switch pItemName
      case "Transcriptional"
         if the cTranscInitNum of stack "Customize Pagebreak Self-Closing Tag" <> empty then 
            put the cTranscInitNum of stack "Customize Pagebreak Self-Closing Tag" into fld id 1209 of cd 1 of stack "STEP Transcription Module"
         else if fld id 1209 of cd 1 of stack "STEP Transcription Module" <> empty then
            set the cTranscInitNum of stack "Customize Pagebreak Self-Closing Tag" to fld id 1209 of cd 1 of stack "STEP Transcription Module"
            put fld id 1209 of cd 1 of stack "STEP Transcription Module" into fld "TranscInitNum" of cd 1 of stack "Customize Pagebreak Self-Closing Tag"
         end if
         if the cTranscLastNum of stack "Customize Pagebreak Self-Closing Tag" <> empty then 
            put the cTranscLastNum of stack "Customize Pagebreak Self-Closing Tag" into fld id 1211 of cd 1 of stack "STEP Transcription Module"
         else if fld id 1211 of cd 1 of stack "STEP Transcription Module" <> empty then
            set the cTranscLastNum of stack "Customize Pagebreak Self-Closing Tag" to fld id 1211 of cd 1 of stack "STEP Transcription Module"
            put fld id 1211 of cd 1 of stack "STEP Transcription Module" into fld "TranscLastNum" of cd 1 of stack "Customize Pagebreak Self-Closing Tag"
         end if
         break
      case "Authorial"
         if the cAuthorInitNum of stack "Customize Pagebreak Self-Closing Tag" <> empty then 
            put the cAuthorInitNum of stack "Customize Pagebreak Self-Closing Tag" into fld id 1209 of cd 1 of stack "STEP Transcription Module"
         else if fld id 1209 of cd 1 of stack "STEP Transcription Module" <> empty then
            set the cAuthorInitNum of stack "Customize Pagebreak Self-Closing Tag" to fld id 1209 of cd 1 of stack "STEP Transcription Module"
            put fld id 1209 of cd 1 of stack "STEP Transcription Module" into fld "AuthorInitNum" of cd 1 of stack "Customize Pagebreak Self-Closing Tag"
         end if
         if the cAuthorLastNum of stack "Customize Pagebreak Self-Closing Tag" <> empty then 
            put the cAuthorLastNum of stack "Customize Pagebreak Self-Closing Tag" into fld id 1211 of cd 1 of stack "STEP Transcription Module"
         else if fld id 1211 of cd 1 of stack "STEP Transcription Module" <> empty then
            set the cAuthorLastNum of stack "Customize Pagebreak Self-Closing Tag" to fld id 1211 of cd 1 of stack "STEP Transcription Module"
            put fld id 1211 of cd 1 of stack "STEP Transcription Module" into fld "AuthorLastNum" of cd 1 of stack "Customize Pagebreak Self-Closing Tag"
         end if
         break
      case "Archival"
         if the cArchiveInitNum of stack "Customize Pagebreak Self-Closing Tag" <> empty then 
            put the cArchiveInitNum of stack "Customize Pagebreak Self-Closing Tag" into fld id 1209 of cd 1 of stack "STEP Transcription Module"
         else if fld id 1209 of cd 1 of stack "STEP Transcription Module" <> empty then
            set the cArchiveInitNum of stack "Customize Pagebreak Self-Closing Tag" to fld id 1209 of cd 1 of stack "STEP Transcription Module"
            put fld id 1209 of cd 1 of stack "STEP Transcription Module" into fld "ArchiveInitNum" of cd 1 of stack "Customize Pagebreak Self-Closing Tag"
         end if
         if the cArchiveLastNum of stack "Customize Pagebreak Self-Closing Tag" <> empty then 
            put the cArchiveLastNum of stack "Customize Pagebreak Self-Closing Tag" into fld id 1211 of cd 1 of stack "STEP Transcription Module"
         else if fld id 1211 of cd 1 of stack "STEP Transcription Module" <> empty then
            set the cArchiveLastNum of stack "Customize Pagebreak Self-Closing Tag" to fld id 1211 of cd 1 of stack "STEP Transcription Module"
            put fld id 1211 of cd 1 of stack "STEP Transcription Module" into fld "ArchiveLastNum" of cd 1 of stack "Customize Pagebreak Self-Closing Tag"
         end if
         break
   end switch
   send "tabKey"to fld id 1209 of cd 1 of stack "STEP Transcription Module"
   send "tabKey"to fld id 1211 of cd 1 of stack "STEP Transcription Module"
   select empty
end menuPick
  

##TOOLTIP:
##Select which pagination to display down here.
##The first choice may be the most practical.


#####################
#####################
## C. SUBSTACK Printing of STACK STEP Transcription Module
#####################

## Script of SUBSTACK Printing of STACK STEP Transcription Module


on openStack
   lock screen
   set the loc of this stack to the screenLoc
   checkLauncherWindow (the short name of this stack)
   pass openStack
end openStack



#####################
#####################

## Script of CARD 1 of SUBSTACK Printing of STACK STEP Transcription Module

on preOpenCard
   set the label of btn id 1004 to empty
   set the width of this stack to 380
   set the height of this stack to 124
end preOpenCard

on openCard
   set the label of btn id 1004 of cd 1 to empty
   exit openCard
end openCard

#####################
## Script of button " " of card id 1002 of stack "Printing" of stack "/Users/adetienn/Documents/STEP Externals/STEP-LI 7.1.4/STEP Transcription Module.livecode" ID 1004 of CARD 1 of SUBSTACK Printing of STACK STEP Transcription Module

on menuPick pItemName
   switch pItemName
      set the label of me to pItemName
   end switch
end menuPick

CUSTOM KEYS of button " " of card id 1002 of stack "Printing" of stack "/Users/adetienn/Documents/STEP Externals/STEP-LI 7.1.4/STEP Transcription Module.livecode" ID 1004 of CARD 1 of SUBSTACK Printing of STACK STEP Transcription Module

cRect

30,40,352,62

cRectYosemite

30,40,352,62



#####################
## Script of field "Instruction" of card id 1002 of stack "Printing" of stack "/Users/adetienn/Documents/STEP Externals/STEP-LI 7.1.4/STEP Transcription Module.livecode" ID 1006 of CARD 1 of SUBSTACK Printing of STACK STEP Transcription Module


CUSTOM KEYS of field "Instruction" of card id 1002 of stack "Printing" of stack "/Users/adetienn/Documents/STEP Externals/STEP-LI 7.1.4/STEP Transcription Module.livecode" ID 1006 of CARD 1 of SUBSTACK Printing of STACK STEP Transcription Module

cRect

24,10,354,35

cRectYosemite

24,10,354,35



#####################
## Script of button "Cancel" of card id 1002 of stack "Printing" of stack "/Users/adetienn/Documents/STEP Externals/STEP-LI 7.1.4/STEP Transcription Module.livecode" ID 1008 of CARD 1 of SUBSTACK Printing of STACK STEP Transcription Module

on mouseUp
   close stack "Printing"
end mouseUp

CUSTOM KEYS of button "Cancel" of card id 1002 of stack "Printing" of stack "/Users/adetienn/Documents/STEP Externals/STEP-LI 7.1.4/STEP Transcription Module.livecode" ID 1008 of CARD 1 of SUBSTACK Printing of STACK STEP Transcription Module

cRect

46,78,156,101

cRectYosemite

46,78,156,101



#####################
## Script of button "Print" of card id 1002 of stack "Printing" of stack "/Users/adetienn/Documents/STEP Externals/STEP-LI 7.1.4/STEP Transcription Module.livecode" ID 1010 of CARD 1 of SUBSTACK Printing of STACK STEP Transcription Module

on mouseUp
   put empty into tFldID
   switch (the label of btn id 1004 of cd 1)
      case "Core Transcription"
         put "1004" into tFldID
         break
      case "Indent View"
         put "1126" into tFldID
         break
      case "Anchored Transcription"
         put "1163" into tFldID
         break
      case "TEI Rendition"
         put "1026" into tFldID
         break
      case "Description Base Text"
         put "1029" into tFldID
         break
      case "TEI Base Text Description"
         put "1041" into tFldID
         break
      case "TEI Indented Description"
         put "1139" into tFldID
         break
      case "Tagless Base Description"
         put "1044" into tFldID
         break
      case "TEI Rendition Description"
         put "1151" into tFldID
         break
      case "Indented Rendition View"
         put "1154" into tFldID
         break
      case "Tagless Rendition Text"
         put "1057" into tFldID
         break
      case "Automatic Syntactical  Alterations"
         put "1017" into tFldID
         break
      case "XML Syntactical  Alterations"
         put "1109" into tFldID
         break
      case "Edited Syntactical  Alterations"
         put "1064" into tFldID
         break
      case "XML Edited Syntactical  Alterations"
         put "1171" into tFldID
         break
      case "Automatic Pragmatic  Alterations"
         put "1049" into tFldID
         break
      case "XML Pragmatic  Alterations"
         put "1112" into tFldID
         break
      case "Edited Pragmatic  Alterations"
         put "1067" into tFldID
         break
      case "XML Edited Pragmatic  Alterations"
         put "1174" into tFldID
         break
      case "Content of HTML or XHTML Field"
         put "1014" into tFldID
         break
   end switch
   if tFldID is empty then exit to top
   if the platform is "MacOS" then revShowPrintDialog false,true else if the platform is "Win32" then revShowPrintDialog true
   if "/>" is in fld id tFldID of cd 1 of stack "STEP Transcription Module" then 
      revPrintField (the long name of field id tFldID of cd 1 of stack "STEP Transcription Module")
   else
      put the HTMLText of fld id tFldID of cd 1 of stack "STEP Transcription Module" into tTextToPrint
      revPrintText tTextToPrint,toUpper(the label of btn id 1004 of cd 1 of stack "Printing") & tab&tab&"<%pageNumber%>"&cr,the date & comma && the time,(the long name of fld id tFldID of cd 1 of stack "STEP Transcription Module")
   end if
   close stack "Printing"
end mouseUp

CUSTOM KEYS of button "Print" of card id 1002 of stack "Printing" of stack "/Users/adetienn/Documents/STEP Externals/STEP-LI 7.1.4/STEP Transcription Module.livecode" ID 1010 of CARD 1 of SUBSTACK Printing of STACK STEP Transcription Module

cRect

214,78,324,101

cRectYosemite

214,78,324,101

#####################
#####################
## D. SUBSTACK Extracted Strings of STACK STEP Transcription Module


#####################
## Script of SUBSTACK Extracted Strings of STACK STEP Transcription Module 

on openStack
   set the loc of this stack to the screenLoc
   checkLauncherWindow (the short name of this stack)
   pass openStack
end openStack



#####################
## Script of CARD 1 of SUBSTACK Extracted Strings of STACK STEP Transcription Module

on preOpenCard
   set the width of this stack to 400
   set the height of this stack to 400
end preOpenCard

on openCard
   exit openCard
end openCard



#####################
## Script of button "Close" of card id 1002 of stack "Extracted Strings" of stack "/Users/adetienn/Documents/STEP Externals/STEP-LI 7.1.4/STEP Transcription Module.livecode" ID 1007 of CARD 1 of SUBSTACK Extracted Strings of STACK STEP Transcription Module

on mouseUp
   send "mouseUp" to btn "Save"
   close stack "Extracted Strings"
end mouseUp

CUSTOM KEYS of button "Close" of card id 1002 of stack "Extracted Strings" of stack "/Users/adetienn/Documents/STEP Externals/STEP-LI 7.1.4/STEP Transcription Module.livecode" ID 1007 of CARD 1 of SUBSTACK Extracted Strings of STACK STEP Transcription Module

cRect

0,378,66,400


#####################
## Script of button "Save" of card id 1002 of stack "Extracted Strings" of stack "/Users/adetienn/Documents/STEP Externals/STEP-LI 7.1.4/STEP Transcription Module.livecode" ID 1008 of CARD 1 of SUBSTACK Extracted Strings of STACK STEP Transcription Module

on mouseUp
   put "1004" into tFldList
   repeat for each item tItem in tFldList
      if fld id tItem of cd 1 is empty then next repeat
      set the cSavedFieldHTMLContent of fld id tItem of cd 1 to the HTMLText of fld id tItem of cd 1
   end repeat   
end mouseUp

##TOOLTIP:
##Save all contents internally. Click the Restore
##button to restore the saved content in all fields.

CUSTOM KEYS of button "Save" of card id 1002 of stack "Extracted Strings" of stack "/Users/adetienn/Documents/STEP Externals/STEP-LI 7.1.4/STEP Transcription Module.livecode" ID 1008 of CARD 1 of SUBSTACK Extracted Strings of STACK STEP Transcription Module

cRect

328,377,400,401


#####################
## Script of button "Archive" of card id 1002 of stack "Extracted Strings" of stack "/Users/adetienn/Documents/STEP Externals/STEP-LI 7.1.4/STEP Transcription Module.livecode" ID 1009 of CARD 1 of SUBSTACK Extracted Strings of STACK STEP Transcription Module

function gatheringContents
   local tFldList,tStackName,tArchive
   send "mouseUp" to btn "Save" of cd 1
   put "1004" into tFldList
   put "Extracted Strings" into tStackName
   repeat for each item tItem in tFldList
      put "Fld id "&tItem&" of cd 1 of stack "&tStackName&cr & the cSavedFieldHTMLContent of fld id tItem of cd 1& cr & "//Fld id "&tItem&" of cd 1 of stack "&tStackName&"//"&cr after tArchive
   end repeat   
   return tArchive
end gatheringContents

 on exportData tContents
   ask file "Type the name of file that will contain the STEP Transcription archive." with type "HTML|html,htm" titled "Type the name of the new file"
   if (it is empty) or (the result is "Cancel") then exit to top
   if ".htm" is not in it then put ".html" after it
   if ".htm" is in it then
      put tContents into fld id 1014 of cd 1 of stack "STEP Transcription Module"
      put the HTMLText of fld id 1014 of cd 1 of stack "STEP Transcription Module" into tContents
      put empty into fld id 1014 of cd 1 of stack "STEP Transcription Module"
   end if
   open file it for write
   write tContents to file it
   close file it
   unlock screen
   answer "All current STEP transcription data were exported successfully to file “" & it & ".”"
end exportData

on mouseUp
   local tContents
   if fld id 1004 of cd 1 is empty then exit mouseUp
   answer "Confirm you want to export into one HTML file the extracted strings of text in the field above." with "Cancel" or "Export"
   if it is "Cancel" then exit to top
   set the cursor to watch
   lock screen
   put gatheringContents() into tContents
   exportData tContents
   unlock screen
   answer "Operation done. All data have been exported. You may now safely click the button “Clear...” to delete current data." 
end mouseUp

##TOOLTIP:
##Archive the content of all fields into one file.

CUSTOM KEYS of button "Archive" of card id 1002 of stack "Extracted Strings" of stack "/Users/adetienn/Documents/STEP Externals/STEP-LI 7.1.4/STEP Transcription Module.livecode" ID 1009 of CARD 1 of SUBSTACK Extracted Strings of STACK STEP Transcription Module

cRect

126,378,205,400




#####################
## Script of button "Clear…" of card id 1002 of stack "Extracted Strings" of stack "/Users/adetienn/Documents/STEP Externals/STEP-LI 7.1.4/STEP Transcription Module.livecode" ID 1010 of CARD 1 of SUBSTACK Extracted Strings of STACK STEP Transcription Module

on mouseUp
   answer "Confirm you want to delete the content of the field above. First archive it using the “Archive...” button if you need to preserve its content." with "Cancel" or "Clear"
   if it is "Cancel" then exit mouseUp
   put "1004" into tFldList
   repeat for each item tItem in tFldList
      set the cSavedFieldHTMLContent of fld id tItem of cd 1 to empty
      put empty into fld id tItem of cd 1
   end repeat   
end mouseUp

##TOOLTIP:
##Delete the content of the field
##and its internal save.

CUSTOM KEYS of button "Clear…" of card id 1002 of stack "Extracted Strings" of stack "/Users/adetienn/Documents/STEP Externals/STEP-LI 7.1.4/STEP Transcription Module.livecode" ID 1010 of CARD 1 of SUBSTACK Extracted Strings of STACK STEP Transcription Module

cRect

65,378,127,400




#####################
## Script of button "Print" of card id 1002 of stack "Extracted Strings" of stack "/Users/adetienn/Documents/STEP Externals/STEP-LI 7.1.4/STEP Transcription Module.livecode" ID 1011 of CARD 1 of SUBSTACK Extracted Strings of STACK STEP Transcription Module

on mouseUp
   if fld id 1004 of cd 1 is empty then exit to top
   if the platform is "MacOS" then revShowPrintDialog false,true else if the platform is "Win32" then revShowPrintDialog true
   if "<p>" is in fld id 1004 of cd 1 of stack "Extracted Strings" then 
      put the HTMLText of fld id 1004 of cd 1 of stack "Extracted Strings" into tTextToPrint
      revPrintText tTextToPrint,toUpper("extracted strings") & tab&tab&"<%pageNumber%>"&cr,the date & comma && the time,(the long name of fld id 1004 of cd 1 of stack "Extracted Strings")
   else
      put the HTMLText of fld id 1004 of cd 1 of stack "Extracted Strings" into tTextToPrint
      revPrintText tTextToPrint,toUpper("extracted strings") & tab&tab&"<%pageNumber%>"&cr,the date & comma && the time,(the long name of fld id 1004 of cd 1 of stack "Extracted Strings")
   end if
end mouseUp

##TOOLTIP:
##Print the content of any field.

CUSTOM KEYS of button "Print" of card id 1002 of stack "Extracted Strings" of stack "/Users/adetienn/Documents/STEP Externals/STEP-LI 7.1.4/STEP Transcription Module.livecode" ID 1011 of CARD 1 of SUBSTACK Extracted Strings of STACK STEP Transcription Module

cRect

271,378,329,400




#####################
## Script of button "Restore" of card id 1002 of stack "Extracted Strings" of stack "/Users/adetienn/Documents/STEP Externals/STEP-LI 7.1.4/STEP Transcription Module.livecode" ID 1012 of CARD 1 of SUBSTACK Extracted Strings of STACK STEP Transcription Module

on mouseUp
   put "1004" into tFldList
   repeat for each item tItem in tFldList
      if the cSavedFieldHTMLContent of fld id tItem of cd 1 is empty then next repeat
      set the HTMLText of fld id tItem of cd 1 to the cSavedFieldHTMLContent of fld id tItem of cd 1
   end repeat   
end mouseUp

##TOOLTIP:
##Recover data from last save.

CUSTOM KEYS of button "Restore" of card id 1002 of stack "Extracted Strings" of stack "/Users/adetienn/Documents/STEP Externals/STEP-LI 7.1.4/STEP Transcription Module.livecode" ID 1012 of CARD 1 of SUBSTACK Extracted Strings of STACK STEP Transcription Module

cRect

204,378,272,400

#####################
#####################
## E. SUBSTACK Add Special Character of STACK STEP Transcription Module



#####################
## Script of SUBSTACK Add Special Character of STACK STEP Transcription Module

on preOpenStack
   local xy
   set the width of this stack to the minWidth of this stack
   put the topLeft of  stack "STEP Transcription Module" into xy
   set the topLeft of this stack to (item 1 of xy)+432,(item 2 of xy)+46
end preOpenStack

on openStack
   checkLauncherWindow (the short name of this stack)
   select before fld id 4106 of cd 1
   pass openStack
end openStack

on closeStack
   lock screen
   repeat with x = 1009 to 1012
      put empty into fld id x of cd 1
   end repeat
   put empty into fld id 1018 of cd 1
   put empty into fld id 1019 of cd 1
   put empty into fld id 1028 of cd 1
   put empty into fld id 1031 of cd 1
   put empty into fld id 1024 of cd 1
   put empty into fld id 4106 of cd 1
   put empty into btn id 4107 of cd 1
   set the label of btn id 4107 of cd 1 to  "Character Names (0)"
   set the label of btn id 1039 of cd 1 to empty
   set the label of btn id 1040 of cd 1 to empty
   set the width of this stack to the minWidth of this stack
end closeStack

CUSTOM KEYS of SUBSTACK Add Special Character of STACK STEP Transcription Module


#####################
## Script of CARD 1 of SUBSTACK Add Special Character of STACK STEP Transcription Module

function findUnicodeName pHexNum
   local tNames,tLN,tLN2,tUnicodeNameLine,tUniName,ut
   put the cUnicodeTableNames of this stack into tNames
   put lineOffsets(pHexNum&";",tNames) into tLN
   if tLN <> 0 then
      set the wholeMatches to true
      set the itemDel to comma
      repeat with c = 1 to the number of items of tLN
         put item c of tLN into ut
         if baseConvert(trueword 1 of line ut of tNames,16,10) is baseConvert(pHexNum,16,10) then exit repeat
         --if "a"&trueword 1 of line ut of tNames is "a"&pHexNum then exit repeat
      end repeat
      put line ut of tNames into tUnicodeNameLine
      set the itemDel to ";"
      if "<control>" is not in item 2 of tUnicodeNameLine then put item 2 of tUnicodeNameLine into tUniName
      if item 11 of tUnicodeNameLine <> empty then
         if tUniName is empty or compareUnicodeNames(tUniName,item 11 of tUnicodeNameLine) is "nothing new" then put item 11 of tUnicodeNameLine into tUniName else put space & "(" & item 11 of tUnicodeNameLine & ")" after tUniName
      end if
      return tUniName
   end if
   return empty
end findUnicodeName

function compareUnicodeNames pUniName,pOtherUnicodeName
   if pOtherUnicodeName is empty then return "nothing new"
   if pUniName is empty then return "new element"
   repeat for each trueword tTW in pOtherUnicodeName
      if tTW is not among the truewords of pUniName then return "new element"
   end repeat
   return "nothing new"
end compareUnicodeNames

function stripDuplicateItems pListToStrip,pItemDelimiter
   local tItemDel,tStrippedList
   if pItemDelimiter is empty then put comma into pItemDelimiter
   put the itemDel into tItemDel
   set the itemDel to pItemDelimiter
   repeat for each item tCount in pListToStrip
      if tCount is not among the items of tStrippedList then 
         put tCount & comma after tStrippedList
      end if
   end repeat
   if char -1 of tStrippedList is comma then delete char -1 of tStrippedList
   set the itemDel to tItemDel
   return tStrippedList
end stripDuplicateItems

function stripDuplicatesNumericItems pListToStrip,pItemDelimiter
   local tItemDel
   if pItemDelimiter is empty then put comma into pItemDelimiter
   put the itemDel into tItemDel
   set the itemDel to pItemDelimiter
   repeat for each item tCount in pListToStrip
      put 1 into tArray[tCount]
   end repeat
   put the keys of tArray into tKeys
   sort tKeys ascending numeric
   set the itemDel to tItemDel
   return tKeys
end stripDuplicatesNumericItems




#####################
## Script of field "Instruction”, ID 1006 of CARD 1 of SUBSTACK Add Special Character of STACK STEP Transcription Module

on mouseUp
   if the text of fld id 1028 of cd 1 is empty then exit mouseUp
   put numToCodepoint(the text of fld id 1028 of cd 1) into fld id 1009 of cd 1
end mouseUp

##TOOLTIP:
##Enter the corresponding single or paired Unicode
##character number (if not done automatically).



#####################
## Script of field "Instruction”, ID 1007 of CARD 1 of SUBSTACK Add Special Character of STACK STEP Transcription Module

on mouseUp
   if fld id 1012 of cd 1 is empty then exit mouseUp
   put word 3 of fld id 1007 of cd 1 & fld id 1012 of cd 1 & ";" into tH
   if fld id 1019 of cd 1 <> empty then put word 5 of fld id 1007 of cd 1 & fld id 1019 of cd 1 & ";" after tH
   set the HTMLText of fld id 1009 of cd 1 to tH
end mouseUp

##TOOLTIP:
##Enter the corresponding single or paired numeric character
##reference, or the entity reference, if not done automatically.
##Ex.: &#171;  or &laquo;  Characters &, #, and ; need not be typed.



#####################
## Script of field "Character”, ID 1009 of CARD 1 of SUBSTACK Add Special Character of STACK STEP Transcription Module

on returnInField
   closeField2
   if fld id 1010 of cd 1 is empty then select the text of fld id 1010 of cd 1 else select after fld id 1011 of cd 1
end returnInField

on tabKey
   closeField2
   if fld id 1010 of cd 1 is empty then select the text of fld id 1010 of cd 1 else select after fld id 1011 of cd 1
end tabKey

on enterInField
   closeField2
   if fld id 1010 of cd 1 is empty then select the text of fld id 1010 of cd 1 else select after fld id 1011 of cd 1
end enterInField

on closeField2
   lock screen
   local tTopLeft,tFldContent1,tFldContent2,tFldContent3,tFldContent4,tCP,ets,ots,uts,tNumItems,tNumItems2,tHTM,tLetter
   put fld id 1009 of cd 1 into tLetter
   if tLetter is empty then exit closeField2
   put the HTMLText of me into tHTM
   put "4. Numeric/Entity Ref.:    &#               ;  &#               ;" into tFldContent1
   put "4. Numeric/Entity Ref.:      &               ;  &#               ;" into tFldContent2
   put "4. Numeric/Entity Ref.:   &#                ;   &                ;" into tFldContent3
   put "4. Numeric/Entity Ref.:      &               ;   &                ;" into tFldContent4
   --put codePointProperty(codepoint 1 of tLetter,"Name") into fld id 1010 of cd 1 << Livecode Bug confirmed by them on 3/24/2016 (ADT devised a workaround)
   put empty into fld id 1010 of cd 1
   put empty into fld id 1011 of cd 1
   put empty into fld id 1018 of cd 1
   put empty into fld id 1012 of cd 1
   put empty into fld id 1019 of cd 1
   put empty into fld id 1028 of cd 1
   put empty into fld id 1031 of cd 1
   put empty into fld id 1024 of cd 1
   put leadingZeroes(baseConvert(codepointToNum(codepoint 1 of tLetter),10,16),4) into fld id 1011 of cd 1
   put findUnicodeName(fld id 1011 of cd 1) into fld id 1010 of cd 1
   get the formattedWidth of fld id 1010 of cd 1
   put the topLeft of this stack into tTopLeft
   if it > 268 then set the width of this stack to (the minwidth of this stack) +(it - 268) else set the width of this stack to the minwidth of this stack
   set the topLeft of this stack to tTopLeft
   put codepointToNum(codepoint 1 of tLetter) into fld id 1028 of cd 1
   put codePointProperty(codepoint 1 of tLetter,"General_Category") into line 1 of fld id 1024 of cd 1
   put codepointToNum(codepoint 2 of tLetter) into tCP
   if tCP <> 0 then 
      put leadingZeroes(baseConvert(tCP,10,16),4) into fld id 1018 of cd 1
      put tCP into fld id 1031 of cd 1
      put " followed by" after line 1 of fld id 1024 of cd 1
      put codePointProperty(codepoint 2 of tLetter,"General_Category") into line 2 of fld id 1024 of cd 1
      set the textStyle of segment -2 to -1 of line 1 of fld id 1024 of cd 1 to "italic"
   end if
   if "&" is in tHTM then
      put offsets("&",tHTM) into ets
      put offsets("&#",tHTM) into ots
      put offsets(";",tHTM) into uts
      if ots = 0 then put empty into ots
      put the number of items of ets into tNumItems
      put the number of items of ots into tNumItems2
      if tNumItems = tNumItems2 then
         put tFldContent1 into fld id 1007 of cd 1
         put char (item 1 of ots)+2 to (item 1 of uts)-1 of tHTM into fld id 1012 of cd 1
         if item 2 of ots <> empty and (fld id 1012 of cd 1 <> fld id 1028 of cd 1) then 
            put char (item 2 of ots)+2 to (item 2 of uts)-1 of tHTM into fld id 1019 of cd 1
         end if
      else if tNumItems2 is 0 then
         put tFldContent2 into fld id 1007 of cd 1
         put char (item 1 of ets)+1 to (item 1 of uts)-1 of tHTM into fld id 1012 of cd 1
         if item 2 of ets <> empty and (fld id 1012 of cd 1 <> fld id 1028 of cd 1) then 
            put char (item 2 of ets)+1 to (item 2 of uts)-1 of tHTM into fld id 1019 of cd 1
         end if
      else if tNumItems = (tNumItems2 * 2) then
         if item 1 of ots = item 1 of ets then
            put tFldContent3 into fld id 1007 of cd 1
            put char (item 1 of ots)+2 to (item 1 of uts)-1 of tHTM into fld id 1012 of cd 1
            if (fld id 1012 of cd 1 <> fld id 1028 of cd 1) then 
               put char (item 2 of ets)+1 to (item 2 of uts)-1 of tHTM into fld id 1019 of cd 1
            end if
         else if item 1 of ots = item 2 of ets then
            put tFldContent2 into fld id 1007 of cd 1
            put char (item 1 of ets)+1 to (item 1 of uts)-1 of tHTM into fld id 1012 of cd 1
            if (fld id 1012 of cd 1 <> fld id 1028 of cd 1) then 
               put char (item 1 of ots)+2 to (item 2 of uts)-1 of tHTM into fld id 1019 of cd 1
            end if
         end if
      end if
   end if
end closeField2

##TOOLTIP:
##If you can’t enter the character, find it by name in the grey box below, 
##or enter its U+ number or its numeric reference and press tab or return.



#####################
## Script of field "Name”, ID 1010 of CARD 1 of SUBSTACK Add Special Character of STACK STEP Transcription Module

on keyDown theKey 
   local tSC
   put the selectedChunk into tSC
   if the selectedText of me <> empty then 
      put empty into the selectedChunk
   end if
   set the wholeMatches to true
   put toUpper(theKey) into theKey
   if theKey is not in "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZŒÆ " then beep
   else
      if word 2 of tSC < word 4 of tSC is empty then 
         put theKey after char (word 4 of tSC) of me
      else
         put theKey before char (word 2 of tSC) of me
      end if
   end if
end keyDown

on returnInField
   if the shiftKey is not down then select the text of fld id 1011 of cd 1 else select the text of fld id 1009 of cd 1
end returnInField

on tabKey
   if the shiftKey is not down then select the text of fld id 1011 of cd 1 else select the text of fld id 1009 of cd 1
end tabKey

on enterInField
  if the shiftKey is not down then select the text of fld id 1011 of cd 1 else select the text of fld id 1009 of cd 1
end enterInField

##TOOLTIP:
##The standard name is entered automatically in most cases.



#####################
## Script of field "Unicode”, ID 1011 of CARD 1 of SUBSTACK Add Special Character of STACK STEP Transcription Module

on keyDown theKey 
   local tSC
   put the selectedChunk into tSC
   if the selectedText of me <> empty then 
      put empty into the selectedChunk
   end if
   set the wholeMatches to true
   put toUpper(theKey) into theKey
   if theKey is not in "0123456789ABCDEF" then beep
   else
      if word 2 of tSC < word 4 of tSC is empty then 
         put theKey after char (word 4 of tSC) of me
      else
         put theKey before char (word 2 of tSC) of me
      end if
   end if
end keyDown

on returnInField
   lock screen
   fillinChar
   select the text of fld id 1018 of cd 1
end returnInField

on tabKey
   lock screen
   fillinChar
   select the text of fld id 1018 of cd 1
end tabKey

on enterInField
   lock screen
   fillinChar
   select the text of fld id 1018 of cd 1
end enterInField

on fillinChar
   if the text of fld id 1011 of cd 1 <> empty then 
      put baseConvert(segment 1 of fld id 1011 of cd 1,16,10) into fld id 1028 of cd 1
      put numToCodepoint(segment 1 of fld id 1028 of cd 1) into fld id 1009 of cd 1
   else put empty into fld id 1028 of cd 1
   send "closefield2" to fld id 1009 of cd 1
end fillinChar

##TOOLTIP:
##Type only the hexadecimal code.



#####################
## Script of field "HTML”, ID 1012 of CARD 1 of SUBSTACK Add Special Character of STACK STEP Transcription Module

on keyDown theKey 
   set the wholeMatches to true
   if /*(word 3 of fld id 1007 of cd 1 is "&#" and theKey is not in "0123456789ABCDEF") or */(theKey is in ".,:;&#!@$%^*(){}[]|\/?><") then beep
   else pass keyDown
end keyDown

on returnInField
   select the text of fld id 1019 of cd 1
end returnInField

on tabKey
   select the text of fld id 1019 of cd 1
end tabKey

on enterInField
   select the text of fld id 1019 of cd 1
end enterInField

on closeField
   if the text of me is empty then pass closeField
   put "4. NCR:   &#               ; &#               ;" into tFldContent1
   put "4. NCR:     &               ; &#               ;" into tFldContent2
   put "4. NCR:   &#               ; &                 ;" into tFldContent3
   put "4. NCR:     &               ; &                 ;" into tFldContent4
   if the text of me is an integer and ((the text of fld id 1019 of cd 1 is an integer) or (the text of fld id 1019 of cd 1 is empty)) then put tFldContent1 into fld id 1007 of cd 1
   else if the text of me is not an integer then
      if ((the text of fld id 1019 of cd 1 is an integer) or (the text of fld id 1019 of cd 1 is empty)) then put tFldContent2 into fld id 1007 of cd 1
      else if (the text of fld id 1019 of cd 1 is not an integer) and (the text of fld id 1019 of cd 1 <> empty) then put tFldContent4 into fld id 1007 of cd 1
   end if
   fillinChar
end closeField

on fillinChar
   if fld id 1012 of cd 1 is empty then exit fillinChar
   put word 3 of fld id 1007 of cd 1 & fld id 1012 of cd 1 & ";" into tH
   if fld id 1019 of cd 1 <> empty then put word 5 of fld id 1007 of cd 1 & fld id 1019 of cd 1 & ";" after tH
   set the HTMLText of fld id 1009 of cd 1 to tH
   send "closefield2" to fld id 1009 of cd 1
end fillinChar

##TOOLTIP:
##Type only the inner string or number.



#####################
## Script of button "Clear Fields”, ID 1013 of CARD 1 of SUBSTACK Add Special Character of STACK STEP Transcription Module

on mouseUp
   lock screen
   repeat with x = 1009 to 1012
      put empty into fld id x of cd 1
   end repeat
   put empty into fld id 1018 of cd 1
   put empty into fld id 1019 of cd 1
   put empty into fld id 1028 of cd 1
   put empty into fld id 1031 of cd 1
   put empty into fld id 1024 of cd 1
   put empty into fld id 4106 of cd 1
   put empty into btn id 4107 of cd 1
   set the label of btn id 4107 of cd 1 to  "Character Names (0)"
   set the label of btn id 1039 of cd 1 to empty
   set the label of btn id 1040 of cd 1 to empty
   set the width of this stack to the minWidth of this stack
end mouseUp

##TOOLTIP:
##Empty all fields.



#####################
## Script of button "Add Character”, ID 1014 of CARD 1 of SUBSTACK Add Special Character of STACK STEP Transcription Module

on mouseEnter
   local ut,ot
   put the label of btn id 1039 of cd 1 into ut
   put the label of btn id 1040 of cd 1 into ot
   if ut <> empty then
      if ut is not among the lines of btn id 1039 of cd 1 then 
         if ot is empty then
            set the label of me to "Add Character to New Category in the “Insert” Menu"
         else
            if ot is among the lines of btn id 1040 of cd 1 then
               set the label of me to "Add Character to New Category/Selected Subcategory in the “Insert” Menu"
            else
               set the label of me to "Add Character to New Category/Subcategory in the “Insert” Menu"
            end if
         end if
      else if ut is among the lines of btn id 1039 of cd 1 then 
         if ot is empty then
            set the label of me to "Add Character to Selected Category in the “Insert” Menu"
         else
            if ot is among the lines of btn id 1040 of cd 1 then
               set the label of me to "Add Character to Selected Category/Subcategory in the “Insert” Menu"
            else
               set the label of me to "Add Character to Selected Category/New Subcategory in the “Insert” Menu"
            end if
         end if
      end if
   else 
      if ut is empty then set the label of me to "Add Character to New Category in the “Insert” Menu"
   end if
end mouseEnter

on mouseUp
   local tChar,tCategory,tCategory2,tSubCategory,tSpecCharCategories,tCurrentChars,tSubMenu,tName,tUnicode,tHTMLCode,tNewCharacter
   local tVisibleMenus,tHiddenMenus,tCustomCharCat,tAllCustomKeys,tCustomSubMenu,tStackName,tNewCharacterTwoItems,tAlert,tUTFcode
   put the label of btn id 1039 of cd 1 into tCategory
   caseCategoryName tCategory
   put the label of btn id 1040 of cd 1 into tSubCategory
   put the cSpecialCharacterCategories of btn id 1039 of cd 1 into tSpecCharCategories
   if tCategory is empty then
      answer "You must first select an existing character category or type in a new one." as sheet
      exit mouseUp
   end if
   put fld id 1009 of cd 1 into tChar
   put toUpper(fld id 1010 of cd 1) into tName
   put fld id 1011 of cd 1 into tUnicode
   put fld id 1012 of cd 1 into tHTMLcode
   put fld id 1028 of cd 1 into tUTFcode
   if tName is empty or tUnicode is empty or tHTMLcode is empty then 
      answer "Boxes 2 (name), 4 (Unicode), and 6 (HTML) above need to be filled." as sheet
      exit mouseUp
   end if
   if not(tUnicode begins with "U+") then put "U+" before tUnicode
   if fld id 1018 of cd 1 <> empty then put "U+"&fld id 1018 of cd 1 after tUnicode
   if not(tHTMLcode begins with "&") then put (word 4 of fld id 1007 of cd 1) before tHTMLcode
   if not(tHTMLcode ends with ";") then put ";" after tHTMLcode
   if not(tUTFcode begins with "&") then put (word 4 of fld id 1007 of cd 1) before tUTFcode
   if not(tUTFcode ends with ";") then put ";" after tUTFcode
   if fld id 1019 of cd 1 <> empty then put (word 6 of fld id 1007 of cd 1) & (fld id 1019 of cd 1) & ";" after tHTMLcode
   if tChar is empty then put "?" into tChar
   put tChar&"|"&tUnicode&"|"&tUTFCode&"|"&tHTMLcode&"|"&tName into tNewCharacter
   put tChar&"|"&tUnicode&"|" into tNewCharacterTwoItems
   if tCategory is not among the lines of tSpecCharCategories then
      put cr&tCategory after tSpecCharCategories
      sort tSpecCharCategories ascending international
      filter tSpecCharCategories without empty
      set the cSpecialCharacterCategories of btn id 1039 of cd 1 to tSpecCharCategories
   end if
   put tCategory into tCategory2
   replace space with empty in tCategory2
   put "c"&tCategory2 into tCustomCharCat
   put tCustomCharCat & "SubMenu" into tCustomSubMenu
   put "STEP Transcription Module" into tStackName
   put the cVisibleSpecialCharactersSubMenus of btn id 1106 of cd 1 of stack tStackName into tVisibleMenus
   put the cHiddenSpecialCharactersSubMenus of btn id 1106 of cd 1 of stack tStackName into tHiddenMenus
   put the customKeys of btn id 1106 of cd 1 of of stack tStackName into tAllCustomKeys
   if tCustomSubMenu is not among the lines of tAllCustomKeys then
      do "set the " & tCustomSubMenu & " of  btn id 1106 of cd 1 of of stack stackName to empty"
      put cr & tCustomSubMenu after tVisibleMenus
      put cr & tCustomCharCat after tAllCustomKeys
      put cr & tCustomSubMenu after tAllCustomKeys
      filter tAllCustomKeys without empty
      set the customKeys of btn id 1106 of cd 1 of of stack tStackName to tAllCustomKeys
      set the cVisibleSpecialCharactersSubMenus of btn id 1106 of cd 1 of of stack tStackName to tVisibleMenus
   else
      if tCustomSubMenu is among the lines of tHiddenMenus then
         put cr & tCustomSubMenu after tVisibleMenus
         set the cVisibleSpecialCharactersSubMenus of btn id 1106 of cd 1 of stack tStackName to tVisibleMenus
         delete line lineOffset(tCustomSubMenu,tHiddenMenus) of tHiddenMenus
         set the cHiddenSpecialCharactersSubMenus of btn id 1106 of cd 1 of stack tStackName to tHiddenMenus
      end if
   end if
   do "put the "&tCustomCharCat&" of btn id 1106 of cd 1 of stack tStackName into tCurrentChars"
   if tNewCharacter is not among the lines of tCurrentChars then
      if tCurrentChars is empty then put tNewCharacter into tCurrentChars 
      else 
         if lineOffset(tNewCharacterTwoItems,tCurrentChars) <> 0 then
            put tNewCharacter into line lineOffset(tNewCharacterTwoItems,tCurrentChars) of tCurrentChars
         else
            put cr & tNewCharacter after tCurrentChars
         end if
      end if
      do "set the "&tCustomCharCat&" of btn id 1106 of cd 1 of stack tStackName to tCurrentChars"
      do "put the "&tCustomSubMenu&"  of btn id 1106 of cd 1 of stack tStackName into tSubMenu"
      put empty into fld id 1009 of cd 1
      if tCategory <> empty then
         if tSubMenu is empty then put tCategory into tSubMenu
         if tSubCategory is empty then 
            put cr & tab & tChar after tSubMenu
         else if tSubCategory <> empty then
            if cr&tab&tSubCategory is in tSubMenu then
               set the wholematches to true
               if tab & tab &tChar is not in tSubMenu then
                  put cr & tab & tab &tChar after line lastLineOfSubMenu(tSubCategory,tSubMenu) of tSubMenu
               else
                  answer "The character “"&tName&"” ("&tChar&") is already part of the menu list; its name has been updated." as sheet
                  put "skip" into tAlert
               end if
            else
               put  cr&tab&tSubCategory & cr & tab & tab & tChar after tSubMenu
            end if
         end if
         do "set the "&tCustomSubMenu&"  of btn id 1106 of cd 1 of stack tStackName to tSubMenu"
         if tAlert <> "skip" then answer "The character “"&tName&"” ("&tChar&") has  been added to the menu list." as sheet
      end if
   else
      answer "The character “"&tName&"” ("&tChar&") is already part of the menu list." as sheet
   end if
   repeat with x = 1009 to 1012
      put empty into fld id x of cd 1
   end repeat
   put empty into fld id 1018 of cd 1
   put empty into fld id 1019 of cd 1
   put empty into fld id 1028 of cd 1
   put empty into fld id 1031 of cd 1
   put empty into fld id 1024 of cd 1
   populateInsertMenu
   select after fld id 1009 of cd 1
end mouseUp

function lastLineOfSubMenu pSubCategory,pSubMenu
   get lineOffset(tab&pSubCategory,pSubMenu)
   if it <> 0 and it <> the number of lines of pSubMenu then
      repeat with j = it+1 to the number of lines of pSubMenu
         if not(line j of pSubMenu begins with tab&tab) then return j-1
         else if (line j of pSubMenu begins with tab&tab) and (j = the number of lines of pSubMenu) then return j
      end repeat
   end if
   return empty
end lastLineOfSubMenu

on caseCategoryName @pCategory
   repeat with i = 1 to the number of segments of pCategory
      put toUpper(char 1 of segment i of pCategory) into char 1 of segment i of pCategory
      repeat with j = 2 to length(segment i of pCategory)
         put toLower(char j of segment i of pCategory) into char j of segment i of pCategory
      end repeat
   end repeat
   set the label of btn id 1039 of cd 1 to pCategory
end caseCategoryName

##TOOLTIP:
##Click this button after making sure boxes 2 (name), 4 (Unicode), and 6 (HTML) above are filled. This operation cannot be undone.



#####################
## Script of button "Close”, ID 1015 of CARD 1 of SUBSTACK Add Special Character of STACK STEP Transcription Module

on mouseUp
   send mouseUp to btn id 1013 of cd 1
   close stack "Add Special Character"
end mouseUp



#####################
## Script of field "Unicode”, ID 1018 of CARD 1 of SUBSTACK Add Special Character of STACK STEP Transcription Module

on keyDown theKey 
   local tSC
   put the selectedChunk into tSC
   if the selectedText of me <> empty then 
      put empty into the selectedChunk
   end if
   set the wholeMatches to true
   put toUpper(theKey) into theKey
   if theKey is not in "0123456789ABCDEF" then beep
   else
      if word 2 of tSC < word 4 of tSC is empty then 
         put theKey after char (word 4 of tSC) of me
      else
         put theKey before char (word 2 of tSC) of me
      end if
   end if
end keyDown

on returnInField
   if the text of me <> empty then put baseConvert(the text of me,16,10) into fld id 1031 of cd 1 else put empty into fld id 1031 of cd 1
   select the text of fld id 1012 of cd 1
end returnInField

on tabKey
   if the text of me <> empty then put baseConvert(the text of me,16,10) into fld id 1031 of cd 1 else put empty into fld id 1031 of cd 1
   select the text of fld id 1012 of cd 1
end tabKey

on enterInField
   if the text of me <> empty then put baseConvert(the text of me,16,10) into fld id 1031 of cd 1 else put empty into fld id 1031 of cd 1
   select the text of fld id 1012 of cd 1
end enterInField

##TOOLTIP:
##Type only the hexadecimal code.



#####################
## Script of field "HTML”, ID 1019 of CARD 1 of SUBSTACK Add Special Character of STACK STEP Transcription Module

on keyDown theKey 
   set the wholeMatches to true
   if /*(word 5 of fld id 1007 of cd 1 is "&#" and theKey is not in "0123456789ABCDEF") or */(theKey is in ".,:;&#!@$%^*(){}[]|\/?><") then beep
  else pass keyDown
end keyDown

on returnInField
   select the text of fld id 1009 of cd 1
end returnInField

on tabKey
   select the text of fld id 1009 of cd 1
end tabKey

on enterInField
   select the text of fld id 1009 of cd 1
end enterInField

on closeField
   if the text of me is empty then pass closeField
   put "4. NCR:   &#               ; &#               ;" into tFldContent1
   put "4. NCR:     &               ; &#               ;" into tFldContent2
   put "4. NCR:   &#               ; &                 ;" into tFldContent3
   put "4. NCR:     &               ; &                 ;" into tFldContent4
   if (the text of me is an integer) and (the text of fld id 1012 of cd 1 is an integer) then put tFldContent1 into fld id 1007 of cd 1
   else if (the text of me is an integer) and (the text of fld id 1012 of cd 1 is not an integer)  then put tFldContent2 into fld id 1007 of cd 1
   else if (the text of me is not an integer) and (the text of fld id 1012 of cd 1 is not an integer)  then put tFldContent4 into fld id 1007 of cd 1
   else if (the text of me is not an integer) and (the text of fld id 1012 of cd 1 is an integer) then put tFldContent3 into fld id 1007 of cd 1
   fillinChar
end closeField

on fillinChar
   if fld id 1012 of cd 1 is empty then exit fillinChar
   put word 3 of fld id 1007 of cd 1 & fld id 1012 of cd 1 & ";" into tH
   if fld id 1019 of cd 1 <> empty then put word 5 of fld id 1007 of cd 1 & fld id 1019 of cd 1 & ";" after tH
   set the HTMLText of fld id 1009 of cd 1 to tH
   send "closefield2" to fld id 1009 of cd 1
end fillinChar

##TOOLTIP:
##Type only the inner string or number.



#####################
## Script of button "Character Viewer”, ID 1025 of CARD 1 of SUBSTACK Add Special Character of STACK STEP Transcription Module

on mouseUp
   if the platform is "MacOS" then
      put "System Events" into tSE
      put "CharacterPalette" into tCP
      put "tell application "&quote&tSE&quote& cr &"if exists (process "&quote&tCP&quote&") then"&cr&"tell application "&quote&tCP&quote&" to quit"&cr&"else"&cr&"key code 49 using {control down, command down}"&cr&"end if" &cr&"end tell" into tScript
      do tScript as AppleScript
      set the cursor to arrow
   else if the platform is "Win32" then
      answer "Please access the Character Map, which is likely found under All Programs > Accessories > System Tools." 
   end if
end mouseUp



##TOOLTIP:
##Show Character Viewer (Mac)



#####################
## Script of button "Keyboard”, ID 1026 of CARD 1 of SUBSTACK Add Special Character of STACK STEP Transcription Module

on mouseUp
   if the platform is "MacOS" then
      put "System Events" into tSE
      put "KeyboardViewer" into tKV
      put "tell application "&quote&tSE&quote& cr &"if exists (process "&quote&tKV&quote&") then"&cr&"tell application "&quote&tKV&quote&" to quit"&cr&"else"&cr&"tell application "&quote&tKV&quote&" to activate"&cr&"end if"&cr&"end tell" into tScript
      do tScript as AppleScript
   else if the platform is "Win32" then
      answer "Please access the On-Screen Keyboard, which is likely found under All Programs > Accessories > System Tools (or perhaps >Ease of Access)." 
   end if
end mouseUp



#####################
## Script of field "UTF Decimal Number”, ID 1028 of CARD 1 of SUBSTACK Add Special Character of STACK STEP Transcription Module

on mouseUp
   if the text of me is empty then exit mouseUp
   put numToCodepoint(the text of me) into fld id 1009 of cd 1
end mouseUp

##TOOLTIP:
##UTF-16 Decimal Number



#####################
## Script of field "UTF Decimal Number”, ID 1032 of CARD 1 of SUBSTACK Add Special Character of STACK STEP Transcription Module

on mouseUp
   if the text of fld id 1028 of cd 1 is empty then exit mouseUp
   put numToCodepoint(the text of fld id 1028 of cd 1) into fld id 1009 of cd 1
end mouseUp

##TOOLTIP:
##UTF-16 Decimal Number



#####################
## Script of button "Categories”, ID 1039 of CARD 1 of SUBSTACK Add Special Character of STACK STEP Transcription Module

on mouseEnter
   lock screen
   local tLabel
   put the label of me into tLabel
   put the cSpecialCharacterCategories of btn id 1039 of cd 1 into me
   set the label of me to tLabel
end mouseEnter

on menuPick pItemName
   local tSubMenu,tSubMenu2
   replace space with empty in pItemNAme
   put "c" before pItemName
   put "SubMenu" after pItemName
   put empty into tSubMenu2
   if pItemName is among the lines of the customKeys of btn id 1106 of cd 1 of stack "STEP Transcription Module" then
      do "put the "&pItemName& " of  btn id 1106 of cd 1 of stack "&quote&"STEP Transcription Module"&quote&" into tSubMenu"
      delete line 1 of tSubMenu
      repeat with i = 1 to the number of lines of tSubMenu
         if line i of tSubMenu begins with tab&tab and not(line i-1 of tSubMenu begins with tab&tab) then put segment 1 to -1 of line i-1 of tSubMenu & cr after tSubMenu2
      end repeat
      if tSubMenu2 is empty then 
         put empty into btn id 1040 of cd 1
         exit menuPick
      else
         if char -1 of tSubMenu2 = cr then delete char -1 of tSubMenu2
         put tSubMenu2 into btn id 1040 of cd 1
      end if
   else 
      put empty into btn id 1040 of cd 1
   end if
end menuPick



#####################
## Script of button "Hide or Show Submenus”, ID 1042 of CARD 1 of SUBSTACK Add Special Character of STACK STEP Transcription Module

on mouseEnter
   put restoreMenuCommandName(the cVisibleSpecialCharactersSubMenus of btn id 1106 of stack "STEP Transcription Module") into tMenuListV
   put restoreMenuCommandName(the cHiddenSpecialCharactersSubMenus of btn id 1106 of stack "STEP Transcription Module") into tMenuListH
   put "-" into tHyphen
   repeat with k = 1 to the number of lines of tMenuListV
      put "Hide Submenu "& line k of tMenuListV into line k of tMenuListV
   end repeat
   repeat with k = 1 to the number of lines of tMenuListH
      put "Show Submenu "& line k of tMenuListH into line k of tMenuListH
   end repeat
   put tMenuListV into me
   if tMenuListH is not empty then put cr&"-"&cr&tMenuListH after me
end mouseEnter

function restoreMenuCommandName pMenuList
   repeat with i = 1 to the number of lines of pMenuList
      get line i of pMenuList
      delete char 1 of it
      delete char -7 to -1  of it
      repeat with j = the number of chars of it down to 2
         if isCapitalLetter2(char j of it) is true then put space before char j of it
      end repeat
      put it into line i of pMenuList
   end repeat
   return pMenuList
end restoreMenuCommandName

on menuPick pItemName
   put the cVisibleSpecialCharactersSubMenus of btn id 1106 of stack "STEP Transcription Module" into tMenuListV
   put the cHiddenSpecialCharactersSubMenus of btn id 1106 of stack "STEP Transcription Module" into tMenuListH
   put segment 3 to -1 of pItemName into tSubMenuName
   replace space with empty in tSubMenuName
   put "c" before tSubMenuName
   put "SubMenu" after tSubMenuName
   set the wholeMatches to true
   if segment 1 of pItemName is "Show" then
      put cr&tSubMenuName after tMenuListV
      delete line lineOffset(tSubMenuName,tMenuListH) of tMenuListH
   else if segment 1 of pItemName is "Hide" then
      put cr&tSubMenuName after tMenuListH
      delete line lineOffset(tSubMenuName,tMenuListV) of tMenuListV
   end if
   filter lines of tMenuListV without empty
   filter lines of tMenuListH without empty
   set the cVisibleSpecialCharactersSubMenus of btn id 1106 of stack "STEP Transcription Module" to tMenuListV
   set the cHiddenSpecialCharactersSubMenus of btn id 1106 of stack "STEP Transcription Module" to tMenuListH
end menuPick

##TOOLTIP:
##Choose which submenu to hide or display in the "Insert" menu.



#####################
## Script of button "Clear”, ID 1044 of CARD 1 of SUBSTACK Add Special Character of STACK STEP Transcription Module

on mouseUp
   set the label of btn id 1039 of cd 1 to empty
   set the label of btn id 1040 of cd 1 to empty
end mouseUp

##TOOLTIP:
##Clear category and subcategory.

CUSTOM KEYS of button "Clear" of card "card id 1002" of stack "Add Special Character" of stack "/Users/adetienn/Documents/STEP Externals/STEP-LI 7.1.4/STEP Transcription Module.livecode" ID 1044 of CARD 1 of SUBSTACK Add Special Character of STACK STEP Transcription Module



#####################
## Script of button "Button”, ID 1056 of CARD 1 of SUBSTACK Add Special Character of STACK STEP Transcription Module

on mouseWithin
   local tMiddle
   get item 2 of the mouseLoc
   put ((the top of me)+(the bottom of me))/2 into tMiddle
   if it > tMiddle then 
      set the toolTip of me to "Scroll through and display preceding Unicode characters."
      set the icon of me to 4101 
   else 
      set the toolTip of me to "Scroll through and display subsequent Unicode characters."
      set the icon of me to 4102
   end if
end mouseWithin

on mouseLeave
   set the icon of me to 4100
end mouseLeave

on mouseUp
   local tMiddle
   get item 2 of the clickLoc
   put ((the top of me)+(the bottom of me))/2 into tMiddle
   if it > tMiddle then decreaseValue else increaseValue
end mouseUp

on mouseStillDown
   local tMiddle
   get item 2 of the clickLoc
   put ((the top of me)+(the bottom of me))/2 into tMiddle
   if it > tMiddle then decreaseValue else increaseValue
end mouseStillDown


on decreaseValue
   set the icon of me to 4101
   local tDCN
   lock screen
   set the wholematches to true
   get the text of fld id 1011 of cd 1
   if it is empty then get "0020"
   if baseConvert(it, 16, 10) > 0 then
      put leadingZeroes(baseConvert(it,16,10),4) into tDCN
      subtract 1 from tDCN
      put leadingZeroes(baseConvert(tDCN,10,16),4) into fld id 1011 of cd 1
      send "tabKey" to fld id 1011 of cd 1
   end if
   set the icon of me to 4100
   end decreaseValue

on increaseValue
   set the icon of me to 4102
   local tDCN
   lock screen
   set the wholematches to true
   get the text of fld id 1011 of cd 1
   if it is empty then get "0020"
   if baseConvert(it, 16, 10) < 918000 then
      put leadingZeroes(baseConvert(it,16,10),4) into tDCN
      add 1 to tDCN
      put leadingZeroes(baseConvert(tDCN,10,16),4) into fld id 1011 of cd 1
      send "tabKey" to fld id 1011 of cd 1
   end if
   set the icon of me to 4100
end increaseValue

##TOOLTIP:
##Scroll through and display subsequent Unicode characters.



#####################
## Script of button "Button”, ID 4103 of CARD 1 of SUBSTACK Add Special Character of STACK STEP Transcription Module

on mouseWithin
   local tMiddle
   get item 2 of the mouseLoc
   put ((the top of me)+(the bottom of me))/2 into tMiddle
   if it > tMiddle then 
      set the toolTip of me to "Scroll through and display preceding Unicode characters."
      set the icon of me to 4101 
   else 
      set the toolTip of me to "Scroll through and display subsequent Unicode characters."
      set the icon of me to 4102
   end if
end mouseWithin

on mouseLeave
   set the icon of me to 4100
end mouseLeave

on mouseUp
   local tMiddle
   get item 2 of the clickLoc
   put ((the top of me)+(the bottom of me))/2 into tMiddle
   if it > tMiddle then decreaseValue else increaseValue
end mouseUp

on mouseStillDown
   local tMiddle
   get item 2 of the clickLoc
   put ((the top of me)+(the bottom of me))/2 into tMiddle
   if it > tMiddle then decreaseValue else increaseValue
end mouseStillDown

on decreaseValue
   set the icon of me to 4101
   local tDCN
   lock screen
   set the wholematches to true
   get the text of fld id 1011 of cd 1
   if it is empty then get "0020"
   if baseConvert(it, 16, 10) > 0 then
      put leadingZeroes(baseConvert(it,16,10),4) into tDCN
      subtract 1 from tDCN
      put leadingZeroes(baseConvert(tDCN,10,16),4) into fld id 1011 of cd 1
      send "tabKey" to fld id 1011 of cd 1
   end if
   set the icon of me to 4100
end decreaseValue

on increaseValue
   set the icon of me to 4102
   local tDCN
   lock screen
   set the wholematches to true
   get the text of fld id 1011 of cd 1
   if it is empty then get "0020"
   if baseConvert(it, 16, 10) < 918000 then
      put leadingZeroes(baseConvert(it,16,10),4) into tDCN
      add 1 to tDCN
      put leadingZeroes(baseConvert(tDCN,10,16),4) into fld id 1011 of cd 1
      send "tabKey" to fld id 1011 of cd 1
   end if
   set the icon of me to 4100
end increaseValue

##TOOLTIP:
##Scroll through and display preceding Unicode characters.



#####################
## Script of button "Unicode URLs”, ID 4104 of CARD 1 of SUBSTACK Add Special Character of STACK STEP Transcription Module

on menuPick pItemName
   local tBackUp,tL
   switch pItemName
      case "Unicode Table..."
         launch URL "http://unicode-table.com/en/"
         break
      case "Unicode® 9.0..."
         launch URL "http://www.unicode.org/versions/Unicode9.0.0/"
         break
      case "Unicode Character Name Index..."
         launch URL "http://unicode.org/charts/charindex.html"
         break
      case "Unicode 9.0 Character Code Charts..."
         launch URL "http://www.unicode.org/charts/"
         break
      case "Latest Unicode Character Names List..."
         launch URL "http://www.unicode.org/Public/UCD/latest/ucd/NamesList.txt"
         break
      case "Download Latest UnicodeData.txt..."
         answer "Confirm you want to download the latest list of UnicodeData (list of character names and numbers) from unicode.org into STEP Transcriptor..." with "Cancel" or "Download"
         set cursor to watch
         put the cUnicodeTableNames of this stack into tBackUp
         set the cUnicodeTableNames of this stack to URL "http://www.unicode.org/Public/UCD/latest/ucd/UnicodeData.txt"
         get the number of lines of the cUnicodeTableNames of this stack
         put line random(it) of the cUnicodeTableNames of this stack into tL
         if it > 30000 then answer "Update successful. The new list of Unicode data contains "&it&&"entries. For example:"&cr&tL 
         else 
            set the cUnicodeTableNames of this stack to tBackUp
            answer "Update not successful. Current list of Unicode data remains in use."
            put empty into tBackUp
         end if
         break
   end switch
end menuPick

##TOOLTIP:
##Choose a URL to go online and explore the Unicode universe.
##Or download the latest list of Unicode character data into STEP.



#####################
## Script of field "UTF Decimal Number”, ID 4105 of CARD 1 of SUBSTACK Add Special Character of STACK STEP Transcription Module

on mouseUp
   if the text of fld id 1028 of cd 1 is empty then exit mouseUp
   put numToCodepoint(the text of fld id 1028 of cd 1) into fld id 1009 of cd 1
end mouseUp

##TOOLTIP:
##Typing a single letter will search just for it (try "sm y" or "cap h").



#####################
## Script of field "Name to Search”, ID 4106 of CARD 1 of SUBSTACK Add Special Character of STACK STEP Transcription Module

on returnInField
  closeField2
end returnInField

on tabKey
   closeField2
end tabKey

on enterInField
  closeField2
end enterInField

on closeField3
   local tNames,tLN,tNamesList,tLine
   get the text of me
   set cursor to watch
   if it <> empty and length(it) > 1 then
      put the cUnicodeTableNames of this stack into tNames
      put lineOffsets(the text of me,tNames) into tLN
      if tLN is 0 then exit to top
      put stripDuplicatesNumericItems(tLN,comma) into tLN
      repeat for each line tItem in tLN
         put line tItem of tNames into tLine
         set the itemDel to ";"
         if it is in item 2 of tLine then
            put item 2 of tLine && "("&item 1 of tLine & ")" & cr after tNamesList
         else
            next repeat
         end if
      end repeat
      put tNamesList into btn id 4107 of cd 1
   end if      
end closeField3

function SegmentsAreInLine pSegs,pSgN,pNames
   local ut,tLgt,tNamesList,tStatus
   repeat for each line tLine in pNames
      put empty into tStatus
      repeat with i = 1 to pSgN
         put segment i of pSegs into ut
         put  length(ut) into tLgt
         set the itemDel to ";"
         if tLgt > 1 then
            if ut is not in item 2 of tLine then 
               put false into tStatus
               exit repeat
            else 
               put true into tStatus
            end if
         else
            if ut is not among the truewords of item 2 of tLine then 
               put false into tStatus
               exit repeat
            else 
               put true into tStatus
            end if
         end if
      end repeat
      if tStatus is true then put item 2 of tLine && "("&item 1 of tLine & ")"  && numToCodepoint(baseConvert(item 1 of tLine,16,10)) & cr after tNamesList
   end repeat
   return tNamesList
end SegmentsAreInLine

on closeField2
   local tNames,tLN,tNamesList,tLine,tLgt,tSgN
   get the text of me
   if it <> empty then
      set cursor to watch
      put the number of segments of it into tSgN
      put the cUnicodeTableNames of this stack into tNames
      put SegmentsAreInLine(it,tSgN,tNames) into tNamesList
end if
   put tNamesList into btn id 4107 of cd 1
   set the label of btn id 4107 of cd 1 to  "Character Names ("&the number of lines of btn id 4107 of cd 1&")"
end closeField2

##TOOLTIP:
##Typing a single letter will search just for it (try "sm y" or "cap h").



#####################
## Script of button "Unicode Character Names”, ID 4107 of CARD 1 of SUBSTACK Add Special Character of STACK STEP Transcription Module

on mouseEnter
   if the shiftKey is down then sort lines of btn id 4107 of cd 1 ascending international
end mouseEnter

   on menuPick pItemName
   local tNameList
   switch pItemName
      default
         put char 1 to offset(" (",pItemName)-1 of pItemName into fld id 1010 of cd 1
         put char offset(" (",pItemName)+2 to offset(") ",pItemName)-1 of pItemName into fld id 1011 of cd 1
         send "tabKey" to fld id 1011 of cd 1
         break
   end switch
end menuPick

##TOOLTIP:
##Choose the name of character to display it.
##Press shift key to alphabetize the list before clicking this button.



#####################
## Script of button "Insert Character”, ID 4108 of CARD 1 of SUBSTACK Add Special Character of STACK STEP Transcription Module

on mouseUp
   local tIDNum,tChunk,tSta,tTL
   if fld id 1009 of cd 1 of stack "Add Special Character" is empty then exit mouseUp
   put the cFldToReturnTo of cd 1 of stack "STEP Transcription Module" into tIDNum
   if (tIDNum is not empty) and ((the cFldToReturnTo of cd 1 of stack "STEP Transcription Module" is empty) or (tIDNum is not among the items of "1004,1041"))  then 
      answer "First make sure the pointer is in the Transcription field or the TEI Base Description field." as sheet
      exit mouseUp
   end if
   lock screen
   put the cSelectedChunk of fld id tIDNum of cd 1 of stack "STEP Transcription Module" into tChunk
   if tChunk is empty then exit mouseUp
   put word 2 of tChunk into tSta
   put char 1 of fld id 1009 of cd 1 of stack "Add Special Character" before char tSta of fld id tIDNum of cd 1 of stack "STEP Transcription Module"
   select after char tSta of fld id tIDNum of cd 1 of stack "STEP Transcription Module"
   set the cSelectedChunk of fld id tIDNum of cd 1 of stack "STEP Transcription Module" to the selectedChunk
end mouseUp

##TOOLTIP:
##Insert glyph into transcription text at the current insertion point.



#####################
## Script of button "Insert HTML Code”, ID 4109 of CARD 1 of SUBSTACK Add Special Character of STACK STEP Transcription Module

on mouseUp
   local tIDNum,tChunk,tSta,tTL,tHCode
   if fld id 1012 of cd 1 of stack "Add Special Character" is empty then exit mouseUp
   put the cFldToReturnTo of cd 1 of stack "STEP Transcription Module" into tIDNum
   if (tIDNum is not empty) and ((the cFldToReturnTo of cd 1 of stack "STEP Transcription Module" is empty) or (tIDNum is not among the items of "1004,1041"))  then 
      answer "First make sure the pointer is in the Transcription field or the TEI Base Description field." as sheet
      exit mouseUp
   end if
   lock screen
   put the cSelectedChunk of fld id tIDNum of cd 1 of stack "STEP Transcription Module" into tChunk
   if tChunk is empty then exit mouseUp
   if fld id 1019 of cd 1 <> empty then
      if fld id 1012 of cd 1 = fld id 1028 of cd 1 then 
         put "&#"&fld id 1012 of cd 1 &";" into tHCode
      else 
         put "&#"&fld id 1012 of cd 1 & ";&#"&fld id 1019 of cd 1&";"  into tHCode
      end if
   else
      put "&#"&fld id 1012 of cd 1&";"  into tHCode
   end if
   put word 2 of tChunk into tSta
   put length(tHCode) into tTL
   put tHCode before char tSta of fld id tIDNum of cd 1 of stack "STEP Transcription Module"
   select after char (tSta+tTL-1) of fld id tIDNum of cd 1 of stack "STEP Transcription Module"
   set the cSelectedChunk of fld id tIDNum of cd 1 of stack "STEP Transcription Module" to the selectedChunk
end mouseUp

##TOOLTIP:
##Insert HTML code into transcription text at the current insertion point.



#####################
## Script of button "Font Menu”, ID 4114 of CARD 1 of SUBSTACK Add Special Character of STACK STEP Transcription Module

on mouseEnter
   local theListOfAllFonts,tListOfFilterKeys
   set the tooltip of me to "Choose a font that best displays the selected glyph"&cr&"(e.g., the Assyrian font to display cuneiform glyphs)."
   put the fontnames into theListOfAllFonts
   sort theListOfAllFonts
   put "(*,-bold*,*italic*,*Ital*,*SemiExt*,condensed*,*black*,*light*,*Std*,*SmBd*,*Med*,*Cond*,*Narrow*,*-ExtB,*Ex tB,*SemiCond,*SemiExt" into tListOfFilterKeys
   repeat for each item tItem in tListOfFilterKeys
      filter theListOfAllFonts without tItem
   end repeat
   set the uIndexFonts of btn "Font Menu" of cd 1 to theListOfAllFonts
   set the text of btn "Font Menu" of cd 1 to theListOfAllFonts
   if the uSelectedFont of btn "Font Menu" is among the lines of theListOfAllFonts then set the label of btn "Font Menu" of cd 1 to the uSelectedFont of btn "Font Menu"
end mouseEnter

on menuPick pItemName
   switch pItemName
      case pItemName
         set the textFont of fld id 1009 of cd 1 to pItemName
         set the uSelectedFont of btn "Font Menu" of cd 1 to pItemName
         set the textFont of me to pItemName
         break
   end switch
end menuPick

##TOOLTIP:
##Choose a font that best displays the selected glyph
##(e.g., the Assyrian font to display cuneiform glyphs).



#####################
## Script of button "Text Height”, ID 4115 of CARD 1 of SUBSTACK Add Special Character of STACK STEP Transcription Module

on mouseWithin
   local tMiddle
   get item 2 of the mouseLoc
   put ((the top of me)+(the bottom of me))/2 into tMiddle
   if it > tMiddle then 
      set the toolTip of me to "Decrease glyph size and height."
      set the icon of me to 4101 
   else 
      set the toolTip of me to "Increase glyph size and height."
      set the icon of me to 4102
   end if
end mouseWithin

on mouseLeave
   set the icon of me to 4100
end mouseLeave

on mouseUp
   if the icon of me is 4101 then decreaseValue else increaseValue
end mouseUp

on mouseStillDown
   if the icon of me is 4101 then decreaseValue else increaseValue
end mouseStillDown

on decreaseValue
   set the icon of me to 4101
   get the textSize of fld id 1009 of cd 1
   if it > 9 then set the textSize of fld id 1009 of cd 1 to it-1
   set the icon of me to 4100
end decreaseValue

on increaseValue
   set the icon of me to 4102
   get the textSize of fld id 1009 of cd 1
   if it < 60 then set the textSize of fld id 1009 of cd 1 to it+1
   set the icon of me to 4100
end increaseValue

##TOOLTIP:
##Decrease glyph size and height.



#####################
## Script of button "Insert UTF Decimal Code”, ID 4121 of CARD 1 of SUBSTACK Add Special Character of STACK STEP Transcription Module

on mouseUp
   local tIDNum,tChunk,tSta,tTL,tHCode
   if fld id 1012 of cd 1 of stack "Add Special Character" is empty then exit mouseUp
   put the cFldToReturnTo of cd 1 of stack "STEP Transcription Module" into tIDNum
   if (tIDNum is not empty) and ((the cFldToReturnTo of cd 1 of stack "STEP Transcription Module" is empty) or (tIDNum is not among the items of "1004,1041"))  then 
      answer "First make sure the pointer is in the Transcription field or the TEI Base Description field." as sheet
      exit mouseUp
   end if
   lock screen
   put the cSelectedChunk of fld id tIDNum of cd 1 of stack "STEP Transcription Module" into tChunk
   if tChunk is empty then exit mouseUp
   put "&#"&fld id 1028 of cd 1&";"  into tHCode
   put word 2 of tChunk into tSta
   put length(tHCode) into tTL
   put tHCode before char tSta of fld id tIDNum of cd 1 of stack "STEP Transcription Module"
   select after char (tSta+tTL-1) of fld id tIDNum of cd 1 of stack "STEP Transcription Module"
   set the cSelectedChunk of fld id tIDNum of cd 1 of stack "STEP Transcription Module" to the selectedChunk
end mouseUp

##TOOLTIP:
##Insert UTF Decimal Code (ex.: &#8721;) into transcription
##text at the current insertion point (preferable option).

#####################
#####################
## F. SUBSTACK TEI Tag Customization of STACK STEP Transcription Module



#####################
## Script of SUBSTACK TEI Tag Customization of STACK STEP Transcription Module


on preOpenStack
   set the loc of this stack to the screenLoc
   set the width of this stack to the minWidth of this stack
   set the height of this stack to the minHeight of this stack
end preOpenStack

on openStack
   checkLauncherWindow (the short name of this stack)
   pass openStack
end openStack



#####################
## Script of CARD 1 of SUBSTACK TEI Tag Customization of STACK STEP Transcription Module

on openCard
   select line 1 of btn id 1005 of cd 1
   send "menuPick" && "Transcription" to btn id 1005 of cd 1
end openCard

on float pmsg--behaves like a tooltip
   local pExpanded
   put desabbreviateSomeTags(pmsg) into pExpanded
   if pExpanded is not empty then 
      if pExpanded is not in fld "Floater" of cd 1 then set the vis of fld "Floater" of cd 1 to false
      put pExpanded into fld "Floater" of cd 1
      set the height of fld "Floater" of cd 1 to (the formattedHeight of fld "Floater" of cd 1)/*-6*/
      set the dontWrap of fld "Floater" to true
      set the textAlign of fld "Floater" to "center"
      set the width of fld "Floater" of cd 1 to (the formattedWidth of fld "Floater" of cd 1)-4
      set the topLeft of  fld "Floater" of cd 1 to ((item 1 of the mouseLoc)+16,(item 2 of the mouseLoc))
      set the vis of fld "Floater" of cd 1 to true
   else
      set the vis of fld "Floater" of cd 1 to false
   end if
end float

function desabbreviateSomeTags pTag
   local tTagAbbList, ots, y
   put the cTEITagsAndAbbrev of this stack into tTagAbbList
   put lineOffsets(pTag&"TEI",tTagAbbList) into ots
   if ots <> 0 then
      repeat with x = 1 to the number of items of ots
         if line (item x of ots) of tTagAbbList begins with pTag&"TEI" and "|" is in line (item x of ots) of tTagAbbList then 
            put item x of ots into y
            set the itemDel to "|"
            return item 2 of line y of tTagAbbList
         else 
            set the itemDel to comma
            next repeat
         end if
      end repeat
   end if
   return empty
end desabbreviateSomeTags

function identifyTagOfDescriptor pDescriptor
   local tTagAbbList, ots, tTagAbb
   put the cTEITagsAndAbbrev of this stack into tTagAbbList
   put lineOffsets("|"&pDescriptor,tTagAbbList) into ots
   if ots <> 0 then
      repeat with x = 1 to the number of items of ots
         put line (item x of ots) of tTagAbbList  into tTagAbb
         set the itemDel to "|"
         if item 2 of tTagAbb is pDescriptor then return char 1 to -4 of item 1 of tTagAbb
         else next repeat
      end repeat
   end if
   return empty         
end identifyTagOfDescriptor

on lookUpTag pTag
   put toLower(char 1 of pTag) into char 1 of pTag
   launch URL "http://www.tei-c.org/release/doc/tei-p5-doc/en/html/ref-"&pTag&".html"
end lookUpTag




#####################
## Script of button "Tab Menu”, ID 1005 of CARD 1 of SUBSTACK TEI Tag Customization of STACK STEP Transcription Module

on menuPick pItemName
   local tStackName,tCustoms
   lock screen
   switch pItemName
      case "Transcription"
         put the cTranscriptionTags of btn id 1005 of cd 1 into fld id 1007 of cd 1
         break 
      case "Structure"
         put the cStructureTags of btn id 1005 of cd 1 into fld id 1007 of cd 1
         break 
      case "Description"
         put the cDescriptionTags of btn id 1005 of cd 1 into fld id 1007 of cd 1
         break 
      case "All Tags"
         put "STEP Transcription Module" into tStackName
         put the customKeys of stack tStackName into tCustoms
         filter tCustoms with "*TEI"
         replace "TEI" with empty in tCustoms
         sort lines of tCustoms ascending international
         filter tCustoms without "*_*"
         put tCustoms into fld id 1007 of cd 1
   end switch
   sort fld id 1007 of cd 1 ascending international
   put empty into fld id 1010 of cd 1
   put empty into fld id 1013 of cd 1
end menuPick

on mouseWithin
   get the mouseH
   if it > 34 and it < 139 then showtooltip(35)
   else if it > 140 and it < 219 then showtooltip(141)
   else if it > 221 and it < 316 then showtooltip(222)
   else if it > 318 and it < 389 then showtooltip(319)
end mouseWithin

on showtooltip pRect
   local tltp
   switch pRect
      case "35"
         put "Displays transcription tags (especially alterations tags) in the left column below." into tltp
         break
      case "141"
         put "Displays textual structure tags in the left column below." into tltp
         break
      case "222"
         put "Displays text-descriptive tags in the left column below." into tltp
         break
      case "319"
         put "Displays all TEI tags currently available in STEP Transcriptor." into tltp
         break
   end switch
   set the toolTip of btn id 1005 of cd 1 to tltp
end showtooltip

##TOOLTIP:
##Displays textual structure tags in the left column below.



#####################
## Script of field "Tag Names Field”, ID 1007 of CARD 1 of SUBSTACK TEI Tag Customization of STACK STEP Transcription Module

on mouseDown theButton
   if theButton is 3 then
      if (the clickLoc is within the rect of fld id 1007 of cd 1) and (fld id 1007 of cd 1 is not empty) then 
         popUpDeleter
      else
         pass mouseDown
      end if
   else
      pass mouseDown
   end if
end mouseDown
   
on mouseUp theButton
   local tTagName,tStackName,tListAtt,tAttributes
   if theButton is 1 then
      put the value of the clickLine into tTagName
      put tTagName into fld id 1033 of cd 1
      put tTagName into fld id 1025 of cd 1
      put tTagName into fld id 1056 of cd 1
      set the cCurrentTag of btn id 1005 of cd 1 to tTagName
      put desabbreviateSomeTags(tTagName) into fld id 1059 of cd 1
      replace "-" with "_" in tTagName
      put "STEP Transcription Module" into tStackName
      do "put the"&&tTagName&"TEI of stack tStackName into tAttributes"
      set the itemDel to "|"
      put empty into tListAtt
      repeat for each line tLine in tAttributes
         if item 1 of tLine is not among the lines of tListAtt then put item 1 of tLine & cr after tListAtt
      end repeat
      sort lines of tListAtt ascending international
      put tListAtt into fld id 1010 of cd 1
      put tListAtt into fld id 1027 of cd 1
      put empty into fld id 1013 of cd 1
      put empty into fld id 1034 of cd 1
      put empty into fld id 1039 of cd 1
   else pass mouseUp
end mouseUp

on mouseLeave
   set the vis of fld "Floater" of cd 1 to false
end mouseLeave

on popUpDeleter
   local tHils,tTagBase
   put the hilitedLines of fld id 1007 of cd 1 into tHils
   if tHils is empty or tHils is 0 then
      answer "Select a line in the Tag Names field before right-clicking it." as sheet
      exit to top
   end if
   put line (the menuHistory of btn id 1005 of cd 1) of btn id 1005 of cd 1 into tTagBase
   if tTagBase is among the items of "Transcription,Structure,Description,All Tags" then 
      popup btn "TagDeleter" at the clickLoc
   else
      exit to top
   end if
end popUpDeleter

on mouseMove
   local tM,pTag
      if the mouseLoc is within the rect of fld id 1007 of cd 1 then
      put the mouseLine into tM
      lock messages
      if tM is not empty then
         if "field" is in the mouseLine then 
            if the id of field (word-1 of the mouseLine) of cd 1 is 1007 then 
               put line (word 2 of the mouseLine) of fld id 1007 of cd 1 into pTag
               float pTag
            else
               set the vis of fld "Floater" of cd 1 to false
               pass mouseMove
            end if
         else
            set the vis of fld "Floater" of cd 1 to false
            pass mouseMove
         end if
      end if
   else
      lock messages
      set the vis of fld "Floater" of cd 1 to false
      pass mouseMove
   end if
end mouseMove


##TOOLTIP:
##Click any tag to display its related attributes in the next column.
##Add new TEI tags using the field and button at near bottom right.
##Right-click a selected line to delete it.



#####################
## Script of field "Attributes Field”, ID 1010 of CARD 1 of SUBSTACK TEI Tag Customization of STACK STEP Transcription Module

on mouseUp
   local tAttName,tTagName,tStackName,tValues,tAttNameS,ota,ot,oto,tAttributes
   put the value of the clickLine into tAttName
   put tAttName into fld id 1039 of cd 1
   put empty into fld id 1013 of cd 1
   put empty into fld id 1034 of cd 1
   put the cCurrentTag of btn id 1005 of cd 1 into tTagName
   set the cCurrentAttrib of btn id 1005 of cd 1 to tAttName
   put "STEP Transcription Module" into tStackName
   do "put the"&&tTagName&"TEI of stack tStackName into tAttributes"
   put empty into tValues
   if ":" is not in tAttName then
      put tAttName & "|" into tAttNameS
      put lineOffsets(tAttNameS,tAttributes) into ot
      if ot <> 0 then
         put empty into ota
         repeat with oto = 1 to the number of items of ot
            if not (line (item oto of ot) of tAttributes begins with tAttNameS) then next repeat
            put item oto of ot into ota
            exit repeat
         end repeat
         if ota is not empty then
            set the itemDel to "|"
            put item 2 of line ota of tAttributes into tValues
         end if
      end if
   else
      replace ":" with "_" in tAttName
      put "STEP Transcription Module" into tStackName
      do "put the"&&tAttName&"TEI of stack tStackName into tValues"
   end if
   replace comma with cr in tValues
   put tValues into fld id 1013 of cd 1
   put tValues into fld id 1034 of cd 1
end mouseUp

on mouseLeave
   set the vis of fld "Floater" of cd 1 to false
end mouseLeave

on mouseMove
   local tAttr,tM,pAttr
   if the mouseLoc is within the rect of fld id 1010 of cd 1 then
      put the mouseLine into tM
      lock messages
      if tM is not empty then
         if "field" is in the mouseLine then 
            if the id of field (word-1 of the mouseLine) of cd 1 is 1010 then 
               put line (word 2 of the mouseLine) of fld id 1010 of cd 1 into tAttr
               put line 1 of getAttributeTEIExplanation(tAttr) into pAttr
               floating pAttr
            else
               set the vis of fld "Floater" of cd 1 to false
               pass mouseMove
            end if
         else
            set the vis of fld "Floater" of cd 1 to false
            pass mouseMove
         end if
      end if
   else
      lock messages
      set the vis of fld "Floater" of cd 1 to false
      pass mouseMove
   end if
end mouseMove

on floating @pAttr--behaves like a tooltip
   local tLength,tW
   lock screen
   set the height of fld "Floater" of cd 1 to 19
   if pAttr is not empty then 
      if pAttr is not the text of fld "Floater" of cd 1 then
         set the vis of fld "Floater" of cd 1 to false
         put lineBreaker(pAttr) into fld "Floater" of cd 1
         set the height of fld "Floater" of cd 1 to the formattedHeight of fld "Floater" of cd 1
         set the textAlign of fld "Floater" to "left"
         set the topLeft of fld "Floater" of cd 1 to ((item 1 of the mouseLoc)+16,(item 2 of the mouseLoc))
         set the vis of fld "Floater" of cd 1 to true
      else
         set the topLeft of fld "Floater" of cd 1 to ((item 1 of the mouseLoc)+16,(item 2 of the mouseLoc))
      end if
   else
      set the vis of fld "Floater" of cd 1 to false
   end if
end floating

function lineBreaker pText
   local tW,tM,tRealWidth,tText2,tText3,tTempMeasure
   put 270 into tW
   set the width of fld "Floater" of cd 1 to tW
   put the margins of fld "Floater" into tM
   set the dontWrap of fld "Floater" to false
   put pText into fld "Floater" of cd 1
   put pText into tText2
   repeat until tText2 is empty
      repeat with i = the number of segments of (tText2) down to 1
         put measureText(segment 1 to i of fld "Floater" of cd 1,fld "Floater" of cd 1) into tTempMeasure
         if tTempMeasure > (tW-(tM*2)) then next repeat
         else
            put segment 1 to i of tText2 & cr after tText3
            delete segment 1 to i of tText2
            put tText2 into fld "Floater" of cd 1
            exit repeat
         end if
      end repeat
   end repeat
   filter tText3 without empty
   return tText3
end lineBreaker


##TOOLTIP:
##Click any attribute to display its
##related values in the next column.
##Follow instructions 1 & 2 to edit attributes. 



#####################
## Script of button "Enter New TEI Tag”, ID 1021 of CARD 1 of SUBSTACK TEI Tag Customization of STACK STEP Transcription Module

on mouseUp pCondition
   put fld id 1025 of cd 1 into tNewTag
   if tNewTag is empty then exit mouseUp
   set the wholeMatches to true
   if lineOffset(tNewTag,fld id 1007 of cd 1) <> 0 then
      if  pCondition <> "Abbr" then
         answer "Tag “"&tNewTag&"” already exists in the list of tags." as sheet
         put empty into fld id 1025 of cd 1
         exit mouseUp
      else
         put the cTEITagsAndAbbrev of stack "TEI Tag Customization" into tTagAbbList
         put lineOffsets(tNewTag&"TEI",tTagAbbList) into ots
         if ots = 0 then 
            put cr&tNewTag&"TEI" after tTagAbbList
            set the cTEITagsAndAbbrev of stack "TEI Tag Customization" to tTagAbbList
         else
            put 0 into tSuccess
            repeat with x = 1 to the number of items of ots
               if line (item x of ots) of tTagAbbList begins with tNewTag&"TEI" then
                  put 1 into tSuccess
                  exit repeat
               end if
            end repeat
            if tSuccess is 0 then
               put cr&tNewTag&"TEI" after tTagAbbList
               set the cTEITagsAndAbbrev of stack "TEI Tag Customization" to tTagAbbList
            end if
         end if
         exit mouseUp
      end if
   end if
   put cr & tNewTag after fld id 1007 of cd 1
   put fld id 1007 of cd 1 into tTagList
   sort lines of tTagList ascending international
   set the wholeMatches to true
   put lineOffset(tNewTag,tTagList) into tLN
   put tTagList into fld id 1007 of cd 1
   if tLN <> 0 then set the hilitedLine of fld id 1007 to tLN
   put line (the menuHistory of btn id 1005 of cd 1) of btn id 1005 of cd 1 into tTagBase
   switch tTagBase
      case "Transcription"
         set the cTranscriptionTags of btn id 1005 of cd 1 to fld id 1007 of cd 1
         break 
      case "Structure"
         set the cStructureTags of btn id 1005 of cd 1 to fld id 1007 of cd 1
         break 
      case "Description"
         set the cDescriptionTags of btn id 1005 of cd 1 to fld id 1007 of cd 1
         break 
      case "All Tags"
         set the cAllTags of btn id 1005 of cd 1 to fld id 1007 of cd 1
         break 
   end switch
   replace "-" with "_" in tNewTag
   put "STEP Transcription Module" into tStackName
   put the customKeys of stack tStackName into tCustoms
   set the wholeMatches to true
   if lineOffset(tNewTag&"TEI",tCustoms) = 0 then 
      do "put cr&"&&tNewTag&"TEI after tCustoms"
      put the cTEITagsAndAbbrev of stack "TEI Tag Customization" into tTagAbbList
      put lineOffsets(tNewTag&"TEI",tTagAbbList) into ots
      if ots = 0 then 
         put cr&tNewTag&"TEI" after tTagAbbList
         set the cTEITagsAndAbbrev of stack "TEI Tag Customization" to tTagAbbList
      else
         put 0 into tSuccess
         repeat with x = 1 to the number of items of ots
            if line (item x of ots) of tTagAbbList begins with tNewTag&"TEI" then
               put 1 into tSuccess
               exit repeat
            end if
         end repeat
         if tSuccess is 0 then
            put cr&tNewTag&"TEI" after tTagAbbList
            set the cTEITagsAndAbbrev of stack "TEI Tag Customization" to tTagAbbList
         end if
      end if
      set the customKeys of stack tStackName to tCustoms
   end if
end mouseUp

##TOOLTIP:
##Click to add the new tag to the leftmost column. 
##Then click that new tag to proceed with adding 
##attributes and values.



#####################
## Script of button "Enter Revised Attributes”, ID 1022 of CARD 1 of SUBSTACK TEI Tag Customization of STACK STEP Transcription Module

on mouseUp
   put fld id 1027 of cd 1 into tRevAttributes
   filter tRevAttributes without empty
   put tRevAttributes into fld id 1010 of cd 1
   put fld id 1033 of cd 1 into tTagName
   put "STEP Transcription Module" into tStackName
   do "put the"&&tTagName&"TEI of stack tStackName into tAttributes"
   repeat with d = 1 to the number of lines of tRevAttributes
      put (line d of tRevAttributes) &"|" into tRevAtt
      put lineOffset(tRevAtt,tAttributes) into ot
      if ot <> 0 and line ot of tAttributes begins with tRevAtt then 
         put d&space before line ot of tAttributes
         next repeat
      else 
         put tRevAtt into line (the number of lines of tAttributes)+1 of tAttributes
         put d& space before line-1 of tAttributes
      end if
   end repeat
   sort lines of tAttributes numeric by word 1 of each
   repeat with d = 1 to the number of lines of tAttributes
      if word 1 of line d of tAttributes is an integer then delete word 1 of line d of tAttributes
   end repeat
   set the itemDel to "|"
   repeat with d = the number of lines of tAttributes down to 1
      if item  1 of line d of tAttributes is not among the lines of tRevAttributes then delete line d of tAttributes
   end repeat
   do "set the"&&tTagName&"TEI of stack tStackName to tAttributes"
end mouseUp
##TOOLTIP:
##Click to replace the content of the Attributes
##field at left with the one above.



#####################
## Script of field "Field”, ID 1027 of CARD 1 of SUBSTACK TEI Tag Customization of STACK STEP Transcription Module


on mouseLeave
   set the vis of fld "Floater" of cd 1 to false
end mouseLeave

on mouseMove
   local tAttr,tM,pAttr
   if the mouseLoc is within the rect of fld id 1027 of cd 1 then
      put the mouseLine into tM
      lock messages
      if tM is not empty then
         if "field" is in the mouseLine then 
            if the id of field (word-1 of the mouseLine) of cd 1 is 1027 then 
               put line (word 2 of the mouseLine) of fld id 1027 of cd 1 into tAttr
               put line 1 of getAttributeTEIExplanation(tAttr) into pAttr
               floating pAttr
            else
               set the vis of fld "Floater" of cd 1 to false
               pass mouseMove
            end if
         else
            set the vis of fld "Floater" of cd 1 to false
            pass mouseMove
         end if
      end if
   else
      lock messages
      set the vis of fld "Floater" of cd 1 to false
      pass mouseMove
   end if
end mouseMove

on floating @pAttr--behaves like a tooltip
   local tLength,tW
   lock screen
   set the height of fld "Floater" of cd 1 to 19
   if pAttr is not empty then 
      if pAttr is not the text of fld "Floater" of cd 1 then
         set the vis of fld "Floater" of cd 1 to false
         put lineBreaker(pAttr) into fld "Floater" of cd 1
         set the height of fld "Floater" of cd 1 to the formattedHeight of fld "Floater" of cd 1
         set the textAlign of fld "Floater" to "left"
         set the topLeft of fld "Floater" of cd 1 to ((item 1 of the mouseLoc)+16,(item 2 of the mouseLoc))
         set the vis of fld "Floater" of cd 1 to true
      else
         set the topLeft of fld "Floater" of cd 1 to ((item 1 of the mouseLoc)+16,(item 2 of the mouseLoc))
      end if
   else
      set the vis of fld "Floater" of cd 1 to false
   end if
end floating

function lineBreaker pText
   local tW,tM,tRealWidth,tText2,tText3,tTempMeasure
   put 270 into tW
   set the width of fld "Floater" of cd 1 to tW
   put the margins of fld "Floater" into tM
   set the dontWrap of fld "Floater" to false
   put pText into fld "Floater" of cd 1
   put pText into tText2
   repeat until tText2 is empty
      repeat with i = the number of segments of (tText2) down to 1
         put measureText(segment 1 to i of fld "Floater" of cd 1,fld "Floater" of cd 1) into tTempMeasure
         if tTempMeasure > (tW-(tM*2)) then next repeat
         else
            put segment 1 to i of tText2 & cr after tText3
            delete segment 1 to i of tText2
            put tText2 into fld "Floater" of cd 1
            exit repeat
         end if
      end repeat
   end repeat
   filter tText3 without empty
   return tText3
end lineBreaker



#####################
## Script of button "Enter Revised Values”, ID 1037 of CARD 1 of SUBSTACK TEI Tag Customization of STACK STEP Transcription Module

on mouseUp
   put fld id 1027 of cd 1 into tRevAttributes
   put tRevAttributes into fld id 1010 of cd 1
   put fld id 1033 of cd 1 into tTagName
   put fld id 1039 of cd 1 into tAttName
   put fld id 1034 of cd 1 into tValues
   put tValues into fld id 1013 of cd 1
   if tValues is empty then exit mouseUp
   replace cr with comma in tValues
   replace "-" with "_" in tTagName
   replace ":"&space with "^^" in tValues
   replace space with "-" in tValues
   replace "^^" with ":"&space in tValues
   put "STEP Transcription Module" into tStackName
   do "put the"&&tTagName&"TEI of stack tStackName into tAttributes"
   put tAttName&"|" into tAttNameS
   put lineOffsets(tAttNameS,tAttributes) into ot
   if ot <> 0 then
      put empty into ota
      repeat with oto = 1 to the number of items of ot
         if not (line (item oto of ot) of tAttributes begins with tAttNameS) then next repeat
         put item oto of ot into ota
         exit repeat
      end repeat
      if ota is not empty then
         set the itemDel to "|"
         put item 2 of line ota of tAttributes into tVals
         if tVals <> tValues or tVals is empty then put tValues into item 2 of line ota of tAttributes
         do "set the"&&tTagName&"TEI of stack tStackName to tAttributes"
      end if
   else
      put tAttName&"|"&tValues into line (the number of lines of tAttributes)+1 of tAttributes
      do "set the"&&tTagName&"TEI of stack tStackName to tAttributes"
   end if
end mouseUp

##TOOLTIP:
##Click to replace the content of the Values
##field at left with the one above.

CUSTOM KEYS of button "Enter Revised Values" of card id 1002 of stack "TEI Tag Customization" of stack "/Users/adetienn/Documents/STEP Externals/STEP-LI 7.1.4/STEP Transcription Module.livecode" ID 1037 of CARD 1 of SUBSTACK TEI Tag Customization of STACK STEP Transcription Module

cRect

646,294,824,317




#####################
## Script of field "Value Name Field”, ID 1039 of CARD 1 of SUBSTACK TEI Tag Customization of STACK STEP Transcription Module


on mouseLeave
   set the vis of fld "Floater" of cd 1 to false
end mouseLeave

on mouseMove
   local tAttr,tM,pAttr
   if the mouseLoc is within the rect of fld id 1039 of cd 1 then
      put the mouseLine into tM
      lock messages
      if tM is not empty then
         if "field" is in the mouseLine then 
            if the id of field (word-1 of the mouseLine) of cd 1 is 1039 then 
               put line (word 2 of the mouseLine) of fld id 1039 of cd 1 into tAttr
               put line 1 of getAttributeTEIExplanation(tAttr) into pAttr
               floating pAttr
            else
               set the vis of fld "Floater" of cd 1 to false
               pass mouseMove
            end if
         else
            set the vis of fld "Floater" of cd 1 to false
            pass mouseMove
         end if
      end if
   else
      lock messages
      set the vis of fld "Floater" of cd 1 to false
      pass mouseMove
   end if
end mouseMove

on floating @pAttr--behaves like a tooltip
   local tLength,tW
   lock screen
   set the height of fld "Floater" of cd 1 to 19
   if pAttr is not empty then 
      if pAttr is not the text of fld "Floater" of cd 1 then
         set the vis of fld "Floater" of cd 1 to false
         put lineBreaker(pAttr) into fld "Floater" of cd 1
         set the height of fld "Floater" of cd 1 to the formattedHeight of fld "Floater" of cd 1
         set the textAlign of fld "Floater" to "left"
         set the topRight of fld "Floater" of cd 1 to ((item 1 of the mouseLoc)+16,(item 2 of the mouseLoc))
         set the vis of fld "Floater" of cd 1 to true
      else
         set the topRight of fld "Floater" of cd 1 to ((item 1 of the mouseLoc)+16,(item 2 of the mouseLoc))
      end if
   else
      set the vis of fld "Floater" of cd 1 to false
   end if
end floating

function lineBreaker pText
   local tW,tM,tRealWidth,tText2,tText3,tTempMeasure
   put 270 into tW
   set the width of fld "Floater" of cd 1 to tW
   put the margins of fld "Floater" into tM
   set the dontWrap of fld "Floater" to false
   put pText into fld "Floater" of cd 1
   put pText into tText2
   repeat until tText2 is empty
      repeat with i = the number of segments of (tText2) down to 1
         put measureText(segment 1 to i of fld "Floater" of cd 1,fld "Floater" of cd 1) into tTempMeasure
         if tTempMeasure > (tW-(tM*2)) then next repeat
         else
            put segment 1 to i of tText2 & cr after tText3
            delete segment 1 to i of tText2
            put tText2 into fld "Floater" of cd 1
            exit repeat
         end if
      end repeat
   end repeat
   filter tText3 without empty
   return tText3
end lineBreaker



#####################
## Script of button "Clear Fields”, ID 1042 of CARD 1 of SUBSTACK TEI Tag Customization of STACK STEP Transcription Module

on mouseUp
   put "1010,1013,1025,1027,1033,1034,1039,1056,1059" into tFldIDs
   repeat for each item tID in tFldIDs
      put empty into fld id tID of cd 1
   end repeat
end mouseUp

##TOOLTIP:
##Clear all fields. This does not delete the tags from within STEP Transcriptor.



#####################
## Script of button "Table of TEI Elements”, ID 1050 of CARD 1 of SUBSTACK TEI Tag Customization of STACK STEP Transcription Module

on mouseUp
   launch URL "http://www.tei-c.org/Vault/P5/1.0.1/doc/tei-p5-doc/html/REF-ELEMENTS.html"
end mouseUp

##TOOLTIP:
##Go to "http://www.tei-c.org/Vault/P5/1.0.1/doc/tei-p5-doc/html/REF-ELEMENTS.html"



#####################
## Script of button "TagDeleter”, ID 1052 of CARD 1 of SUBSTACK TEI Tag Customization of STACK STEP Transcription Module

on menuPick pItemName
   local tHils,tTagBase,tStackName,tTagName,ut,tCustoms
   switch pItemName
      case "Remove selected tag from list"
         put the hilitedLines of fld id 1007 of cd 1 into tHils
         put line (item 1 of tHils) of fld id 1007 of cd 1 into tTagName
         put line (the menuHistory of btn id 1005 of cd 1) of btn id 1005 of cd 1 into tTagBase
         if tTagBase <> "All Tags" then delete line (item 1 of tHils) of fld id 1007 of cd 1
         switch tTagBase
            case "Transcription"
               set the cTranscriptionTags of btn id 1005 of cd 1 to fld id 1007 of cd 1
               break 
            case "Structure"
               set the cStructureTags of btn id 1005 of cd 1 to fld id 1007 of cd 1
               break 
            case "Description"
               set the cDescriptionTags of btn id 1005 of cd 1 to fld id 1007 of cd 1
               break 
            case "All Tags"
               answer "Confirm you want to delete the tag “"&tTagName& "” with its associated attributes from STEP Transcriptor’s default list."
               if it is "Cancel" then exit to top
               put "STEP Transcription Module" into tStackName
               put the customKeys of stack tStackName into tCustoms
               set the wholematches to true
               put lineOffset(tTagName&"TEI",tCustoms) into ut
               if ut <> 0 then
                  delete line ut of tCustoms
                  set the customKeys of stack tStackName to tCustoms
                  filter tCustoms with "*TEI"
                  replace "TEI" with empty in tCustoms
                  sort lines of tCustoms ascending international
                  filter tCustoms without "*_*"
                  put tCustoms into fld id 1007 of cd 1
               else
                  exit to top
               end if
               break
         end switch
         break
   end switch
end menuPick



#####################
## Script of button "PopUp Floater”, ID 1053 of CARD 1 of SUBSTACK TEI Tag Customization of STACK STEP Transcription Module

on menuPick pItemName
   switch pItemName
      case pItemName
         lock messages
         close stack "Floater"
         send mouseUp to fld id 1007 of cd 1 of stack "TEI Tag Customization"
   end switch
end menuPick



#####################
## Script of field "Look up field”, ID 1056 of CARD 1 of SUBSTACK TEI Tag Customization of STACK STEP Transcription Module

on returnInField
   if fld id 1056 of cd 1 <> empty then send mouseUp to btn id 1057 of cd 1
end returnInField

on enterInField
   if fld id 1056 of cd 1 <> empty then send mouseUp to btn id 1057 of cd 1
end enterInField

##TOOLTIP:
##Type a tag above and click
##this button to look it up online.



#####################
## Script of button "Look up Tag”, ID 1057 of CARD 1 of SUBSTACK TEI Tag Customization of STACK STEP Transcription Module

on mouseUp
   put fld id 1056 of cd 1 into pTag
   if pTag is empty then exit mouseUp
   replace cr with empty in pTag
   put word 1 of pTag into pTag
  lookUpTag pTag
end mouseUp

##TOOLTIP:
##Type a tag above and click this button to look it up online.
##Errors are likely due to mismatched case-sensitivity.



#####################
## Script of field "Lookup tag instruction”, ID 1059 of CARD 1 of SUBSTACK TEI Tag Customization of STACK STEP Transcription Module

on mouseEnter
   put empty into pExpanded
   if fld id 1025 is empty then 
      put empty into fld id 1059 of cd 1
      exit mouseEnter
   end if
   put desabbreviateSomeTags(fld id 1025 of cd 1) into pExpanded
   if fld id 1059 of cd 1 is not empty and identifyTagOfDescriptor(pExpanded) is not in fld id 1025 of cd 1 and pExpanded is not empty then put pExpanded into fld id 1059 of cd 1
   else if fld id 1059 of cd 1 is empty then put pExpanded into fld id 1059 of cd 1
end mouseEnter

##TOOLTIP:
##Type a tag in the “new tag” box at left, then a descriptor in this box,
##and click the “Record Tag Desc.” button. To edit a descriptor, enter
##its tag at left, then edit its descriptor in this box and click below.



#####################
## Script of button "Record”, ID 1060 of CARD 1 of SUBSTACK TEI Tag Customization of STACK STEP Transcription Module

on mouseUp
   if fld id 1025 of cd 1 is empty or fld id 1059 of cd 1 is empty then exit mouseUp
   if fld id 1025 of cd 1 is empty and fld id 1059 is not empty then
      answer "Enter the name of the tag in the ‘new tag’ box at left before clicking “Record Tag Desc.”" as sheet
      exit mouseUp
   end if
   put the cTEITagsAndAbbrev of this stack into tTagAbbList
   put fld id 1025 of cd 1 &"TEI|"& fld id 1059 of cd 1 into tTagAbb
   if tTagAbb is not among the lines of tTagAbbList then 
      put fld id 1025 of cd 1 &"TEI"into tTag
      put lineOffsets(tTag,tTagAbbList) into ots
      if ots = 0 then
         send "mouseUp abbr" to btn id 1021 of cd 1
         put the cTEITagsAndAbbrev of this stack into tTagAbbList
         put lineOffsets(tTag,tTagAbbList) into ots
      end if
      if ots <> 0 then
         repeat with x = 1 to the number of items of ots
            if line (item x of ots) of tTagAbbList begins with tTag then 
               put 0 into tsuccess
               if "|" is in line (item x of ots) of tTagAbbList then
                  put item x of ots into y
                  set the itemDel to "|"
                  if item 2 of line y of tTagAbbList is not empty then
                     answer "Descriptor “"&item 2 of line y of tTagAbbList&"” is already assigned to tag <"&char 1 to -4 of tTag&">. Keep it or replace it?" with "Cancel" or "Keep" or "Replace" as sheet
                     if it is "Cancel" or it is "Keep" then exit to top
                     put fld id 1059 of cd 1 into item 2 of line y of tTagAbbList
                     put 1 into tsuccess
                  else
                     put fld id 1059 of cd 1 after line y of tTagAbbList
                     put 1 into tsuccess
                  end if
               else 
                  put item x of ots into y
                  put "|"&fld id 1059 of cd 1 after line y of tTagAbbList
                  put 1 into tsuccess
               end if
            else
               set the itemDel to comma
               next repeat
            end if
         end repeat
         if tsuccess = 0 then 
            put cr & tTagAbb after tTagAbbList
         end if
      else
         answer "Descriptor not recorded because the corresponding tag has not been found." as sheet
         exit mouseUp
      end if
      set the cTEITagsAndAbbrev of this stack to tTagAbbList
      put empty into fld id 1025 of cd 1
      put empty into fld id 1059 of cd 1
   end if
end mouseUp

##TOOLTIP:
##Optional: type a brief descriptor above
##and click this button to record it.

#####################
#####################
## G. SUBSTACK Automatic Tagging of STACK STEP Transcription Module


#####################
## Script of SUBSTACK Automatic Tagging of STACK STEP Transcription Module


on preOpenStack
   set the loc of this stack to the screenLoc
end preOpenStack

on openStack
   checkLauncherWindow (the short name of this stack)
   pass openStack
end openStack





#####################
## Script of button "Cancel”, ID 1011 of CARD 1 of SUBSTACK Automatic Tagging of STACK STEP Transcription Module

on mouseUp
   put empty into fld id 1004 of cd 1
   put empty into fld id 1005 of cd 1
   put empty into fld id 1017 of cd 1
   put empty into fld id 1018 of cd 1
   close stack "Automatic Tagging"
end mouseUp

##TOOLTIP:
##Close this dialog.



#####################
## Script of button "Clear fields”, ID 1012 of CARD 1 of SUBSTACK Automatic Tagging of STACK STEP Transcription Module

on mouseUp
   put empty into fld id 1004 of cd 1
   put empty into fld id 1005 of cd 1
   put empty into fld id 1017 of cd 1
   put empty into fld id 1018 of cd 1
end mouseUp

##TOOLTIP:
##Clear all fields above.



#####################
## Script of button "Autotag”, ID 1013 of CARD 1 of SUBSTACK Automatic Tagging of STACK STEP Transcription Module

on mouseUp
   local tFldID,tAttVal,tTagL,tTagR,tReplacer,tToBeReplaced,tHTML
   put the cFldID of this stack into tFldID
   if fld id 1004 of cd 1 is empty or fld id 1005 of cd 1 is empty then 
      answer "One of the two fields is empty. No tagging is possible."
      exit mouseUp
   end if
   if fld id 1017 of cd 1 is not empty and fld id 1018 of cd 1 is empty then
      answer "You may not enter an attribute without assigning a value to it."
      exit mouseUp
   end if
   put empty into tAttVal
   if fld id 1017 of cd 1 is not empty and fld id 1018 of cd 1 is not empty then
      put space & fld id 1017 of cd 1 & "="  & quote &  fld id 1018 of cd 1 & quote into tAttVal
   end if
   put "&lt;"&word 1 of fld id 1005 of cd 1 & "&gt;" into tTagL
   put tTagL into tTagR
   put "/" after char 4 of tTagR
   put tAttVal before char -1 of tTagL
   put tTagL&fld id 1004 of cd 1 & tTagR into tReplacer
   put the HTMLText of fld id 1004 of cd 1  into tToBeReplaced
   replace "<p>" with empty in tToBeReplaced
   replace "</p>" with empty in tToBeReplaced
   put the HTMLText of fld id tFldID of cd 1 of stack "STEP Transcription Module" into tHTML
   set the caseSensitive to true
   replace tToBeReplaced with tReplacer in tHTML
   set the HTMLText of fld id tFldID of cd 1 of stack "STEP Transcription Module" to tHTML
end mouseUp

##TOOLTIP:
##Click to tag all occurrences of the string in the TEI Description field
##or the TEI Rendition Description field with the entered tag word.



#####################
## Script of button "Remove tag”, ID 1014 of CARD 1 of SUBSTACK Automatic Tagging of STACK STEP Transcription Module

on mouseUp
   local tFldID,tAttVal,tTagL,tTagR,tReplacer,tToBeReplaced,tHTML
   if fld id 1004 of cd 1 is empty or fld id 1005 of cd 1 is empty then 
      answer "One of the two fields is empty. No untagging is possible."
      exit mouseUp
   end if
   if fld id 1017 of cd 1 is not empty and fld id 1018 of cd 1 is empty then
      answer "You may not enter an attribute without assigning a value to it."
      exit mouseUp
   end if
   put empty into tAttVal
   if fld id 1017 of cd 1 is not empty and fld id 1018 of cd 1 is not empty then
      put space & fld id 1017 of cd 1 & "="  & quote &  fld id 1018 of cd 1 & quote into tAttVal
   end if
   put "&lt;"&word 1 of fld id 1005 of cd 1 & "&gt;" into tTagL
   put tTagL into tTagR
   put "/" after char 4 of tTagR
   put tAttVal before char -1 of tTagL
   put tTagL&fld id 1004 of cd 1 & tTagR into tToBeReplaced
   put fld id 1004 of cd 1  into tReplacer
   put the HTMLText of fld id 1041 of cd 1 of stack "STEP Transcription Module" into tHTML
   set the caseSensitive to true
   replace tToBeReplaced with tReplacer in tHTML
   set the HTMLText of fld id 1041 of cd 1 of stack "STEP Transcription Module" to tHTML
end mouseUp

##TOOLTIP:
##Do the reverse: remove the indicated tag word from all occurrences of the string shown in the first field.


#####################
#####################
## H. SUBSTACK Customize Pop-Up Tag Menus of STACK STEP Transcription Module


#####################
## Script of SUBSTACK Customize Pop-Up Tag Menus of STACK STEP Transcription Module


on preOpenStack
   set the loc of this stack to the screenLoc
   pass preOpenStack
end preOpenStack

on openStack
   stuffToDoFirst
   checkLauncherWindow (the short name of this stack)
   pass openStack
end openStack

on resumeStack
      put "STEP Transcription Module" into tStackName
   put the customKeys of stack tStackName into tCustoms
   filter tCustoms with "*TEI"
   replace "TEI" with empty in tCustoms
   sort lines of tCustoms ascending international
   filter tCustoms without "*_*"
   put tCustoms into btn id 1025 of cd 1
end resumeStack

on stuffToDoFirst
   put "STEP Transcription Module" into tStackName
   put the customKeys of stack tStackName into tCustoms
   filter tCustoms with "*TEI"
   replace "TEI" with empty in tCustoms
   sort lines of tCustoms ascending international
   filter tCustoms without "*_*"
   put tCustoms into btn id 1025 of cd 1
   send "menuPick"&&"Alterations Tag Pop-Up" to btn id 1003 of cd 1
   select line 1 of btn id 1003 of cd 1
   put fld id 1018 of cd 1 into btn id 1054 of cd 1
   put fld id 1021 of cd 1 into btn id 1055 of cd 1
   set the label of btn id 1054 of cd 1 to "Current" && line (the menuHistory of btn id 1003 of cd 1) of btn id 1003 of cd 1 && "Menu"
   set the label of btn id 1055 of cd 1 to "New" && line (the menuHistory of btn id 1003 of cd 1) of btn id 1003 of cd 1 && "Menu"
end stuffToDoFirst



#####################
## Script of CARD 1 of SUBSTACK Customize Pop-Up Tag Menus of STACK STEP Transcription Module

local tField              # LONG ID OF THE TARGET FIELD
local tAllowDrag      # ENABLE-DRAG SWITCH
local tClickNum       # STORE NUMBER OF THE CLICKED LINE
local tContent         # STORE CONTENT OF THE CLICKED LINE
local tBuildBusy       # VARIABLE TO CHECK IF DRAG IMAGE IS BEING CREATED
local tVirtualHilite    # STORE THE VIRTUAL HILITED LINE
local tAllowScroll     # VARIABLE FOR CONTROLLING AUTO-SCROLL OF FIELD
local tDragValid       # VARIABLE TO CHECK VALID DRAG EVENT

# NOTE: SCROLLBAR WIDTH IS ASSUMED TO BE 16 (VALUE IS USED BELOW)

on enableReorder targetField
  # CHECK FOR EMPTY SPACE IN FIELD
   local S
   if word 2 of the clickLine = "" then
    set hilitedLines of targetField to 0
    exit enableReorder
  end if
  repeat for each item P in "tAllowDrag,tClickNum,tContent,tBuildBusy,tVirtualHilite,tAllowScroll,tDragValid"
    do "put empty into" && P
  end repeat
  put targetField into tField
  put true into tAllowDrag
  put scroll of tField into S
  put the hilitedLines of tField into tClickNum
  put line (item 1 of tClickNum) of value(tField) into tContent
end enableReorder


on trackReorder X,Y
   local cX,cY,H
   if not tAllowDrag then exit trackReorder
   if not there is an image "_dragger" then
      put item 1 of the clickLoc into cX
      put item 2 of the clickLoc into cY
      if X < cX - 3 or X > cX + 3 or Y < cY - 3 or Y > cY + 3 then
         if not tBuildBusy then
            put true into tBuildBusy
            buildDragger
         end if
      else exit trackReorder
   end if
   if not there is an image "_dragger" then exit trackReorder
   subtract (item 1 of the clickLoc - left of tField) from X # - tOffset
   put (height of img "_dragger") div 2 into H
   set topLeft of img "_dragger" to X,Y-H
   if Y > bottom of tField and "autoScrollTheField" is not in pendingMessages() then autoScrollTheField 1
   if Y < top of tField and "autoScrollTheField" is not in pendingMessages() then autoScrollTheField -1
   put selectListLine() into tVirtualHilite
   if noFlyZone() then
      put false into tDragValid
      put false into tAllowScroll
      hide grc "_dragpointer"
   else
      put true into tDragValid
      put true into tAllowScroll
      positionPointer Y
      if not the vis of grc "_dragpointer" then show grc "_dragpointer"
   end if
end trackReorder

on finishReorder
   local VH
   put false into tAllowDrag
  put false into tBuildBusy
  # set listBehavior of tField to true
  if there is a grc "_dragpointer" then delete grc "_dragpointer"
  if there is a grc "_linehiliter" then delete grc "_linehiliter"
  if there is an img "_dragger" then
    delete img "_dragger"
    if not tDragValid then
      do "delete line (item 1 of tClickNum) of" && tField
      set hilitedLines of tField to 0
      select empty
      blowTheLine
      exit finishReorder
    end if
    if tDragValid then
      # A DRAG EVENT TOOK PLACE...
      put tVirtualHilite into VH
      if (VH = number of lines of value(tField)) and \
                (mouseV() > item 4 of formattedRect of last line of tField) then
        # PLACE DRAGGED LINE AFTER LAST LINE OF FIELD
        do "put cr & tContent after line VH of" && tField
      else
        # PLACE DRAGGED LINE BEFORE CURRENT HILITED LINE OF FIELD
        do "put tContent & cr before line VH of" && tField
      end if
      # DELETE ORIGINALLY CLICKED LINE AND HILITE REPOSITIONED LINE
      if VH <= item 1 of tClickNum then
        add 1 to item 1 of tClickNum
      else add -1 to VH
      do "delete line (item 1 of tClickNum) of" && tField
      do "if mouseV() > item 4 of formattedRect of last line of" && tField && "then add 1 to VH"
      set the hilitedLines of tField to VH
    end if
  end if
end finishReorder


on buildDragger
   local tRect,globalRect,draggerData
   # BUILD LINEHILITER & DRAGPOINTER GRAPHICS
  buildHiliter
  buildPointer
  # ESTABLISH RECT FOR SCREEN CAPTURE
  put the formattedRect of line (item 1 of tClickNum) of tField into tRect
  put left of tField + borderWidth of tField into item 1 of tRect
  put right of tField - 16 - borderWidth of tField into item 3 of tRect # - tOffset
  put globalLoc(item 1 of tRect & "," & item 2 of tRect) into globalRect
  put "," & globalLoc(item 3 of tRect & "," & item 4 of tRect) after globalRect
  # DISABLE LIST BEHAVIOR SO TEXT STAYS VISIBLE IN FIELD
  set listBehavior of tField to false
  set rect of grc "_linehiliter" to tRect
  show grc "_linehiliter"
  reset the templateImage
  export snapshot from rect globalRect to draggerData as PNG
  set rect of the templateImage to tRect
  set showBorder of the templateImage to false
  set text of the templateImage to draggerData
  set blendLevel of the templateImage to 40
  set name of the templateImage to "_dragger"
  create img
  reset the templateImage
  put selectListLine() into tVirtualHilite
  hide grc "_linehiliter"
  positionPointer mouseV()
  show grc "_dragpointer"
  set listBehavior of tField to true
  set hilitedLines of tField to tClickNum
end buildDragger


function selectListLine
   local T,H,DH,V
   # RETURNS THE "VIRTUAL" HILITEDLINE OF THE FIELD
   put the top of tField - the scroll of tField into T
   put the effective textHeight of tField into H
   put height of img "_dragger" div 2 into DH
   subtract (effective textHeight of tField - effective textSize of tField) from DH
   put (mouseV() - T + DH) div H + 1 into V
   put min(max(V,1),number of lines of value(tField)) into V
   return V
end selectListLine


function noFlyZone
   local V,tRect
   # THIS DETERMINES THE "LIVE" REGION OUTSIDE THE FIELD;
   # DRAGGING BEYOND THIS REGION HALTS THE DRAG EVENT
   put false into V
   put rect of tField into tRect
   add -5 to item 1 of tRect
   add -20 to item 2 of tRect
   add 5 to item 3 of tRect
   add 20 to item 4 of tRect
   get loc of img "_dragger"
   if item 1 of it < item 1 of tRect or item 1 of it > item 3 of tRect then put true into V
   if item 2 of it < item 2 of tRect or item 2 of it > item 4 of tRect then put true into V
   return V
end noFlyZone


on positionPointer Y
   local B,tEND,S
   put max(top of tField + 4,min(item 2 of formattedRect of line tVirtualHilite of tField,bottom of tField - 4)) into B
   put min(item 4 of formattedRect of last line of tField,bottom of tField - 4) into tEND
   if (selectListLine() >= number of lines of value(tField)) and (Y > tEND) then put tEND into B
   set top of grc "_dragpointer" to B - 4 # ACCOUNT FOR HEIGHT OF DRAGPOINTER
end positionPointer


on autoScrollTheField pNum
   local S
   if not tAllowScroll then exit autoScrollTheField
  if pNum < 0 and scroll of tField = 0 then exit autoScrollTheField
  if pNum > 0 and scroll of tField + height of tField + margins of tField > formattedheight of tField then exit autoScrollTheField
  if mouseV() > top of tField and mouseV() < bottom of tField then exit autoScrollTheField
  put pNum * (effective textSize of tField) into S
  set scroll of tField to scroll of tField + S
  send "autoScrollTheField" && pNum to me in 80 millisecs
end autoScrollTheField


on buildPointer
   local tPoints,L,R
   # CREATE POINTLIST FOR DRAGPOINTER
  set itemDel to "/"
  repeat for each item P in "0,0/3,3/100,3/103,0/103,7/100,4/3,4/0,7/0,0"
    put P & cr after tPoints
  end repeat
  delete last char of tPoints
  set itemDel to ","
  # SIZE POINTER TO WIDTH OF FIELD MINUS SCROLLBAR WIDTH
  put left of tField + 2 into L
  put right of tField - 16 - 2 into R
  repeat with N = 1 to 9
    if N is in "1,8,9" then put L into item 1 of line N of tPoints
    if N is in "2,7" then put L+3 into item 1 of line N of tPoints
    if N is in "3,6" then put R-3 into item 1 of line N of tPoints
    if N is in "4,5" then put R into item 1 of line N of tPoints
  end repeat
  # PREPARE TEMPLATEGRAPHIC
  set vis of the templateGraphic to false
  set the filled of the templateGraphic to true
  set the backColor of the templateGraphic to "black"
  set style of the templateGraphic to "polygon"
  set name of the templateGraphic to "_dragpointer"
  create grc
  set points of grc "_dragpointer" to tPoints
  reset the templateGraphic
end buildPointer


on buildHiliter
  set vis of the templateGraphic to false
  set the filled of the templateGraphic to false
  set the foreColor of the templateGraphic to "black"
  set style of the templateGraphic to "rectangle"
  set name of the templateGraphic to "_linehiliter"
  create grc
  reset the templateGraphic
end buildHiliter


# OPTIONAL HANDLER
on blowTheLine
   local tProp
   if the uFrame1 of tField = "" then exit blowTheLine
  set loc of the templateImage to mouseH(),mouseV()
  set name of the templateImage to "_xplode"
  create img
  choose browse tool
  reset the templateImage
  repeat with N = 1 to 16
    put ("uFrame" & N) into tProp
    put the tProp of tField into img "_xplode"
    wait 50 milliseconds with messages
  end repeat
  delete img "_xplode"
end blowTheLine

on closeCard
   send "mouseUp" to btn "Clear All Fields" of cd 1
end closeCard

on recordScroll
   set the cVScroll of fld id 1021 of cd 1 to the vScroll of fld id 1021 of cd 1
end recordScroll

on resetScroll
   set the vScroll of fld id 1021 of cd 1 to the cVScroll of fld id 1021 of cd 1
end resetScroll

on float pmsg--behaves like a tooltip
   local pExpanded
   put desabbreviateSomeTags(pmsg) into pExpanded
   if pExpanded is not empty then 
      if pExpanded is not in fld "Floater" of cd 1 then set the vis of fld "Floater" of cd 1 to false
      put pExpanded into fld "Floater" of cd 1
      set the height of fld "Floater" of cd 1 to (the formattedHeight of fld "Floater" of cd 1)/*-6*/
      set the dontWrap of fld "Floater" to true
      set the textAlign of fld "Floater" to "center"
      set the width of fld "Floater" of cd 1 to (the formattedWidth of fld "Floater" of cd 1)-4
      set the topRight of  fld "Floater" of cd 1 to the topLeft of fld id 1029 of cd 1
      set the vis of fld "Floater" of cd 1 to true
   else
      set the vis of fld "Floater" of cd 1 to false
   end if
end float

function desabbreviateSomeTags pTag
   local tTagAbbList,ots,y
   put the cTEITagsAndAbbrev of stack "TEI Tag Customization" into tTagAbbList
   put lineOffsets(pTag&"TEI",tTagAbbList) into ots
   if ots <> 0 then
      repeat with x = 1 to the number of items of ots
         if line (item x of ots) of tTagAbbList begins with pTag&"TEI" and "|" is in line (item x of ots) of tTagAbbList then 
            put item x of ots into y
            set the itemDel to "|"
            return item 2 of line y of tTagAbbList
         else 
            set the itemDel to comma
            next repeat
         end if
      end repeat
   end if
   return empty
end desabbreviateSomeTags



#####################
## Script of button "Tab Menu”, ID 1003 of CARD 1 of SUBSTACK Customize Pop-Up Tag Menus of STACK STEP Transcription Module

on mouseEnter
   set the cMenuHistory of btn id 1003 of cd 1 to the menuHistory of btn id 1003 of cd 1
   get the cMenuHistory of btn id 1003 of cd 1
   switch it
      case 1
         set the cAlterationMenu of btn id 1003 of cd 1 to fld id 1021 of cd 1
         break
      case 2
         set the cDescriptionMenu of btn id 1003 of cd 1 to fld id 1021 of cd 1
         break
   end switch
end mouseEnter

on menuPick pItemName
   put "STEP Transcription Module" into tStackName
   switch pItemName
      case "Alterations Tag Pop-Up"
         put btn id 1089 of cd 1 of stack tStackName into fld id 1018 of cd 1
         put "LIST OF ALTERATION TAGS TO BE EDITED OR REARRANGED" into fld id 1015 of cd 1
         put "ALTERATION TAGS, ATTRIBUTES & VALUES REARRANGED" into fld id 1017 of cd 1
         put "The alteration tags are in the pop-up menu that appears when right-clicking the main Transcription field in the STEP Transcriptor window" into fld id 1027 of cd 1
         put the cTranscriptionMenu of btn id 1003 of cd 1 into fld id 1021 of cd 1
         break 
      case "TEI Description Pop-Up"
         put btn id 1090 of cd 1 of stack tStackName into fld id 1018 of cd 1
         put "LIST OF DESCRIPTION TAGS TO BE EDITED OR REARRANGED" into fld id 1015 of cd 1
         put "DESCRIPTION TAGS, ATTRIBUTES & VALUES REARRANGED" into fld id 1017 of cd 1
         put "The description tags are in the pop-up menu that appears when right-clicking the TEI Description field in the STEP Transcriptor window" into fld id 1027 of cd 1
         put the cStructureMenu of btn id 1003 of cd 1 into fld id 1021 of cd 1
         break 
   end switch
   set the label of btn id 1054 of cd 1 to "Current" && line (the menuHistory of btn id 1003 of cd 1) of btn id 1003 of cd 1 && "Menu"
   set the label of btn id 1055 of cd 1 to "New" && line (the menuHistory of btn id 1003 of cd 1) of btn id 1003 of cd 1 && "Menu"
end menuPick

##TOOLTIP:
##Select the pop-up menu the content of which you want to modify.



#####################
## Script of image "rightinv.gif”, ID 1016 of CARD 1 of SUBSTACK Customize Pop-Up Tag Menus of STACK STEP Transcription Module

on mouseUp
   if fld id 1018 of cd 1 is empty then exit mouseUp
   if the hilitedLines of fld id 1018 of cd 1 is empty then 
      put fld id 1018 of cd 1 into line (the number of lines of fld id 1021 of cd 1) + 1 of fld id 1021 of cd 1
   else
      repeat with x = 1 to the number of items of the hilitedLines of fld id 1018 of cd 1
         put line (item x  of the hilitedLines of fld id 1018 of cd 1) of fld id 1018 of cd 1 into line (the number of lines of fld id 1021 of cd 1) + 1 of fld id 1021 of cd 1
      end repeat
   end if
end mouseUp

##TOOLTIP:
##Add either the selected lines or the entire content of
##the left field to the content of the grey field at right.



#####################
## Script of field "Reordered menu tags”, ID 1021 of CARD 1 of SUBSTACK Customize Pop-Up Tag Menus of STACK STEP Transcription Module

on mouseDown
   put the hilitedLines of me into ots
   if ots <> 0 and the number of items of ots > 1 then pass mouseDown
   enableReorder (long id of me)
end mouseDown

on mouseMove X,Y
   put the hilitedLines of me into ots
   if ots <> 0 and the number of items of ots > 1 then pass mouseMove
   trackReorder X,Y
end mouseMove

on mouseUp
   put the hilitedLines of me into ots
   if ots <> 0 and the number of items of ots > 1 then pass mouseUp
   finishReorder
end mouseUp

on mouseRelease
   put the hilitedLines of me into ots
   if ots <> 0 and the number of items of ots > 1 then pass mouseRelease
   finishReorder
end mouseRelease

on backSpaceKey
   put empty into line (word 2 of the selectedLine) of fld id 1021 of cd 1
   filter fld id 1021 without empty
end backSpaceKey



##TOOLTIP:
##Drag lines up or down with the mouse pointer.
##Drag a line out of the field to delete it.
##Select lines by clicking each one.



#####################
## Script of button "Insert Tag Attribute”, ID 1024 of CARD 1 of SUBSTACK Customize Pop-Up Tag Menus of STACK STEP Transcription Module

on mouseUp
   put fld id 1038 of cd 1 into tAttrib
   if tAttrib is empty then exit mouseUp
   recordScroll
   put the hilitedLines of fld id 1021 of cd 1 into tHils
   if tHils is empty or tHils is 0 then exit mouseUp
   put fld id 1021 of cd 1 into tTagList
   put item 1 of tHils into tLineNum
   get checkForAngle(tTagList,tLineNum)
   if it is 2 then put tab&tab before tAttrib else put tab before tAttrib
   put cr&tAttrib after line tLineNum of tTagList
   put tTagList into fld id 1021 of cd 1
   resetScroll
   --put empty into fld id 1029 of cd 1
end mouseUp

function checkForAngle pTagList,pLineNum
   repeat with x = pLineNum-1 down to 1
      if "<" is in line x of pTagList then
         if "<" is char 1 of line x of pTagList then return 1
         else if line x of pTagList begins with tab&"<" then return 2
      end if
   end repeat
   return empty
end checkForAngle

##TOOLTIP:
##Insert the attribute shown in the field above
##BELOW the selected line in the grey field.



#####################
## Script of button "Choose New TEI Tag”, ID 1025 of CARD 1 of SUBSTACK Customize Pop-Up Tag Menus of STACK STEP Transcription Module

local tStackName="STEP Transcription Module"

on menuPick pItemName
   if pItemName is not empty then
      put pItemName into fld id 1029 of cd 1
      populateAttributes pItemName
   end if
end menuPick

on populateAttributes pTag
   put getAttributes(pTag) into tAtt
   if tAtt is "pattern" then put "pattern" into btn id 1037 of cd 1
   else put tAtt into btn id 1037 of cd 1
end populateAttributes

function getAttributes pTag
   put pTag&"TEI" into tCustomProp
   if tCustomProp is among the lines of the customKeys of stack tStackName then
      do "put the "&tCustomProp&" of stack tStackName into tAttributes"
      if tAttributes is not empty then
         if "|" is not in tAttributes and the number of items of tAttributes > 0 then
            replace comma with cr in tAttributes
            if char -1 of tAttributes = cr then delete char -1 of tAttributes
            return tAttributes
         else if "|" is in tAttributes then
            put empty into tTempAtt
            repeat with x = 1 to the number of lines of tAttributes
               put offset("|",line x of tAttributes) into ot
               put char 1 to ot-1 of line x of tAttributes & cr after tTempAtt
            end repeat
            delete char -1 of tTempAtt
            return tTempAtt
         end if
      end if
   end if
   return empty
end getAttributes

##TOOLTIP:
##Choose a TEI tag in this menu, or type
##a valid one directly in the field below.



#####################
## Script of button "Set Pop-Up Menu”, ID 1026 of CARD 1 of SUBSTACK Customize Pop-Up Tag Menus of STACK STEP Transcription Module

on mouseUp
   if fld id 1021 of cd 1 is empty then exit mouseUp
   put line (the menuHistory of btn id 1003 of cd 1) of btn id 1003 of cd 1 into tTagMenu
   answer "Confirm you want to replace the content of the "&tTagMenu&" pull-down menu button with that of the grey field at right." with "Cancel" or "OK"
   if it is "OK" then
      put fld id 1021 of cd 1 into tTagList
      put "STEP Transcription Module" into tStackName
      switch tTagMenu
         case "Alterations Tag Pop-Up"
            put tTagList into btn id 1089 of cd 1 of stack tStackName
            break 
         case "TEI Description Pop-Up"
            put tTagList into btn id 1090 of cd 1 of stack tStackName
            break 
      end switch
      send "menuPick"&&tTagMenu to btn id 1003 of cd 1
   end if
end mouseUp

on mouseEnter
   set the cMenuHistory of btn id 1003 of cd 1 to the menuHistory of btn id 1003 of cd 1
   get the cMenuHistory of btn id 1003 of cd 1
   switch it
      case 1
         set the cTranscriptionMenu of btn id 1003 of cd 1 to fld id 1021 of cd 1
         break
      case 2
         set the cStructureMenu of btn id 1003 of cd 1 to fld id 1021 of cd 1
         break
      case 3
         set the cDescriptionMenu of btn id 1003 of cd 1 to fld id 1021 of cd 1
         break
   end switch
end mouseEnter


##TOOLTIP:
##Replace the content of the corresponding pop-up menu in the
##STEP Transcription Module window with the grey field content.



#####################
## Script of button "Delete Selected Line(s)”, ID 1028 of CARD 1 of SUBSTACK Customize Pop-Up Tag Menus of STACK STEP Transcription Module

on mouseUp
   put the hilitedLines of fld id 1021 of cd 1 into tHils
   if tHils is empty or tHils is 0 then exit mouseUp
   recordScroll
   put fld id 1021 of cd 1 into tTagList
   repeat with x = (the number of items of tHils) down to 1
      if ("Delete outer tags" is not in line (item x of tHils) of tTagList) and ("Insert displayed tags" is not in line (item x of tHils) of tTagList) then delete line (item x of tHils) of tTagList
   end repeat
   put tTagList into fld id 1021 of cd 1
   resetScroll
   end mouseUp

##TOOLTIP:
##Delete selected tags, attributes, or values in the grey field.



#####################
## Script of button "Insert New TEI Tag”, ID 1030 of CARD 1 of SUBSTACK Customize Pop-Up Tag Menus of STACK STEP Transcription Module

on mouseUp
   put fld id 1029 of cd 1 into pTag
   if pTag is empty then exit mouseUp
   recordScroll
   put "<" before pTag
   put ">" after pTag
   put the hilitedLines of fld id 1021 of cd 1 into tHils
   if tHils is empty or tHils is 0 then exit mouseUp
   put fld id 1021 of cd 1 into tTagList
   put item 1 of tHils into tLineNum
   get checkForAngle(tTagList,tLineNum)
   if it is 2 then put tab before pTag
   put cr&pTag after line tLineNum of tTagList
   put tTagList into fld id 1021 of cd 1
   resetScroll
end mouseUp

function checkForAngle pTagList,pLineNum
   repeat with x = pLineNum-1 down to 1
      if "<" is in line x of pTagList then
         if "<" is char 1 of line x of pTagList then return 1
         else if line x of pTagList begins with tab&"<" then return 2
      end if
   end repeat
   return empty
end checkForAngle

on mouseEnter 
   if fld id 1029 of cd 1 is empty then pass mouseEnter
   float the text of fld id 1029 of cd 1
end mouseEnter

on mouseLeave
   set the vis of fld "Floater" of cd 1 to false
end mouseLeave

##TOOLTIP:
##Insert the TEI tag shown in the field above
##BELOW the selected line in the grey field.



#####################
## Script of button "Delete Separator Line”, ID 1032 of CARD 1 of SUBSTACK Customize Pop-Up Tag Menus of STACK STEP Transcription Module

on mouseUp
   put the hilitedLines of fld id 1021 of cd 1 into tHils
   if tHils is empty or tHils is 0 then exit mouseUp
   recordScroll
   put fld id 1021 of cd 1 into tTagList
   repeat with x = (the number of items of tHils) down to 1
      if line (item x of tHils) of tTagList is "-" then delete line (item x of tHils) of tTagList
   end repeat
   put tTagList into fld id 1021 of cd 1
   resetScroll
   end mouseUp

##TOOLTIP:
##Delete selected separator line in the grey field.



#####################
## Script of button "Clear All Fields”, ID 1033 of CARD 1 of SUBSTACK Customize Pop-Up Tag Menus of STACK STEP Transcription Module

on mouseUp
   put empty into fld id 1021 of cd 1
   put empty into fld id 1029 of cd 1
   put empty into fld id 1038 of cd 1
   put empty into fld id 1043 of cd 1
   put empty into btn id 1037 of cd 1
   put empty into btn id 1042 of cd 1
   set the cAlterationMenu of btn id 1003 of cd 1 to empty
   set the cDescriptionMenu of btn id 1003 of cd 1 to empty
end mouseUp

##TOOLTIP:
##Delete the content of all fields except the one on the left.



#####################
## Script of button "Table of TEI Elements”, ID 1035 of CARD 1 of SUBSTACK Customize Pop-Up Tag Menus of STACK STEP Transcription Module

on mouseUp
   launch URL "http://www.tei-c.org/Vault/P5/1.0.1/doc/tei-p5-doc/html/REF-ELEMENTS.html"
end mouseUp

##TOOLTIP:
##Go to "http://www.tei-c.org/Vault/P5/1.0.1/doc/tei-p5-doc/html/REF-ELEMENTS.html"



#####################
## Script of button "Reset”, ID 1036 of CARD 1 of SUBSTACK Customize Pop-Up Tag Menus of STACK STEP Transcription Module

on mouseUp
   put line (the menuHistory of btn id 1003 of cd 1) of btn id 1003 of cd 1 into tTagMenu
   answer "Confirm you want to replace the content of the "&tTagMenu&" pop-up menu button with the default content." with "Cancel" or "OK"
   if it is "OK" then
      put fld id 1021 of cd 1 into tTagList
      put "STEP Transcription Module" into tStackName
      switch tTagMenu
         case "Alterations Tag Pop-Up"
            put the cAlterationsPopUpDefault of this stack into btn id 1089 of cd 1 of stack tStackName
            break 
         case "TEI Description Pop-Up"
            put the cTEIDescriptionPopUpDefault of this stack into btn id 1090 of cd 1 of stack tStackName
            break 
      end switch
      send "menuPick"&&tTagMenu to btn id 1003 of cd 1
   end if
end mouseUp

##TOOLTIP:
##Reset the content of the corresponding pop-up menu in
##the STEP Transcription Module window to its DEFAULT.



#####################
## Script of button "Choose New Attribute”, ID 1037 of CARD 1 of SUBSTACK Customize Pop-Up Tag Menus of STACK STEP Transcription Module

local tStackName="STEP Transcription Module"

on mouseEnter
   send "populateAttributes"&&(fld id 1029 of cd 1) to btn id 1025 of cd 1
end mouseEnter

on menuPick pItemName
   if pItemName is not empty then
      if pItemName is "hand" or pItemName is 28 then put "hand" into fld id 1038 of cd 1 else put pItemName into fld id 1038 of cd 1
      put fld id 1029 of cd 1 into pTag
      if pTag is not empty then put getValuesFromAttribute(pTag,pItemName) into btn id 1042 of cd 1
   end if
end menuPick

function getValuesFromAttribute pTag,pAttrib
   put pTag&"TEI" into tTagCustomProp
   put pAttrib&"TEI" into tAttCustomProp
   replace ":" with "_" in tAttCustomProp
   put empty into tTempValue
   if tTagCustomProp is among the lines of the customKeys of stack tStackName then
      do "put the "&tTagCustomProp&" of stack tStackName into tAttributes"
      put lineOffset((char 1 to -4 of tAttCustomProp)&"|",tAttributes) into ot
      if ot is not 0 then
         set the itemDel to "|"
         put item 2 of line ot of tAttributes into tTempValue
      end if
   end if
   if tTempValue is empty then
      if tAttCustomProp is among the lines of the customKeys of stack tStackName then
         do "put the "&tAttCustomProp&" of stack tStackName into tValues"
         put lineOffset((char 1 to -4 of tAttCustomProp)&"|",tValues) into ot
         if ot is not 0 and "|" is in tValues then
            set the itemDel to "|"
            put item 2 of line ot of tValues into tTempValue
         else if ot is 0 and ":" is in tValues and "|" is not in tValues then
            set the itemDel to comma
            put empty into tTempValue
            repeat with x = 1 to the number of items of tValues
               put item x of tValues into tItem
               set the itemDel to ":"
               put item 2 of tItem & comma after tTempValue
               set the itemDel to comma
            end repeat
         end if
      end if
   end if
   replace comma with cr in tTempValue
   if char -1 of tTempValue = cr then delete char -1 of tTempValue
   return tTempValue
end getValuesFromAttribute

##TOOLTIP:
##Choose an attribute in this menu, or type
##a valid one directly in the field below.



#####################
## Script of field "New Attribute Field”, ID 1038 of CARD 1 of SUBSTACK Customize Pop-Up Tag Menus of STACK STEP Transcription Module

on mouseLeave
   set the vis of fld "Floater" of cd 1 to false
end mouseLeave

on mouseEnter 
   if the cTagTip of stack "STEP Transcription Module" is "off" then exit mouseEnter
   local tAttrExplanation
   get the text of me
   if it is empty then pass mouseEnter
   put getAttributeTEIExplanation(it) into tAttrExplanation
   floating tAttrExplanation
end mouseEnter

on floating @pAttr--behaves like a tooltip
   local tLength,tW
   lock screen
   set the height of fld "Floater" of cd 1 to 19
   if pAttr is not empty then 
      put length(pAttr) into tLength
      if pAttr is not the text of fld "Floater" of cd 1 then
         set the vis of fld "Floater" of cd 1 to false
         put pAttr into fld "Floater" of cd 1
         put (the formattedWidth of fld "Floater" of cd 1) into tW
         if tLength > 44 then 
            set the textAlign of fld "Floater" to "left"
            set the dontWrap of fld "Floater" to false
            put 270 into tW
         else
            set the textAlign of fld "Floater" to "left"
            set the dontWrap of fld "Floater" to false
         end if
         set the height of fld "Floater" of cd 1 to  roundUp(measureText(the text of fld "Floater" of cd 1,fld "Floater" of cd 1)/260)*16--round((tLength/48)*19)
         set the width of fld "Floater" of cd 1 to tW+4
         set the topright of  fld "Floater" of cd 1 to the topleft of fld id 1038 of cd 1
         set the vis of fld "Floater" of cd 1 to true
      else
         set the topright of  fld "Floater" of cd 1 to the topleft of fld id 1038 of cd 1
         set the height of fld "Floater" of cd 1 to roundUp(measureText(the text of fld "Floater" of cd 1,fld "Floater" of cd 1)/260)*16--round((tLength/48)*19)
         set the vis of fld "Floater" of cd 1 to true
      end if
   else
      set the vis of fld "Floater" of cd 1 to false
   end if
end floating

function roundUp pNum
   get trunc(pNum)
   if pNum > it then return it+1 else return it
end roundUp


##TOOLTIP:
##Type the new valid attribute, or 
##choose one in the menu above.



#####################
## Script of button "Insert New Value”, ID 1039 of CARD 1 of SUBSTACK Customize Pop-Up Tag Menus of STACK STEP Transcription Module

on mouseUp
   put fld id 1043 of cd 1 into tValue
   if tValue is empty then exit mouseUp
   recordScroll
   put the hilitedLines of fld id 1021 of cd 1 into tHils
   if tHils is empty or tHils is 0 then exit mouseUp
   put fld id 1021 of cd 1 into tTagList
   put item 1 of tHils into tLineNum
   get checkForAngle(tTagList,tLineNum)
   if it is 2 then put tab&tab&tab before tValue else put tab&tab before tValue
   put cr&tValue after line tLineNum of tTagList
   put tTagList into fld id 1021 of cd 1
   resetScroll
   put empty into fld id 1043 of cd 1
end mouseUp

function checkForAngle pTagList,pLineNum
   repeat with x = pLineNum-1 down to 1
      if "<" is in line x of pTagList then
         if "<" is char 1 of line x of pTagList then return 1
         else if line x of pTagList begins with tab&"<" then return 2
      end if
   end repeat
   return empty
end checkForAngle

##TOOLTIP:
##Insert the value shown in the field above
##BELOW the selected line in the grey field.



#####################
## Script of button "Choose New Value”, ID 1042 of CARD 1 of SUBSTACK Customize Pop-Up Tag Menus of STACK STEP Transcription Module

on menuPick pItemName
   put pItemName into fld id 1043 of cd 1
end menuPick

on mouseEnter
   send "menuPick"&&(the text of fld id 1038 of cd 1) to btn id 1037 of cd 1
end mouseEnter

##TOOLTIP:
##Choose a value in this menu, or type
##a valid one directly in the field below.



#####################
## Script of button "Insert Tag Category”, ID 1045 of CARD 1 of SUBSTACK Customize Pop-Up Tag Menus of STACK STEP Transcription Module

on mouseUp
   put the hilitedLines of fld id 1021 of cd 1 into tHils
   if tHils is empty or tHils is 0 then exit mouseUp
   recordScroll
   put fld id 1021 of cd 1 into tTagList
   put item 1 of tHils into tLineNum
   ask "Type the name of the category to be inserted just ABOVE the selected lines in the blue field." with "Cancel" or "Insert" as sheet
   if the result is "Cancel" or it is empty then exit mouseUp
   repeat with x = 1 to (the number of items of tHils)
      put tab before line (item x of tHils) of tTagList
   end repeat
   put it & cr before line tLineNum of tTagList
   put tTagList into fld id 1021
   resetScroll
end mouseUp

##TOOLTIP:
##Insert category ABOVE lines selected in the grey field
##that fall within that category. Ex.: “Divisions” as a
##category that includes the tags “div, div1, div2, div3.” 



#####################
## Script of button "Delete”, ID 1049 of CARD 1 of SUBSTACK Customize Pop-Up Tag Menus of STACK STEP Transcription Module

on mouseUp
   put the hilitedLines of fld id 1021 of cd 1 into tHils
   if tHils is empty or tHils is 0 then exit mouseUp
   recordScroll
   put fld id 1021 of cd 1 into tTagList
   put item 1 of tHils into tLineNum
   if char 1 of line tLineNum of tTagList is tab or char 1 of line tLineNum of tTagList is in "-<" then exit mouseUp
   repeat with x = 2 to (the number of items of tHils)
      if line (item x of tHils) of tTagList begins with tab then delete char 1 of  line (item x of tHils) of tTagList
   end repeat
   if ("Delete outer tags" is not in line tLineNum of tTagList) and ("Insert displayed tags" is not in line tLineNum of tTagList) then delete line tLineNum of tTagList
   put tTagList into fld id 1021
   resetScroll
end mouseUp

##TOOLTIP:
##Delete tag category : select it AND all the lines included
##under it in the grey field before clicking this button.
##(The selected lines under it will not be deleted but de-indented.)



#####################
## Script of button "Insert Separator Line”,” ID 1050 of CARD 1 of SUBSTACK Customize Pop-Up Tag Menus of STACK STEP Transcription Module

on mouseUp
   put the hilitedLines of fld id 1021 of cd 1 into tHils
   if tHils is empty or tHils is 0 then exit mouseUp
   recordScroll
   put fld id 1021 of cd 1 into tTagList
   put cr&"-" after line (item -1 of tHils) of tTagList
   put tTagList into fld id 1021 of cd 1
   resetScroll
end mouseUp

##TOOLTIP:
##Insert separator line BELOW the
##selected line in the grey field.



#####################
## Script of button "Current Tag Menu”, ID 1054 of CARD 1 of SUBSTACK Customize Pop-Up Tag Menus of STACK STEP Transcription Module

on mouseEnter
   put fld id 1018 of cd 1 into btn id 1054 of cd 1
   set the label of btn id 1054 of cd 1 to "Current"&&line (the menuHistory of btn id 1003 of cd 1) of btn id 1003 of cd 1 && "Menu"
end mouseEnter

on menuPick
   set the label of btn id 1054 of cd 1 to "Current"&&line (the menuHistory of btn id 1003 of cd 1) of btn id 1003 of cd 1 && "Menu"
end menuPick

##TOOLTIP:
##This menu displays the content of the field below.



#####################
## Script of button "Option Menu”, ID 1055 of CARD 1 of SUBSTACK Customize Pop-Up Tag Menus of STACK STEP Transcription Module

on mouseEnter
   put fld id 1021 of cd 1 into btn id 1055 of cd 1
   set the label of btn id 1055 of cd 1 to "New"&& line (the menuHistory of btn id 1003 of cd 1) of btn id 1003 of cd 1 && "Menu"
end mouseEnter

on menuPick
   set the label of btn id 1055 of cd 1 to "New"&&line (the menuHistory of btn id 1003 of cd 1) of btn id 1003 of cd 1 && "Menu"
end menuPick

##TOOLTIP:
##This menu displays the content of the field below.

#####################
#####################
## I. SUBSTACK Customize Tag Anchors of STACK STEP Transcription Module


#####################
## Script of SUBSTACK Customize Tag Anchors of STACK STEP Transcription Module


on preOpenStack
   set the loc of this stack to the screenLoc
end preOpenStack

on openStack
   checkLauncherWindow (the short name of this stack)
   pass openStack
end openStack



#####################
## Script of CARD 1 of SUBSTACK Customize Tag Anchors of STACK STEP Transcription Module

function randomInRange lowerLimit,upperLimit
   return random(upperLimit - lowerLimit + 1) + lowerLimit - 1
end randomInRange

on assembleXMLIDexample
   lock screen
   put empty into tExample
   if fld id 1009 is not empty then put fld id 1009 of cd 1 into tExample
   if fld id 1012 of cd 1 is not empty then put fld id 1012 of cd 1 after tExample
   put randomInRange(101,5999) into tFirstNumber
   put tFirstNumber + randomInRange(10,60) into tSecondNumber
   put "<del xml:id="&quote&tExample&tFirstNumber&quote&">the characterization of him<anchor xml:id="&quote&tExample&tSecondNumber&quote&"></del>"&cr&\
   "<app from="&quote&tExample&tFirstNumber&quote&" to="&quote&tExample&tSecondNumber&quote&"><lem>his characterism</lem>] after deleted the characterization of him</app>" into fld id 1019 of cd 1
   set the textStyle of word -6 to -5 of fld id 1019 of cd 1 to italic
   set the textColor of char 1 to 4  of fld id 1019 of cd 1 to "#B22222"
   set the textColor of char -6 to -1  of line 1 of fld id 1019 of cd 1 to "#B22222"
   set the textColor of char 1 to -4  of word 2 of line 1 of fld id 1019 of cd 1 to "#008B8B"
   set the textColor of char 4 to -1  of word 5 of line 1 of fld id 1019 of cd 1 to "#008B8B"
   set the textColor of char 1 to -7  of word 6 of line 1 of fld id 1019 of cd 1 to "#008B8B"
   set the textColor of word 1 of line 2 of fld id 1019 of cd 1 to "#1F4C1F"
   set the textColor of word 2 of line 2 of fld id 1019 of cd 1 to "#008B8B"
   set the textColor of char 1 to -9  of word 3 of line 2 of fld id 1019 of cd 1 to "#008B8B"
   set the textColor of char -8 to -4  of word 3 of line 2 of fld id 1019 of cd 1 to "#1F4C1F"
   set the textColor of char -7 to -2  of word 4 of line 2 of fld id 1019 of cd 1 to "#1F4C1F"
   set the textColor of char -6 to -1  of line 2 of fld id 1019 of cd 1 to "#1F4C1F"
   set the textColor of char offset(">",fld id 1019 of cd 1) of fld id 1019 of cd 1 to "#B22222"
   set the textColor of char offset(">",line 2 of fld id 1019 of cd 1) of line 2 of fld id 1019 of cd 1 to "#1F4C1F"
   put offsets(quote,fld id 1019 of cd 1) into uts
   repeat with x = 1 to (the number of items of uts)-1 step 2
      set the textColor of char (item x of uts)+1 to (item x+1 of uts)-1  of fld id 1019 of cd 1 to "#666699"
   end repeat
end assembleXMLIDexample

on openCard
   put "STEP Transcription Module" into tStack
   put (fld id 1206 of cd 1 of stack tStack) & (fld id 1207 of cd 1 of stack tStack) into fld id 1009 of cd 1
   assembleXMLIDexample
   if the cAbbreviation of this stack is empty then set the hilite of btn id 1026 of cd 1 to false else set the hilite of btn id 1026 of cd 1 to true
end openCard



#####################
## Script of field "Character”, ID 1009 of CARD 1 of SUBSTACK Customize Tag Anchors of STACK STEP Transcription Module

on tabKey
   assembleXMLIDexample
end tabKey

on enterInField
   assembleXMLIDexample
end enterInField

on returnInField
   assembleXMLIDexample
end returnInField

##TOOLTIP:
##Shown by default is the current document
##+ variant abbreviation (first 2 boxes at
##bottom left of main window).



#####################
## Script of button "Clear Fields”, ID 1013 of CARD 1 of SUBSTACK Customize Tag Anchors of STACK STEP Transcription Module

on mouseUp
   put empty into fld id 1009 of cd 1
   put empty into fld id 1012 of cd 1
   put empty into fld id 1019 of cd 1
   set the label of btn id 1018 to empty
   set the cAbbreviation of this stack to empty
   set the cSeparator of this stack to empty
   set the hilite of btn id 1026 of cd 1 to false
   end mouseUp
  

##TOOLTIP:
##Empty all fields and delete recorded values.



#####################
## Script of button "Record Custom Anchor Prefix”, ID 1014 of CARD 1 of SUBSTACK Customize Tag Anchors of STACK STEP Transcription Module

on mouseUp
   put fld id 1009 of cd 1 of this stack into tAbbr
   replace space with empty in tAbbr
   replace cr with empty in tAbbr
   replace "." with empty in tAbbr
   replace "<" with empty in tAbbr
   replace ">" with empty in tAbbr
   put tAbbr into fld id 1009 of cd 1
   set the cAbbreviation of this stack to tAbbr
   put fld id 1012 of cd 1 of this stack into tSep
   replace space with empty in tSep
   replace cr with empty in tSep
   if tSep is not empty then set the cSeparator of this stack to char 1 of tSep else set the cSeparator of this stack to empty
   if the cAbbreviation of this stack is empty then set the hilite of btn id 1026 of cd 1 to false else set the hilite of btn id 1026 of cd 1 to true
end mouseUp

##TOOLTIP:
##Record the abbreviation and the separator.



#####################
## Script of button "Close”, ID 1015 of CARD 1 of SUBSTACK Customize Tag Anchors of STACK STEP Transcription Module

on mouseUp
  close stack "Customize Tag Anchors"
end mouseUp

##TOOLTIP:
##Close this window.



#####################
## Script of button " “, ID 1018 of CARD 1 of SUBSTACK Customize Tag Anchors of STACK STEP Transcription Module

on menuPick pItemName
   switch pItemName
      case "None"
         put empty into fld id 1012 of cd 1
         set the label of btn id 1018 of cd 1 to empty
         set the cSeparator of this stack to empty
         break
      case "Period   ."
         put "." into fld id 1012 of cd 1
         break
      case "Colon    :"
         put ":" into fld id 1012 of cd 1
         break
      case "Stroke    |"
         put "|" into fld id 1012 of cd 1
         break
      case "Solidus  /"
         put "/" into fld id 1012 of cd 1
         break
      case "Hyphen  -"
         put "-" into fld id 1012 of cd 1
         break
      case "Low line  _"
         put "_" into fld id 1012 of cd 1
         break
      case "Other..."
         ask "Type the character to serve as a separator between abbreviation and xml:id number." with "Cancel" or "OK"
         if the result is "Cancel" or it is empty then exit menuPick
         put it into fld id 1012 of cd 1
         break 
   end switch
   set the cSeparator of this stack to fld id 1012 of cd 1
   assembleXMLIDexample
end menuPick

##TOOLTIP:
##Select a separator mark. A
##hyphen is usually preferred.



#####################
#####################
## J. SUBSTACK Assign Tags to Function Keys of STACK STEP Transcription Module


#####################
## Script of SUBSTACK Assign Tags to Function Keys of STACK STEP Transcription Module


on preOpenStack
   set the loc of stack "Assign Tags to Function Keys" to the screenLoc
end preOpenStack

on openStack
   checkLauncherWindow (the short name of this stack)
   pass openStack
end openStack



#####################
## Script of CARD 1 of SUBSTACK Assign Tags to Function Keys of STACK STEP Transcription Module



#####################
## Script of button " " of card id 1002 of stack "Assign Tags to Function Keys”, ID 1003 of CARD 1 of SUBSTACK Assign Tags to Function Keys of STACK STEP Transcription Module

on menuPick pItemName
   set the label of me to pItemName
   put char 2 to -1 of pItemName into tNum
   do "put the u"&pItemName&" of this stack into fld id 1005"
   if fld id 1005 is not empty then
      set the label of btn id 1006 to fld id 1005
      if "<" is in fld id 1005 then 
         put pItemName&&"assigned to Tag:  " before fld id 1005 
      else 
         put pItemName&&"assigned to Button:  " before fld id 1005
      end if
   else
      set the label of btn id 1006 to empty
   end if
end menuPick


##TOOLTIP:
##Select a  function key in this menu button, and then 
##an assignment in the pull-down menu at right.



#####################
## Script of button " “, ID 1006 of CARD 1 of SUBSTACK Assign Tags to Function Keys of STACK STEP Transcription Module

on menuPick pItemName
   local tF,pAssignment,tW,tY,tNum,tAllAssign,tResult
   put the label of btn id 1003 into tF
   if tF is empty or tF is "." then 
      answer "First select a function key in the F-Keys menu button." as sheet
      exit menuPick
   end if
   put char 2 to -1 of tF into tNum
   put empty into pAssignment
   do "put the uF"&tNum&" of this stack into pAssignment"
   if pItemName contains "<" then
      if pAssignment is not empty then
         if "<" is in pAssignment then 
            put "tag" into tW
            put "it to another tag" into tY
         else 
            put "button" into tW
            put "it to a tag" into tY
         end if
         answer tF&&"is currently assigned to "&tW&" “"&spaceAngles(pAssignment)&".” Do you want to change "&tY&"?" with "Cancel" or "Change" as sheet
         if it is "Cancel" then
            exit menuPick
         else
            askForTag tNum,pItemName,tF
         end if
      else 
         askForTag tNum,pItemName,tF
      end if
      exit menuPick
   end if
   if "unassigned" is not in fld id 1005 and fld id 1005 is not empty then
      answer tF&&"is currently assigned to “"& spaceAngles(word 4 to -1 of fld id 1005)&".” Confirm you want to change that assignment to “"&pItemName&".”" with "Cancel" or "Reassign" as sheet
   end if
   if it is "Cancel" then 
      do "set the label of me to the u"&tF&" of this stack"
      exit to top
   end if
   put the cAllAssignments of this stack into tAllAssign
   put checkRedundancy(pItemName,tAllAssign) into tResult
   if tResult is "abort" then exit to top
   put tF&&"assigned to button:  "&pItemName into fld id 1005
   put "Assigned to button:  "&pItemName into fld tNum
   put the cAllAssignments of this stack into tAllAssign
   put pItemName into line tNum of tAllAssign
   set the cAllAssignments of this stack to tAllAssign
   do "set the u"&tF&" of this stack to pItemName"
end menuPick

function spaceAngles pTag
   if "<" is in pTag and ">" is in pTag then
      replace "<" with "< " in pTag
      replace ">" with " >" in pTag
   end if
   return pTag
end spaceAngles

on askForTag tNum,pTag,tF
   local tAllAssign,tResult
      if pTag is empty then
      ask "Type the tag to be assigned to function key "&tF&"." as sheet
      if it is empty or the result is "Cancel" then 
         exit to top
      end if
   else get pTag
   put the cAllAssignments of this stack into tAllAssign
   put checkRedundancy(it,tAllAssign) into tResult
   if tResult is "abort" then exit to top
   put tF&&"assigned to tag:  "&it into fld id 1005
   put"Assigned to tag:  "&it into fld tNum of cd 1 of stack "Assign Tags to Function Keys"
   put it into line tNum of tAllAssign
   set the cAllAssignments of this stack to tAllAssign
   do "set the u"&tF&" of this stack to it"
end askForTag

function checkRedundancy pCandidate,pAllAssignments
   local ot
   set the wholeMatches to true
   put lineOffset(pCandidate,pAllAssignments) into ot
   if ot <> 0 then
      if pCandidate is "<p></p>" then put "< p >< / p >" into pCandidate
      answer "Function Key F"&ot&&"is already assigned to “"&pCandidate&".”"&&"Proceed anyway or not?" with "Proceed" or "Cancel"
      if it is "Cancel" then return"abort"
      else return "ok"
   end if
end checkRedundancy

##TOOLTIP:
##Select a tag or an operation linked to a button in STEP Transcriptor in order
##to link it to  the function key you have selected in the menu button at left.



#####################
## Script of button "Unassign”, ID 1007 of CARD 1 of SUBSTACK Assign Tags to Function Keys of STACK STEP Transcription Module

on mouseUp
   if "unassigned" is not in fld id 1005 of cd 1 and fld id 1005 of cd 1 is not empty and word 1 of fld id 1005 of cd 1 begins with "F" then
      put word 1 of fld id 1005 of cd 1 into tF
      put char 2 to -1 of tF into tNum
      do "set the u"&tF&" of this stack to empty"
      put tF&&"is unassigned" into fld id 1005 of cd 1
      put tF & " Field" into tFldName
      put empty into fld tFldName
      put the cAllAssignments of this stack into tAllAssign
      put empty into line tNum of tAllAssign
      set the cAllAssignments of this stack to tAllAssign
      set the label of btn id 1006 of cd 1 to empty
   end if
end mouseUp

##TOOLTIP:
##Delete the assignment attached to the 
##currently displayed function key.



#####################
## Script of button "View All”, ID 1008 of CARD 1 of SUBSTACK Assign Tags to Function Keys of STACK STEP Transcription Module

on mouseUp
   lock screen
   get the top of this stack
   if the label of me is "View All" then 
      set the height of this stack to "498" 
      set the label of me to "View Less"
   else 
      set the height of this stack to "176"
      set the label of me to "View All"
   end if
   set the top of this stack to it
end mouseUp



#####################
## Script of button "Unassign All”, ID 1009 of CARD 1 of SUBSTACK Assign Tags to Function Keys of STACK STEP Transcription Module

on mouseUp
   put "F1,F2,F3,F4,F5,F6,F7,F8,F9,F10,F11,F12,F13,F14,F15" into tFList
   repeat with i = 1 to 15
      put "F"&i && "Field" into tFldName
   end repeat
   answer "Confirm you want to unassign all function keys." with "Cancel" or "Unassign all" as sheet
   if it is "Cancel" then exit to top
   put empty into fld id 1005
   repeat for each item tItem in tFList
      put tItem&" Field" into tFldName
      put fld tFldName into tMenuCommandName
      put empty into fld tFldName
      do "set the u"&tItem&" of this stack to empty"
   end repeat
   set the label of btn id 1003 to empty
   set the label of btn id 1006 to empty
   set the cAllAssignments of this stack to empty
end mouseUp


##TOOLTIP:
##Delete all function key assignments.



#####################
## Script of button "Print…”, ID 1010 of CARD 1 of SUBSTACK Assign Tags to Function Keys of STACK STEP Transcription Module

on mouseUp
   put empty into tCommand
   put empty into tListOfAssignments
   repeat with i = 1 to 15
      put "F"&i&" Field" into tFldName
      if fld tFldName is empty then put "Unassigned" into tCommand else put fld tFldName into tCommand
      put "Function Key F"&i&": "&tab&tCommand into line i of tListOfAssignments
   end repeat
      revPrintText tListOfAssignments,"LIST OF FUNCTION KEY ASSIGNMENTS"&cr,the time && the date,the long name of field id 1005
end mouseUp

##TOOLTIP:
##Print the list of function key assignments.



#####################
#####################
## K. SUBSTACK Customize Keyboard Shortcuts of STACK STEP Transcription Module


#####################
## Script of SUBSTACK Customize Keyboard Shortcuts of STACK STEP Transcription Module


on preOpenStack
   set the loc of stack "Customize Keyboard Shortcuts" to the screenLoc
end preOpenStack

on openStack
   checkLauncherWindow (the short name of this stack)
   gatherMenuCommandsAndKeyCombs
   fillButtonOrMenuCommandsField
   pass openStack
end openStack

on closeStack
   send "mouseUp" to btn "Close" of cd 1
end closeStack

on gatherMenuCommandsAndKeyCombs
   local tMenuList,tMenu,tStackName,tMenuCommands,tCommand,tCommandList,tEndItem
   put "STEP Tools,File,Export,Edit,Font,Tools,Customize,Help" into tMenuList
   put "STEP Transcription Module" into tStackName
   set the itemDel to comma
   repeat for each item tMenu in tMenuList
      if there is not a btn tMenu of group "STEP Menu 1" of cd 1 of stack tStackName then next repeat
      put btn tMenu of group "STEP Menu 1" of cd 1 of stack tStackName into tMenuCommands
      replace "//" with "%%" in tMenuCommands
      filter lines of tMenuCommands with "*/*"
      replace "%%" with "/" in tMenuCommands
      replace "&&" with "%%" in tMenuCommands
      replace "&" with empty in tMenuCommands
      replace "%%" with "&" in tMenuCommands
      replace "!r" with empty in tMenuCommands
      replace "!c" with empty in tMenuCommands
      replace "!n" with empty in tMenuCommands
      set the itemDel to "/"
      repeat for each line tCommand in tMenuCommands
         if char 1 of tCommand is "(" then delete char 1 of tCommand
         if length(item -1 of tCommand) = 1 then put "Command+"&item -1 of tCommand into tEndItem else put item -1 of tCommand into tEndItem
         put item 1 to -2 of tCommand & "|" & tEndItem & cr after tCommandList
      end repeat
      set the itemDel to comma
   end repeat
   put "Preferences|Command+," & cr after tCommandList
   put stripDuplicates2(tCommandList) into tCommandList
   replace "^" with "Command+" in tCommandList
   replace "@" with "Shift+" in tCommandList
   if the platform is "MacOS" then replace "#" with "Option+" in tCommandList else replace "#" with "Alt+" in tCommandList
   replace "%" with "Control+" in tCommandList
   replace "Shift+Option" with "Option+Shift" in tCommandList
   replace "Shift+Command" with "Command+Shift" in tCommandList
   replace "Option+Command" with "Command+Option" in tCommandList
   replace "Shift+Alt" with "Alt+Shift" in tCommandList
   replace "Shift+Ctrl" with "Ctrl+Shift" in tCommandList
   replace "Alt+Ctrl" with "Ctrl+Alt" in tCommandList
   if the platform is "MacOS" then
      replace "Ctrl" with "Command" in tCommandList
      replace "Alt+" with "Option+" in tCommandList
      replace "+Alt" with "+Option" in tCommandList
   else
      replace "Command+" with "Ctrl+" in tCommandList
      replace "Option+" with "Alt+" in tCommandList
      replace "+Option" with "+Alt" in tCommandList
   end if
   set the cAllMenuCommandsWithKeyCombs of this stack to tCommandList
end gatherMenuCommandsAndKeyCombs

function gatherAllMenuCommandsWithOrWithoutKeyCombs
   local tMenuList,tMenu,tStackName,tMenuCommands,tCommand,tCommandList,tEndItem
   put "STEP Tools,File,Export,Edit,Font,Tools,Customize,Help" into tMenuList
   put "STEP Transcription Module" into tStackName
   repeat for each item tMenu in tMenuList
      if there is not a btn tMenu of group "STEP Menu 1" of cd 1 of stack tStackName then next repeat
      put btn tMenu of group "STEP Menu 1" of cd 1 of stack tStackName into tMenuCommands
      filter lines of tMenuCommands without "-"
      filter lines of tMenuCommands without tab&"*"
      replace "//" with "/" in tMenuCommands
      replace "&&" with "%%" in tMenuCommands
      replace "&" with empty in tMenuCommands
      replace "%%" with "&" in tMenuCommands
      replace "!r" with empty in tMenuCommands
      replace "!c" with empty in tMenuCommands
      replace "!n" with empty in tMenuCommands
      replace cr&"(" with cr in tMenuCommands
      set the itemDel to "/"
      repeat for each line tCommand in tMenuCommands
         if tCommand is "Preferences" then next repeat
         if "/" is not in tCommand then 
            put tCommand & cr after tCommandList
         else 
            if length(item -1 of tCommand) = 1 then put "Command+"&item -1 of tCommand into tEndItem else put item -1 of tCommand into tEndItem
            put item 1 to -2 of tCommand & "|" & tEndItem & cr after tCommandList
         end if
      end repeat
      set the itemDel to comma
   end repeat
   put "Preferences|Command+," & cr after tCommandList
   put stripDuplicates2(tCommandList) into tCommandList
   replace "^" with "Command+" in tCommandList
   replace "@" with "Shift+" in tCommandList
   if the platform is "MacOS" then replace "#" with "Option+" in tCommandList else replace "#" with "Alt+" in tCommandList
   replace "%" with "Control+" in tCommandList
   replace "Shift+Option" with "Option+Shift" in tCommandList
   replace "Shift+Command" with "Command+Shift" in tCommandList
   replace "Option+Command" with "Command+Option" in tCommandList
   replace "Shift+Alt" with "Alt+Shift" in tCommandList
   replace "Shift+Ctrl" with "Ctrl+Shift" in tCommandList
   replace "Alt+Ctrl" with "Ctrl+Alt" in tCommandList
   if the platform is "MacOS" then
      replace "Ctrl" with "Command" in tCommandList
      replace "Alt+" with "Option+" in tCommandList
      replace "+Alt" with "+Option" in tCommandList
   else
      replace "Command+" with "Ctrl+" in tCommandList
      replace "Option+" with "Alt+" in tCommandList
      replace "+Option" with "+Alt" in tCommandList
   end if
   set the cAllCommands of this stack to sortAscendingInternational(tCommandList& cr & the cVisibleButtons of this stack & cr & the cXMLTaggers of this stack)
   return tCommandList
end gatherAllMenuCommandsWithOrWithoutKeyCombs

function gatherAllMenuCommandsWithKeyCombsRemoved
   return removeAcceleratorFromEntry(gatherAllMenuCommandsWithOrWithoutKeyCombs())
end gatherAllMenuCommandsWithKeyCombsRemoved

on fillButtonOrMenuCommandsField
   put sortAscendingInternational(gatherAllMenuCommandsWithKeyCombsRemoved() & cr & removeAcceleratorFromEntry(the cVisibleButtons of this stack) & cr & removeAcceleratorFromEntry(the cXMLTaggers of this stack)) into fld id 1011 of cd 1 of this stack
end fillButtonOrMenuCommandsField

function sortAscendingInternational pList
   sort lines of pList ascending international
   return pList
end sortAscendingInternational

function removeAcceleratorFromEntry pList
   local tCommand,tCommandList
   set the itemDel to "|"
   repeat for each line tCommand in pList
      if "|" is not in tCommand then 
         put tCommand & cr after tCommandList
      else 
         put item 1 to -2 of tCommand & cr after tCommandList
      end if
   end repeat
   delete char -1 of tCommandList
   return tCommandList
end removeAcceleratorFromEntry




#####################
## Script of CARD 1 of SUBSTACK Customize Keyboard Shortcuts of STACK STEP Transcription Module

on commandKeyDown theKey
   local tK,tCharTemp
   if the selectedField is not empty and the ID of the selectedField is 1015 then
      if the platform is "MacOS" then
         if the optionKey is down then 
            put "Command+Option+" into tK 
         else put "Command+" into tK
      else 
         if the optionKey is down then 
            put "Ctrl+Alt+" into tK 
         else put "Ctrl+" into tK
      end if
      if the shiftKey is down then put "Shift+" after tK
      put item 1 of the KeysDown into tCharTemp
      if numToNativeChar(tCharTemp) is a number then put numToNativeChar(tCharTemp) into theKey
      else if isLitteral(numToNativeChar(tCharTemp)) is true then put toUpper(numToNativeChar(tCharTemp)) into theKey
      set the cCombinationTemp of this stack to  tK&toUpper(theKey)
      put  the cCombinationTemp of this stack into fld id 1015 of cd 1 of this stack
      select after fld id 1015 of cd 1 of this stack
      exit commandKeyDown
   else 
      pass commandKeyDown
   end if
end commandKeyDown

function isLitteral pChar
   local tItemCapList,tItemLowercaseList,tCharNum
   if the platform is "MacOS" then
      put "65,90,128,134,174,175,203,206,217,217,229,239,241,244" into tItemCapList
      put "97,122,135,159,190,191,207,207,216,216" into tItemLowercaseList
   else
      put "65,90,192,214,216,222" into tItemCapList
      put "97,122,223,246,248,255" into tItemLowercaseList
   end if
   put the nativeCharToNum of pChar into tCharNum
   return checkLetter(tCharNum,tItemCapList,tItemLowercaseList)
end isLitteral

function checkLetter @pCharNum,@pItemCapList,@pItemLowercaseList
   repeat with x = 1 to the number of items of pItemLowercaseList step 2
      if pCharNum >= item x of pItemLowercaseList and pCharNum <= item x+1 of pItemLowercaseList then return true else next repeat
   end repeat
   repeat with x = 1 to the number of items of pItemCapList step 2
      if pCharNum >= item x of pItemCapList and pCharNum <= item x+1 of pItemCapList then return true else next repeat
   end repeat
   return false
end checkLetter




#####################
## Script of field "Tag List”, ID 1009 of CARD 1 of SUBSTACK Customize Keyboard Shortcuts of STACK STEP Transcription Module

on mouseUp
   local tHil,tAllFunctions,ot,ots,tLine2,tLine,tTag,tAllTags
   put the hilitedLines of fld "Tag List" of cd 1 into tHil
   if tHil <> 0 and tHil is not empty then
      set the hilitedLines of fld "Command List" of cd 1 to 0
      put empty into fld id 1014 of cd 1
      put empty into fld id 1015 of cd 1
      put line tHil of fld  "Tag List" of cd 1 into tTag
      put the cAllAssignments of stack "Assign Tags to Function Keys" into tAllFunctions
      set the wholeMatches to true
      put lineOffset(tTag,tAllFunctions) into ot
      if ot <> 0 then put "F"&ot into fld id 1014 of cd 1
      put the cAllTags of this stack into tAllTags
      if the platform is "MacOS" then
         replace "Ctrl" with "Command" in tAllTags
         replace "Alt+" with "Option+" in tAllTags
         replace "+Alt" with "+Option" in tAllTags
      else
         replace "Command+" with "Ctrl+" in tAllTags
         replace "Option+" with "Alt+" in tAllTags
         replace "+Option" with "+Alt" in tAllTags
      end if
      put lineOffsets(tTag&"|",tAllTags) into ots
      if ots <> 0 then
         put empty into tLine2
         repeat with r = 1 to the number of items of ots
            put line (item r of ots) of tAllTags into tLine
            if tLine begins with tTag&"|" then
               set the itemDel to "|"
               put item 2 to (the number of items of tLine) of tLine into tLine2
               set the itemDel to comma
               exit repeat
            end if
         end repeat
         replace "|" with cr in tLine2
         put tLine2 into line (the number of lines of fld id 1014 of cd 1)+1  of fld id 1014 of cd 1
      end if
   end if
end mouseUp

##TOOLTIP:
##Selecting any tag in this list allows you to assign it a keyboard shortcut
##that enters it in the desired field whenever you press the combination key.



#####################
## Script of field "Command List”, ID 1011 of CARD 1 of SUBSTACK Customize Keyboard Shortcuts of STACK STEP Transcription Module

on mouseUp
   local tHil,tCommand,tAllFunctions,tAllCommands,ot,ots,tLine2,tLine
   put the hilitedLines of fld "Command List" of cd 1 into tHil
   if tHil <> 0 and tHil is not empty then
      set the hilitedLines of fld "Tag List" of cd 1 to 0
      put empty into fld id 1014 of cd 1
      put empty into fld id 1015 of cd 1
      put line tHil of fld  "Command List" of cd 1 into tCommand
      put the cAllAssignments of stack "Assign Tags to Function Keys" into tAllFunctions
      set the wholeMatches to true
      put lineOffset(tCommand,tAllFunctions) into ot
      if ot <> 0 then put "F"&ot into fld id 1014 of cd 1
      put the cAllCommands of this stack into tAllCommands
      if the platform is "MacOS" then
         replace "Ctrl" with "Command" in tAllCommands
         replace "Alt+" with "Option+" in tAllCommands
         replace "+Alt" with "+Option" in tAllCommands
      else
         replace "Command+" with "Ctrl+" in tAllCommands
         replace "Option+" with "Alt+" in tAllCommands
         replace "+Option" with "+Alt" in tAllCommands
      end if
      put lineOffsets(tCommand&"|",tAllCommands) into ots
      if ots <> 0 then
         put empty into tLine2
         repeat with r = 1 to the number of items of ots
            put line (item r of ots) of tAllCommands into tLine
            if tLine begins with tCommand&"|" then
               set the itemDel to "|"
               put item 2 to (the number of items of tLine) of tLine into tLine2
               set the itemDel to comma
               exit repeat
            end if
         end repeat
         replace "|" with cr in tLine2
         put tLine2 into line (the number of lines of fld id 1014 of cd 1)+1  of fld id 1014 of cd 1
      end if
   end if
end mouseUp

##TOOLTIP:
##Selecting any command in this list allows you to assign it a keyboard
##shortcut that executes it whenever you press the combination key.



#####################
## Script of field "CombinationKey display”, ID 1015 of CARD 1 of SUBSTACK Customize Keyboard Shortcuts of STACK STEP Transcription Module

on keyUp whichKey
   set the visible of fld id 1007 of cd 1 of this stack to false
   put the cCombinationTemp of this stack into fld id 1015 of cd 1 of this stack
   select after fld id 1015 of cd 1 of this stack
   set the cCombinationTemp of this stack to empty
   if fld id 1015 of cd 1 of this stack is not empty then 
      put checkAssignment(fld id 1015 of cd 1 of this stack) into fld id 1007 of cd 1 of this stack
      if fld id 1007 of cd 1 of this stack is not empty then set the visible of fld id 1007 of cd 1 of this stack to true
   end if
end keyUp

on backSpaceKey
   put empty into fld id 1015 of cd 1 of this stack
   put empty into fld id 1007 of cd 1 of this stack
   set the visible of fld id 1007 of cd 1 of this stack to false
end backSpaceKey

function checkAssignment pCombination
   local tC,tAllCombinationKeys,ots,tLine2,tLine,tAllCommands
   if the hilitedLines of fld "Tag List" <> 0 then put "tag" into tC
   else if the hilitedLines of fld "Command List" <> 0 then put "command" into tC
   if tC is "tag" then
      put the cAllCombinationKeys of this stack into tAllCombinationKeys
      put lineOffsets(pCombination&"|",tAllCombinationKeys) into ots
      if ots <> 0 then
         put empty into tLine2
         repeat with r = 1 to the number of items of ots
            put line (item r of ots) of tAllCombinationKeys into tLine
            if tLine begins with pCombination&"|" then
               set the itemDel to "|"
               put item 2 to (the number of items of tLine) of tLine into tLine2
               set the itemDel to comma
               exit repeat
            end if
         end repeat
         if tLine2 is not empty then
            replace "|" with ";"&space in tLine2
            return  "Already assigned to " & tLine2
         end if
      end if
      return empty
   else if tC is "command" then
      put the cAllCombinationKeys of this stack into tAllCombinationKeys
      put the cAllCommands of this stack into tAllCommands
      put lineOffsets(pCombination,tAllCombinationKeys) into ots
      if ots <> 0 then
         put empty into tLine2
         repeat with r = 1 to the number of items of ots
            put line (item r of ots) of tAllCombinationKeys into tLine
            if tLine begins with pCombination&"|" then
               set the itemDel to "|"
               put item 2 to (the number of items of tLine) of tLine into tLine2
               set the itemDel to comma
               exit repeat
            end if
         end repeat
         if tLine2 is not empty then
            replace "|" with ";"&space in tLine2
            return  "Already assigned to " & tLine2
         end if
         return empty
      end if
   end if
   return empty
end checkAssignment

##TOOLTIP:
##Do not use function keys (customizable separately). Always use the
##Command (Mac) or Ctrl (PC) key combined or not with Shift or Option (Alt) key.
##On MacOS, do not use the “Control” key, which has no equivalent on PCs.



#####################
## Script of button "Unassign”, ID 1016 of CARD 1 of SUBSTACK Customize Keyboard Shortcuts of STACK STEP Transcription Module

on mouseUp
   local pComb,tC,tTag,tAllCombinationKeys,ots,tLine,ut,yt,tAllTags,tCommand,tAllCommands,tVB,ot,tXT
   if fld id 1014 of cd 1 is not empty and the hilitedLines of fld id 1014 of cd 1 <> 0 then
      put line (item 1 of  the hilitedLines of fld id 1014 of cd 1) of fld id 1014 of cd 1 into pComb
      if pComb begins with "F" then
         answer "Use the dialog window “Assign Tags to Function Keys” in order to unassign function keys."
         exit mouseUp
      end if
   end if
   if the hilitedLines of fld "Tag List" <> 0 then put "tag" into tC
   else if the hilitedLines of fld "Command List" <> 0 then put "command" into tC
   if tC is "tag" then
      put line (item 1 of the hilitedLines of fld "Tag List") of fld "Tag List" into tTag
      put the cAllCombinationKeys of this stack into tAllCombinationKeys
      if the platform is "MacOS" then
         replace "Ctrl" with "Command" in tAllCombinationKeys
         replace "Alt+" with "Option+" in tAllCombinationKeys
         replace "+Alt" with "+Option" in tAllCombinationKeys
      else
         replace "Command+" with "Ctrl+" in tAllCombinationKeys
         replace "Option+" with "Alt+" in tAllCombinationKeys
         replace "+Option" with "+Alt" in tAllCombinationKeys
      end if
      set the wholeMatches to false
      put lineOffsets(pComb,tAllCombinationKeys) into ots
      if ots <> 0 then
         repeat with x = 1 to the number of items of ots
            put line (item x of ots) of tAllCombinationKeys into tLine
            set the itemDel to "|"
            set the wholeMatches to true
            put itemOffset(pComb,tLine) into ut
            if ut <> 0 then 
               put itemOffset(tTag,tLine) into yt
               if yt <> 0 then
                  delete item yt of line (item x of ots) of tAllCombinationKeys
                  set the cAllCombinationKeys of this stack to tAllCombinationKeys
                  set the itemDel to comma
                  exit repeat
               end if
               exit repeat
            end if
         end repeat
         put the cAllTags of this stack into tAllTags
         if the platform is "MacOS" then
            replace "Ctrl" with "Command" in tAllTags
            replace "Alt+" with "Option+" in tAllTags
            replace "+Alt" with "+Option" in tAllTags
         else
            replace "Command+" with "Ctrl+" in tAllTags
            replace "Option+" with "Alt+" in tAllTags
            replace "+Option" with "+Alt" in tAllTags
         end if
         set the wholeMatches to false
         put lineOffsets(tTag,tAllTags) into ots
         if ots <> 0 then
            repeat with x = 1 to the number of items of ots
               put line (item x of ots) of tAllTags into tLine
               set the itemDel to "|"
               set the wholeMatches to true
               put itemOffset(tTag,tLine) into ut
               if ut <> 0 then 
                  put itemOffset(pComb,tLine) into yt
                  if yt <> 0 then
                     delete item yt of line (item x of ots) of tAllTags
                     set the cAllTags of this stack to tAllTags
                     set the itemDel to comma
                     exit repeat
                  end if
                  exit repeat
               end if
            end repeat
         end if
      end if
   else if tC is "command" then
      put line (item 1 of the hilitedLines of fld "Command List") of fld "Command List" into tCommand
      put the cAllCombinationKeys of this stack into tAllCombinationKeys
      if the platform is "MacOS" then
         replace "Ctrl" with "Command" in tAllCombinationKeys
         replace "Alt+" with "Option+" in tAllCombinationKeys
         replace "+Alt" with "+Option" in tAllCombinationKeys
      else
         replace "Command+" with "Ctrl+" in tAllCombinationKeys
         replace "Option+" with "Alt+" in tAllCombinationKeys
         replace "+Option" with "+Alt" in tAllCombinationKeys
      end if
      set the wholeMatches to false
      put lineOffsets(pComb,tAllCombinationKeys) into ots
      if ots <> 0 then
         repeat with x = 1 to the number of items of ots
            put line (item x of ots) of tAllCombinationKeys into tLine
            set the itemDel to "|"
            set the wholeMatches to true
            put itemOffset(pComb,tLine) into ut
            if ut <> 0 then 
               put itemOffset(tCommand,tLine) into yt
               if yt <> 0 then
                  delete item yt of line (item x of ots) of tAllCombinationKeys
                  set the cAllCombinationKeys of this stack to tAllCombinationKeys
                  set the itemDel to comma
                  exit repeat
               end if
               exit repeat
            end if
         end repeat
      end if
      put the cVisibleButtons of this stack into tVB
      put the cXMLTaggers of this stack into tXT
      set the wholeMatches to false
      put lineOffset(tCommand,tVB) into ot
      if ot <> 0 then
         put tCommand into line ot of tVB
         set the cVisibleButtons of this stack to tVB
      end if
      put lineOffset(tCommand,tXT) into ot
      if ot <> 0 then
         put tCommand into line ot of tXT
         set the cXMLTaggers of this stack to tXT
      end if
      put the cAllCommands of this stack into tAllCommands
      put lineOffsets(tCommand,tAllCommands) into ots
      if the platform is "MacOS" then
         replace "Ctrl" with "Command" in tAllCommands
         replace "Alt+" with "Option+" in tAllCommands
         replace "+Alt" with "+Option" in tAllCommands
      else
         replace "Command+" with "Ctrl+" in tAllCommands
         replace "Option+" with "Alt+" in tAllCommands
         replace "+Option" with "+Alt" in tAllCommands
      end if
      if ots <> 0 then
         repeat with x = 1 to the number of items of ots
            put line (item x of ots) of tAllCommands into tLine
            set the itemDel to "|"
            set the wholeMatches to true
            put itemOffset(tCommand,tLine) into ut
            if ut <> 0 then 
               put itemOffset(pComb,tLine) into yt
               if yt <> 0 then
                  delete item yt of line (item x of ots) of tAllCommands
                  set the cAllCommands of this stack to tAllCommands
                  set the itemDel to comma
                  exit repeat
               end if
               exit repeat
            end if
         end repeat
      end if
   end if
end mouseUp

##TOOLTIP:
##Delete the assignment attached to the selected combination key.
##This button does not unassign function keys (use the relevant command for that).



#####################
## Script of button "Reset All to Default”, ID 1018 of CARD 1 of SUBSTACK Customize Keyboard Shortcuts of STACK STEP Transcription Module

on mouseUp
   local tDefaultCombs,tDefaultTags,tDefaultCommands
   answer "Confirm you want to unassign all keyboard shortcuts you introduced yourself (this excludes function keys)." with "Cancel" or "Unassign all" as sheet
   if it is "Cancel" then exit to top
   put the cDefaultCombinationKeys of this stack into tDefaultCombs
   if the platform is "MacOS" then
      replace "Ctrl+" with "Command+" in tDefaultCombs
      replace "Alt+" with "Option+" in tDefaultCombs
      replace "+Alt" with "+Option" in tDefaultCombs
   else
      replace "Command+" with "Ctrl+" in tDefaultCombs
      replace "Option+" with "Alt+" in tDefaultCombs
      replace "+Option" with "+Alt" in tDefaultCombs
   end if
   set the cAllCombinationKeys of this stack to tDefaultCombs
   put the cDefaultAllTags of this stack into tDefaultTags
   if the platform is "MacOS" then
      replace "Ctrl+" with "Command+" in tDefaultTags
      replace "Alt+" with "Option+" in tDefaultTags
      replace "+Alt" with "+Option" in tDefaultTags
   else
      replace "Command+" with "Ctrl+" in tDefaultTags
      replace "Option+" with "Alt+" in tDefaultTags
      replace "+Option" with "+Alt" in tDefaultTags
   end if
   set the cAllTags of this stack to tDefaultTags
   put the cDefaultCommands of this stack into tDefaultCommands
   if the platform is "MacOS" then
      replace "Ctrl+" with "Command+" in tDefaultCommands
      replace "Alt+" with "Option+" in tDefaultCommands
      replace "+Alt" with "+Option" in tDefaultCommands
   else
      replace "Command+" with "Ctrl+" in tDefaultCommands
      replace "Option+" with "Alt+" in tDefaultCommands
      replace "+Option" with "+Alt" in tDefaultCommands
   end if
   set the cAllCommands of this stack to tDefaultCommands
end mouseUp


##TOOLTIP:
##Delete all customized command key or combination-key assignments and return to defaults.



#####################
## Script of button "Assign”, ID 1019 of CARD 1 of SUBSTACK Customize Keyboard Shortcuts of STACK STEP Transcription Module

on mouseUp
   local tC,pNewCombination,tTag,tAllTags,ots,ot,tAllCombinationKeys,tAllCommands,tCommand,tVB,tXT
   if fld id 1015 of cd 1 of this stack is empty then exit mouseUp
   put empty into tC
   put the cVisibleButtons of this stack into tVB
   put the cXMLTaggers of this stack into tXT
   put the cAllCombinationKeys of this stack into tAllCombinationKeys
   if the hilitedLines of fld "Tag List" of cd 1 of this stack <> 0 and the hilitedLines of fld "Tag List" of cd 1 of this stack <> empty then put "tag" into tC
   else if the hilitedLines of fld "Command List" of cd 1 of this stack <> 0 and the hilitedLines of fld "Command List" of cd 1 of this stack <> empty then put "command" into tC
   if tC is empty then exit mouseUp
   put fld id 1015 of cd 1 of this stack into pNewCombination
   if tC is "tag" then
      put line (item 1 of the hilitedLines of fld "Tag List" of cd 1 of this stack) of fld "Tag List" of cd 1 of this stack into tTag
      put the cAllTags of this stack into tAllTags
      set the wholeMatches to true
      put itemOffset(tTag,tAllTags) into ot
      if ot <>0 then
         put line (the number of lines of item 1 to ot of tAllTags) of tAllTags into ot
         put "|"&pNewCombination after line ot of tAllTags
         set the cAllTags of this stack to tAllTags
      end if
      set the wholeMatches to true
      put itemOffset(pNewCombination,tAllCombinationKeys) into ot
      if ot <>0 then
         put line (the number of lines of item 1 to ot of tAllCombinationKeys) of tAllCombinationKeys into ot
         put "|"&tTag after line ot of tAllCombinationKeys
      else
         put tTag&"|"&pNewCombination into line (the number of lines of tAllTags) + 1 of tAllTags
         put pNewCombination&"|"&tTag into line (the number of lines of tAllCombinationKeys) + 1 of tAllCombinationKeys
         set the cAllTags of this stack to tAllTags
         set the cAllCombinationKeys of this stack to tAllCombinationKeys
      end if
      put pNewCombination into line (the number of lines of fld id 1014 of cd 1 of this stack)+1 of fld id 1014 of cd 1 of this stack
   else if tC is "command" then
      put line (item 1 of the hilitedLines of fld "Command List" of cd 1 of this stack) of fld "Command List" of cd 1 of this stack into tCommand
      put the cAllCommands of this stack into tAllCommands
      set the wholeMatches to true
      set the itemDel to "|"
      put itemOffset(tCommand,tAllCommands) into ot
      if ot <>0 then
         put line (the number of lines of item 1 to ot of tAllCommands) of tAllCommands into ot
         put "|"&pNewCombination after line ot of tAllCommands
         set the cAllCommands of this stack to tAllCommands
      end if
      put itemOffset(tCommand,tVB) into ot
      if ot <>0 then
         put line (the number of lines of item 1 to ot of tVB) of tVB into ot
         put "|"&pNewCombination after line ot of tVB
         set the cVisibleButtons of this stack to tVB
      end if
      put itemOffset(tCommand,tXT) into ot
      if ot <>0 then
         put line (the number of lines of item 1 to ot of tXT) of tXT into ot
         put "|"&pNewCombination after line ot of tXT
         set the cXMLTaggers of this stack to tXT
      end if
      set the wholeMatches to true
      put itemOffset(pNewCombination,tAllCombinationKeys) into ot
      if ot <>0 then
         put line (the number of lines of item 1 to ot of tAllCombinationKeys) of tAllCombinationKeys into ot
         put "|"&tCommand after line ot of tAllCombinationKeys
      else
         put tCommand&"|"&pNewCombination into line (the number of lines of tAllCommands) + 1 of tAllCommands
         put pNewCombination&"|"&tCommand into line (the number of lines of tAllCombinationKeys) + 1 of tAllCombinationKeys
         set the cAllCommands of this stack to tAllCommands
         set the cAllCombinationKeys of this stack to tAllCombinationKeys
      end if
      put pNewCombination into line (the number of lines of fld id 1014 of cd 1 of this stack)+1 of fld id 1014 of cd 1 of this stack
   end if
end mouseUp

##TOOLTIP:
##Assign the new keyboard shortcut
##to the selected tag or command.



#####################
## Script of button "Add tag to list”, ID 1020 of CARD 1 of SUBSTACK Customize Keyboard Shortcuts of STACK STEP Transcription Module

on mouseUp
   local tFullTag,tAtts,tTL,tOneNine,tAllTags,tTag
   ask "Type the new tag followed by its attributes if any, all words separated by a space. Angle brackets, equal signs,"&\
   " and empty values will be provided automatically." titled "Add new tag" as sheet
   if the result is "Cancel" or it is empty then exit mouseUp
   put it into tTag
   replace "<" with empty in tTag
   replace ">" with empty in tTag
   replace "=" with empty in tTag
   replace quote with empty in tTag
   get the number of words of tTag
   put "<"&tTag&"></"&tTag&">" into tFullTag
   if it > 1 then
      put empty into tAtts
      repeat with y = 2 to it
         put space&(word y of tTag)&"="&quote&quote after tAtts
      end repeat
   end if
   put tAtts before char offset(">",tFullTag) of tFullTag
   put fld "Tag List" into tTL
   put line 1 to 9 of tTL into tOneNine
   delete line 1 to 9 of tTL
   put cr & tFullTag after tTL
   sort tTL ascending international
   put tOneNine&cr before tTL
   put tTL into fld "Tag List" of cd 1
   put the cAllTags of this stack into tAllTags
   put cr&tFullTag after tAllTags
   sort tAllTags ascending international
   set the cAllTags of this stack to tAllTags
end mouseUp

##TOOLTIP:
##Add a new tag (with or without one or more attributes
followed by an empty value) to the list below.



#####################
## Script of button "Current ShortCuts”, ID 1025 of CARD 1 of SUBSTACK Customize Keyboard Shortcuts of STACK STEP Transcription Module

on mouseUp
   lock screen
   get the left of this stack
   if the label of me is "View Current Shortcuts" then 
      collectCombinationKeys
      set the minWidth of this stack to "990"
      set the maxWidth of this stack to "1100"
      set the width of this stack to "990"
      set the label of me to "Hide Current Shortcuts"
      set the width of btn id 1027 of cd 1 to 100
   else 
      set the width of this stack to "643"
      set the minWidth of this stack to "643"
      set the maxWidth of this stack to "643"
      set the label of me to "View Current Shortcuts"
   end if
   set the left of this stack to it
end mouseUp

on collectCombinationKeys
   local tCombinations,tAllFunctions,ots,tLine,tFLine
   put the cAllCombinationKeys of this stack into tCombinations
   set the itemDel to "|"
   repeat with x = 1 to the number of lines of tCombinations
      put "|"&item 1 of line x of tCombinations after line x of tCombinations
      delete item 1 of line x of tCombinations
   end repeat
   set the itemDel to comma
   put the cAllAssignments of stack "Assign Tags to Function Keys" into tAllFunctions
   if char -1 of tAllFunctions is cr then delete char -1 of tAllFunctions
   repeat with x = 1 to the number of lines of tAllFunctions
      put line x of tAllFunctions into tFLine
      put lineOffsets(tFLine&"|",tCombinations) into ots
      if ots <> 0 then
         put empty into tLine
         repeat with r = 1 to the number of items of ots
            put line (item r of ots) of tCombinations into tLine
            if tLine begins with tFLine&"|" then
               set the itemDel to "|"
               if char -1 of tLine is "|" then put "F"&x after tLine else put "|F"&x after tLine
               set the itemDel to comma
               put tLine into line (item r of ots) of tCombinations
               exit repeat
            end if
         end repeat
      else
         put cr&tFLine&"|F"&x after tCombinations
      end if
   end repeat
   set the itemDel to "|"
   repeat with x = the number of lines of tCombinations down to 1
      if the number of items of line x of tCombinations = 1 then delete line x of tCombinations
      get offset("|",line x of tCombinations)
      put ": " into char it of line x of tCombinations
      replace "|" with comma&space in line x of tCombinations
   end repeat
   set the itemDel to comma
   sort tCombinations ascending international
   put tCombinations into fld id 1029 of cd 1 of this stack
   put tCombinations into fld id 1010 of cd 1 of stack "Shortcut Palette"
end collectCombinationKeys

##TOOLTIP:
##View or hide a list of current shortcuts.



#####################
#####################
## L. SUBSTACK Shortcut Palette of STACK STEP Transcription Module


#####################
## Script of SUBSTACK Shortcut Palette of STACK STEP Transcription Module


on preOpenStack
   set the loc of this stack to the screenLoc
end preOpenStack

on openStack
   checkLauncherWindow (the short name of this stack)
   pass openStack
end openStack

on colorLines
   local tLN
   lock screen
   put the number of lines of fld id 1010 of cd 1 into tLN
   repeat with i = 1 to tLN
      set the textStyle of char 1 to (offset(":",line i of fld id 1010 of cd 1)) of line i of fld id 1010 of cd 1 to "bold"
      set the foregroundColor of char 1 to (offset(":",line i of fld id 1010 of cd 1)) of line i of fld id 1010 of cd 1 to "#05007F"
   end repeat
   repeat with x = 1 to tLN step 2
      if x <>  tLN+1 then
         set the backgroundColor of line x of fld id 1010 of cd 1 to "#FFE39E"
         if x <> tLN then set the backgroundColor of line x+1 of fld id 1010 of cd 1 to "#BFDCFF"
      end if
   end repeat 
end colorLines




#####################
## Script of CARD 1 of SUBSTACK Shortcut Palette of STACK STEP Transcription Module

on openCard
   local tN,tFW
   lock screen
   collectCombinationKeys
   colorLines
   put 11 + ((the number of lines of fld id 1010 of cd 1)*16) into tN
   if tN > the minHeight of this stack then set the maxHeight of this stack to tN else set the maxHeight of this stack to the minHeight of this stack
   if the maxHeight of this stack > 900 then set the maxHeight of this stack to 900
   set the height of this stack to the maxHeight of this stack
   if fld id 1010 of cd 1 <> empty then
      put 0 into tFW
      repeat with x = 1 to the number of lines of fld id 1010 of cd 1
         get the formattedWidth of line x of fld id 1010 of cd 1
         if it > tFW then put it into tFW
      end repeat
      add 20 to tFW
      if tFW > the minWidth of this stack then set the maxWidth of this stack to tFW
      if tFW > 600 then 
         set the maxWidth of this stack to 600
         put 600 into tFW
      end if
      set the width of this stack to tFW
   end if
end openCard

on collectCombinationKeys
   local tCombinations,tAllFunctions,ots,r,tLine,x,tFLine
   put the cAllCombinationKeys of stack "Customize Keyboard Shortcuts" into tCombinations
   set the itemDel to "|"
   repeat with x = 1 to the number of lines of tCombinations
      put "|"&item 1 of line x of tCombinations after line x of tCombinations
      delete item 1 of line x of tCombinations
   end repeat
   set the itemDel to comma
   put the cAllAssignments of stack "Assign Tags to Function Keys" into tAllFunctions
   if char -1 of tAllFunctions is cr then delete char -1 of tAllFunctions
   repeat with x = 1 to the number of lines of tAllFunctions
      put line x of tAllFunctions into tFLine
      put lineOffsets(tFLine&"|",tCombinations) into ots
      if ots <> 0 then
         put empty into tLine
         repeat with r = 1 to the number of items of ots
            put line (item r of ots) of tCombinations into tLine
            if tLine begins with tFLine&"|" then
               set the itemDel to "|"
               if char -1 of tLine is "|" then put "F"&x after tLine else put "|F"&x after tLine
               set the itemDel to comma
               put tLine into line (item r of ots) of tCombinations
               exit repeat
            end if
         end repeat
      else
         put cr&tFLine&"|F"&x after tCombinations
      end if
   end repeat
   set the itemDel to "|"
   repeat with x = the number of lines of tCombinations down to 1
      if the number of items of line x of tCombinations = 1 then delete line x of tCombinations
      get offset("|",line x of tCombinations)
      put ": " into char it of line x of tCombinations
      replace "|" with comma&space in line x of tCombinations
   end repeat
   set the itemDel to comma
   sort tCombinations ascending international
   put tCombinations into fld id 1010 of cd 1
end collectCombinationKeys




#####################
## Script of field "ShortCuts”, ID 1010 of CARD 1 of SUBSTACK Shortcut Palette of STACK STEP Transcription Module

on mouseUp
   local tList,tList2,tL1,tL2
   lock screen
   put fld id 1010 of cd 1 into tList
   set the itemDel to ":"
   replace "<" with "&lt;" in tList
   replace ">" with "&gt;" in tList
   repeat for each line tLine in tList
      get char 2 to -1 of item 2 of tLine
      if ", F" is in it then
         set the itemDel to comma
         put "<p><b>"&char 1 to -1 of item 1 of it&":</b> " into tL1
         put "<p><b>"&char 2 to -1 of item 2 of it&":</b> " into tL2
         set the itemDel to ":"
         put item 1 of tLine &"</p>"&cr after tL1
         put item 1 of tLine &"</p>"&cr after tL2
         put tL1&tL2 after tList2
      else
         put "<p><b>"&char 2 to -1 of item 2 of tLine&":</b> "&item 1 of tLine &"</p>"&cr after tList2
      end if
   end repeat
   delete char -1 of tList2
   sort lines of tList2 by FNum(segment 1 of item 1 of each)
   replace "F0" with "F" in tList2
   repeat with i = the number of lines of tList2 down to 2
      if item 1 of line i of tList2 = item 1 of line i-1 of tList2 then
         put ", "&trueword -2 of line i of tList2 after trueword -2 of line i-1 of tList2
         delete line i of tList2
      end if
   end repeat
   set the HTMLText of fld id 1010 of cd 1 to tList2
   colorLines
   if char 1 of me is "<" then set the toolTip of me to "Click this field to sort the list by keyboard combinations."
   else  set the toolTip of me to "Click this field to sort the list by tag or command name."
end mouseUp

function FNum pSeg
   if char 7 of pSeg begins with "F" and char 8 of pSeg is a number  and char 9 of pSeg is not a number then 
      put 0 after char 7 of pSeg
   end if
   return pSeg
end FNum


##TOOLTIP:
##Click this field to sort the list by tag or command name.



#####################
#####################
## M. SUBSTACK Customize Pull-Down Tag Menus of STACK STEP Transcription Module


#####################
## Script of SUBSTACK Customize Pull-Down Tag Menus of STACK STEP Transcription Module


on preOpenStack
   set the loc of this stack to the screenLoc
end preOpenStack

on openStack
   checkLauncherWindow (the short name of this stack)
   pass openStack
end openStack

   put "STEP Transcription Module" into tStackName
   put the customKeys of stack tStackName into tCustoms
   filter tCustoms with "*TEI"
   replace "TEI" with empty in tCustoms
   sort lines of tCustoms ascending international
   filter tCustoms without "*_*"
   put tCustoms into btn id 1025 of cd 1



#####################
## Script of CARD 1 of SUBSTACK Customize Pull-Down Tag Menus of STACK STEP Transcription Module

local tField              # LONG ID OF THE TARGET FIELD
local tAllowDrag      # ENABLE-DRAG SWITCH
local tClickNum       # STORE NUMBER OF THE CLICKED LINE
local tContent         # STORE CONTENT OF THE CLICKED LINE
local tBuildBusy       # VARIABLE TO CHECK IF DRAG IMAGE IS BEING CREATED
local tVirtualHilite    # STORE THE VIRTUAL HILITED LINE
local tAllowScroll     # VARIABLE FOR CONTROLLING AUTO-SCROLL OF FIELD
local tDragValid       # VARIABLE TO CHECK VALID DRAG EVENT

# NOTE: SCROLLBAR WIDTH IS ASSUMED TO BE 16 (VALUE IS USED BELOW)

on enableReorder targetField
  # CHECK FOR EMPTY SPACE IN FIELD
   local S
   if word 2 of the clickLine = "" then
    set hilitedLines of targetField to 0
    exit enableReorder
  end if
  repeat for each item P in "tAllowDrag,tClickNum,tContent,tBuildBusy,tVirtualHilite,tAllowScroll,tDragValid"
    do "put empty into" && P
  end repeat
  put targetField into tField
  put true into tAllowDrag
  put scroll of tField into S
  put the hilitedLines of tField into tClickNum
  put line (item 1 of tClickNum) of value(tField) into tContent
end enableReorder


on trackReorder X,Y
   local cX,cY,H
   if not tAllowDrag then exit trackReorder
   if not there is an image "_dragger" then
      put item 1 of the clickLoc into cX
      put item 2 of the clickLoc into cY
      if X < cX - 3 or X > cX + 3 or Y < cY - 3 or Y > cY + 3 then
         if not tBuildBusy then
            put true into tBuildBusy
            buildDragger
         end if
      else exit trackReorder
   end if
   if not there is an image "_dragger" then exit trackReorder
   subtract (item 1 of the clickLoc - left of tField) from X # - tOffset
   put (height of img "_dragger") div 2 into H
   set topLeft of img "_dragger" to X,Y-H
   if Y > bottom of tField and "autoScrollTheField" is not in pendingMessages() then autoScrollTheField 1
   if Y < top of tField and "autoScrollTheField" is not in pendingMessages() then autoScrollTheField -1
   put selectListLine() into tVirtualHilite
   if noFlyZone() then
      put false into tDragValid
      put false into tAllowScroll
      hide grc "_dragpointer"
   else
      put true into tDragValid
      put true into tAllowScroll
      positionPointer Y
      if not the vis of grc "_dragpointer" then show grc "_dragpointer"
   end if
end trackReorder

on finishReorder
   local VH
   put false into tAllowDrag
  put false into tBuildBusy
  # set listBehavior of tField to true
  if there is a grc "_dragpointer" then delete grc "_dragpointer"
  if there is a grc "_linehiliter" then delete grc "_linehiliter"
  if there is an img "_dragger" then
    delete img "_dragger"
    if not tDragValid then
      do "delete line (item 1 of tClickNum) of" && tField
      set hilitedLines of tField to 0
      select empty
      blowTheLine
      exit finishReorder
    end if
    if tDragValid then
      # A DRAG EVENT TOOK PLACE...
      put tVirtualHilite into VH
      if (VH = number of lines of value(tField)) and \
                (mouseV() > item 4 of formattedRect of last line of tField) then
        # PLACE DRAGGED LINE AFTER LAST LINE OF FIELD
        do "put cr & tContent after line VH of" && tField
      else
        # PLACE DRAGGED LINE BEFORE CURRENT HILITED LINE OF FIELD
        do "put tContent & cr before line VH of" && tField
      end if
      # DELETE ORIGINALLY CLICKED LINE AND HILITE REPOSITIONED LINE
      if VH <= item 1 of tClickNum then
        add 1 to item 1 of tClickNum
      else add -1 to VH
      do "delete line (item 1 of tClickNum) of" && tField
      do "if mouseV() > item 4 of formattedRect of last line of" && tField && "then add 1 to VH"
      set the hilitedLines of tField to VH
    end if
  end if
end finishReorder


on buildDragger
   local tRect,globalRect,draggerData
   # BUILD LINEHILITER & DRAGPOINTER GRAPHICS
  buildHiliter
  buildPointer
  # ESTABLISH RECT FOR SCREEN CAPTURE
  put the formattedRect of line (item 1 of tClickNum) of tField into tRect
  put left of tField + borderWidth of tField into item 1 of tRect
  put right of tField - 16 - borderWidth of tField into item 3 of tRect # - tOffset
  put globalLoc(item 1 of tRect & "," & item 2 of tRect) into globalRect
  put "," & globalLoc(item 3 of tRect & "," & item 4 of tRect) after globalRect
  # DISABLE LIST BEHAVIOR SO TEXT STAYS VISIBLE IN FIELD
  set listBehavior of tField to false
  set rect of grc "_linehiliter" to tRect
  show grc "_linehiliter"
  reset the templateImage
  export snapshot from rect globalRect to draggerData as PNG
  set rect of the templateImage to tRect
  set showBorder of the templateImage to false
  set text of the templateImage to draggerData
  set blendLevel of the templateImage to 40
  set name of the templateImage to "_dragger"
  create img
  reset the templateImage
  put selectListLine() into tVirtualHilite
  hide grc "_linehiliter"
  positionPointer mouseV()
  show grc "_dragpointer"
  set listBehavior of tField to true
  set hilitedLines of tField to tClickNum
end buildDragger


function selectListLine
   local T,H,DH,V
   # RETURNS THE "VIRTUAL" HILITEDLINE OF THE FIELD
   put the top of tField - the scroll of tField into T
   put the effective textHeight of tField into H
   put height of img "_dragger" div 2 into DH
   subtract (effective textHeight of tField - effective textSize of tField) from DH
   put (mouseV() - T + DH) div H + 1 into V
   put min(max(V,1),number of lines of value(tField)) into V
   return V
end selectListLine


function noFlyZone
   local V,tRect
   # THIS DETERMINES THE "LIVE" REGION OUTSIDE THE FIELD;
   # DRAGGING BEYOND THIS REGION HALTS THE DRAG EVENT
   put false into V
   put rect of tField into tRect
   add -5 to item 1 of tRect
   add -20 to item 2 of tRect
   add 5 to item 3 of tRect
   add 20 to item 4 of tRect
   get loc of img "_dragger"
   if item 1 of it < item 1 of tRect or item 1 of it > item 3 of tRect then put true into V
   if item 2 of it < item 2 of tRect or item 2 of it > item 4 of tRect then put true into V
   return V
end noFlyZone


on positionPointer Y
   local B,tEND,S
   put max(top of tField + 4,min(item 2 of formattedRect of line tVirtualHilite of tField,bottom of tField - 4)) into B
   put min(item 4 of formattedRect of last line of tField,bottom of tField - 4) into tEND
   if (selectListLine() >= number of lines of value(tField)) and (Y > tEND) then put tEND into B
   set top of grc "_dragpointer" to B - 4 # ACCOUNT FOR HEIGHT OF DRAGPOINTER
end positionPointer


on autoScrollTheField pNum
   local S
   if not tAllowScroll then exit autoScrollTheField
  if pNum < 0 and scroll of tField = 0 then exit autoScrollTheField
  if pNum > 0 and scroll of tField + height of tField + margins of tField > formattedheight of tField then exit autoScrollTheField
  if mouseV() > top of tField and mouseV() < bottom of tField then exit autoScrollTheField
  put pNum * (effective textSize of tField) into S
  set scroll of tField to scroll of tField + S
  send "autoScrollTheField" && pNum to me in 80 millisecs
end autoScrollTheField


on buildPointer
   local tPoints,L,R
   # CREATE POINTLIST FOR DRAGPOINTER
  set itemDel to "/"
  repeat for each item P in "0,0/3,3/100,3/103,0/103,7/100,4/3,4/0,7/0,0"
    put P & cr after tPoints
  end repeat
  delete last char of tPoints
  set itemDel to ","
  # SIZE POINTER TO WIDTH OF FIELD MINUS SCROLLBAR WIDTH
  put left of tField + 2 into L
  put right of tField - 16 - 2 into R
  repeat with N = 1 to 9
    if N is in "1,8,9" then put L into item 1 of line N of tPoints
    if N is in "2,7" then put L+3 into item 1 of line N of tPoints
    if N is in "3,6" then put R-3 into item 1 of line N of tPoints
    if N is in "4,5" then put R into item 1 of line N of tPoints
  end repeat
  # PREPARE TEMPLATEGRAPHIC
  set vis of the templateGraphic to false
  set the filled of the templateGraphic to true
  set the backColor of the templateGraphic to "black"
  set style of the templateGraphic to "polygon"
  set name of the templateGraphic to "_dragpointer"
  create grc
  set points of grc "_dragpointer" to tPoints
  reset the templateGraphic
end buildPointer


on buildHiliter
  set vis of the templateGraphic to false
  set the filled of the templateGraphic to false
  set the foreColor of the templateGraphic to "black"
  set style of the templateGraphic to "rectangle"
  set name of the templateGraphic to "_linehiliter"
  create grc
  reset the templateGraphic
end buildHiliter


# OPTIONAL HANDLER
on blowTheLine
   local tProp
   if the uFrame1 of tField = "" then exit blowTheLine
  set loc of the templateImage to mouseH(),mouseV()
  set name of the templateImage to "_xplode"
  create img
  choose browse tool
  reset the templateImage
  repeat with N = 1 to 16
    put ("uFrame" & N) into tProp
    put the tProp of tField into img "_xplode"
    wait 50 milliseconds with messages
  end repeat
  delete img "_xplode"
end blowTheLine

on openCard
   local tStackName,tCustoms
   put "STEP Transcription Module" into tStackName
   put the customKeys of stack tStackName into tCustoms
   filter tCustoms with "*TEI"
   replace "TEI" with empty in tCustoms
   sort lines of tCustoms ascending international
   filter tCustoms without "*_*"
   put tCustoms into btn id 1018 of cd 1
   send "menuPick"&&"Transcription" to btn id 1015 of cd 1
   select line 1 of btn id 1015 of cd 1
   put fld id 1009 of cd 1 into btn id 6114 of cd 1
   put fld id 1012 of cd 1 into btn id 6115 of cd 1
   set the label of btn id 6114 of cd 1 to "Current" && line (the menuHistory of btn id 1015 of cd 1) of btn id 1015 of cd 1 && "Menu"
   set the label of btn id 6115 of cd 1 to "New" && line (the menuHistory of btn id 1015 of cd 1) of btn id 1015 of cd 1 && "Menu"
end openCard

on closeCard
   put empty into fld id 6058 of cd 1
end closeCard

on recordScroll
   set the cVScroll of fld id 1012 of cd 1 to the vScroll of fld id 1012 of cd 1
end recordScroll

on resetScroll
   set the vScroll of fld id 1012 of cd 1 to the cVScroll of fld id 1012 of cd 1
end resetScroll

on float pmsg--behaves like a tooltip
   local pExpanded
   put desabbreviateSomeTags(pmsg) into pExpanded
   if pExpanded is not empty then 
      if pExpanded is not in fld "Floater" of cd 1 then set the vis of fld "Floater" of cd 1 to false
      put pExpanded into fld "Floater" of cd 1
      set the height of fld "Floater" of cd 1 to (the formattedHeight of fld "Floater" of cd 1)/*-6*/
      set the dontWrap of fld "Floater" to true
      set the textAlign of fld "Floater" to "center"
      set the width of fld "Floater" of cd 1 to (the formattedWidth of fld "Floater" of cd 1)-4
      set the topRight of  fld "Floater" of cd 1 to the topLeft of fld id 6058 of cd 1
      set the vis of fld "Floater" of cd 1 to true
   else
      set the vis of fld "Floater" of cd 1 to false
   end if
end float

function desabbreviateSomeTags pTag
   local tTagAbbList,ots,y
   put the cTEITagsAndAbbrev of stack "TEI Tag Customization" into tTagAbbList
   put lineOffsets(pTag&"TEI",tTagAbbList) into ots
   if ots <> 0 then
      repeat with x = 1 to the number of items of ots
         if line (item x of ots) of tTagAbbList begins with pTag&"TEI" and "|" is in line (item x of ots) of tTagAbbList then 
            put item x of ots into y
            set the itemDel to "|"
            return item 2 of line y of tTagAbbList
         else 
            set the itemDel to comma
            next repeat
         end if
      end repeat
   end if
   return empty
end desabbreviateSomeTags




#####################
## Script of button "Tab Menu”, ID 1015 of CARD 1 of SUBSTACK Customize Pull-Down Tag Menus of STACK STEP Transcription Module

on mouseEnter
   set the cMenuHistory of btn id 1015 of cd 1 to the menuHistory of btn id 1015 of cd 1
   get the cMenuHistory of btn id 1015 of cd 1
   switch it
      case 1
         set the cTranscriptionMenu of btn id 1015 of cd 1 to fld id 1012 of cd 1
         break
      case 2
         set the cStructureMenu of btn id 1015 of cd 1 to fld id 1012 of cd 1
         break
      case 3
         set the cDescriptionMenu of btn id 1015 of cd 1 to fld id 1012 of cd 1
         break
   end switch
end mouseEnter

on menuPick pItemName
   put "STEP Transcription Module" into tStackName
   switch pItemName
      case "Transcription"
         put btn id 1008 of cd 1 of stack tStackName into fld id 1009 of cd 1
         put "LIST OF TRANSCRIPTION TAGS TO BE EDITED OR REARRANGED" into fld id 1005 of cd 1
         put "TRANSCRIPTION TAGS REARRANGED" into fld id 1008 of cd 1
         put "The transcription tag menu is in the pull-down menu button under “Alteration tags” at the top center of the STEP Transcriptor window." into fld id 6053 of cd 1
         put the cTranscriptionMenu of btn id 1015 of cd 1 into fld id 1012 of cd 1
         break 
      case "Type/Structure"
         put btn id 1034 of cd 1 of stack tStackName into fld id 1009 of cd 1
         put "LIST OF STRUCTURE TAGS TO BE EDITED OR REARRANGED" into fld id 1005 of cd 1
         put "STRUCTURE TAGS REARRANGED" into fld id 1008 of cd 1
         put "The structure tag menu is in the pull-down menu button under “Type/Structure” at the top center of the STEP Transcriptor window." into fld id 6053 of cd 1
         put the cStructureMenu of btn id 1015 of cd 1 into fld id 1012 of cd 1
         break 
      case "Description"
         put btn id 1038 of cd 1 of stack tStackName into fld id 1009 of cd 1
         put "LIST OF DESCRIPTION TAGS TO BE EDITED OR REARRANGED" into fld id 1005 of cd 1
         put "DESCRIPTION TAGS REARRANGED" into fld id 1008 of cd 1
         put "The description tag menu is in the pull-down menu button under “Description tags” at the top center of the STEP Transcriptor window." into fld id 6053 of cd 1
         put the cDescriptionMenu of btn id 1015 of cd 1 into fld id 1012 of cd 1
         break 
   end switch
   set the label of btn id 6114 of cd 1 to "Current" && line (the menuHistory of btn id 1015 of cd 1) of btn id 1015 of cd 1 && "Menu"
   set the label of btn id 6115 of cd 1 to "New" && line (the menuHistory of btn id 1015 of cd 1) of btn id 1015 of cd 1 && "Menu"
end menuPick

##TOOLTIP:
##Select the pull-down menu the content of which you want to modify.



#####################
## Script of button "Deselect Lines”, ID 1004 of CARD 1 of SUBSTACK Customize Pull-Down Tag Menus of STACK STEP Transcription Module

on mouseUp
   set the hilitedLines of fld id 1009 of cd 1 to 0
   set the hilitedLines of fld id 1012 of cd 1 to 0
end mouseUp

##TOOLTIP:
##Deselect the lines in either field.



#####################
## Script of image "rightinv.gif”, ID 1006 of CARD 1 of SUBSTACK Customize Pull-Down Tag Menus of STACK STEP Transcription Module

on mouseUp
   if fld id 1009 of cd 1 is empty then exit mouseUp
   if the hilitedLines of fld id 1009 of cd 1 is empty then 
      put fld id 1009 of cd 1 into line (the number of lines of fld id 1012 of cd 1) + 1 of fld id 1012 of cd 1
   else
      repeat with x = 1 to the number of items of the hilitedLines of fld id 1009 of cd 1
         put line (item x  of the hilitedLines of fld id 1009 of cd 1) of fld id 1009 of cd 1 into line (the number of lines of fld id 1012 of cd 1) + 1 of fld id 1012 of cd 1
      end repeat
   end if
end mouseUp

##TOOLTIP:
##Add either the selected lines or the entire content of
the left field to the content of the grey field at right.



#####################
## Script of field "Reordered menu tags”, ID 1012 of CARD 1 of SUBSTACK Customize Pull-Down Tag Menus of STACK STEP Transcription Module

on mouseDown
   put the hilitedLines of me into ots
   if ots <> 0 and the number of items of ots > 1 then pass mouseDown
   enableReorder (long id of me)
end mouseDown

on mouseMove X,Y
  put the hilitedLines of me into ots
   if ots <> 0 and the number of items of ots > 1 then pass mouseMove
   trackReorder X,Y
end mouseMove

on mouseUp
   put the hilitedLines of me into ots
   if ots <> 0 and the number of items of ots > 1 then pass mouseUp
   finishReorder
end mouseUp

on mouseRelease
   put the hilitedLines of me into ots
   if ots <> 0 and the number of items of ots > 1 then pass mouseRelease
   finishReorder
end mouseRelease

on backSpaceKey
   put empty into line (word 2 of the selectedLine) of fld id 1012 of cd 1
   filter fld id 1012 without empty
end backSpaceKey



##TOOLTIP:
##Drag a line up or down with the mouse pointer.
##Drag a line out of the field to delete it.
##elect lines by clicking each one.



#####################
## Script of button "Insert Tag Category”, ID 1017 of CARD 1 of SUBSTACK Customize Pull-Down Tag Menus of STACK STEP Transcription Module

on mouseUp
   put the hilitedLines of fld id 1012 of cd 1 into tHils
   if tHils is empty or tHils is 0 then exit mouseUp
   recordScroll
   put fld id 1012 of cd 1 into tTagList
   put item 1 of tHils into tLineNum
   ask "Type the name of the category to be inserted above the selected lines in the blue field." with "Cancel" or "Insert" as sheet
   if the result is "Cancel" or it is empty then exit mouseUp
   repeat with x = 1 to (the number of items of tHils)
      put tab before line (item x of tHils) of tTagList
   end repeat
   put it & cr before line tLineNum of tTagList
   put tTagList into fld id 1012
   resetScroll
end mouseUp

##TOOLTIP:
##Insert tag category ABOVE PRESELECTED LINES falling
##within that category in the grey field. Ex.: “Divisions” as a
##tag category that includes “div, div1, div2, div3, div4, div5.”
##First insert new tags before heading them with a new category.



#####################
## Script of button "Choose New TEI Tag”, ID 1018 of CARD 1 of SUBSTACK Customize Pull-Down Tag Menus of STACK STEP Transcription Module

on menuPick pItemName
   put pItemName into fld id 6058 of cd 1
end menuPick

##TOOLTIP:
##Choose a TEI tag in this menu, or type
##a valid one directly in the field below.



#####################
## Script of button "Set Pull-Down Menu”, ID 6020 of CARD 1 of SUBSTACK Customize Pull-Down Tag Menus of STACK STEP Transcription Module

on mouseUp
   if fld id 1012 of cd 1 is empty then exit mouseUp
   put line (the menuHistory of btn id 1015 of cd 1) of btn id 1015 of cd 1 into tTagMenu
   answer "Confirm you want to replace the content of the "&tTagMenu&" pull-down menu button with that of the blue field." with "Cancel" or "OK"
   if it is "OK" then
      put fld id 1012 of cd 1 into tTagList
      put "STEP Transcription Module" into tStackName
      switch tTagMenu
         case "Transcription"
            put tTagList into btn id 1008 of cd 1 of stack tStackName
            break 
         case "Type/Structure"
            put tTagList into btn id 1034 of cd 1 of stack tStackName
            break 
         case "Description"
            put tTagList into btn id 1038 of cd 1 of stack tStackName
            break 
      end switch
      send "menuPick"&&tTagMenu to btn id 1015 of cd 1
   end if
end mouseUp

on mouseEnter
   set the cMenuHistory of btn id 1015 of cd 1 to the menuHistory of btn id 1015 of cd 1
   get the cMenuHistory of btn id 1015 of cd 1
   switch it
      case 1
         set the cTranscriptionMenu of btn id 1015 of cd 1 to fld id 1012 of cd 1
         break
      case 2
         set the cStructureMenu of btn id 1015 of cd 1 to fld id 1012 of cd 1
         break
      case 3
         set the cDescriptionMenu of btn id 1015 of cd 1 to fld id 1012 of cd 1
         break
   end switch
end mouseEnter


##TOOLTIP:
##Replace the content of the corresponding pull-down menu in the
##STEP Transcription Module window with the grey field content.


#####################
## Script of button "Delete Selected Tag”, ID 6054 of CARD 1 of SUBSTACK Customize Pull-Down Tag Menus of STACK STEP Transcription Module

on mouseUp
   put the hilitedLines of fld id 1012 of cd 1 into tHils
   if tHils is empty or tHils is 0 then exit mouseUp
   recordScroll
   put fld id 1012 of cd 1 into tTagList
   put lineOffset("In-house messages",tTagList) into ot
   repeat with x = (the number of items of tHils) down to 1
      if line (item x of tHils) of tTagList is "anchor+note" then
         answer "Tag “anchor+note” is special: it creates an elaborate sequence of tags with attributes. Are you sure you want to delete it?" with "OK" or "Cancel" as sheet
         if it is "Cancel" then next repeat
      end if
      if ot = 0 then
         delete line (item x of tHils) of tTagList
      else
         if (item x of tHils) < ot-1 then 
            delete line (item x of tHils) of tTagList
         else 
            answer "Please do not delete the special, non-TEI, “in-house messages” tags. They are used for internal communication between transcribers and editors." as sheet
            exit mouseUp
         end if
      end if
   end repeat
   put tTagList into fld id 1012 of cd 1
   resetScroll
end mouseUp

##TOOLTIP:
##Delete selected line(s) in the grey field.



#####################
## Script of field "New Tag Field”, ID 6058 of CARD 1 of SUBSTACK Customize Pull-Down Tag Menus of STACK STEP Transcription Module

on mouseEnter 
   if fld id 6058 of cd 1 is empty then pass mouseEnter
   float the text of me
end mouseEnter

on mouseLeave
   set the vis of fld "Floater" of cd 1 to false
end mouseLeave

on returnInField
   send mouseUp to btn id 6059 of cd 1
end returnInField

##TOOLTIP:
##Type the new valid TEI tag, or 
##choose one in the menu above.



#####################
## Script of button "Insert New TEI Tag”, ID 6059 of CARD 1 of SUBSTACK Customize Pull-Down Tag Menus of STACK STEP Transcription Module

on mouseUp
   put fld id 6058 of cd 1 into pTag
   if pTag is empty then exit mouseUp
   if "/" is in pTag and "//" is not in pTag then put "/" after char offset("/",pTag) of pTag
   put the hilitedLines of fld id 1012 of cd 1 into tHils
   if tHils is empty or tHils is 0 then exit mouseUp
   recordScroll
   put fld id 1012 of cd 1 into tTagList
   put lineOffset("In-house messages",tTagList) into ot
   put item 1 of tHils into tLineNum
   if the menuHistory of btn id 1015 of cd 1 is 1 then
      put  empty into tTab
   else if the menuHistory of btn id 1015 of cd 1 is 3 then
      put tab into tTab
   else if the menuHistory of btn id 1015 of cd 1 is 2 then
      if (line tLineNum of tTagList begins with "divisions") or (line tLineNum of tTagList begins with tab) then put tab into tTab else put empty into tTab
   end if
   if ot = 0 then
      put cr&tTab&pTag after line tLineNum of tTagList
   else
      if tLineNum < ot-1 then 
         put cr&tTab&pTag after line tLineNum of tTagList
      else if tLineNum > ot-1 and the menuHistory of btn id 1015 of cd 1 is 2 then
         answer "Please do not insert a TEI tag within or underneath the “in-house messages” tags. The latter are used for internal communication between transcribers and editors and cannot be edited." as sheet
         exit mouseUp
      end if
   end if
   put tTagList into fld id 1012 of cd 1
   resetScroll
   put empty into fld id 6058 of cd 1
end mouseUp

on mouseEnter 
   if fld id 6058 of cd 1 is empty then pass mouseEnter
   float the text of fld id 6058 of cd 1
end mouseEnter

on mouseLeave
   set the vis of fld "Floater" of cd 1 to false
end mouseLeave

##TOOLTIP:
##Insert the TEI tag shown in the field above
##BELOW the selected line in the grey field.



#####################
## Script of button "Insert Separator Line”, ID 6063 of CARD 1 of SUBSTACK Customize Pull-Down Tag Menus of STACK STEP Transcription Module

on mouseUp
   put the hilitedLines of fld id 1012 of cd 1 into tHils
   if tHils is empty or tHils is 0 then exit mouseUp
   recordScroll
   put fld id 1012 of cd 1 into tTagList
   put lineOffset("In-house messages",tTagList) into ot
   put item -1 of tHils into tLineNum
   if ot = 0 then
      put cr&"-" after line (item -1 of tHils) of tTagList
   else
      if tLineNum < ot-1 then 
         put cr&"-" after line tLineNum of tTagList
      else if tLineNum > ot-1 and the menuHistory of btn id 1015 of cd 1 is 2 then
         answer "Please do not insert a separator line within or underneath the “in-house messages” tags. The latter are used for internal communication between transcribers and editors." as sheet
         exit mouseUp
      end if
   end if
   put tTagList into fld id 1012 of cd 1
   resetScroll
end mouseUp

##TOOLTIP:
##Insert a separator line BELOW the
##selected line in the grey field.



#####################
## Script of button "Delete Separator Line”, ID 6064 of CARD 1 of SUBSTACK Customize Pull-Down Tag Menus of STACK STEP Transcription Module

on mouseUp
   put the hilitedLines of fld id 1012 of cd 1 into tHils
   if tHils is empty or tHils is 0 then exit mouseUp
   recordScroll
   put fld id 1012 of cd 1 into tTagList
   put lineOffset("In-house messages",tTagList) into ot
   repeat with x = (the number of items of tHils) down to 1
      if line (item x of tHils) of tTagList is "-" then
         if ot = 0 then
            delete line (item x of tHils) of tTagList
         else
            if item x of tHils < (ot - 1) then 
               delete line (item x of tHils) of tTagList
            end if
         end if
      end if
   end repeat
   put tTagList into fld id 1012 of cd 1
   resetScroll
end mouseUp

##TOOLTIP:
##Delete selected separator line in the grey field.



#####################
## Script of button "Clear All Fields”, ID 6068 of CARD 1 of SUBSTACK Customize Pull-Down Tag Menus of STACK STEP Transcription Module

on mouseUp
   put empty into fld id 1012
   put empty into fld id 6058
   set the cTranscriptionMenu of btn id 1015 of cd 1 to empty
   set the cDescriptionMenu of btn id 1015 of cd 1 to empty
   set the cStructureMenu of btn id 1015 of cd 1 to empty
end mouseUp

##TOOLTIP:
##Delete the content of all fields except the one on the left.



#####################
## Script of button "Table of TEI Elements”, ID 6077 of CARD 1 of SUBSTACK Customize Pull-Down Tag Menus of STACK STEP Transcription Module

on mouseUp
   launch URL "http://www.tei-c.org/Vault/P5/1.0.1/doc/tei-p5-doc/html/REF-ELEMENTS.html"
end mouseUp

##TOOLTIP:
##Go to "http://www.tei-c.org/Vault/P5/1.0.1/doc/tei-p5-doc/html/REF-ELEMENTS.html"



#####################
## Script of button "Reset”, ID 6078 of CARD 1 of SUBSTACK Customize Pull-Down Tag Menus of STACK STEP Transcription Module

on mouseUp
   put line (the menuHistory of btn id 1015 of cd 1) of btn id 1015 of cd 1 into tTagMenu
   answer "Confirm you want to replace the content of the "&tTagMenu&" pop-up menu button with the default content." with "Cancel" or "OK"
   if it is "OK" then
      put "STEP Transcription Module" into tStackName
      switch tTagMenu
         case "Transcription"
            put the cTranscriptionDefault of this stack into btn id 1008 of cd 1 of stack tStackName
            break 
         case "Type/Structure"
            put the cTypeStructureDefault of this stack into btn id 1034 of cd 1 of stack tStackName
            break 
         case "Description"
            put the cDescriptionDefault of this stack into btn id 1038 of cd 1 of stack tStackName
            break 
      end switch
      send "menuPick"&&tTagMenu to btn id 1015 of cd 1
   end if
end mouseUp

##TOOLTIP:
##Reset the content of the corresponding pull-down menu in
##the STEP Transcription Module window to its default.



#####################
## Script of button "Delete”, ID 6079 of CARD 1 of SUBSTACK Customize Pull-Down Tag Menus of STACK STEP Transcription Module

on mouseUp
   put the hilitedLines of fld id 1012 of cd 1 into tHils
   if tHils is empty or tHils is 0 then exit mouseUp
   recordScroll
   put fld id 1012 of cd 1 into tTagList
   put item 1 of tHils into tLineNum
   if char 1 of line tLineNum of tTagList is tab or char 1 of line tLineNum of tTagList is in "-<" then exit mouseUp
   repeat with x = 2 to (the number of items of tHils)
      if line (item x of tHils) of tTagList begins with tab then delete char 1 of  line (item x of tHils) of tTagList
   end repeat
   delete line tLineNum of tTagList
   put tTagList into fld id 1012
   resetScroll
end mouseUp

##TOOLTIP:
##Delete tag category : select it AND all the lines included
##under it in the grey field before clicking this button.
##(The selected lines under it will not be deleted but de-indented.)



#####################
## Script of button "Current Tag Menu”, ID 6114 of CARD 1 of SUBSTACK Customize Pull-Down Tag Menus of STACK STEP Transcription Module

on mouseEnter
   put fld id 1009 of cd 1 into btn id 6114 of cd 1
   set the label of btn id 6114 of cd 1 to "Current"&&line (the menuHistory of btn id 1015 of cd 1) of btn id 1015 of cd 1 && "Menu"
end mouseEnter

on menuPick
   set the label of btn id 6114 of cd 1 to "Current"&&line (the menuHistory of btn id 1015 of cd 1) of btn id 1015 of cd 1 && "Menu"
end menuPick

##TOOLTIP:
##This menu displays the content of the field below.



#####################
## Script of button "Option Menu”, ID 6115 of CARD 1 of SUBSTACK Customize Pull-Down Tag Menus of STACK STEP Transcription Module

on mouseEnter
   put fld id 1012 of cd 1 into btn id 6115 of cd 1
   set the label of btn id 6115 of cd 1 to "New"&&line (the menuHistory of btn id 1015 of cd 1) of btn id 1015 of cd 1 && "Menu"
end mouseEnter

on menuPick
   set the label of btn id 6115 of cd 1 to "New"&&line (the menuHistory of btn id 1015 of cd 1) of btn id 1015 of cd 1 && "Menu"
end menuPick

##TOOLTIP:
##This menu displays the content of the field below.



#####################
#####################
## N. SUBSTACK Text Font and Size of STACK STEP Transcription Module


#####################
## Script of SUBSTACK Text Font and Size of STACK STEP Transcription Module


on openStack
   set the loc of this stack to the screenLoc
   checkLauncherWindow (the short name of this stack)
   repeat with i = 1 to the number of controls of cd 1 of this stack
      if the platform is "MAcOS" and the systemversion contains "10.10" then
         set the rect of control i of cd 1 to the cRectYosemite of control i of cd 1
      else
         set the rect of control i of cd 1 to the cRect of control i of cd 1
      end if
   end repeat
   set the width of this stack to the cWidth of this stack
   set the height of this stack to the cHeight of this stack
   pass openStack
end openStack



#####################
## Script of CARD 1 of SUBSTACK Text Font and Size of STACK STEP Transcription Module

on openCard
   put the uIndexFonts of btn "Font Menu" into btn "Font Menu"
   set the label of btn "Font Menu" to the uSelectedFont of btn "Font Menu"
end openCard




#####################
## Script of button "Font Menu" of card id 1002 of stack "Text Font and Size" of stack "/Users/adetienn/Documents/STEP Externals/STEP-LI 7.1.4/STEP Transcription Module.livecode" ID 1003 of CARD 1 of SUBSTACK Text Font and Size of STACK STEP Transcription Module

on menuPick pItemName
   switch pItemName
      case pItemName
         put pItemName into fld "Selected Font"
         set the textFont of fld "Selected Font" to pItemName
         set the uSelectedFont of btn "Font Menu" to pItemName
         break
   end switch
end menuPick

##TOOLTIP:
##Click or reclick either radio button above
##if this menu button is unresponsive.

#####################
## Script of button "Size”, ID 1007 of CARD 1 of SUBSTACK Text Font and Size of STACK STEP Transcription Module

on menuPick pItemName
   switch pItemName
      case pItemName
         put pItemName into fld "Size"
         set the textSize of fld "Selected Font" to pItemName
         put "8,9,10,11,12,13,14,16,18" into tSizes
         put "18,18,18,18,19,19,20,21,22" into tHeights
         repeat with i = 1 to 9
            if pItemName is item i of tSizes then
               set the textHeight of fld "Selected Font" to item i of tHeights
               exit repeat 
            end if
         end repeat
         set the uTextSize of btn "Font Menu" to pItemName
         end switch
end menuPick



#####################
## Script of button "Apply”, ID 1010 of CARD 1 of SUBSTACK Text Font and Size of STACK STEP Transcription Module

on mouseUp
   put "1004,1017,1026,1029,1041,1044,1049,1064,1067,1109,1112,1126,1139,1151,1154,1157,1163,1171,1174" into tListOfFields
   put the uTextSize of btn "Font Menu" of cd 1 of stack "Text Font and Size" into tSize
   put the uTextHeight of btn "Font Menu" of cd 1 of stack "Text Font and Size" into tHeight
   put the uSelectedFont of btn "Font Menu" of cd 1 of stack "Text Font and Size" into tFont
   repeat for each item tItem in tListOfFields
      set the textFont of fld id tItem of cd 1  of stack "STEP Transcription Module" to tFont
      set the textSize  of fld id tItem of cd 1 of stack "STEP Transcription Module" to tSize
      set the textHeight of fld id tItem of cd 1 of stack "STEP Transcription Module" to tHeight
      put the HTMLText of fld id tItem of cd 1 of stack "STEP Transcription Module" into tText
      if tText is not empty and ("size=" is in tText or "font face=" is in tText) then
         if tSize < 7 then put 8 into tSize
         if "size=" is in tText then put replaceText(tText,"size="&quote&"[\d]+","size="&quote&tSize) into tText
         if "font face=" is in tText then put replaceText(tText,"font face="&quote&"[\w\s]+"&quote,"font name="&quote&tFont&quote) into tText
         set the HTMLText of fld id tItem of cd 1 of stack "STEP Transcription Module" to tText
      end if
   end repeat
   set the textFont of fld id 1389 of cd 1  of stack "STEP Transcription Module" to tFont
   set the textSize  of fld id 1389 of cd 1 of stack "STEP Transcription Module" to 11
   set the textHeight of fld id 1389 of cd 1 of stack "STEP Transcription Module" to tHeight
end mouseUp

##TOOLTIP:
##Apply the three settings above to ALL fields in STEP Transcriptor.
##The dialog will not close so you can experiment and observe results.



#####################
## Script of button "ANSI fonts”, ID 1014 of CARD 1 of SUBSTACK Text Font and Size of STACK STEP Transcription Module

on mouseUp
   local theListOfAllFonts,theANSIFonts
   put the fontnames into theListOfAllFonts
   sort theListOfAllFonts
   repeat for each line theFont in theListOfAllFonts
      if the fontlanguage of theFont is "ANSI" then
         put theFont & cr after theANSIFonts
      end if
   end repeat
   delete the last char of theANSIFonts
   filter theANSIFonts without "Abadi*"
   set the uIndexFonts of btn "Font Menu" to theANSIFonts
   set the text of btn "Font Menu" to theANSIFonts
end mouseUp



#####################
## Script of button "Fewer Fonts”, ID 1015 of CARD 1 of SUBSTACK Text Font and Size of STACK STEP Transcription Module

on mouseUp
   local theListOfAllFonts,theANSIFonts,listOfFilterKeys
   put the fontnames into theListOfAllFonts
   sort theListOfAllFonts
   repeat for each line theFont in theListOfAllFonts
      if the fontlanguage of theFont is "ANSI" then
         put theFont & cr after theANSIFonts
      end if
   end repeat
   delete the last char of theANSIFonts
   put "*bold*,*italic*,*Ital*,*It,*SemiExt*,condensed*,*black*,*light*,*MN*,*Std*,*SmBd*,*Med*,*Cond*,*PT*,*Narrow*,*-ExtB,*Ex tB,*ding*,"&\
   "*SemiCond,*SemiExt,*Specialty,Microsoft*,*Script*,*Typewriter*,*FAX,*Calligraphy,*Handwriting,*Console,*Bright*,STIX*,Stencil,*Ornaments,Wide*,"&\
   "Bauhaus*,Symbol*,Bragga*,*Math,Chalk*,Colonna*,Comic*,Copper*,Curlz*,Desdemona*,Engravers*,Futura,Gabriola,Haetten*,Harring*,Hercula*,"&\
   "Impact*,*Shadow,Inai*,Kefa*,Kino*,Krung*,Kufi*,Lithos*,*Felt*,Marlett*,Mistral*,*No.*,*Mono*,*Extra*,Onyx*,Papyrus*,Perpetua*,Playbill*,Silom*,Tekton*,Trajan*,Tw Cen*,Zap*" into listOfFilterKeys
   repeat for each item tItem in listOfFilterKeys
      filter theANSIFonts without tItem
   end repeat
   set the uIndexFonts of btn "Font Menu" to theANSIFonts
   set the text of btn "Font Menu" to theANSIFonts
end mouseUp



#####################
## Script of button "ANSI fonts”, ID 1018 of CARD 1 of SUBSTACK Text Font and Size of STACK STEP Transcription Module

on mouseUp
   local theListOfAllFonts,theANSIFonts
   put the fontnames into theListOfAllFonts
   sort theListOfAllFonts
   repeat for each line theFont in theListOfAllFonts
      if the fontlanguage of theFont is "ANSI" then
         put theFont & cr after theANSIFonts
      end if
   end repeat
   delete the last char of theANSIFonts
   filter theANSIFonts without "Abadi*"
   set the uIndexFonts of btn "Font Menu" to theANSIFonts
   set the text of btn "Font Menu" to theANSIFonts
end mouseUp

##TOOLTIP:
##Show all ANSI fonts available on your computer.



#####################
## Script of button "Fewer Fonts”, ID 1019 of CARD 1 of SUBSTACK Text Font and Size of STACK STEP Transcription Module

on mouseUp
   local theListOfAllFonts,theANSIFonts
   put the fontnames into theListOfAllFonts
   sort theListOfAllFonts
   repeat for each line theFont in theListOfAllFonts
      if the fontlanguage of theFont is "ANSI" then
         put theFont & cr after theANSIFonts
      end if
   end repeat
   delete the last char of theANSIFonts
   put "*bold*,*italic*,*Ital*,*It,*SemiExt*,condensed*,*black*,*light*,*MN*,*Std*,*SmBd*,*Med*,*Cond*,*PT*,*Narrow*,*-ExtB,*Ex tB,*ding*,"&\
   "*SemiCond,*SemiExt,*Specialty,Microsoft*,*Script*,*Typewriter*,*FAX,*Calligraphy,*Handwriting,*Console,*Bright*,STIX*,Stencil,*Ornaments,Wide*,"&\
   "Bauhaus*,Symbol*,Bragga*,*Math,Chalk*,Colonna*,Comic*,Copper*,Curlz*,Desdemona*,Engravers*,Futura,Gabriola,Haetten*,Harring*,Hercula*,"&\
   "Impact*,*Shadow,Inai*,Kefa*,Kino*,Krung*,Kufi*,Lithos*,*Felt*,Marlett*,Mistral*,*No.*,*Mono*,*Extra*,Onyx*,Papyrus*,Perpetua*,Playbill*,Silom*,Tekton*,Trajan*,Tw Cen*,Zap*" into listOfFilterKeys
   repeat for each item tItem in listOfFilterKeys
      filter theANSIFonts without tItem
   end repeat
   set the uIndexFonts of btn "Font Menu" to theANSIFonts
   set the text of btn "Font Menu" to theANSIFonts
end mouseUp

##TOOLTIP:
##Show a shorter selection of fonts.



#####################
## Script of button "Size”, ID 1021 of CARD 1 of SUBSTACK Text Font and Size of STACK STEP Transcription Module

on menuPick pItemName
   switch pItemName
      case pItemName
         put pItemName into fld "Size"
         set the textSize of fld "Selected Font" to pItemName
        put "8,9,10,11,12,13,14,16,18,20,22,24,28,30,32,36,40,44,48" into tSizes
         put "30,30,30,30,34,34,34,34,34,34,34,36,38,38,38,42,42,44,46" into tHeights
          repeat with i = 1 to 19
            if pItemName is item i of tSizes then
               set the textHeight of fld "Selected Font" to item i of tHeights
               exit repeat 
            end if
         end repeat
         set the uTextSize of btn "Font Menu" to pItemName
         end switch
end menuPick



#####################
## Script of button "Size”, ID 1022 of CARD 1 of SUBSTACK Text Font and Size of STACK STEP Transcription Module

on menuPick pItemName
   switch pItemName
      case pItemName
         put pItemName into fld "Size"
         set the textSize of fld "Selected Font" to pItemName
         put "8,9,10,11,12,13,14,16,18" into tSizes
         put "18,18,18,18,19,19,20,21,22" into tHeights
         repeat with i = 1 to 9
            if pItemName is item i of tSizes then
               set the textHeight of fld "Selected Font" to item i of tHeights
               exit repeat 
            end if
         end repeat
         set the uTextSize of btn "Font Menu" to pItemName
         end switch
end menuPick


#####################
## Script of button "Height”, ID 1023 of CARD 1 of SUBSTACK Text Font and Size of STACK STEP Transcription Module

on menuPick pItemName
   put pItemName into fld "Height"
   set the uTextHeight of btn "Font Menu" to pItemName
end menuPick



#####################
## Script of button "Apply and Close”, ID 1031 of CARD 1 of SUBSTACK Text Font and Size of STACK STEP Transcription Module

on mouseUp
   put "1004,1017,1026,1029,1041,1044,1049,1064,1067,1109,1112,1126,1139,1151,1154,1157,1163,1171,1174" into tListOfFields
   put the uTextSize of btn "Font Menu" of cd 1 of stack "Text Font and Size" into tSize
   put the uTextHeight of btn "Font Menu" of cd 1 of stack "Text Font and Size" into tHeight
   put the uSelectedFont of btn "Font Menu" of cd 1 of stack "Text Font and Size" into tFont
   repeat for each item tItem in tListOfFields
      set the textFont of fld id tItem of cd 1  of stack "STEP Transcription Module" to tFont
      set the textSize  of fld id tItem of cd 1 of stack "STEP Transcription Module" to tSize
      set the textHeight of fld id tItem of cd 1 of stack "STEP Transcription Module" to tHeight
      put the HTMLText of fld id tItem of cd 1 of stack "STEP Transcription Module" into tText
      if tText is not empty and ("size=" is in tText or "font face=" is in tText) then
         if tSize < 7 then put 8 into tSize
         if "size=" is in tText then put replaceText(tText,"size="&quote&"[\d]+","size="&quote&tSize) into tText
         if "font face=" is in tText then put replaceText(tText,"font face="&quote&"[\w\s]+"&quote,"font name="&quote&tFont&quote) into tText
         set the HTMLText of fld id tItem of cd 1 of stack "STEP Transcription Module" to tText
      end if
   end repeat
   set the textFont of fld id 1389 of cd 1  of stack "STEP Transcription Module" to tFont
   set the textSize  of fld id 1389 of cd 1 of stack "STEP Transcription Module" to 11
   set the textHeight of fld id 1389 of cd 1 of stack "STEP Transcription Module" to tHeight
   send mouseUp to btn id 1009 of cd 1
end mouseUp

##TOOLTIP:
##Apply the three settings above to 
##ALL fields in STEP Transcriptor, and
##close this dialog immediately.



#####################
#####################
## O. SUBSTACK Floater of STACK STEP Transcription Module


#####################
## Script of SUBSTACK Floater of STACK STEP Transcription Module


on openStack
   setMySize
end openStack

on setMySize
   set the height of fld id 1006 of cd 1 of stack "Floater" to the formattedHeight of fld id 1006 of cd 1 of stack "Floater"
   set the width of fld id 1006 to the formattedWidth of fld id 1006 of cd 1 of stack "Floater"
   set the height of stack "Floater" to the height of fld id 1006 of cd 1 of stack "Floater"
   set the width of stack "Floater" to the width of fld id 1006 of cd 1 of stack "Floater"
end setMySize

on resumeStack
   setMySize
end resumeStack




#####################
## Script of CARD 1 of SUBSTACK Floater of STACK STEP Transcription Module





#####################
## Script of field "Info”, ID 1006 of CARD 1 of SUBSTACK Floater of STACK STEP Transcription Module

on mouseUp
   lock messages
   close stack "Floater"
   if the visible of stack "TEI Tag Customization" and the mouseLoc is within the rect of fld id 1007 of cd 1 of stack "TEI Tag Customization" then send mouseUp to fld id 1007 of cd 1 of stack "TEI Tag Customization"
end mouseUp



#####################
#####################
## P. SUBSTACK Transposition Tagging Tool of STACK STEP Transcription Module


#####################
## Script of SUBSTACK Transposition Tagging Tool of STACK STEP Transcription Module


on preOpenStack
   set the loc of this stack to the screenLoc
end preOpenStack

on openStack
   checkLauncherWindow (the short name of this stack)
   pass openStack
end openStack

on resizeStack
   if the width of this stack > 749 then
      set the hilite of btn "Grey Stack Width Flipper" of cd 1 to false
   else  
      set the hilite of btn "Grey Stack Width Flipper" of cd 1 to true
   end if
   pass resizeStack
end resizeStack



#####################
## Script of CARD 1 of SUBSTACK Transposition Tagging Tool of STACK STEP Transcription Module

on openCard
   put fld id 1067 of cd 1 into tTransCount
   put the cTranspositionCount2 of btn id 1040 of cd 1 into tCo
   if tCo is empty then put 0 into tCo
   put "count:    " & tCo into char offset("count",tTransCount) to -1 of fld id 1067 of cd 1
end openCard

function describeTranspositions pDescribanda
   if pDescribanda is empty then return empty
   put the cAllTranspos of this stack into tAllTranspos
   if tAllTranspos is empty then return empty
   put fld id 1004 of cd 1 into tTranspoNotDone
   put fld id 1072 of cd 1 into tTranspoDone
   put empty into tLGs
   put empty into tLG2s
   put empty into tLG3s
   repeat for each line tTP in tAllTranspos
      set the itemDel to "|"
      put item 1 of tTP into tLemma1
      put item 2 of tTP into tSourceChunk
      put char (word 2 of tSourceChunk) to (word 4 of tSourceChunk) of tTranspoDone into tLemma2
      put item 3 of tTP into tString1
      put item 4 of tTP into tString1Chunk
      put item 5 of tTP into tString2
      put item 6 of tTP into tString2Chunk
      put item 7 of tTP into tPointers
      put item 8 of tTP into tTransType1
      put item 9 of tTP into tTransType2
      put item 10 of tTP into tWordBefore
      put item 11 of tTP into tWordMiddle
      put item 12 of tTP into tWordAfter
      put item 13 of tTP into tDirection
      set the itemDel to comma
      put item 1 of tPointers into tPointA
      put item 2 of tPointers into tPointB
      if tTransType1 is space and tTransType2 is space then
         put tLemma1&"] "& tString1 && "interchanged with" && tString2 into tLG
         put tLemma2&"] "& tString1 && "interchanged with" && tString2 into tLG2
      else
         if tTransType1 is "arrow" and tTransType2 is "arrow" then put "transposed by arrows with" into tTransMode
         if (tTransType1 is "arrow" and tTransType2 is space) or (tTransType1 is space and tTransType2 is "arrow") then put "moved by arrow from " into tTransMode
         if tTransType1 is "curve" and tTransType2 is "curve" then put "transposed by curves with" into tTransMode
         if (tTransType1 is "curve" and tTransType2 is space) or (tTransType1 is space and tTransType2 is "curve") then put "moved by curve from " into tTransMode
         if tTransType1 is "line" and tTransType2 is "line" then put "transposed by lines with" into tTransMode
         if (tTransType1 is "line" and tTransType2 is space) or (tTransType1 is space and tTransType2 is "line") then put "moved by line from " into tTransMode
         if (tTransType1 is "wavy-line") or (tTransType2 is "wavy-line") then put "interchanged by wavy line with" into tTransMode
         if (tTransType1 is "number") or (tTransType2 is "number") then put "transposed according to numbered indications" into tTransMode
         if (tTransType1 is "asterisk") or (tTransType2 is "asterisk") then put "transposed according to asterisked indication" into tTransMode
         if (tTransType1 is "instruction") or (tTransType2 is "instruction") then put "transposed by authorial instruction" into tTransMode
         if "moved by " is in tTransmode then
            if tDirection is "right" then
               if tWordBefore is not empty then put extractGoodChunk(tWordBefore,"after ","end",tWordMiddle) into tDesc1
               else if tWordBefore is empty and tWordMiddle is not empty then put extractGoodChunk(tWordMiddle,"before ","beg","") into tDesc1
               if tWordMiddle is not empty then put extractGoodChunk(tWordMiddle,"to after ","end",tWordAfter) into tDesc2
               else if tWordMiddle is empty and tWordAfter is not empty then put extractGoodChunk(tWordAfter,"to before ","beg","") into tDesc2
               put tLemma1&"] "& tString1 && tTransMode & tDesc1 && tDesc2 into tLG
               put tLemma2&"] "& tString1 && tTransMode & tDesc1 && tDesc2 into tLG2
            else if tDirection is "left" then
               if tWordBefore is not empty then put extractGoodChunk(tWordBefore,"to after ","end",tWordMiddle) into tDesc2
               else if tWordBefore is empty and tWordMiddle is not empty then put extractGoodChunk(tWordMiddle,"to before ","beg","") into tDesc2
               if tWordMiddle is not empty then put extractGoodChunk(tWordMiddle,"after ","end",tWordAfter) into tDesc1
               else if tWordMiddle is empty and  tWordAfter is not empty then put extractGoodChunk(tWordAfter,"before ","beg","") into tDesc1
               put tLemma1&"] "& tString1 && tTransMode & tDesc1 && tDesc2 into tLG
               put tLemma2&"] "& tString1 && tTransMode & tDesc1 && tDesc2 into tLG2
            end if
         end if
         if "with" is in tTransmode then
            put tLemma1&"] "& tString1 && tTransmode && tString2 into tLG
            put tLemma2&"] "& tString1 && tTransmode && tString2 into tLG2
         end if
         if "according to " is in tTransmode or "instruction" is in tTransmode then
            put tLemma1&"] "& tString1 && "!and!" && tString2 && tTransmode into tLG
            put tLemma2&"] "& tString1 && "!and!" && tString2 && tTransmode into tLG2
         end if
      end if
      put the number of words of tLemma1 into tWN
      put the number of words of tString1 into tWN1
      if (tWN-tWN1 > 6) then
         put offset(tString1,tLemma1) into tLN1a
         put tLN1a+length(tString1)-1 into tLN1b
         put the number of words of char 1 to tLN1b of tLemma1 into tWo1
         put the number of words of tLemma1 into tWo2
         if tWo2 - tWo1 > 3 then put word 1 to tWo1+1 of tLemma1 && "..." && word -2 to -1 of tLemma1 into tLemma1
         put offset(tString1,tLemma2) into tLN2a
         put tLN2a+length(tString1)-1 into tLN2b
         put the number of words of char tLN2a to -1 of tLemma2 into tWo3
         put the number of words of tLemma2 into tWo4
         if tWo4 - tWo3 > 4 then put word 1 to 2 of tLemma2 && "..." && word -(tWo3+1) to -1 of tLemma2 into tLemma2
      end if
      put tLemma2&"]"&&tLemma1 into tLG3
      put tLG into line (the number of lines of tLGs) + 1 of tLGs
      put tLG2 into line (the number of lines of tLG2s) + 1 of tLG2s
      put tLG3 into line (the number of lines of tLG3s) + 1 of tLG3s
   end repeat
   return toUpper("Descriptions with lemmas showing readings before transposition")&cr&cr&tLGs & cr & cr & toUpper("Descriptions with lemmas showing readings after transposition")&cr&cr & tLG2s & cr & cr & toUpper("Pragmatic Descriptions")&cr&cr & tLG3s
end describeTranspositions

function extractGoodChunk pStringBorMorA,pBefAft,pBegOrEnd,pString2MorA
   put the number of words of pStringBorMorA into tSL
   put the number of words of pString2MorA into tSL2
   if pStringBorMorA is not empty and pString2MorA is empty then
      if tSL = 1 then return pBefAft & pStringBorMorA
      if tSL > 1 then 
         if pBegOrEnd is "beg" then return pBefAft & word 1 to 2 of pStringBorMorA
         else if pBegOrEnd is "end" then return pBefAft & word -2 to -1 of pStringBorMorA
      end if
   else if pStringBorMorA is not empty and pString2MorA is not empty then
      if tSL = 1 and tSL2 = 1 then
         if length(pStringBorMorA) > length(pString2MorA) then 
            return pBefAft & pStringBorMorA 
         else 
            return reverseBefAft(pBefAft) & pString2MorA
         end if
      else
         if tSL > tSL2 then
            if pBegOrEnd is "beg" then return pBefAft & word 1 to 2 of pStringBorMorA
            else if pBegOrEnd is "end" then return pBefAft & word -2 to -1 of pStringBorMorA
         end if
      else
         if tSL < tSL2 then
            if pBegOrEnd is "beg" then return reverseBefAft(pBefAft) & word -2 to -1 of pString2MorA
            else if pBegOrEnd is "end" then return reverseBefAft(pBefAft) & word 1 to 2 of pString2MorA
         end if
      else
         if tSL = tSL2 then
            if length(word -2 to -1 of pStringBorMorA) >= length(word 1 to 2 of pString2MorA) then
               if pBegOrEnd is "beg" then return pBefAft & word 1 to 2 of pStringBorMorA
               else if pBegOrEnd is "end" then 
                  return pBefAft & word -2 to -1 of pStringBorMorA
               end if
            else if length(word -2 to -1 of pStringBorMorA) < length(word 1 to 2 of pString2MorA) then
               if pBegOrEnd is "beg" then return reverseBefAft(pBefAft) & word -2 to -1 of pString2MorA
               else if pBegOrEnd is "end" then 
                  return reverseBefAft(pBefAft) & word 1 to 2 of pString2MorA
               end if
            end if
         end if
      end if
   end if
end extractGoodChunk

function reverseBefAft pS
   if "after" is in pS then 
      replace "after" with "before" in pS
      return pS
   else if "before" is in pS then 
      replace "before" with "after" in pS
      return pS
   end if
end reverseBefAft




#####################
## Script of field "Text containing transpositions”, ID 1004 of CARD 1 of SUBSTACK Transposition Tagging Tool of STACK STEP Transcription Module

on selectionChanged
   if the optionKey is down then pass selectionChanged
   if fld id 1007 of cd 1 is empty then 
      if the selectedText of fld id 1004 is not empty then
         put the selectedText of fld id 1004 of cd 1 into tSelText
         put the selectedChunk of fld id 1004 of cd 1 into tSelChunk
         if word 4 of tSelChunk is not an integer then put " to "&word 2 of tSelChunk after char -1 of word 2 of tSelChunk
         if char 1 of tSelText is space then 
            delete char 1 of tSelText
            put (word 2 of tSelChunk)+1 into word 2 of tSelChunk
         end if
         if char -1 of tSelText is space then 
            delete char -1 of tSelText
            put (word 4 of tSelChunk)-1 into word 4 of tSelChunk
         end if
         put tSelText into fld id 1007 of cd 1
         set the cSelectedChunk of fld id 1007 of cd 1 to tSelChunk
         set the backgroundColor of char (word 2 of tSelChunk) to (word 4 of tSelChunk) of fld id 1004 of cd 1 to "#B8860B"
      end if
      select empty
      exit selectionChanged
   end if
   put the selectedText of fld id 1004 of cd 1 into tSelText
   put the selectedChunk of fld id 1004 of cd 1 into tSelChunk
   if word 4 of tSelChunk is not an integer then put " to "&word 2 of tSelChunk after char -1 of word 2 of tSelChunk
   if char 1 of tSelText is space then 
      delete char 1 of tSelText
      put (word 2 of tSelChunk)+1 into word 2 of tSelChunk
   end if
   if char -1 of tSelText is space then 
      delete char -1 of tSelText
      put (word 4 of tSelChunk)-1 into word 4 of tSelChunk
   end if
   if tSelText is not empty then set the cSelectedText of fld id 1004 of cd 1 to tSelText
   else set the cSelectedText of fld id 1004 of cd 1 to empty
   set the cSelectedChunk of fld id 1004 of cd 1 to tSelChunk
   put (word 2 of the cSelectedChunk of fld id 1007 of cd 1)-1 into tDiff
   if tSelText is not empty then
      if word 4 of tSelChunk >= word 2 of tSelChunk then
         set the cSelectedChunkSel of fld id 1004 of cd 1 to tSelChunk
         set the cSelectedChunkIns of fld id 1004 of cd 1 to empty
         if fld id 1008 of cd 1 is empty then 
            put tSelText into fld id 1008 of cd 1
            set the cSelectedChunk of fld id 1008 to tSelChunk
            set the backgroundColor of char (word 2 of tSelChunk) to (word 4 of tSelChunk) of fld id 1004 of cd 1 to "#F0E68C"
            set the backgroundColor of char (word 2 tSelChunk)-tDiff to (word 4 of tSelChunk)-tDiff of fld id 1007 of cd 1 to "#F0E68C"
         else if fld id 1008 of cd 1 is not empty and fld id 1009 of cd 1 is empty then 
            put tSelText into fld id 1009 of cd 1
            set the cSelectedChunk of fld id 1009 to the cSelectedChunkSel of fld id 1004 of cd 1
            set the backgroundColor of char (word 2 of tSelChunk) to (word 4 of tSelChunk) of fld id 1004 of cd 1 to "#BDB76B"
            set the backgroundColor of char (word 2 of tSelChunk)-tDiff to (word 4 of tSelChunk)-tDiff of fld id 1007 of cd 1 to "#BDB76B"
         end if
      end if
      select empty
   else if tSelChunk is not empty then
      if word 4 of tSelChunk < word 2 of tSelChunk then
         set the cSelectedChunkIns of fld id 1004 of cd 1 to tSelChunk
         set the cSelectedChunkSel of fld id 1004 of cd 1 to empty
         if fld id 1009 of cd 1 is empty then 
            set the cSelectedChunk of fld id 1009 of cd 1 to the cSelectedChunkIns of fld id 1004 of cd 1
            put the number of words of char 1 to (word 2 of the cSelectedChunk of fld id 1009 of cd 1) of fld id 1004 of cd 1 into tN
            put word tN-1 to tN of fld id 1004 of cd 1 into tW
            set the backgroundColor of char (word 2 of tSelChunk) of fld id 1004 to "#BDB76B"
            set the backgroundColor of char (word 2 of tSelChunk)-tDiff of fld id 1007 to "#BDB76B"
            put "[Relocation position recorded: after “"&tW&"”]" into fld id 1009 of cd 1
         end if
      end if
   end if
end selectionChanged

##TOOLTIP:
##This field displays the text you entered that contains transpositions. 
##Do not double-click words but highlight them by dragging the pointer.
##To edit or delete words without interference, Option(Alt)-select them.



#####################
## Script of field "Transposition”,osition Tagging Tool" of stack "/Users/adetienn/Documents/STEP Externals/STEP-LI 7.1.4/STEP Transcription Module.livecode" ID 1007 of CARD 1 of SUBSTACK Transposition Tagging Tool of STACK STEP Transcription Module

on selectionChanged
   if fld id 1007 of cd 1 is empty then pass selectionChanged
   put the cSelectedChunk of fld id 1007 into tAboveChunk
   put (word 2 of tAboveChunk) - 1 into tDiff
   put the selectedText of fld id 1007 of cd 1 into tSelText
   if tSelText is not empty then set the cSelectedText of fld id 1007 of cd 1 to tSelText
   else set the cSelectedText of fld id 1007 of cd 1 to empty
   put the selectedChunk of fld id 1007 into tTempChunk
   if word 4 of tTempChunk is not an integer then put " to "&word 2 of tTempChunk after char -1 of word 2 of tTempChunk
   if char 1 of tSelText is space then 
      delete char 1 of tSelText
      put (word 2 of tTempChunk)+1 into word 2 of tTempChunk
   end if
   if char -1 of tSelText is space then 
      delete char -1 of tSelText
      put (word 4 of tTempChunk)-1 into word 4 of tTempChunk
   end if
   put word 2 of tTempChunk + tDiff into word 2 of tTempChunk
   put word 4 of tTempChunk + tDiff into word 4 of tTempChunk
   if tSelText is not empty then
      if word 4 of tTempChunk >= word 2 of tTempChunk then
         set the cSelectedChunkSel of fld id 1004 of cd 1 to tTempChunk
         set the cSelectedChunkIns of fld id 1004 of cd 1 to empty
         if fld id 1008 of cd 1 is empty then 
            put the cSelectedText of fld id 1007 of cd 1 into fld id 1008 of cd 1
            set the cSelectedChunk of fld id 1008 to the cSelectedChunkSel of fld id 1004 of cd 1
            set the backgroundColor of char (word 2 of tTempChunk) to (word 4 of tTempChunk) of fld id 1004 of cd 1 to "#F0E68C"
            set the backgroundColor of char (word 2 of tTempChunk)-tDiff to (word 4 of tTempChunk)-tDiff of fld id 1007 of cd 1 to "#F0E68C"
         else if fld id 1008 of cd 1 is not empty and fld id 1009 of cd 1 is empty then 
            put the cSelectedText of fld id 1007 of cd 1 into fld id 1009 of cd 1
            set the cSelectedChunk of fld id 1009 to the cSelectedChunkSel of fld id 1004 of cd 1
            set the backgroundColor of char (word 2 of tTempChunk) to (word 4 of tTempChunk) of fld id 1004 of cd 1 to "#BDB76B"
            set the backgroundColor of char (word 2 of tTempChunk)-tDiff to (word 4 of tTempChunk)-tDiff of fld id 1007 of cd 1 to "#BDB76B"
         end if
      end if
      select empty
   else if tTempChunk is not empty then
      if word 4 of tTempChunk < word 2 of tTempChunk then
         set the cSelectedChunkIns of fld id 1004 of cd 1 to tTempChunk
         set the cSelectedChunkSel of fld id 1004 of cd 1 to empty
         if fld id 1009 of cd 1 is empty then 
            set the cSelectedChunk of fld id 1009 of cd 1 to the cSelectedChunkIns of fld id 1004 of cd 1
            put the number of words of char 1 to (word 2 of the cSelectedChunk of fld id 1009 of cd 1) of fld id 1004 of cd 1 into tN
            put word tN-1 to tN of fld id 1004 of cd 1 into tW
            set the backgroundColor of char (word 2 of tTempChunk) of fld id 1004 to "#BDB76B"
            set the backgroundColor of char (word 2 of tTempChunk)-tDiff of fld id 1007 to "#BDB76B"
            put "[Relocation position recorded: after “"&tW&"”]" into fld id 1009 of cd 1
         end if
      end if
   end if
end selectionChanged



#####################
## Script of button "MetamarkType1”, ID 1011 of CARD 1 of SUBSTACK Transposition Tagging Tool of STACK STEP Transcription Module

on menuPick pItemName
   if pItemName is "none" then put space into pItemName
   set the label of btn id 1011 to pItemName
   switch pItemName
      
   end switch
end menuPick



#####################
## Script of button "MetamarkRend1”, ID 1030 of CARD 1 of SUBSTACK Transposition Tagging Tool of STACK STEP Transcription Module

on menuPick pItemName
   if pItemName is "none" then put space into pItemName
   set the label of btn id 1030 to pItemName
   switch pItemName
      
   end switch
end menuPick



#####################
## Script of button "Tagging or Description menu”, ID 1053 of CARD 1 of SUBSTACK Transposition Tagging Tool of STACK STEP Transcription Module

on menuPick pItemName
   lock screen
   switch pItemName
      case "TEI Tagging"
         show fld id 1046 of cd 1
         hide fld id 1054 of cd 1
         hide fld id 1072 of cd 1
         hide fld id 1080 of cd 1
         break 
      case "List of Tagged Pairs"
         put fld id 1046 of cd 1 into tTagText
         put findFullTaggedTranspositions(tTagText) into fld id 1080 of cd 1
         send "coloring 1080" to btn id 1040 of cd 1
         hide fld id 1046 of cd 1
         hide fld id 1054 of cd 1
         hide fld id 1072 of cd 1
         show fld id 1080 of cd 1
         break
      case "Literal Descriptions"
         put completeTranspositions(fld id 1046 of cd 1) into fld id 1072 of cd 1
         put describeTranspositions(fld id 1046 of cd 1) into tTRs
         put tTRs into fld id 1054 of cd 1
         put "transposed by arrows with,transposed by curves with,transposed by lines with,interchanged by wavy line with,transposed according to numbered indications,transposed according to asterisked indications,"&\
         "transposed by authorial instruction,moved by arrow,moved by curve,moved by line,to after,to before,from after,from before,!and!,interchanged with" into tItalicPhrases
         repeat with z = 1 to the number of items of tItalicPhrases
            put offsets(item z of tItalicPhrases,tTRs) into ots
            if ots <> 0 then
               repeat with x = 1 to the number of items of ots
                  set the textStyle of char (item x of ots) to (item x of ots)+length(item z of tItalicPhrases)-1 of fld id 1054 of cd 1 to italic
               end repeat
            end if
         end repeat
         put offsets("!and!",tTRs) into ots
         if ots <> 0 then
            repeat with x = the number of items of ots down to 1
               delete char (item x of ots)+4 of fld id 1054 of cd 1
               delete char (item x of ots) of fld id 1054 of cd 1
            end repeat
         end if
         show fld id 1054 of cd 1
         hide fld id 1046 of cd 1
         hide fld id 1072 of cd 1
         hide fld id 1080 of cd 1
         break 
      case "Completed Transpositions"
         put completeTranspositions(fld id 1046 of cd 1) into fld id 1072 of cd 1
         show fld id 1072 of cd 1
         hide fld id 1046 of cd 1
         hide fld id 1054 of cd 1
         hide fld id 1080 of cd 1
         break 
   end switch
   showField
end menuPick

on showField
   if the width of this stack > 749 then
      put "1046,1054,1072,1080" into tListField
      repeat with s = 1 to 4
         if the visible of fld id (item s of tListField) of cd 1 then
            set the HTMLText of fld id 1076 of cd 1 to the HTMLText of fld id (item s of tListField) of cd 1
            exit repeat
         end if
      end repeat
   end if
end showField

on mouseWithin
   get the mouseH
   if it > 88 and it < 183 then showtooltip(89)
   else if it > 184 and it < 330 then showtooltip(185)
   else if it > 331 and it < 477 then showtooltip(332)
   else if it > 478 and it < 665 then showtooltip(479)
end mouseWithin

on showtooltip pRect
   switch pRect
      case "89"
         put "Displays text with TEI transposition tags." into tltp
         break
      case "185"
         put "Displays extracted pairs of tagged transpositions." into tltp
         break
      case "332"
         put "Displays literal descriptions of transpositions." into tltp
         break
      case "479"
         put "Displays the text with transpositions completed." into tltp
         break
   end switch
   set the toolTip of btn id 1053 of cd 1 to tltp
end showtooltip

function completeTranspositions pTransponenda
   compileTranspositions
   put the cTranspoValues of fld id 1072 of cd 1 into tTV
   repeat with x = 1 to (the number of lines of tTV)-1 step 2
      put (item 3 of line x of tTV)&quote&">"&item 4 to -1 of line x of tTV&"</seg>" into tTr1
      put (item 3 of line x+1 of tTV)&quote&">"&item 4 to -1 of line x+1 of tTV&"</seg>" into tTr2
      replace tTr1 with tTr2 in pTransponenda
      put offsets(tTr2,pTransponenda) into uts
      put tTr1 into char (item 2 of uts) to (item 2 of uts)+(length(tTr2))-1 of pTransponenda
   end repeat
   put removeTags2(pTransponenda) into fld id 1072 of cd 1
end completeTranspositions

on compileTranspositions
   put fld id 1046 of cd 1 into tText
   put findAllTranspositions(tText) into tP
   set the itemDel to "|"
   put empty into tTRValues
   repeat with x = 1 to the number of lines of tP
      if item 2 of line x of tP is true then put item 1 of line x of tP&comma&item 3 of line x of tP&comma&item 4 of line x of tP&cr after tTRValues
   end repeat
   set the cTranspoValues of fld id 1072 of cd 1 to tTRValues
end compileTranspositions

function findAllTranspositions @pText
   put offsets("<seg xml:id",pText) into ots
   put offsets("</metamark>",pText) into yts
   put empty into tTRValues
   if ots <> 0 then
      repeat with x = 1 to the number of items of ots
         put item x of ots into ot
         put (item x of yts)+10 into yt
         put char ot to yt of pText into tString
         put ot&comma&yt&"|"&findTranspoValues(tString) into line (the number of lines of tTRValues)+1 of tTRValues
      end repeat
   end if
   return tTRValues
end findAllTranspositions

function findTranspoValues @pString
   put "<seg xml:id="&quote&"([\w\d\D]+)"&quote&">"&"([\w\d\D\s]+)"&"</seg>" into tM
   put matchText(pString,tM,tTrID,tTranspTxt) into tZ
   return tZ&"|"&tTrID&"|"&tTranspTxt
end findTranspoValues

function removeTags pText
   put offsets("<seg xml",pText) into ots
   put empty into tList
   repeat with x = 1 to the number of items of ots
      put offset(quote&">",pText,(item x of ots)) into ut
      put item x of ots & comma & (item x of ots)+ut+1 & cr after tList
   end repeat
   repeat with y = the number of lines of tList down to 1
      delete char (item 1 of line y of tList) to (item 2 of line y of tList) of pText
   end repeat
   put offsets("<metamark ",pText) into ots
   put empty into tList
   repeat with x = 1 to the number of items of ots
      put offset(quote&">",pText,(item x of ots)) into ut
      put item x of ots & comma & (item x of ots)+ut+1 & cr after tList
   end repeat
   repeat with y = the number of lines of tList down to 1
      delete char (item 1 of line y of tList) to (item 2 of line y of tList) of pText
   end repeat
   replace "</seg>" with empty in pText
   replace "</metamark>" with empty in pText
   get lineOffset("<ListTranspose>",pText)
   delete line it to -1 of pText
   return pText
end removeTags

function removeTags2 pText
   put "<seg [^>]+>" into tReg
   put replaceText(pText,tReg,empty) into pText
   put "<metamark [^>]+>" into tReg
   put replaceText(pText,tReg,empty) into pText
   replace "</seg>" with empty in pText
   replace "</metamark>" with empty in pText
   get lineOffset("<ListTranspose>",pText)
   delete line it to -1 of pText
   return pText
end removeTags2

function extractAllTags pText---not used
   put "(<(!--.*|script)(.|\n[^<])*(--|script)>)|(<|&lt;)(/?[\w!?]+)\s?[^<]*(>|&gt;)|(\&[\w]+\;)" into tReg
   filter pText with tReg
end extractAllTags

function findFullTaggedTranspositions @pText
   put offsets("<seg xml:id",pText) into ots
   put offsets("</metamark>",pText) into yts
   put empty into tFullTranspoList
   if ots <> 0 then
      repeat with x = 1 to (the number of items of ots)-1 step 2
         put item x of ots into ot
         put (item x+1 of yts)+10 into yt
         put char ot to yt of pText into tString
         put tString&cr&cr after tFullTranspoList
      end repeat
   end if
   return tFullTranspoList
end findFullTaggedTranspositions



##TOOLTIP:
##Displays text with TEI transposition tags.



#####################
## Script of button "Example”, ID 1049 of CARD 1 of SUBSTACK Transposition Tagging Tool of STACK STEP Transcription Module

on mouseUp
   lock screen
   set the hilite of me to not the hilite of me
   if the hilite of me is true then
      put "1004,1007,1008,1009,1046,1054,1072" into tFldlist
      repeat for each item tID in tFldList
         set the cPreviousContent of fld id tID of cd 1 to the HTMLText of fld id tID of cd 1
         set the HTMLText of fld id tID of cd 1 to the cExample of fld id tID of cd 1
      end repeat
      put "1011,1030,1031,1034,1036,1038" into tBtnList
      repeat for each item tID in tBtnList
         set the cPreviousLabel of btn id tID of cd 1 to the label of btn id tID of cd 1
      end repeat
      set the label of btn id 1011 to "arrow"
      set the label of btn id 1030 to space
      set the label of btn id 1031 to "leftToRight"
      set the label of btn id 1034 to "arrow"
      set the label of btn id 1036 to space
      set the label of btn id 1038 to "rightToLeft"
      set the cPreviousAllTranspos of this stack to the cAllTranspos of this stack
      set the cAllTranspos of this stack to the cAllTransposExample of this stack
      put "1007,1008,1009" into tFldlist
      repeat for each item tID in tFldList
         set the cPreviousSelectedChunk of fld id tID of cd 1 to the cSelectedChunk of  of fld id tID of cd 1
         set the cPreviousSelectedText of fld id tID of cd 1 to the cSelectedText of  of fld id tID of cd 1
         set the cSelectedChunk of fld id tID of cd 1 to the cSelectedChunkExample of  of fld id tID of cd 1
         set the cSelectedText of fld id tID of cd 1 to the cSelectedTextExample of  of fld id tID of cd 1
      end repeat
      set the cPreviousCount of fld id 1067 of cd 1 to fld id 1067 of cd 1
      put "Current transposition index count:    6" into fld id 1067 of cd 1
      set the cTranspositionCountExample1 of btn id 1040 of cd 1 to 5
      set the cTranspositionCountExample2 of btn id 1040 of cd 1 to 6
      put "5,13|67,71|103,106|329,334" into tYellow
      put "15,23|85,85|135,135|344,355" into tGreen
      put "14,14|63,66|72,84|86,93|99,102|107,134|136,143|325,328|335,343" into tBrown
      set the itemDel to "|"
      repeat with x = 1 to the number of items of tBrown
         put item x of tBrown into tItem
         set the itemDel to comma
         put item 1 of tItem into tA
         put item 2 of tItem into tB
         set the backgroundColor of char tA to tB of fld id 1004 of cd 1 to "#B8860B"
         set the itemDel to "|"
      end repeat
      set the itemDel to "|"
      repeat with x = 1 to the number of items of tYellow
         put item x of tYellow into tItem
         set the itemDel to comma
         put item 1 of tItem into tA
         put item 2 of tItem into tB
         set the backgroundColor of char tA to tB of fld id 1004 of cd 1 to "#F0E68C"
         set the itemDel to "|"
      end repeat
      set the itemDel to "|"
      repeat with x = 1 to the number of items of tGreen
         put item x of tGreen into tItem
         set the itemDel to comma
         put item 1 of tItem into tA
         put item 2 of tItem into tB
         set the backgroundColor of char tA to tB of fld id 1004 of cd 1 to "#BDB76B"
         set the itemDel to "|"
      end repeat
      set the backgroundColor of char 5 to 10 of fld id 1007 of cd 1 to "#F0E68C"
      set the backgroundColor of char 20 to 31 of fld id 1007 of cd 1 to "#BDB76B"
      send "menuPick "&"TEI Tagging" to btn id 1053 of cd 1
      select line 1 of btn id 1053 of cd 1
   else if the hilite of me is false then
      put "1004,1007,1008,1009,1046,1054,1072" into tFldlist
      repeat for each item tID in tFldList
         set the HTMLText of fld id tID of cd 1 to the cPreviousContent of fld id tID of cd 1
      end repeat
      put "1011,1030,1031,1034,1036,1038" into tBtnList
      repeat for each item tID in tBtnList
         set the label of btn id tID of cd 1 to the cPreviousLabel of btn id tID of cd 1
      end repeat
      set the cAllTranspos of this stack to the cPreviousAllTranspos of this stack
      put "1007,1008,1009" into tFldlist
      repeat for each item tID in tFldList
         set the cSelectedChunk of fld id tID of cd 1 to the cPreviousSelectedChunk of fld id tID of cd 1
         set the cSelectedText of fld id tID of cd 1 to the cPreviousSelectedText of fld id tID of cd 1
      end repeat
      put the cPreviousCount of fld id 1067 of cd 1 into fld id 1067 of cd 1
   end if
   showField
end mouseUp

on showField
   if the width of this stack > 749 then
      put "1046,1054,1072,1080" into tListField
      repeat with s = 1 to 4
         if the visible of fld id (item s of tListField) of cd 1 then
            set the HTMLText of fld id 1076 of cd 1 to the HTMLText of fld id (item s of tListField) of cd 1
            exit repeat
         end if
      end repeat
   end if
end showField


##TOOLTIP:
##Click to fill all fields with a comprehensive example, including a transposition
##not yet recorded (click the “Record transposition” button yourself).
##Click again to restore fields to their previous state.



#####################
## Script of button "Copy for pasting”, ID 1050 of CARD 1 of SUBSTACK Transposition Tagging Tool of STACK STEP Transcription Module

on mouseUp
   if the visible of fld id 1046 of cd 1 then
      if fld id 1046 of cd 1 is not empty and fld id 1054 of cd 1 is not empty then 
         answer "This button copies (1) the TEI-tagged text; (2) one set of syntactical descriptions, (3) and the set of pragmatic descriptions."&cr&\
         "Which set of syntactical transposition descriptions do you want to move to the syntactical descriptions field in STEP Transcriptor?" with "Cancel" or "Set with lemmas before transposition" or "Set with lemmas after transposition" as sheet
         if it is "Cancel" then exit mouseUp
         if "before" is in it then put "before" into tWhichTranspoDesc else put "after" into tWhichTranspoDesc
         put empty into tTranspoList
         put fld id 1046 of cd 1 into tTagTranspo
         get lineOffset("<ListTranspose>",tTagTranspo)
         if it <> 0 then
            put cr&line it to -1 of tTagTranspo into tTranspoList
            put fld id 1004 of cd 1 of stack "STEP Transcription Module" into tSendee
            if "<ListTranspose>" is in tSendee then
               put lineoffset("</ListTranspose>",tSendee) into ot
               put line 3 to -2 of tTranspoList&cr before line ot of tSendee
               put tSendee into fld id 1004 of cd 1 of stack "STEP Transcription Module"
            else
               put tTranspoList after fld id 1004 of cd 1 of stack "STEP Transcription Module"
            end if
            delete line it to -1 of fld id 1046 of cd 1
            put empty into tTagTranspo
         end if
         copy char 1 to -1 of fld id 1046 of cd 1
         if the hilite of btn "Example" of cd 1 of stack "STEP Transcription Module" is true then 
            put the cExampleTranspositionsHolder of fld id 1017 of cd 1 of stack "STEP Transcription Module" into tTranspoDesc
            put the cExamplePragmaTranspoHolder of fld id 1017 of cd 1 of stack "STEP Transcription Module" into tPragmaDesc
         else 
            put the cTranspositionsHolder of fld id 1017 of cd 1 of stack "STEP Transcription Module" into tTranspoDesc
            put the cPragmaTranspoHolder of fld id 1017 of cd 1 of stack "STEP Transcription Module" into tPragmaDesc
         end if
         put describeTranspositions(fld id 1046 of cd 1) into tDescs
         put toUpper("Descriptions with lemmas showing readings before transposition") into tTitle1
         put toUpper("Descriptions with lemmas showing readings after transposition") into tTitle2
         put toUpper("Pragmatic Descriptions") into tTitle3
         put lineOffset(tTitle1,tDescs) into tLineN1
         put lineOffset(tTitle2,tDescs) into tLineN2
         put lineOffset(tTitle3,tDescs) into tLineN3
         put empty into tBeforeAfterTranspo
         if tWhichTranspoDesc is "before" then 
            put line tLineN1+2 to tLineN2-2 of tDescs into tSynTranspo
         else if tWhichTranspoDesc is "after" then 
            put line tLineN2+2 to tLineN3-2 of tDescs into tSynTranspo
            put fld id 1046 of cd 1 & "|||" & fld id 1072 of cd 1 into tBeforeAfterTranspo
         end if
         put line tLineN3+2 to -1 of tDescs into tSynPragma
         put tSynPragma&cr after tPragmaDesc
         put pairTaggedTransposWithDescriptions(tSynTranspo)& cr after tTranspoDesc
         put stripDuplicates(tTranspoDesc) into tTranspoDesc
         put stripDuplicates(tPragmaDesc) into tPragmaDesc
         if the hilite of btn "Example" of cd 1 of stack "STEP Transcription Module" is true then 
            set the cExampleTranspositionsHolder of fld id 1017 of cd 1 of stack "STEP Transcription Module" to tTranspoDesc
            set the cExamplePragmaTranspoHolder of fld id 1017 of cd 1 of stack "STEP Transcription Module" to tPragmaDesc
         else 
            set the cTranspositionsHolder of fld id 1017 of cd 1 of stack "STEP Transcription Module" to tTranspoDesc
            set the cPragmaTranspoHolder of fld id 1017 of cd 1 of stack "STEP Transcription Module" to tPragmaDesc
         end if
         put the HTMLText of fld id 1046 of cd 1 into tHTM
         delete char 1 to 3 of tHTM
         delete char -4 to -1 of tHTM
         set the cPasteTransit of fld id 1004 of cd 1 of stack "STEP Transcription Module" to tHTM
         if tBeforeAfterTranspo is not empty then
            if the hilite of btn "Example" of cd 1 of stack "STEP Transcription Module" is true then 
               put the cExampleBeforeAfterTranspo of btn id 1020 of cd 1 of stack "STEP Transcription Module" into tBefAftTr
               if tBeforeAfterTranspo is not in tBefAftTr then put tBeforeAfterTranspo & "!!!"&cr after tBefAftTr
               set the cExampleBeforeAfterTranspo of btn id 1020 of cd 1 of stack "STEP Transcription Module" to tBefAftTr
            else
               put the cBeforeAfterTranspo of btn id 1020 of cd 1 of stack "STEP Transcription Module" into tBefAftTr
               if tBeforeAfterTranspo is not in tBefAftTr then put tBeforeAfterTranspo & "!!!"&cr after tBefAftTr
               set the cBeforeAfterTranspo of btn id 1020 of cd 1 of stack "STEP Transcription Module" to tBefAftTr
            end if
         end if
         go cd 1 of stack "STEP Transcription Module"
         answer "Set the insertion point at the desired location in the “Transcription” field and paste. Then delete the section of text the pasted text replaces." as sheet
      else
         answer "The two fields (“TEI Tagging” and “Literal Description”) at the bottom of this window need to be filled for copying to take place." as sheet
         exit mouseUp
      end if
   else
      if the visible of fld id 1054 of cd 1 then
         copy char 1 to -1 of fld id 1054 of cd 1
         put "1054" into tFldID
      else if the visible of fld id 1072 of cd 1 then
         copy char 1 to -1 of fld id 1072 of cd 1
         put "1072" into tFldID
      else if the visible of fld id 1080 of cd 1 then
         copy char 1 to -1 of fld id 1080 of cd 1
         put "1080" into tFldID
      end if
      answer "The content of field “"&(the short name of fld id tFldID of cd 1)&"” has been copied. You may now paste it wherever needed." as sheet
   end if
end mouseUp

function pairTaggedTransposWithDescriptions pSyntacDescList
   put fld id 1080 of cd 1 into tAllTaggedTranspos
   filter pSyntacDescList without empty
   filter tAllTaggedTranspos without empty
   put empty into tFullPairedList
   repeat with g = 1 to the number of lines of pSyntacDescList
      put line g of pSyntacDescList & "||" & line g of tAllTaggedTranspos & cr after tFullPairedList
   end repeat
   return tFullPairedList
end pairTaggedTransposWithDescriptions


##TOOLTIP:
##Copy the content of the visible field above
##for pasting at the insertion point within
##STEP Transcriptor or elsewhere.



#####################
## Script of button "Clear fields”, ID 1051 of CARD 1 of SUBSTACK Transposition Tagging Tool of STACK STEP Transcription Module

on mouseUp
   put "1004,1007,1008,1009,1046,1054,1072,1076" into tListFields
   repeat for each item tFld in tListFields
      put empty into fld id tFld of cd 1
   end repeat
   put "1011,1030,1031,1034,1036,1038" into tListMenus
   repeat for each item tBtn in tListMenus
      set the label of btn id tBtn to space
   end repeat
end mouseUp

##TOOLTIP:
##Clear every field  without losing the index count (for work continuity).


#####################
## Script of button "Close”, ID 1052 of CARD 1 of SUBSTACK Transposition Tagging Tool of STACK STEP Transcription Module

on mouseUp
   close stack "Transposition Tagging Tool"
end mouseUp

##TOOLTIP:
##Close window.



#####################
## Script of button "Clear”, ID 1061 of CARD 1 of SUBSTACK Transposition Tagging Tool of STACK STEP Transcription Module

on mouseUp
   put empty into fld id 1008 of cd 1
   set the cSelectedText of fld id 1008 of cd 1 to empty
   put word 2 of the cSelectedChunk of fld id 1008 of cd 1 into tW1
   put word 4 of the cSelectedChunk of fld id 1008 of cd 1 into tW2
   if the cSelectedChunk of fld id 1008 of cd 1 is not empty then set the backgroundColor of char tW1 to tW2 of fld id 1004 of cd 1 to "#B8860B"
   set the cSelectedChunk of fld id 1008 of cd 1 to empty
   repeat with x = 1 to length(fld id 1007 of cd 1)
      if the backgroundColor of char x of fld id 1007 of cd 1 is "240,230,140" then set the backgroundColor of char x of fld id 1007 of cd 1 to empty
   end repeat
end mouseUp

##TOOLTIP:
##Clear this field.

#####################
## Script of button "Record transposition”, ID 1040 of CARD 1 of SUBSTACK Transposition Tagging Tool of STACK STEP Transcription Module

on mouseUp
   put fld id 1004 of cd 1 into tText
   put fld id 1046 of cd 1 into tTaggedText
   put the cSelectedChunk of fld id 1008 of cd 1 into tChunkSeg1
   put the cSelectedChunk of fld id 1009 of cd 1 into tChunkSeg2
   if tChunkSeg1 is empty or tChunkSeg2 is empty then exit mouseUp
   put word 2 of tChunkSeg1 into tSeg1Start
   put word 4 of tChunkSeg1 into tSeg1End
   put word 2 of tChunkSeg2 into tSeg2Start
   put word 4 of tChunkSeg2 into tSeg2End
   put fld id 1007 of cd 1 into tTranspoSource
   put fld id 1008 of cd 1 into tMovingFirstWay
   put fld id 1009 of cd 1 into tMovingSecondWay
   put fld id 1206 of cd 1 of stack "STEP Transcription Module" into tDocAbb
   put fld id 1207 of cd 1 of stack "STEP Transcription Module" into tVar
   put tDocAbb&tVar into tDV
   if tDV is not empty then put "-" after tDV
   put 0 into tReloc
   if "[Relocation position" is in tMovingSecondWay then 
      put 1 into tReloc
      if char tSeg2Start of tText is space then put tSeg2End into tSegEnd else if char tSeg2Start of tText is not space then put tSeg2Start-1 into tSegEnd
      if tSegEnd > tSeg1End then 
         put char tSeg1End+2 to tSegEnd of tText into tMovingSecondWay
         put tSeg1End+2 into tSeg2Start
         put tSegEnd into tSeg2End
      else if tSegEnd < tSeg1End then
         put char tSegEnd+2 to tSeg1Start-2 of tText into tMovingSecondWay
         put tSegEnd+2 into tSeg2Start
         put tSeg1Start-2 into tSeg2End
      end if
   end if
   put offset(tMovingFirstWay,tTranspoSource) into tM1
   put tM1+(length(tMovingFirstWay)-1) into tM2
   put offset(tMovingSecondWay,tTranspoSource) into tM3
   put tM3+(length(tMovingSecondWay)-1) into tM4
   if tM2 < tM3 then
      if tM1 is 1 then put empty into tW1 else put word 1 to (the number of words of char 1 to (tM1-1) of tTranspoSource)  of tTranspoSource into tW1
      if tM3-tM2 = 2 then put empty into tW2 else put word (the number of words of char 1 to tM2 of tTranspoSource)+1 to (the number of words of char 1 to (tM3-1) of tTranspoSource) of tTranspoSource into tW2
      if tReloc = 1 then put tMovingSecondWay into tW2
      if tM4 < length(tTranspoSource) then 
         put word (the number of words of char 1 to tM4 of tTranspoSource)+1 to -1 of tTranspoSource into tW3 
      else put empty into tW3
      put "right" into tDirection
   else if tM2 > tM3 then
      if tM3 is 1 then put empty into tW1 else put word 1 to (the number of words of char 1 to (tM3-1) of tTranspoSource)  of tTranspoSource into tW1
      if tM1-tM4 = 2 then put empty into tW2 else put word (the number of words of char 1 to tM4 of tTranspoSource)+1 to (the number of words of char 1 to (tM1-1) of tTranspoSource) of tTranspoSource into tW2
      if tReloc = 1 then put tMovingSecondWay into tW2
      if tM2 < length(tTranspoSource) then 
         put word (the number of words of char 1 to tM2 of tTranspoSource)+1 to -1 of tTranspoSource into tW3 
      else put empty into tW3
      put "left" into tDirection
   end if
   if the hilite of btn id 1049 of cd 1 is true then
      if (the cTranspositionCountExample1 of btn id 1040 of cd 1 is empty) or (the cTranspositionCountExample1 of btn id 1040 of cd 1 is 0) then
         set the cTranspositionCountExample1 of btn id 1040 of cd 1 to 1
         put 1 into tC
         put addZero(tC) into tTC
      else
         put the cTranspositionCountExample1 of btn id 1040 of cd 1 into tC
         add 2 to tC
         set the cTranspositionCountExample1 of btn id 1040 of cd 1 to tC
         put addZero(tC) into tTC
      end if
   else
      if (the cTranspositionCount1 of btn id 1040 of cd 1 is empty) or (the cTranspositionCount1 of btn id 1040 of cd 1 is 0) then
         set the cTranspositionCount1 of btn id 1040 of cd 1 to 1
         put 1 into tC
         put addZero(tC) into tTC
      else
         put the cTranspositionCount1 of btn id 1040 of cd 1 into tC
         add 2 to tC
         set the cTranspositionCount1 of btn id 1040 of cd 1 to tC
         put addZero(tC) into tTC
      end if
   end if
   put tC+1 into tC2
   if the hilite of btn id 1049 of cd 1 is true then
      set the cTranspositionCountExample2 of btn id 1040 of cd 1 to tC2
   else
      set the cTranspositionCount2 of btn id 1040 of cd 1 to tC2
   end if
   put addZero(tC2) into tTC2
   put the label of btn id 1011 into tType
   put the label of btn id 1030 into tRend
   put the label of btn id 1031 into tPlace
   put the label of btn id 1034 into tType2
   put the label of btn id 1036 into tRend2
   put the label of btn id 1038 into tPlace2
   if tType is space then put empty into tTypeAtt else put space&"type="&quote&tType&quote into tTypeAtt
   if tRend is space then put empty into tRendAtt else put space&"rend="&quote&tRend&quote into tRendAtt
   if tPlace is space then put empty into tPlaceAtt else put space&"place="&quote&tPlace&quote into tPlaceAtt
   if tType2 is space then put empty into tTypeAtt2 else put space&"type="&quote&tType2&quote into tTypeAtt2
   if tRend2 is space then put empty into tRendAtt2 else put space&"rend="&quote&tRend2&quote into tRendAtt2
   if tPlace2 is space then put empty into tPlaceAtt2 else put space&"place="&quote&tPlace2&quote into tPlaceAtt2
   if tType is among the items of "arrow,line,curve" or tType2 is among the items of "arrow,line,curve" then
      put "|"&tW1&"|"&tW2&"|"&tW3&"|"&tDirection into tWords
   else
      put empty into tWords
   end if
   put "<seg xml:id="&quote&tDV&"tr"&tTC&quote&">"&tMovingFirstWay&"</seg><metamark target="&quote&"#"&tDV&"tr"&tTC&quote&space&"function="&quote&"transposition"&quote&tTypeAtt&tRendAtt&tPlaceAtt&"></metamark>" into tFirstSeg
   set the cFirstSegDesc of btn id 1040 of cd 1 to tFirstSeg
   set the cFirstSegNum of btn id 1040 of cd 1to "tr"&tTC
   put offset(tTranspoSource,tText) into tTagFldChunk1
   put item 1 of tTagFldChunk1 into tChunkStart1
   put offset(tTranspoSource,tTaggedText) into tTagFldChunk2
   put item 1 of tTagFldChunk2 into tChunkStart2
   put tChunkStart2 - tChunkStart1 into tDifference
   put "<seg xml:id="&quote&tDV&"tr"&tTC2&quote&">"&tMovingSecondWay&"</seg><metamark target="&quote&"#"&tDV&"tr"&tTC2&quote&space&"function="&quote&"transposition"&quote&tTypeAtt2&tRendAtt2&tPlaceAtt2&"></metamark>" into tSecondSeg
   set the cSecondSegDesc of btn id 1040 of cd 1 to tSecondSeg
   set the cSecondSegNum of btn id 1040 of cd 1 to tDV&"tr"&tTC2
   if tSeg1Start < tSeg2Start then
      put tSecondSeg into char (tSeg2Start+tDifference) to (tSeg2End+tDifference) of tTaggedText
      put tFirstSeg into char (tSeg1Start+tDifference) to (tSeg1End+tDifference) of tTaggedText
   else
      put tFirstSeg into char (tSeg1Start+tDifference) to (tSeg1End+tDifference) of tTaggedText
      put tSecondSeg into char (tSeg2Start+tDifference) to (tSeg2End+tDifference) of tTaggedText
   end if
   if "<ListTranspose>" is in tTaggedText then
      put lineoffset("</ListTranspose>",tTaggedText) into ot
      if tSeg1Start < tSeg2Start then
         put "<transpose>"&cr&"<ptr target="&quote&"#"&tDV&"tr"&tTC2&quote&"/>"&cr&"<ptr target="&quote&"#"&tDV&"tr"&tTC&quote&"/>"&cr&"</transpose>"&cr before line ot of tTaggedText
         put tTC2&comma&tTC into tTargets
      else
         put "<transpose>"&cr&"<ptr target="&quote&"#"&tDV&"tr"&tTC&quote&"/>"&cr&"<ptr target="&quote&"#"&tDV&"tr"&tTC2&quote&"/>"&cr&"</transpose>"&cr before line ot of tTaggedText
         put tTC&comma&tTC2 into tTargets
      end if
   else
      if tSeg1Start < tSeg2Start then
         put cr & "<ListTranspose>"&cr&"<transpose>"&cr&"<ptr target="&quote&"#"&tDV&"tr"&tTC2&quote&"/>"&cr&"<ptr target="&quote&"#"&tDV&"tr"&tTC&quote&"/>"&cr&"</transpose>"&cr&"</ListTranspose>" after tTaggedText
         put tTC2&comma&tTC into tTargets
      else
         put cr & "<ListTranspose>"&cr&"<transpose>"&cr&"<ptr target="&quote&"#"&tDV&"tr"&tTC&quote&"/>"&cr&"<ptr target="&quote&"#"&tDV&"tr"&tTC2&quote&"/>"&cr&"</transpose>"&cr&"</ListTranspose>" after tTaggedText
         put tTC&comma&tTC2 into tTargets
      end if
   end if
   put tTaggedText into fld id 1046 of cd 1
   put findFullTaggedTranspositions(tTaggedText) into fld id 1080 of cd 1
   put tTranspoSource &"|"& the cSelectedChunk of fld id 1007 of cd 1 &"|"& tMovingFirstWay &"|"& the cSelectedChunk of fld id 1008 of cd 1 &"|"& tMovingSecondWay &"|"& the cSelectedChunk of fld id 1009 of cd 1 &"|"& tTargets&"|"&tType&"|"&tType2&tWords into tFullInfo
   put the cAllTranspos of this stack into tAllTranspos
   put tFullInfo into line (the number of lines of tAllTranspos)+1 of tAllTranspos
   set the cAllTranspos of this stack to tAllTranspos
   set the cSelectedChunkSel of fld id 1004 of cd 1 to empty
   set the cSelectedChunkIns of fld id 1004 of cd 1 to empty
   put empty into fld id 1007 of cd 1
   put empty into fld id 1008 of cd 1
   put empty into fld id 1009 of cd 1
   set the cSelectedText of fld id 1008 of cd 1 to empty
   set the cSelectedText of fld id 1009 of cd 1 to empty
   set the cSelectedChunk of fld id 1008 of cd 1 to empty
   set the cSelectedChunk of fld id 1009 of cd 1 to empty
   set the cSelectedText of fld id 1004 of cd 1 to empty
   set the cSelectedChunk of fld id 1004 of cd 1 to empty
   set the label of btn id 1011 to space
   set the label of btn id 1030 to space
   set the label of btn id 1031 to space
   set the label of btn id 1034 to space
   set the label of btn id 1036 to space
   set the label of btn id 1038 to space
   put "count:    " & tC2 into char offset("count",fld id 1067 of cd 1) to -1 of fld id 1067 of cd 1
   coloring 1046
   coloring 1080
   showField
end mouseUp

on showField
   if the width of this stack > 749 then
      put "1046,1054,1072,1080" into tListField
      repeat with s = 1 to 4
         if the visible of fld id (item s of tListField) of cd 1 then
            set the HTMLText of fld id 1076 of cd 1 to the HTMLText of fld id (item s of tListField) of cd 1
            exit repeat
         end if
      end repeat
   end if
end showField

on coloring tIDNum
   lock screen
   set the textColor of char 1 to -1 of fld id tIDNum to empty
   put fld id tIDNum of cd 1 into tText
   put offsets("<",tText) into tLefts
   put offsets(">",tText) into tRights
   put empty into tTagAngles
   repeat with x = 1 to the number of items of tLefts
      put item x of tLefts&comma&item x of tRights&comma after tTagAngles
   end repeat
   repeat with z = 1 to (the number of items of tTagAngles)-1 step 2
      set the textColor of char (item z of tTagAngles) to (item z+1 of tTagAngles) of fld id tIDNum of cd 1 to "#008B8B"
   end repeat
   put "seg,metamark," into tListOfTags
   repeat for each item tTag in tListOfTags
      switch tTag
         if "</"&tTag&">" is not in tText then next repeat
      case "seg"
         colorizeTags tTag,tIDNum,"blue",tText
         break
      case "metamark"
         colorizeTags tTag,tIDNum,"#8A2BE2",tText
         break
      case "del"
         colorizeTags tTag,tIDNum,"#B22222",tText
         break
   end switch
end repeat
colorizeAttributes tIDNum,tText
colorizeValues tIDNum,tText
unlock screen
end coloring

function addZero pNum
   repeat until length(pNum) = 2
      put 0 before pNum
   end repeat
   return pNum
end addZero

on colorizeAttributes pIDNum,@pText
   put offsets("="&quote,pText) into tLA
   if tLA <> 0 then 
      repeat with x = 1 to the number of items of tLA
         put the number of words of char 1 to (item x of tLA) of pText into tWordNum
         put the charIndex of word tWordNum of fld id pIDNum of cd 1 into tCh
         set the textColor of char tCh to (item x of tLA)-1 of fld id pIDNum of cd 1 to "#2F4F4F"
      end repeat
   end if
end colorizeAttributes
   
on colorizeValues pIDNum,@pText
   put offsets("="&quote,pText) into tLA
   if tLA = 0 then exit colorizeValues
   put empty into tRA1
   put empty into tRA2
   put empty into tRA3
   put offsets(quote&">",pText) into tRA1
   put offsets(quote&space,pText) into tRA2
   put offsets(quote&"]}",pText) into tRA3
   if tRA1 <> 0 and tRA1 is not empty then put tRA1 into tRA
   if tRA2 <> 0 and tRA2 is not empty then
      if tRA is empty then put tRA2 into tRA else put comma&tRA2 after tRA
   end if
   if tRA3 <> 0 and tRA3 is not empty then 
      if tRA is empty then put tRA3 into tRA else put comma&tRA3 after tRA
   end if
   if char 1 of tRA is comma then delete char 1 of tRA
   if char -1 of tRA is comma then delete char -1 of tRA
   sort items of tRA ascending numeric
   repeat with x = 1 to the number of items of tLA
      set the textColor of char (item x of tLA)+1 to (item x of tRA) of fld id pIDNum of cd 1 to "#006633"
   end repeat
end colorizeValues

on colorizeTags pTag,pIDNum,pColor,@pText
   put "<"&pTag&">" into tLA1
   put "<"&pTag&space into tLA2
   put "</"&pTag&">" into tRA
   put offsets(tLA1,pText) into tLeftsA
   put offsets(tLA2,pText) into tLeftsB
   put empty into tLefts
   if tLeftsA <> 0 then put tLeftsA into tLefts
   if tLeftsB <> 0 then
      if tLefts is empty then put tLeftsB into tLefts else put comma&tLeftsB after tLefts
   end if
   if tLefts is not empty then sort items of tLefts ascending numeric
   put offsets(tRA,pText) into tRights
   put length(pTag) into tL
   if tLefts is not empty then
      repeat with z = 1 to (the number of items of tLefts)
         set the textColor of char (item z of tLefts) to (item z of tLefts)+tL+1 of fld id pIDNum of cd 1 to pColor
         if item z of tLefts is among the items of tLeftsB then
            put offset(">",pText,(item z of tLefts)) into yt
            set the textColor of char (item z of tLefts) + yt  of fld id pIDNum of cd 1 to pColor
         end if
      end repeat
      repeat with z = 1 to (the number of items of tRights)
         set the textColor of char (item z of tRights) to (item z of tRights)+tL+2 of fld id pIDNum of cd 1 to pColor
      end repeat
   end if
end colorizeTags

function findFullTaggedTranspositions @pText
   put offsets("<seg xml:id",pText) into ots
   put offsets("</metamark>",pText) into yts
   put empty into tFullTranspoList
   if ots <> 0 then
      repeat with x = 1 to (the number of items of ots)-1 step 2
         put item x of ots into ot
         put (item x+1 of yts)+10 into yt
         put char ot to yt of pText into tString
         put tString&cr&cr after tFullTranspoList
      end repeat
   end if
   return tFullTranspoList
end findFullTaggedTranspositions




#####################
## Script of button "Send to Tag Field”, ID 1066 of CARD 1 of SUBSTACK Transposition Tagging Tool of STACK STEP Transcription Module

on mouseUp
   if fld id 1046 of cd 1 is empty then 
      put fld id 1004 of cd 1 into fld id 1046 of cd 1
      showField
      exit mouseUp
   else
      answer "The TEI Tagging field below appears not to be empty. Replace its content with untagged current text?" with "Replace" or "Cancel" as sheet
      if it is "Replace" then put fld id 1004 of cd 1 into fld id 1046 of cd 1
      showField
      end if
end mouseUp

on showField
   if the width of this stack > 749 then
      put "1046,1054,1072,1080" into tListField
      repeat with s = 1 to 4
         if the visible of fld id (item s of tListField) of cd 1 then
            set the HTMLText of fld id 1076 of cd 1 to the HTMLText of fld id (item s of tListField) of cd 1
            exit repeat
         end if
      end repeat
   end if
end showField


##TOOLTIP:
##Move the content of the field below to the TEI
##Tagging field at the bottom of this window.



#####################
## Script of button "Reset to 0”, ID 1069 of CARD 1 of SUBSTACK Transposition Tagging Tool of STACK STEP Transcription Module

on mouseUp
   if the highlight of btn id 1049 is true then
      answer "This button cannot be used in Example mode." as sheet
      exit mouseUp
   end if
   if the optionKey is not down then
      put "count:    0" into char offset("count",fld id 1067 of cd 1) to -1 of fld id 1067 of cd 1
      put 0 into tZ
   else
      ask "Type the new starting transposition index count (0, 2, or any even number)." as sheet
      if it is empty or the result is "Cancel" then exit mouseUp
      if isOddNumber(it) is true then 
         answer "Type an even number, not an odd number." as sheet
         exit mouseUp
      end if
      put "count:    "&it into char offset("count",fld id 1067 of cd 1) to -1 of fld id 1067 of cd 1
      put it into tZ
   end if
   if the hilite of btn id 1049 is false then
      set the cTranspositionCount2 of btn id 1040 of cd 1 to tZ
      set the cTranspositionCount1 of btn id 1040 of cd 1 to tZ
      if tZ is 0 then set the cAllTranspos of this stack to empty
   end if
end mouseUp


function isOddNumber pNumber
   if pNumber is not an integer or pNumber is 0 then return false
   if (pNumber/2) is an integer then return false
   return true
end isOddNumber

##TOOLTIP:
##Option(Alt)-click to set a different even number.



#####################
## Script of button "Clear All”, ID 1074 of CARD 1 of SUBSTACK Transposition Tagging Tool of STACK STEP Transcription Module

on mouseUp
   if the hilite of btn id 1049 of cd 1 is true then
      answer "This button does not operate in “Example” mode." as sheet
      exit mouseUp
   end if
   put "1004,1007,1008,1009,1046,1054,1072,1076" into tListFields
   repeat for each item tFld in tListFields
      put empty into fld id tFld of cd 1
   end repeat
   put "1011,1030,1031,1034,1036,1038" into tListMenus
   repeat for each item tBtn in tListMenus
      set the label of btn id tBtn to space
   end repeat
   set the cPreviousAllTranspos of this stack to empty
   set the cAllTranspos of this stack to empty
   put "1007,1008,1009" into tFldlist
   repeat for each item tID in tFldList
      set the cPreviousSelectedChunk of fld id tID of cd 1 to empty
      set the cPreviousSelectedText of fld id tID of cd 1 to empty
      set the cSelectedChunk of fld id tID of cd 1 to empty
      set the cSelectedText of fld id tID of cd 1 to empty
   end repeat
   put "Current transposition index count:    0" into fld id 1067 of cd 1
   set the cPreviousCount of fld id 1067 of cd 1 to fld id 1067 of cd 1
   set the cTranspositionCount2 of btn id 1040 of cd 1 to 0
   set the cTranspositionCount1 of btn id 1040 of cd 1 to 0
end mouseUp


##TOOLTIP:
##Clear all data (except the example).



#####################
## Script of button "Grey Stack Width Flipper”, ID 1079 of CARD 1 of SUBSTACK Transposition Tagging Tool of STACK STEP Transcription Module

on mouseUp
   lock screen
   if the hilite of me then 
      if the width of this stack > 1100 then set the cExpandedStackWidth of me to the width of this stack else set the cExpandedStackWidth of me to 1100
      set the rect of this stack to the topLeft of this stack, the left of this stack + the cContractedStackWidth of me, the bottom of this stack
   else 
      set the rect of this stack to the topLeft of this stack, the left of this stack + the cExpandedStackWidth of me, the bottom of this stack
      set the width of fld id 1076 of cd 1 to the cExpandedStackWidth of me - the cContractedStackWidth of me -4
      showField
   end if
end mouseUp

on mouseDoubleUp
  mouseUp
end mouseDoubleUp

on showField
   put "1046,1054,1072,1080" into tListField
   repeat with s = 1 to 4
      if the visible of fld id (item s of tListField) of cd 1 then
         set the HTMLText of fld id 1076 of cd 1 to the HTMLText of fld id (item s of tListField) of cd 1
         exit repeat
      end if
   end repeat
end showField

##TOOLTIP:
##Expand (or close) the right side of this window
##to get a better view of the field below.



#####################
#####################
## Q. SUBSTACK Stacked Alteration Tagger of STACK STEP Transcription Module


#####################
## Script of SUBSTACK Stacked Alteration Tagger of STACK STEP Transcription Module


on preOpenStack
   set the loc of this stack to the screenLoc
end preOpenStack


on openStack
   checkLauncherWindow (the short name of this stack)
   pass openStack
end openStack



#####################
## Script of CARD 1 of SUBSTACK Stacked Alteration Tagger of STACK STEP Transcription Module


function offsets str,ctr,startPoint
   put "" into mosList
   if startPoint is empty then put 0 into startPoint
   repeat
      put offset(str,ctr,startPoint) into ofs
      if ofs = 0 then exit repeat
      add ofs to startPoint
      put startPoint & comma after mosList
   end repeat
   if char -1 of mosList = comma then delete char -1 of mosList
   if mosList = "" then return 0
   return mosList
end offsets


#####################
## Script of field "Baseline fld”, ID 1006 of CARD 1 of SUBSTACK Stacked Alteration Tagger of STACK STEP Transcription Module

on selectionChanged
   set the cSelectedChunk of fld id 1006 of cd 1 to the selectedChunk
   set the cSelectedText of fld id 1006 of cd 1 to the selectedText
end selectionChanged



#####################
## Script of field "Level 2 fld" of card id 1002 of stack "Stacked Alteration Tagger”, ID 1024 of CARD 1 of SUBSTACK Stacked Alteration Tagger of STACK STEP Transcription Module

on selectionChanged
   set the cSelectedChunk of fld id 1024 of cd 1 to the selectedChunk
   set the cSelectedText of fld id 1024 of cd 1 to the selectedText
end selectionChanged


#####################
## Script of field "Level 3 fld”, ID 1025 of CARD 1 of SUBSTACK Stacked Alteration Tagger of STACK STEP Transcription Module

on selectionChanged
   set the cSelectedChunk of fld id 1025 of cd 1 to the selectedChunk
   set the cSelectedText of fld id 1025 of cd 1 to the selectedText
end selectionChanged



#####################
## Script of field "Level 4 fld”, ID 1026 of CARD 1 of SUBSTACK Stacked Alteration Tagger of STACK STEP Transcription Module

on selectionChanged
   set the cSelectedChunk of fld id 1026 of cd 1 to the selectedChunk
   set the cSelectedText of fld id 1026 of cd 1 to the selectedText
end selectionChanged


#####################
## Script of field "Level 5 fld”, ID 1027 of CARD 1 of SUBSTACK Stacked Alteration Tagger of STACK STEP Transcription Module

on selectionChanged
   set the cSelectedChunk of fld id 1027 of cd 1 to the selectedChunk
   set the cSelectedText of fld id 1027 of cd 1 to the selectedText
end selectionChanged



#####################
## Script of field "Level -2 fld”, ID 1028 of CARD 1 of SUBSTACK Stacked Alteration Tagger of STACK STEP Transcription Module

on selectionChanged
   set the cSelectedChunk of fld id 1028 of cd 1 to the selectedChunk
   set the cSelectedText of fld id 1028 of cd 1 to the selectedText
end selectionChanged



#####################
## Script of field "Level -3 fld”, ID 1029 of CARD 1 of SUBSTACK Stacked Alteration Tagger of STACK STEP Transcription Module

on selectionChanged
   set the cSelectedChunk of fld id 1029 of cd 1 to the selectedChunk
   set the cSelectedText of fld id 1029 of cd 1 to the selectedText
end selectionChanged



#####################
## Script of button "delete”, ID 1031 of CARD 1 of SUBSTACK Stacked Alteration Tagger of STACK STEP Transcription Module

on mouseUp
   lock screen
   put word 3 of the focusedObject into tIDNum
   if tIDNum is not among the items of "1006,1024,1025,1026,1027,1028,1029" then 
      exit mouseUp
   end if
   put the label of me into tTagans
   put the selectedText of fld id tIDNum of cd 1 into tSel
   if tSel is fld id tIDNum of cd 1 then
      switch tIDNum
         case 1006
            set the hilite of btn id 1042 of cd 1 to true
            break
         case 1024
            set the hilite of btn id 1043 of cd 1 to true
            break
         case 1025
            set the hilite of btn id 1044 of cd 1 to true
            break
         case 1026
            set the hilite of btn id 1045 of cd 1 to true
            break
         case 1027
            set the hilite of btn id 1046 of cd 1 to true
            break
         case 1028
            set the hilite of btn id 1047 of cd 1 to true
            break
         case 1029
            set the hilite of btn id 1048 of cd 1 to true
            break
      end switch
      exit mouseUp
   end if
   put the cSelectedText of fld id tIDNum of cd 1 into tSel2
   if tSel2 is empty and tSel is not empty then 
      set the cSelectedText of fld id tIDNum to tSel
      put tSel into tSel2
   else if tSel is empty and tSel2 is not empty then
      put tSel2 into tSel
   end if
   if tSel is empty and tSel2 is empty then exit mouseUp
   put the SelectedChunk of fld id tIDNum of cd 1 into tChunk
   put the cSelectedChunk of fld id tIDNum of cd 1 into tChunk2
   if tChunk2 is empty and tChunk is not empty then 
      set the cSelectedText of fld id tIDNum to tChunk
      put tChunk into tChunk2
   else if tChunk is empty and tChunk2 is not empty then
      put tChunk2 into tChunk
   end if
   if tChunk is empty and tChunk2 is empty then exit mouseUp
   put word 2 of tChunk into tSta
   if word 4 of tChunk is an integer then put word 4 of tChunk into tSto else put tSta into tSto
   if tChunk is empty then exit mouseUp
   put offsets(">",tTagans) into tOffs
   if tOffs is empty or tOffs is 0 then exit mouseUp
   if the number of items of tOffs < 3 then 
      put char 1 to (item 1 of tOffs) of tTagans into tFirstTag
      put char (item 1 of tOffs)+1 to -1 of tTagans into tSecondTag
   else 
      put char 1 to (item 2 of tOffs) of tTagans into tFirstTag
      put char (item 2 of tOffs)+1 to -1 of tTagans into tSecondTag
   end if
   put tSecondTag after char tSto of fld id tIDNum of cd 1
   put tFirstTag before char tSta of fld id tIDNum of cd 1
   set the cSelectedText of fld id tIDNum to empty
   set the cSelectedChunk of fld id tIDNum to empty
   unlock screen
end mouseUp

##TOOLTIP:
##Insert around selected string.



#####################
## Script of button "add”, ID 1032 of CARD 1 of SUBSTACK Stacked Alteration Tagger of STACK STEP Transcription Module

on mouseUp
   lock screen
   put word 3 of the focusedObject into tIDNum
   if tIDNum is not among the items of "1006,1024,1025,1026,1027,1028,1029" then 
      exit mouseUp
   end if
   put the label of me into tTagans
   put the selectedText of fld id tIDNum of cd 1 into tSel
   put the cSelectedText of fld id tIDNum of cd 1 into tSel2
   if tSel2 is empty and tSel is not empty then 
      set the cSelectedText of fld id tIDNum to tSel
      put tSel into tSel2
   else if tSel is empty and tSel2 is not empty then
      put tSel2 into tSel
   end if
   if tSel is empty and tSel2 is empty then exit mouseUp
   put the SelectedChunk of fld id tIDNum of cd 1 into tChunk
   put the cSelectedChunk of fld id tIDNum of cd 1 into tChunk2
   if tChunk2 is empty and tChunk is not empty then 
      set the cSelectedText of fld id tIDNum to tChunk
      put tChunk into tChunk2
   else if tChunk is empty and tChunk2 is not empty then
      put tChunk2 into tChunk
   end if
   if tChunk is empty and tChunk2 is empty then exit mouseUp
   put word 2 of tChunk into tSta
   if word 4 of tChunk is an integer then put word 4 of tChunk into tSto else put tSta into tSto
   if tChunk is empty then exit mouseUp
   put offsets(">",tTagans) into tOffs
   if tOffs is empty or tOffs is 0 then exit mouseUp
   if the number of items of tOffs < 3 then 
      put char 1 to (item 1 of tOffs) of tTagans into tFirstTag
      put char (item 1 of tOffs)+1 to -1 of tTagans into tSecondTag
   else 
      put char 1 to (item 2 of tOffs) of tTagans into tFirstTag
      put char (item 2 of tOffs)+1 to -1 of tTagans into tSecondTag
   end if
   put tSecondTag after char tSto of fld id tIDNum of cd 1
   put tFirstTag before char tSta of fld id tIDNum of cd 1
   set the cSelectedText of fld id tIDNum to empty
   set the cSelectedChunk of fld id tIDNum to empty
   unlock screen
end mouseUp

##TOOLTIP:
##Insert around selected string.



#####################
## Script of button "retrace”, ID 1033 of CARD 1 of SUBSTACK Stacked Alteration Tagger of STACK STEP Transcription Module

on mouseUp
   lock screen
   put word 3 of the focusedObject into tIDNum
   if tIDNum is not among the items of "1006,1024,1025,1026,1027,1028,1029" then 
      exit mouseUp
   end if
   put the label of me into tTagans
   put the selectedText of fld id tIDNum of cd 1 into tSel
   put the cSelectedText of fld id tIDNum of cd 1 into tSel2
   if tSel2 is empty and tSel is not empty then 
      set the cSelectedText of fld id tIDNum to tSel
      put tSel into tSel2
   else if tSel is empty and tSel2 is not empty then
      put tSel2 into tSel
   end if
   if tSel is empty and tSel2 is empty then exit mouseUp
   put the SelectedChunk of fld id tIDNum of cd 1 into tChunk
   put the cSelectedChunk of fld id tIDNum of cd 1 into tChunk2
   if tChunk2 is empty and tChunk is not empty then 
      set the cSelectedText of fld id tIDNum to tChunk
      put tChunk into tChunk2
   else if tChunk is empty and tChunk2 is not empty then
      put tChunk2 into tChunk
   end if
   if tChunk is empty and tChunk2 is empty then exit mouseUp
   put word 2 of tChunk into tSta
   if word 4 of tChunk is an integer then put word 4 of tChunk into tSto else put tSta into tSto
   if tChunk is empty then exit mouseUp
   put offsets(">",tTagans) into tOffs
   if tOffs is empty or tOffs is 0 then exit mouseUp
   if the number of items of tOffs < 3 then 
      put char 1 to (item 1 of tOffs) of tTagans into tFirstTag
      put char (item 1 of tOffs)+1 to -1 of tTagans into tSecondTag
   else 
      put char 1 to (item 2 of tOffs) of tTagans into tFirstTag
      put char (item 2 of tOffs)+1 to -1 of tTagans into tSecondTag
   end if
   put tSecondTag after char tSto of fld id tIDNum of cd 1
   put tFirstTag before char tSta of fld id tIDNum of cd 1
   set the cSelectedText of fld id tIDNum to empty
   set the cSelectedChunk of fld id tIDNum to empty
   unlock screen
end mouseUp

##TOOLTIP:
##Insert around selected string.



#####################
## Script of button "subst”, ID 1034 of CARD 1 of SUBSTACK Stacked Alteration Tagger of STACK STEP Transcription Module

on mouseUp
   lock screen
   put word 3 of the focusedObject into tIDNum
   if tIDNum is not among the items of "1006,1024,1025,1026,1027,1028,1029" then 
      exit mouseUp
   end if
   put the label of me into tTagans
   put the selectedText of fld id tIDNum of cd 1 into tSel
   put the cSelectedText of fld id tIDNum of cd 1 into tSel2
   if tSel2 is empty and tSel is not empty then 
      set the cSelectedText of fld id tIDNum to tSel
      put tSel into tSel2
   else if tSel is empty and tSel2 is not empty then
      put tSel2 into tSel
   end if
   if tSel is empty and tSel2 is empty then exit mouseUp
   put the SelectedChunk of fld id tIDNum of cd 1 into tChunk
   put the cSelectedChunk of fld id tIDNum of cd 1 into tChunk2
   if tChunk2 is empty and tChunk is not empty then 
      set the cSelectedText of fld id tIDNum to tChunk
      put tChunk into tChunk2
   else if tChunk is empty and tChunk2 is not empty then
      put tChunk2 into tChunk
   end if
   if tChunk is empty and tChunk2 is empty then exit mouseUp
   put word 2 of tChunk into tSta
   if word 4 of tChunk is an integer then put word 4 of tChunk into tSto else put tSta into tSto
   if tChunk is empty then exit mouseUp
   put offsets(">",tTagans) into tOffs
   if tOffs is empty or tOffs is 0 then exit mouseUp
   if the number of items of tOffs < 3 then 
      put char 1 to (item 1 of tOffs) of tTagans into tFirstTag
      put char (item 1 of tOffs)+1 to -1 of tTagans into tSecondTag
   else 
      put char 1 to (item 2 of tOffs) of tTagans into tFirstTag
      put char (item 2 of tOffs)+1 to -1 of tTagans into tSecondTag
   end if
   replace "<mod>" with "<mod type="&quote&"subst"&quote&">" in tFirstTag
   put tSecondTag after char tSto of fld id tIDNum of cd 1
   put tFirstTag before char tSta of fld id tIDNum of cd 1
   set the cSelectedText of fld id tIDNum to empty
   set the cSelectedChunk of fld id tIDNum to empty
   unlock screen
end mouseUp

##TOOLTIP:
##Insert around selected deleted string.



#####################
## Script of button "Form full tags”, ID 1037 of CARD 1 of SUBSTACK Stacked Alteration Tagger of STACK STEP Transcription Module

on mouseUp
   put fld id 1004 of cd 1 into tLemma
   if tLemma is empty then 
      answer "Please type a lemma (anchor text) in the field no. 1 above." as sheet
      exit mouseUp
   end if
   put fld id 1006 of cd 1 into tBaseLevel
   if the hilite of btn id 1071 of cd 1 then
      put "subst" into tSubMod
   else if the hilite of btn id 1072 of cd 1 then
      put "mod type="&quote&"subst"&quote into tSubMod
   end if
   if char 1 to 5 of tBaseLevel is "<del>" and char -6 to -1 of tBaseLevel is "</del>" then
      delete char 1 to 5 of tBaseLevel
      delete char -6 to -1 of tBaseLevel
      put tBaseLevel into fld id 1006 of cd 1
      set the hilite of btn id 1042 of cd 1 to true
   end if
   put describeSubAlterations(fld id 1006 of cd 1,tSubMod) into tBaseLevelDesc
   if tBaseLevel is empty then exit mouseUp
   put fld id 1024 of cd 1 into tLevel2
   put fld id 1025 of cd 1 into tLevel3
   put fld id 1026 of cd 1 into tLevel4
   put fld id 1027 of cd 1 into tLevel5
   put fld id 1028 of cd 1 into tLevelM2
   put fld id 1029 of cd 1 into tLevelM3
   put describeSubAlterations(fld id 1024 of cd 1,tSubMod) into tLevel2Desc
   put describeSubAlterations(fld id 1025 of cd 1,tSubMod) into tLevel3Desc
   put describeSubAlterations(fld id 1026 of cd 1,tSubMod) into tLevel4Desc
   put describeSubAlterations(fld id 1027 of cd 1,tSubMod) into tLevel5Desc
   put describeSubAlterations(fld id 1028 of cd 1,tSubMod) into tLevelM2Desc
   put describeSubAlterations(fld id 1029 of cd 1,tSubMod) into tLevelM3Desc
   if tLevelM2 is not empty and tLevel2 is not empty then
      answer "You cannot enter data both above and below the baseline." as sheet
      exit mouseUp
   end if
   put the hilite of btn id 1042 of cd 1 into tBaseDel1
   put the hilite of btn id 1043 of cd 1 into tLevelDel2
   put the hilite of btn id 1044 of cd 1 into tLevelDel3
   put the hilite of btn id 1045 of cd 1 into tLevelDel4
   put the hilite of btn id 1046 of cd 1 into tLevelDel5
   put the hilite of btn id 1047 of cd 1 into tLevelDelM2
   put the hilite of btn id 1048 of cd 1 into tLevelDelM3
   if the hilite of btn id 1009 of cd 1 is true then put "before " into tPrep
   else if the hilite of btn id 1010 of cd 1 is true then put "after " into tPrep
   else if the hilite of btn id 1011 of cd 1 is true then put "above " into tPrep
   else if the hilite of btn id 1012 of cd 1 is true then put "below " into tPrep
   else if the hilite of btn id 1013 of cd 1 is true then put empty into tPrep
   if the hilite of btn id 1014 of cd 1 then put "deleted" into tAllDel 
   else if the hilite of btn id 1015 of cd 1 then put "inserted" into tAllDel
   else if the hilite of btn id 1065 of cd 1 then put "neither" into tAllDel
   put tBaseLevelDesc into tFullAlt
   put empty into tKL
   repeat with k = 5 down to 2
      do "put tLevel"&k&&" into tKL"
      if tKL is not empty then 
         put k into tKL
         exit repeat
      end if
      put empty into tKL
   end repeat
   if tLevel2 is not empty then
      if tLevelDel2 is true then put " below deleted " & tLevel2Desc after tFullAlt else put  " below inserted " & tLevel2Desc after tFullAlt
      if tLevel3 is not empty then
         if tLevelDel3 is true then put " below deleted " & tLevel3Desc after tFullAlt else put  " below inserted " & tLevel3Desc after tFullAlt
         if tLevel4 is not empty then
            if tLevelDel4 is true then put " below deleted " & tLevel4Desc after tFullAlt else put  " below inserted " & tLevel4Desc after tFullAlt
            if tLevel5 is not empty then
               if tLevelDel5 is true then put " below deleted " & tLevel5Desc after tFullAlt else put  " below inserted " & tLevel5Desc after tFullAlt
            end if
         end if
      end if
   else if tLevelM2 is not empty then
      if tLevelDelM2 is true then put " above deleted " & tLevelM2Desc after tFullAlt else put  " above inserted " & tLevelM2Desc after tFullAlt
      if tLevelM3 is not empty then
         if tLevelDelM3 is true then put " above deleted " & tLevelM3Desc after tFullAlt else put  " above inserted " & tLevelM3Desc after tFullAlt
      end if
   end if
   if tPrep <> empty then
      if tAllDel is "deleted" or tBaseDel1 is true then 
         put "deleted " after tPrep
         if word 1 of tPrep is in "beforeafterabovebelow" and tAllDel is "deleted" then 
            put "[" after tPrep
         end if
      else if tAllDel is "inserted" then 
         put "inserted " after tPrep
         if word 1 of tPrep is in "beforeafterabovebelow" then 
            put "[" after tPrep
         end if
      else if tAllDel is "neither" then 
         put empty after tPrep
      end if
   end if
   put tFullAlt into tFullAlt2
   put tPrep before tFullAlt2
   if char -1 of tPrep is "[" then put "]" after tFullAlt2
   put tLemma&"] " & tFullAlt2 into fld id 1075 of cd 1
   if char -1 of tPrep is "[" then delete char -1 of tPrep
   put tPrep before tFullAlt
   put fld id 1075 of cd 1 into tListOfAlterations
   put "below deleted,above deleted,below inserted,bef del ,aft del ,[rtr],[ins],bef del ins ,aft del ins ,intl ab del ,above inserted,before inserted,before deleted,after inserted,after deleted,] before,] after,] above,] below" into tDescriptorList
   repeat for each item tItem in tDescriptorList
      put length(tItem) into tL
      put offsets(tItem,tListOfAlterations) into tOffList
      if tOffList is not 0 then
         repeat for each item tOff in tOffList
            if "] " is not in char tOff to tOff+tL-1 of fld id 1075 of cd 1 then set the textStyle of char tOff to tOff+tL-1 of fld id 1075 of cd 1 to italic
            else set the textStyle of char tOff+2 to tOff+tL-1 of fld id 1075 of cd 1 to italic
         end repeat
      end if
   end repeat
   put retaggingLine(tFullAlt,tAllDel,tBaseLevel,tLevel2,tLevel3,tLevel4,tLevel5,tLevelM2,tLevelM3,tBaseDel1,tSubMod) into fld id 1038 of cd 1
   coloring
end mouseUp

function retaggingLine tGloss,pAllDel,tBaseLevel,tLevel2,tLevel3,tLevel4,tLevel5,tLevelM2,tLevelM3,tBaseDel1,tSubMod
   put tBaseLevel into tLevelList
   if tLevel2 is not empty then put cr&tLevel2 after tLevelList
   if tLevel3 is not empty then put cr&tLevel3 after tLevelList
   if tLevel4 is not empty then put cr&tLevel4 after tLevelList
   if tLevel5 is not empty then put cr&tLevel5 after tLevelList
   if tLevelM2 is not empty then put cr&tLevelM2 after tLevelList
   if tLevelM3 is not empty then put cr&tLevelM3 after tLevelList
   put empty into tBelDels
   put empty into tBelIns
   put empty into tAbDels
   put empty into tAbIns
   put empty into tBelInsDel
   put empty into tAbInsDel
   put empty into tTopBelInsDel
   put empty into tTopAbInsDel
   put offsets(" below deleted ",tGloss) into tBelDels
   put offsets(" below inserted ",tGloss) into tBelIns
   if tBelDels<> 0 then put tBelDels into tBelInsDel
   if tBelIns <> 0 then 
      if tBelDels<> 0 then put comma & tBelIns after tBelInsDel else put tBelIns into tBelInsDel 
      sort items of tBelInsDel ascending numeric
   end if
   repeat with x = 1 to the number of items of tBelInsDel
      put item x of tBelInsDel &"|"&line x of tLevelList into line x of tLevels
   end repeat
   if tBelDels is empty or tBelDels is 0 then 
      put offsets(" above deleted ",tGloss) into tAbDels
      put offsets(" above inserted ",tGloss) into tAbIns
      if tAbDels<> 0 then put tAbDels into tAbInsDel
      if tAbIns <> 0 then 
         if tAbDels<> 0 then put comma & tAbIns after tAbInsDel else put tAbIns into tAbInsDel 
         sort items of tAbInsDel ascending numeric
      end if
      repeat with x = 1 to the number of items of tAbInsDel
         put item x of tAbInsDel &"|"&line x of tLevelList into line x of tLevels
      end repeat
   end if
   put 0 into tCount
   put empty into tTempAlt
   if tBelInsDel is not empty and tBelInsDel <> 0 then 
      put item-1 of tBelInsDel into tTopBelInsDel
      if tTopBelInsDel is among the items of tBelDels then 
         put 15 into tExtra 
      else 
         put 16 into tExtra
      end if
   else
      if tAbInsDel is not empty and tAbInsDel <> 0 then 
         put item-1 of tAbInsDel into tTopAbInsDel
         if tTopAbInsDel is among the items of tAbDels then 
            put 15 into tExtra 
         else 
            put 16 into tExtra
         end if
      end if
   end if
   if tTopBelInsDel is not empty and tTopBelInsDel <> 0then 
      put tTopBelInsDel into tTopper
      put line -1 of tLevelList into tPrevAngledDesc
      put line -2 of tLevelList into tAngledDesc
      put "bel" into tLoc 
   else if tTopAbInsDel is not empty and tTopAbInsDel <> 0then
      put tTopAbInsDel into tTopper
      put line -1 of tLevelList into tPrevAngledDesc
      put line -2 of tLevelList into tAngledDesc
      put "ab" into tLoc
   end if
   if tLevel2 is not empty or tLevelM2 is not empty then
      if pAllDel is "deleted" then put "<del><"&tSubMod&"><del>"&tAngledDesc&"</del><add>"&tPrevAngledDesc&"</add></"&word 1 of tSubMod&"></del>" into tTempAlt1
      else if pAllDel is "inserted" then put "<add><"&tSubMod&"><del>"&tAngledDesc&"</del><add>"&tPrevAngledDesc&"</add></"&word 1 of tSubMod&"></add>" into tTempAlt1
      else 
         put "<"&tSubMod&"><del>"&tAngledDesc&"</del><add>"&tPrevAngledDesc&"</add></"&word 1 of tSubMod&">" into tTempAlt1
      end if
   else if tLevel2 is empty and tLevelM2 is empty then
      if pAllDel is "deleted" or tBaseDel1 is true then put "<del>"&tLevelList&"</del>" into tTempAlt1
      else if pAllDel is "inserted" then put "<add>"&tLevelList&"</add>" into tTempAlt1
      else 
         put tLevelList into tTempAlt1
      end if
   end if
   put 1 into tCount
   if tBelInsDel is not empty then 
      put tBelInsDel into tRemainingDels 
   else 
      put tAbInsDel into tRemainingDels
   end if
   repeat with q = (the number of items of tRemainingDels)-1 down to 1
      put lineOffset((item q of tRemainingDels)&"|",tLevels) into tLN
      set the itemDel to "|"
      put item 2 of line tLN of tLevels into tPrevAngledDesc
      set the itemDel to comma
      if tPrevAngledDesc is empty then put tBaseLevel into tPrevAngledDesc
      if pAllDel is "deleted" or pAllDel is "inserted" then
         put "<"&tSubMod&"><del>"&tPrevAngledDesc&"</del><add>" after char 5 of tTempAlt1
         put "</add></"&word 1 of tSubMod&">" before char -6 of tTempALt1
      else
         put "<"&tSubMod&"><del>"&tPrevAngledDesc&"</del><add>" before char 1 of tTempAlt1
         put "</add></"&word 1 of tSubMod&">" after char -1 of tTempALt1
      end if
   end repeat
   if tLoc is "bel" then replace "<"&tSubMod&">" with "<"&tSubMod&" place="&quote&"above"&quote&">" in tTempAlt1
   else if tLoc is "ab" then replace "<"&tSubMod&">" with "<"&tSubMod&" place="&quote&"below"&quote&">" in tTempAlt1
   return tTempAlt1
end retaggingLine

function offsets str,ctr,startPoint
   put "" into mosList
   if startPoint is empty then put 0 into startPoint
   repeat
      put offset(str,ctr,startPoint) into ofs
      if ofs = 0 then exit repeat
      add ofs to startPoint
      put startPoint & comma after mosList
   end repeat
   if char -1 of mosList = comma then delete char -1 of mosList
   if mosList = "" then return 0
   return mosList
end offsets

on coloring 
   lock screen
   put 1038 into tIDNum
   set the textColor of char 1 to -1 of fld id tIDNum to empty
   put fld id tIDNum of cd 1 into tText
   put offsets("<",tText) into tLefts
   put offsets(">",tText) into tRights
   put empty into tTagAngles
   repeat with x = 1 to the number of items of tLefts
      put item x of tLefts&comma&item x of tRights&comma after tTagAngles
   end repeat
   repeat with z = 1 to (the number of items of tTagAngles)-1 step 2
      set the textColor of char (item z of tTagAngles) to (item z+1 of tTagAngles) of fld id tIDNum of cd 1 to "#008B8B"
   end repeat
   put "subst,mod,add,del," into tListOfTags
   repeat for each item tTag in tListOfTags
      switch tTag
         if "</"&tTag&">" is not in tText then next repeat
      case "subst"
      case "mod"
         colorizeTags tTag,tIDNum,"blue",tText
         break
      case "add"
         colorizeTags tTag,tIDNum,"#8A2BE2",tText
         break
      case "del"
         colorizeTags tTag,tIDNum,"#B22222",tText
         break
   end switch
end repeat
unlock screen
end coloring

on colorizeTags pTag,pIDNum,pColor,pText
   put "<"&pTag into tLA
   put "</"&pTag&">" into tRA
   put offsets(tLA,pText) into tLefts
   put offsets(tRA,pText) into tRights
   put length(pTag) into tL
      if tLefts is not 0 then
      repeat with z = 1 to (the number of items of tLefts)
         set the textColor of char (item z of tLefts) to (item z of tLefts)+tL+1 of fld id pIDNum of cd 1 to pColor
      end repeat
      repeat with z = 1 to (the number of items of tRights)
         set the textColor of char (item z of tRights) to (item z of tRights)+tL+2 of fld id pIDNum of cd 1 to pColor
      end repeat
   end if
end colorizeTags

function describeSubAlterations pLine,tSubMod
   if pLine is empty then return empty
   if "</" is not in pLine then return pLine
   put offsets("<retrace>",pLine) into tRtrStarts
   put offsets("</retrace>",pLine) into tRtrEnds
   if tRtrStarts <> 0 then
      repeat with z = (the number of items of tRtrStarts) down to 1
         put char (item z of tRtrStarts)+9 to (item z of tRtrEnds)-1 of pLine into tTagContent
         put "•"&tTagContent&&"[rtr]" into char (item z of tRtrStarts) to (item z of tRtrEnds)+9 of pLine
      end repeat
   end if
   put offsets("<"&tSubMod&">",pLine) into tSubstStarts
   put offsets("</"&word 1 of tSubMod&">",pLine) into tSubstEnds
   if tSubstStarts <> 0 then
      repeat with z = (the number of items of tSubstStarts) down to 1
         put char (item z of tSubstStarts)+length(tSubMod)+2 to (item z of tSubstEnds)-1 of pLine into tAddDelContent
         put offset("<add>",tAddDelContent) into tAddStart
         put offset("</add>",tAddDelContent) into tAddEnd
         put offset("<del>",tAddDelContent) into tDelStart
         put offset("</del>",tAddDelContent) into tDelEnd
         put char tAddStart+5 to tAddEnd-1 of tAddDelContent into tLemma
         put char tDelStart+5 to tDelEnd-1 of tAddDelContent into tGloss
         put "•"&tLemma&&"[intl ab del"&&tGloss &"]" into char (item z of tSubstStarts) to (item z of tSubstEnds)+length(word 1 of tSubMod)+2 of pLine
      end repeat
   end if
   put offsets("<del><add>",pLine) into tDelAddStarts
   put offsets("</add></del>",pLine) into tDelAddEnds
   if tDelAddStarts <> 0 then
      repeat with z = the number of items of tDelAddStarts down to 1
         put item z of tDelAddStarts into tLA
         put item z of tDelAddEnds into tRA
         put char tLA+10 to tRA-1 of pLine into tTagContent
         put the number of words of char 1 to tLA-1 of pLine into tWordN
         put the number of words of char 1 to tRA+11 of pLine into tWordN2
         put empty into tAnchorWord
         put empty into tPrep
         if tWordN > 0 and "</" is not in word tWordN of pLine then 
            put word tWordN of pLine into tAnchorWord
            put length(word 1 to tWordN of pLine) into tStoW
            put tStoW-length(tAnchorWord)+1 into tStaW
            put "bef del ins" into tPrep
         else if tWordN > 0 and "<" is not in word tWordN2+1 of pLine then 
            put word tWordN2+1 of pLine into tAnchorWord
            put length(word 1 to tWordN of pLine) into tStoW
            put tStoW-length(tAnchorWord)+1 into tStaW
            put "aft del ins" into tPrep
         end if
         if tPrep is "bef del ins" then put "•"&tAnchorWord&&"["&tPrep&&tTagContent&"]" into char tStaW to tRA+11 of pLine
         else if tPrep is "aft del ins" then put "•"&tAnchorWord&&"["&tPrep&&tTagContent&"]" into char tLA to tStoW of pLine
      end repeat
   end if
   put offsets("<add>",pLine) into tAddStarts
   put offsets("</add>",pLine) into tAddEnds
   if tAddStarts <> 0 then
      repeat with z = (the number of items of tAddStarts) down to 1
         put char (item z of tAddStarts)+5 to (item z of tAddEnds)-1 of pLine into tTagContent
         put "•"&tTagContent&&"[ins]" into char (item z of tAddStarts) to (item z of tAddEnds)+5 of pLine
      end repeat
   end if
   put offsets("<del>",pLine) into tDelStarts
   put offsets("</del>",pLine) into tDelEnds
   if tDelStarts <> 0 then
      repeat with z = the number of items of tDelStarts down to 1
         put item z of tDelStarts into tLA
         put item z of tDelEnds into tRA
         put char tLA+5 to tRA-1 of pLine into tTagContent
         put the number of words of char 1 to tLA-1 of pLine into tWordN
         put the number of words of char 1 to tRA+5 of pLine into tWordN2
         put empty into tAnchorWord
         put empty into tPrep
         if tWordN > 0 and "</" is not in word tWordN of pLine then 
            put word tWordN of pLine into tAnchorWord
            put length(word 1 to tWordN of pLine) into tStoW
            put tStoW-length(tAnchorWord)+1 into tStaW
            put "bef" into tPrep
         else if tWordN > 0 and "<" is not in word tWordN2+1 of pLine then 
            put word tWordN2+1 of pLine into tAnchorWord
            put length(word 1 to tWordN of pLine) into tStoW
            put tStoW-length(tAnchorWord)+1 into tStaW
            put "aft" into tPrep
         end if
         if tPrep is "bef" then put "•"&tAnchorWord&&"["&tPrep&&"del"&&tTagContent&"]" into char tStaW to tRA+5 of pLine
         else if tPrep is "aft" then put "•"&tAnchorWord&&"["&tPrep&&"del"&&tTagContent&"]" into char tLA to tStoW of pLine
      end repeat
   end if
   return pLine
end describeSubAlterations

##TOOLTIP:
##Click this button once all alteration 
##data have been entered above.



#####################
## Script of button "Copy for pasting”, ID 1049 of CARD 1 of SUBSTACK Stacked Alteration Tagger of STACK STEP Transcription Module

on mouseUp
   if fld id 1038 of cd 1 is not empty and fld id 1075 of cd 1 is not empty then 
      copy char 1 to -1 of fld id 1038 of cd 1
      if the hilite of btn "Example" of cd 1 of stack "STEP Transcription Module" is true then 
         put the cExampleSyntacticalDescriptionHolder of fld id 1017 of cd 1 of stack "STEP Transcription Module" into tSyncDesc
      else put the cSyntacticalDescriptionHolder of fld id 1017 of cd 1 of stack "STEP Transcription Module" into tSyncDesc
      put  char 1 to -1 of fld id 1038 of cd 1 & "||" & char 1 to -1 of fld id 1075 of cd 1 & cr after tSyncDesc
      if the hilite of btn "Example" of cd 1 of stack "STEP Transcription Module" is true then 
         set the cExampleSyntacticalDescriptionHolder of fld id 1017 of cd 1 of stack "STEP Transcription Module" to tSyncDesc
      else set the cSyntacticalDescriptionHolder of fld id 1017 of cd 1 of stack "STEP Transcription Module" to tSyncDesc
      put the HTMLText of fld id 1038 of cd 1 into tHTM
      delete char 1 to 3 of tHTM
      delete char -4 to -1 of tHTM
      set the cPasteTransit of fld id 1004 of cd 1 of stack "STEP Transcription Module" to tHTM
      go cd 1 of stack "STEP Transcription Module"
      answer "Set the insertion point at the desired location in the “Script Transcription” field and paste."
   else
      answer "The two fields at the bottom of this window need to be filled for copying to take place." as sheet
      exit mouseUp
   end if
end mouseUp

##TOOLTIP:
##Copy the content of the field at right
##for pasting at the insertion point within
##the transcription.



#####################
## Script of button "Clear all fields”, ID 1050 of CARD 1 of SUBSTACK Stacked Alteration Tagger of STACK STEP Transcription Module

on mouseUp
   put "1004,1006,1024,1025,1026,1027,1028,1029,1038,1075" into tListFields
   repeat for each item tFld in tListFields
      put empty into fld id tFld of cd 1
   end repeat
   put "1009,1010,1011,1012,1013,1014,1015,1065,1042,1043,1044,1045,1046,1047,1048,1068" into tListRadios
   repeat for each item tBtn in tListRadios
      set the hilite of btn id tBtn to false
   end repeat
end mouseUp

##TOOLTIP:
##Empty every field.


#####################
## Script of button "deladd”, ID 1067 of CARD 1 of SUBSTACK Stacked Alteration Tagger of STACK STEP Transcription Module

on mouseUp
   lock screen
   put word 3 of the focusedObject into tIDNum
   if tIDNum is not among the items of "1006,1024,1025,1026,1027,1028,1029" then 
      exit mouseUp
   end if
   put the label of me into tTagans
   put the selectedText of fld id tIDNum of cd 1 into tSel
   put the cSelectedText of fld id tIDNum of cd 1 into tSel2
   if tSel2 is empty and tSel is not empty then 
      set the cSelectedText of fld id tIDNum to tSel
      put tSel into tSel2
   else if tSel is empty and tSel2 is not empty then
      put tSel2 into tSel
   end if
   if tSel is empty and tSel2 is empty then exit mouseUp
   put the SelectedChunk of fld id tIDNum of cd 1 into tChunk
   put the cSelectedChunk of fld id tIDNum of cd 1 into tChunk2
   if tChunk2 is empty and tChunk is not empty then 
      set the cSelectedText of fld id tIDNum to tChunk
      put tChunk into tChunk2
   else if tChunk is empty and tChunk2 is not empty then
      put tChunk2 into tChunk
   end if
   if tChunk is empty and tChunk2 is empty then exit mouseUp
   put word 2 of tChunk into tSta
   if word 4 of tChunk is an integer then put word 4 of tChunk into tSto else put tSta into tSto
   if tChunk is empty then exit mouseUp
   put offsets(">",tTagans) into tOffs
   if tOffs is empty or tOffs is 0 then exit mouseUp
   if the number of items of tOffs < 3 then 
      put char 1 to (item 1 of tOffs) of tTagans into tFirstTag
      put char (item 1 of tOffs)+1 to -1 of tTagans into tSecondTag
   else 
      put char 1 to (item 2 of tOffs) of tTagans into tFirstTag
      put char (item 2 of tOffs)+1 to -1 of tTagans into tSecondTag
   end if
   put tSecondTag after char tSto of fld id tIDNum of cd 1
   put tFirstTag before char tSta of fld id tIDNum of cd 1
   set the cSelectedText of fld id tIDNum to empty
   set the cSelectedChunk of fld id tIDNum to empty
   unlock screen
end mouseUp

##TOOLTIP:
##Insert around selected string.



#####################
## Script of button "Example”, ID 1068 of CARD 1 of SUBSTACK Stacked Alteration Tagger of STACK STEP Transcription Module

on mouseUp
   set the hilite of me to not the hilite of me
   put "1004,1006,1024,1025,1026,1027,1028,1029,1038,1075" into tFldList
   put "1009,1010,1011,1012,1013,1014,1015,1065,1042,1043,1044,1045,1046,1047,1048,1071,1072" into tBtnList
   repeat for each item tItem in tFldList
      put empty into fld id tItem of cd 1
   end repeat   
   if the hilite of me is false then 
      repeat for each item tItem in tFldList
         if the cPreviousContent of fld id tItem of cd 1 is not empty then set the HTMLText of fld id tItem of cd 1 to the cPreviousContent of fld id tItem of cd 1
      end repeat   
      repeat for each item tItem in tBtnList
         set the hilite of btn id tItem of cd 1 to the cHilited of btn id tItem of cd 1
      end repeat   
   else
      repeat for each item tItem in tBtnList
         set the cHilited of btn id tItem of cd 1 to the hilite of btn id tItem of cd 1
      end repeat   
      set the hilite of btn id 1071 of cd 1 to true
      set the hilite of btn id 1072 of cd 1 to false
      repeat for each item tItem in tFldList
         if fld id tItem of cd 1 is not empty then set the cPreviousContent of fld id tItem of cd 1 to the HTMLText of fld id tItem of cd 1
      end repeat   
      put "1004,1006,1024,1025,1026,1038,1075" into tFldList2
      repeat for each item tItem in tFldList2
         set the HTMLText of fld id tItem of cd 1 to the cExample of fld id tItem of cd 1
      end repeat   
      set the hilite of btn id 1009 of cd 1 to true
      set the hilite of btn id 1014 of cd 1 to true
      set the hilite of btn id 1042 of cd 1 to true
      set the hilite of btn id 1043 of cd 1 to true
      set the hilite of btn id 1044 of cd 1 to true
      set the hilite of btn id 1045 of cd 1 to false
      set the hilite of btn id 1046 of cd 1 to false
      set the hilite of btn id 1047 of cd 1 to false
      set the hilite of btn id 1048 of cd 1 to false
   end if
end mouseUp      

##TOOLTIP:
##Click to fill all fields with a comprehensive example.
##Click again to restore fields to their previous state.



#####################
## Script of button "<subst>”, ID 1071 of CARD 1 of SUBSTACK Stacked Alteration Tagger of STACK STEP Transcription Module

on mouseUp
   set the label of btn id 1034 of cd 1 to "<subst><del></del><add></add></subst>"
   pass mouseUp
end mouseUp

##TOOLTIP:
##substitution



#####################
## Script of button "<mod>”, ID 1072 of CARD 1 of SUBSTACK Stacked Alteration Tagger of STACK STEP Transcription Module

on mouseUp
   set the label of btn id 1034 of cd 1 to "<mod><del></del><add></add></mod>"
   pass mouseUp
end mouseUp

##TOOLTIP:
##textual modification



#####################
#####################
## R. SUBSTACK File Export of STACK STEP Transcription Module


#####################
## Script of SUBSTACK File Export of STACK STEP Transcription Module


on preOpenStack
   set the loc of this stack to the screenLoc
end preOpenStack

on openStack
   checkLauncherWindow (the short name of this stack)
   pass openStack
end openStack




#####################
## Script of CARD 1 of SUBSTACK File Export of STACK STEP Transcription Module





#####################
## Script of button "Export to STEP”, ID 1004 of CARD 1 of SUBSTACK File Export of STACK STEP Transcription Module

on mouseUp
   set the dialogData to "step"
   close stack "File Export"
end mouseUp



##TOOLTIP:
##Turn the content of the selected field into a file with extension .step 
##that can then be imported from the STEP platform.



#####################
## Script of button "Export to Other File”, ID 1006 of CARD 1 of SUBSTACK File Export of STACK STEP Transcription Module

on mouseUp
   local tType,tTypes,tRadios
   put "1008,1010,1011,1012,1017" into tRadios
   put "txt,rtf,html,xhtml,xml" into tTypes
   repeat with x = 1 to 5
      if the hilite of btn id (item x of tRadios) of cd 1 then 
         put item x of tTypes into tType
         exit repeat
      end if
   end repeat
   set the dialogData to tType
   repeat with x = 1 to 5
      set the hilite of btn id (item x of tRadios) of cd 1 to false
   end repeat
   close stack "File Export"
end mouseUp


##TOOLTIP:
##Turn the content of the selected field into
##a file with extension .txt. .rtf, or .html.



#####################
## Script of button "Cancel”, ID 1013 of CARD 1 of SUBSTACK File Export of STACK STEP Transcription Module

on mouseUp
   set the dialogData to empty
   close stack "File Export"
end mouseUp



#####################
#####################
## S. SUBSTACK File Import of STACK STEP Transcription Module


#####################
## Script of SUBSTACK File Import of STACK STEP Transcription Module


on preOpenStack
   set the loc of this stack to the screenLoc
end preOpenStack

on openStack
   checkLauncherWindow (the short name of this stack)
   pass openStack
end openStack




#####################
## Script of CARD 1 of SUBSTACK File Import of STACK STEP Transcription Module





#####################
## Script of button "Import Text”, ID 1005 of CARD 1 of SUBSTACK File Import of STACK STEP Transcription Module

on mouseUp
   set the dialogData to "step"
   close stack "File Import"
end mouseUp



##TOOLTIP:
##Import a text with extension .step
##created by the STEP platform.



#####################
## Script of button "Import to Other File”, ID 1007 of CARD 1 of SUBSTACK File Import of STACK STEP Transcription Module

on mouseUp
   local tTypes,tType,tRadios
   put "1011,1012,1013,1014,1015,1018" into tRadios
   put "txt,rtf,html,docx,odt,xml" into tTypes
   repeat with x = 1 to 6
      if the hilite of btn id (item x of tRadios) of cd 1 then 
         put item x of tTypes into tType
         exit repeat
      end if
   end repeat
   set the dialogData to tType
   repeat with x = 1 to 6
      set the hilite of btn id (item x of tRadios) of cd 1 to false
   end repeat
   close stack "File Import"
end mouseUp


##TOOLTIP:
##Import a file with extension .txt, .rtf, 
##or .html into the selected field.



#####################
## Script of button "Cancel”, ID 1009 of CARD 1 of SUBSTACK File Import of STACK STEP Transcription Module

on mouseUp
   set the dialogData to empty
   repeat with x = 1011 to 1015
      set the hilite of btn id x of cd 1 to false
   end repeat
   close stack "File Import"
end mouseUp



#####################
#####################
## T. SUBSTACK TEI Encoding Cursor Palette of STACK STEP Transcription Module


#####################
## Script of SUBSTACK TEI Encoding Cursor Palette of STACK STEP Transcription Module


on preOpenStack
   local tTL
   lock screen
   set the loc of this stack to the screenLoc
   put the topLeft of stack "TEI Encoding Cursor Palette" into tTL
   set the width of stack "TEI Encoding Cursor Palette" to 524
   set the hilite of btn id 1757 of cd 1 to true
   set the topLeft of stack "TEI Encoding Cursor Palette" to tTL
end preOpenStack

on openStack
   checkLauncherWindow (the short name of this stack)
   pass openStack
end openStack

on closeStack
   send "mouseUp" to btn id 1241 of stack "TEI Encoding Cursor Palette"
   pass closeStack
end closeStack

 


#####################
## Script of CARD 1 of SUBSTACK TEI Encoding Cursor Palette of STACK STEP Transcription Module

on mouseUp
   local tIconName,tIconName2,tFldIDs,tIDNum
   if word 1 of the target <>"button" then pass mouseUp
   if the id of the target is among the items of "1049,1057,1241,1721,1724,1725,1726,1727,1728,1729,1730,1731,1736,1744,1738,1742,1749,1750,1751,1753,1754,1755,1756,1757,1761" then pass mouseUp
   put getNameOfBtn(the target) into tIconName
   set the cIconName of stack "TEI Encoding Cursor Palette" to tIconName
   put tIconName&&"iBeam.png" into tIconName2
   if tIconName is empty then exit mouseUp
   put tIconName into fld id 1053 of cd 1
   set the icon of btn id 1057 of cd 1 to tIconName2
   if there is an image tIconName2 of cd 1 of stack "STEP Transcription Module" then put the id of image tIconName2 of cd 1 of stack "STEP Transcription Module" into tIDNum
   put identifyWhichTranscriptionFieldToActivate(tIDNum) into tFldIDs
   repeat with j = 1 to the number of items of tFldIDs
      set the cCursorID of fld id (item j of tFldIDs) of cd 1 of stack "STEP Transcription Module" to tIDNum&cr&tIconName
   end repeat
   set the cCursorID of stack "TEI Encoding Cursor Palette" to tIDNum
   send "loadUpAV" to btn id "1721" of cd 1
   set the hilited of btn id 1373 of cd 1 of stack "STEP Transcription Module" to true
end mouseUp
   
on mouseEnter
   local tIconName,tTagName
   if word 1 of the target <>"button" then pass mouseEnter
   if the id of the target is among the items of "1049,1057,1241,1721,1724,1725,1726,1727,1728,1729,1730,1731,1736,1744,1738,1742,1749,1750,1751,1753,1754,1755,1756,1757,1761" then pass mouseEnter
   put getNameOfBtn(the target) into tIconName
   if tIconName is among the items of "hi-bold,hi-ital,hi-underline,emph-b,emph-i,emph-u,substJoin,addSpan,delSpan,damageSpan" then set the cLoadedIconName of stack "TEI Encoding Cursor Palette" to tIconName&" iBeam av.png"
   put empty into tTagName
   if the cLoadedIconName of stack "TEI Encoding Cursor Palette"<> empty then
      put char 1 to offset("iBeam av",the cLoadedIconName of stack "TEI Encoding Cursor Palette")-2 of the cLoadedIconName of stack "TEI Encoding Cursor Palette" into tTagName
   end if
   if tIconName is empty then exit mouseEnter
    if tTagName <> tIconName then set the icon of btn id 1057 of cd 1 to tIconName&&"iBeam.png" else set the icon of btn id 1057 of cd 1 to tIconName&&"iBeam av.png"
end mouseEnter

on mouseLeave
   if "button" is not in the target then pass mouseLeave
   if the id of the target is among the items of "1049,1057,1241,1721,1724,1725,1726,1727,1728,1729,1730,1731,1736,1744,1738,1742,1749,1750,1751,1753,1754,1755,1756,1757,1761" then pass mouseLeave
   if the cCursorID of stack "TEI Encoding Cursor Palette" <> empty then set the icon of btn id 1057 of cd 1 to the cCursorID of stack "TEI Encoding Cursor Palette"
   else set the icon of btn id 1057 of cd 1 to 1065
   put the cIconName of stack "TEI Encoding Cursor Palette" into fld id 1053 of cd 1
end mouseLeave

function getNameOfBtn pB
   put char offset(quote,pB)+1 to -2 of pB into pB
   get the short name of btn pB of cd 1
   if "bevel" is in it then return word 1 to wordOffset("bevel",it)-1 of it 
   if "button.png" is in it then return char 1 to offset("button",it)-2 of it
end getNameOfBtn

function identifyWhichTranscriptionFieldToActivate pIDNum
   local pFirstField,pAllThreeFields
   put "1260,1351,1371,1286,1299,1302,1303,1304,1305,1306,1307,1313,1314,1319,1320,1321,1322,1323,1326,1338,1339,1340,1341,1342,1343,1344,1345,1355,1356,1357,1358,1359,1360,1361,1362,1363" into pAllThreeFields
   put ",1852,1804,1835,1838,1843,1887,1848,1849,1850,1857,1858,1863,1864,1865,1867,1868,1873,1820,1821,1822,1823,1824,1825,1826,1827,1829,1830,1831,1832,1844,1886,1845,1846,1847" after pAllThreeFields
   put "1256,1366,1257,1258,1263,1370,1265,1269,1271,1273,1369,1278,1310,1334,1335,1350,1353,1800,1817,1878,1839,1870,1807,1816,1818,1884,1854,1813,1814,1879,1877" into pFirstField
   if pIDNum is among the items of pAllThreeFields then return "1004,1041,1151"
   else if pIDNum is among the items of pFirstField then return "1004"
   else return "1041,1151"
end identifyWhichTranscriptionFieldToActivate

on extendStack
   local tTL
   lock screen
   put the topLeft of this stack into tTL
   if the height of this stack = 232 then 
      set the height of this stack to 273 
      repeat with j = 1749 to 1752
         set the bottom of control id j of cd 1 to (the bottom of control id j of cd 1)+41
      end repeat
      set the height of fld id 1746 of cd 1 to (the height of fld id 1746 of cd 1)+41
      set the top of fld id 1746 of cd 1 to -1
   else 
      set the height of this stack to 232
      repeat with j = 1749 to 1752
         set the bottom of control id j of cd 1 to (the bottom of control id j of cd 1)-41
      end repeat
      set the height of fld id 1746 of cd 1 to (the height of fld id 1746 of cd 1)-41
      set the top of fld id 1746 of cd 1 to -1
   end if
   set the topLeft of this stack to tTL
end extendStack

on say pMsg
   put pMsg into cd fld id 1740 of cd 1
   extendStack
end say

function stripDuplicates2 tListToStrip
   local tArray,tCount,tKeys
   repeat for each line tCount in tListToStrip
      put 1 into tArray[tCount]
   end repeat
   put the keys of tArray into tKeys
   sort tKeys ascending international
   return tKeys
end stripDuplicates2


#####################
## Script of button "Tag Menu”, ID 1049 of CARD 1 of SUBSTACK TEI Encoding Cursor Palette of STACK STEP Transcription Module

local lLabelName

on mouseEnter
   set the cLabelName of me to the label of me
end mouseEnter

on menuPick pItemName
   if pItemName <> the cLabelName of me then send "mouseUp" to btn id 1241 of cd 1
   lock screen
   switch pItemName
      case "Alteration tags"
         showAlts
         hideEditorials
         hideStructure
         hideBiblio
         hideNames
         hideTypeface
         break
      case "Editorial tags"
         hideAlts
         showEditorials
         hideStructure
         hideBiblio
         hideNames
         hideTypeface
         break
      case "Structure tags"
         hideAlts
         hideEditorials
         showStructure
         hideBiblio
         hideNames
         hideTypeface
         break
      case "Bibliographic tags"
         hideAlts
         hideEditorials
         hideStructure
         showBiblio
         hideNames
         hideTypeface
         break
      case "Name tags"
         hideAlts
         hideEditorials
         hideStructure
         hideBiblio
         showNames
         hideTypeface
         break
      case "Typeface tags"
         hideAlts
         hideEditorials
         hideStructure
         hideBiblio
         hideNames
         showTypeface
         break
   end switch
end menuPick

on showAlts
   repeat with i = 1031 to 1044
      if i = 1040 then next repeat
      show btn id i of cd 1
      show btn id 1203 of cd 1
   end repeat
end showAlts

on hideALts
   repeat with i = 1031 to 1044
      if i = 1040 then next repeat
      hide btn id i of cd 1
      hide btn id 1203 of cd 1
   end repeat
end hideAlts

on showEditorials
   repeat with i = 1102 to 1119
      show btn id i of cd 1
   end repeat
end showEditorials

on hideEditorials
   repeat with i = 1102 to 1119
      hide btn id i of cd 1
   end repeat
end hideEditorials

on showStructure
   repeat with i = 1140 to 1149
      show btn id i of cd 1
   end repeat
   repeat with i = 1232 to 1239
      show btn id i of cd 1
   end repeat
   repeat with i = 1320 to 1325
      if i = 1321 or i = 1323 then next repeat
      show btn id i of cd 1
   end repeat
end showStructure

on hideStructure
   repeat with i = 1140 to 1149
      hide btn id i of cd 1
   end repeat
   repeat with i = 1232 to 1239
      hide btn id i of cd 1
   end repeat
   repeat with i = 1320 to 1325
      if i = 1321 or i = 1323 then next repeat
      hide btn id i of cd 1
   end repeat
end hideStructure

on showBiblio
   repeat with i = 1164 to 1170
      show btn id i of cd 1
   end repeat
end showBiblio

on hideBiblio
   repeat with i = 1164 to 1170
      hide btn id i of cd 1
   end repeat
end hideBiblio

on showNames
   repeat with i = 1189 to 1200
      if i = 1198 or i = 1199 then next repeat
      show btn id i of cd 1
   end repeat
   repeat with i = 1212 to 1215
      show btn id i of cd 1
   end repeat
end showNames

on hideNames
   repeat with i = 1189 to 1200
      if i = 1198 or i = 1199 then next repeat
      hide btn id i of cd 1
   end repeat
   repeat with i = 1212 to 1215
      hide btn id i of cd 1
   end repeat
end hideNames

on showTypeface
   repeat with i =1264 to 1271
      show btn id i
   end repeat
   repeat with i =1278 to 1280
      show btn id i
   end repeat
end showTypeface

on hideTypeface
   repeat with i =1264 to 1271
      hide btn id i
   end repeat
   repeat with i =1278 to 1280
      hide btn id i
   end repeat
end hideTypeface


##TOOLTIP:
##Select a tag family to display its major tags.



#####################
## Script of button "Reset cursor”, ID 1241 of CARD 1 of SUBSTACK TEI Encoding Cursor Palette of STACK STEP Transcription Module

on mouseUp
   local tTL
   lock screen
   put the topLeft of stack "TEI Encoding Cursor Palette" into tTL
   set the width of stack "TEI Encoding Cursor Palette" to 524
   set the hilite of btn id 1757 of cd 1 to true
   set the topLeft of stack "TEI Encoding Cursor Palette" to tTL
   put empty into fld id 1053 of cd 1 of stack "TEI Encoding Cursor Palette"
   set the icon of btn id 1057 of cd 1 of stack "TEI Encoding Cursor Palette" to 1065
   set the cCursorID of fld id 1004 of cd 1 of stack "STEP Transcription Module" to empty
   set the cCursorID of fld id 1041 of cd 1 of stack "STEP Transcription Module" to empty
   set the cCursorID of fld id 1151 of cd 1 of stack "STEP Transcription Module" to empty
   set the cCursorID of stack "TEI Encoding Cursor Palette" to empty
   set the cIconName of stack "TEI Encoding Cursor Palette" to empty
   set the cLoadedIconName of stack "TEI Encoding Cursor Palette" to empty
   set the cTagAppend of stack "TEI Encoding Cursor Palette" to empty
   set the hilited of btn id 1373 of cd 1 of stack "STEP Transcription Module" to false
   set the visited of btn id 1373 of cd 1 of stack "STEP Transcription Module" to false
   set the hilited of btn id 1020 of cd 1 of stack "Tagging Area Palette" to false
   set the visited of btn id 1020 of cd 1 of stack "Tagging Area Palette" to false
   send "mouseUp" to btn id 1744 of cd 1 of stack "TEI Encoding Cursor Palette"
   send "mouseUp" to btn id 1736 of cd 1 of stack "TEI Encoding Cursor Palette"
end mouseUp

##TOOLTIP:
##Reset cursor to default iBeam



#####################
## Script of button "Load AV”, ID 1721 of CARD 1 of SUBSTACK TEI Encoding Cursor Palette of STACK STEP Transcription Module

on mouseUp
   local tTL
   lock screen
   put the topLeft of this stack into tTL
   set the height of this stack to 232
   set the width of this stack to 524
   set the hilite of btn id 1757 of cd 1 to true
   set the topLeft of this stack to tTL
   loadUpAV
end mouseUp

on loadUpAV
   lock screen
   if fld id 1053 of cd 1 <> empty then
      populateAttributes (the text of fld id 1053 of cd 1)
      repeat with i = 1724 to 1731
         set the label of btn id i of cd 1 to empty
      end repeat
   end if
end loadUpAV

on openStack
   checkLauncherWindow (the short name of this stack)
   pass openStack
end openStack

on resumeStack
   if fld id 1053 of cd 1 <> empty then
      lock screen
      populateAttributes (the text of fld id 1004 of cd 1)
      repeat with i = 1724 to 1731
         set the label of btn id i of cd 1 to empty
      end repeat
   end if
end resumeStack

on closeStack
   lock screen
   put empty into fld id 1053 of cd 1
   repeat with i = 1724 to 1731
      set the label of btn id i of cd 1 to empty
      put empty into btn id i of cd 1
   end repeat
end closeStack

on populateAttributes pTag
   lock screen
   if pTag is empty then exit populateAttributes
   if "><" is in pTag then put char 2 to offset(">",pTag)-1 of pTag into pTag
   if space is in pTag then put char 1 to offset(space,pTag)-1 of pTag into pTag
   if char 1 of pTag is "<" and char -2 to -1 of pTag is "/>" then put char 2 to -3 of pTag into pTag
   repeat with i = 1724 to 1730 step 2
      put getAttributes(pTag) into btn id i of cd 1
   end repeat
end populateAttributes

function getAttributes pTag
   local tCustomProp,tAttributes,tTempAtt,ot
   put pTag&"TEI" into tCustomProp
   if tCustomProp is among the lines of the customKeys of stack "STEP Transcription Module" then
      do "put the "&tCustomProp&" of stack "&quote&"STEP Transcription Module"&quote&" into tAttributes"
      if tAttributes is not empty then
         if "|" is not in tAttributes and the number of items of tAttributes > 0 then
            replace comma with cr in tAttributes
            if char -1 of tAttributes = cr then delete char -1 of tAttributes
            return tAttributes
         else if "|" is in tAttributes then
            put empty into tTempAtt
            repeat with x = 1 to the number of lines of tAttributes
               put offset("|",line x of tAttributes) into ot
               put char 1 to ot-1 of line x of tAttributes & cr after tTempAtt
            end repeat
            delete char -1 of tTempAtt
            return tTempAtt
         end if
      end if
   end if
   return empty
end getAttributes

##TOOLTIP:
##Load cursor with attributes and values.



#####################
## Script of button "Attribute 1”, ID 1724 of CARD 1 of SUBSTACK TEI Encoding Cursor Palette of STACK STEP Transcription Module

on menuPick pItemName,pEmp
   local tTag
   if pItemName = empty then put the label of me into pItemName
   if pItemName = empty then exit menuPick
   if checkWhetherAlreadyTaken(pItemName) is true then exit menuPick
   put fld id 1053 of cd 1 of stack "TEI Encoding Cursor Palette" into tTag
   put populateValues(tTag,pItemName) into btn id 1725 of cd 1 of stack "TEI Encoding Cursor Palette"
   if pEmp is empty or pEmp is "pEmp" then set the label of btn id 1725 of cd 1 of stack "TEI Encoding Cursor Palette" to empty else set the label of btn id 1725 of cd 1 of stack "TEI Encoding Cursor Palette" to pEmp
   send "mouseUp" to btn id 1738  of cd 1 of stack "TEI Encoding Cursor Palette"
   if the height of this stack = 273 then extendStack
end menuPick

function populateValues pTag,pAttribute
   if pTag is empty then exit populateValues
   if "><" is in pTag then put char 2 to offset(">",pTag)-1 of pTag into pTag
   if space is in pTag then put char 1 to offset(space,pTag)-1 of pTag into pTag
   if char 1 of pTag is "<" and char -2 to -1 of pTag is "/>" then put char 2 to -3 of pTag into pTag
   return getValuesFromAttribute(pTag,pAttribute)
end populateValues

function getValuesFromAttribute pTag,pAttrib
   local tTagCustomProp,tAttCustomProp,tTempValue,tAttributes,ot,tValues,tItem
   put pTag&"TEI" into tTagCustomProp
   put pAttrib&"TEI" into tAttCustomProp
   replace ":" with "_" in tAttCustomProp
   if tTagCustomProp is among the lines of the customKeys of stack "STEP Transcription Module" then
      do "put the "&tTagCustomProp&" of stack "&quote&"STEP Transcription Module"&quote&" into tAttributes"
      put lineOffset((char 1 to -4 of tAttCustomProp)&"|",tAttributes) into ot
      if ot is not 0 then
         set the itemDel to "|"
         put item 2 of line ot of tAttributes into tTempValue
      end if
   end if
   if tTempValue is empty then
      if tAttCustomProp is among the lines of the customKeys of stack "STEP Transcription Module" then
         do "put the "&tAttCustomProp&" of stack "&quote&"STEP Transcription Module"&quote&" into tValues"
         put lineOffset((char 1 to -4 of tAttCustomProp)&"|",tValues) into ot
         if ot is not 0 and "|" is in tValues then
            set the itemDel to "|"
            put item 2 of line ot of tValues into tTempValue
         else if ot is 0 and ":" is in tValues and "|" is not in tValues then
            set the itemDel to comma
            put empty into tTempValue
            repeat with x = 1 to the number of items of tValues
               put item x of tValues into tItem
               set the itemDel to ":"
               put item 2 of tItem & comma after tTempValue
               set the itemDel to comma
            end repeat
         end if
      end if
   end if
   replace comma with cr in tTempValue
   if char -1 of tTempValue = cr then delete char -1 of tTempValue
   return tTempValue
end getValuesFromAttribute

function checkWhetherAlreadyTaken pLabel
   local tList
   put "1724,1726,1728,1730" into tList
   repeat with i = 1 to 4
      if item i of tList = the id of me then next repeat
      if the label of btn id (item i of tList) of cd 1 is pLabel then 
         say "The attribute is already in use in the "&ordinal(i)& " menu. You cannot use it twice. You may enter more than one value for a same attribute; separate them by a space."
         set the label of me to empty
         return true
      end if
   end repeat
   return false
end checkWhetherAlreadyTaken

private function ordinal pNum
   local tOrds
   put "first,second,third,fourth,fifth,sixth,seventh,eighth,ninth,tenth" into tOrds
   return item pNum of tOrds
end ordinal


##TOOLTIP:
##First click a tag above, then select an
##attribute or enter one by typing it in.



#####################
## Script of button "Value 1”, ID 1725 of CARD 1 of SUBSTACK TEI Encoding Cursor Palette of STACK STEP Transcription Module

on menuPick pItemName
   switch pItemName
      default
         if the label of me <> empty then send "mouseUp" to btn id 1738  of cd 1 of stack "TEI Encoding Cursor Palette"
   end switch
end menuPick

on mouseEnter
   local tLabel
   if the label of me <> empty then put the label of me into tLabel else put empty into tLabel
   set the wholeMatches to true
   if the label of btn id 1724 of cd 1 <> empty then send "menuPick"&& (the label of btn id 1724 of cd 1)&&","&tLabel to btn id 1724 of cd 1
   if tLabel <> empty  then set the label of me to tLabel
end mouseEnter

##TOOLTIP:
##Select a value or enter one by typing it in.



#####################
## Script of button "Attribute 2”, ID 1726 of CARD 1 of SUBSTACK TEI Encoding Cursor Palette of STACK STEP Transcription Module

on menuPick pItemName,pEmp
   local tTag
   if pItemName = empty then put the label of me into pItemName
   if pItemName = empty then exit menuPick
   if checkWhetherAlreadyTaken(pItemName) is true then exit menuPick
   put fld id 1053 of cd 1 of stack "TEI Encoding Cursor Palette" into tTag
   put populateValues(tTag,pItemName) into btn id 1727 of cd 1 of stack "TEI Encoding Cursor Palette"
   if pEmp is empty or pEmp is "pEmp" then set the label of btn id 1727 of cd 1 of stack "TEI Encoding Cursor Palette" to empty else set the label of btn id 1727 of cd 1 of stack "TEI Encoding Cursor Palette" to pEmp
   send "mouseUp" to btn id 1738  of cd 1 of stack "TEI Encoding Cursor Palette"
   if the height of this stack = 273 then extendStack
end menuPick

function populateValues pTag,pAttribute
   if pTag is empty then exit populateValues
   if "><" is in pTag then put char 2 to offset(">",pTag)-1 of pTag into pTag
   if space is in pTag then put char 1 to offset(space,pTag)-1 of pTag into pTag
   if char 1 of pTag is "<" and char -2 to -1 of pTag is "/>" then put char 2 to -3 of pTag into pTag
   return getValuesFromAttribute(pTag,pAttribute)
end populateValues

function getValuesFromAttribute pTag,pAttrib
   local tTagCustomProp,tAttCustomProp,tTempValue,tAttributes,ot,tValues,tItem
   put pTag&"TEI" into tTagCustomProp
   put pAttrib&"TEI" into tAttCustomProp
   replace ":" with "_" in tAttCustomProp
   put empty into tTempValue
   if tTagCustomProp is among the lines of the customKeys of stack "STEP Transcription Module" then
      do "put the "&tTagCustomProp&" of stack "&quote&"STEP Transcription Module"&quote&" into tAttributes"
      put lineOffset((char 1 to -4 of tAttCustomProp)&"|",tAttributes) into ot
      if ot is not 0 then
         set the itemDel to "|"
         put item 2 of line ot of tAttributes into tTempValue
      end if
   end if
   if tTempValue is empty then
      if tAttCustomProp is among the lines of the customKeys of stack "STEP Transcription Module" then
         do "put the "&tAttCustomProp&" of stack "&quote&"STEP Transcription Module"&quote&" into tValues"
         put lineOffset((char 1 to -4 of tAttCustomProp)&"|",tValues) into ot
         if ot is not 0 and "|" is in tValues then
            set the itemDel to "|"
            put item 2 of line ot of tValues into tTempValue
         else if ot is 0 and ":" is in tValues and "|" is not in tValues then
            set the itemDel to comma
            put empty into tTempValue
            repeat with x = 1 to the number of items of tValues
               put item x of tValues into tItem
               set the itemDel to ":"
               put item 2 of tItem & comma after tTempValue
               set the itemDel to comma
            end repeat
         end if
      end if
   end if
   replace comma with cr in tTempValue
   if char -1 of tTempValue = cr then delete char -1 of tTempValue
   return tTempValue
end getValuesFromAttribute

function checkWhetherAlreadyTaken pLabel
   local tList
   put "1724,1726,1728,1730" into tList
   repeat with i = 1 to 4
      if item i of tList = the id of me then next repeat
      if the label of btn id (item i of tList) of cd 1 is pLabel then 
         say "The attribute is already in use in the "&ordinal(i)& " menu. You cannot use it twice. You may enter more than one value for a same attribute; separate them by a space."
         set the label of me to empty
         return true
      end if
   end repeat
   return false
end checkWhetherAlreadyTaken

private function ordinal pNum
   local tOrds
   put "first,second,third,fourth,fifth,sixth,seventh,eighth,ninth,tenth" into tOrds
   return item pNum of tOrds
end ordinal

##TOOLTIP:
##Select an attribute or enter one by typing it in.



#####################
## Script of button "Value 2”, ID 1727 of CARD 1 of SUBSTACK TEI Encoding Cursor Palette of STACK STEP Transcription Module

on menuPick pItemName
   switch pItemName
      default
         if the label of me <> empty then send "mouseUp" to btn id 1738  of cd 1 of stack "TEI Encoding Cursor Palette"
   end switch
end menuPick

on mouseEnter
   local tLabel
   if the label of me <> empty then put the label of me into tLabel else put empty into tLabel
   set the wholeMatches to true
   if the label of btn id 1726 of cd 1 <> empty then send "menuPick"&& (the label of btn id 1726 of cd 1)&&","&tLabel to btn id 1726 of cd 1
   if tLabel <> empty  then set the label of me to tLabel
end mouseEnter

##TOOLTIP:
##Select a value or enter one by typing it in.



#####################
## Script of button "Attribute 3”, ID 1728 of CARD 1 of SUBSTACK TEI Encoding Cursor Palette of STACK STEP Transcription Module

on menuPick pItemName,pEmp
   local tTag
   if pItemName = empty then put the label of me into pItemName
   if pItemName = empty then exit menuPick
   if checkWhetherAlreadyTaken(pItemName) is true then exit menuPick
   put fld id 1053 of cd 1 of stack "TEI Encoding Cursor Palette" into tTag
   put populateValues(tTag,pItemName) into btn id 1729 of cd 1 of stack "TEI Encoding Cursor Palette"
   if pEmp is empty or pEmp is "pEmp" then set the label of btn id 1729 of cd 1 of stack "TEI Encoding Cursor Palette" to empty else set the label of btn id 1729 of cd 1 of stack "TEI Encoding Cursor Palette" to pEmp
   send "mouseUp" to btn id 1738  of cd 1 of stack "TEI Encoding Cursor Palette"
   if the height of this stack = 273 then extendStack
end menuPick

function populateValues pTag,pAttribute
   if pTag is empty then exit populateValues
   if "><" is in pTag then put char 2 to offset(">",pTag)-1 of pTag into pTag
   if space is in pTag then put char 1 to offset(space,pTag)-1 of pTag into pTag
   if char 1 of pTag is "<" and char -2 to -1 of pTag is "/>" then put char 2 to -3 of pTag into pTag
   return getValuesFromAttribute(pTag,pAttribute)
end populateValues

function getValuesFromAttribute pTag,pAttrib
   local tTagCustomProp,tAttCustomProp,tTempValue,tAttributes,ot,tValues,tItem
   put pTag&"TEI" into tTagCustomProp
   put pAttrib&"TEI" into tAttCustomProp
   replace ":" with "_" in tAttCustomProp
   put empty into tTempValue
   if tTagCustomProp is among the lines of the customKeys of stack "STEP Transcription Module" then
      do "put the "&tTagCustomProp&" of stack "&quote&"STEP Transcription Module"&quote&" into tAttributes"
      put lineOffset((char 1 to -4 of tAttCustomProp)&"|",tAttributes) into ot
      if ot is not 0 then
         set the itemDel to "|"
         put item 2 of line ot of tAttributes into tTempValue
      end if
   end if
   if tTempValue is empty then
      if tAttCustomProp is among the lines of the customKeys of stack "STEP Transcription Module" then
         do "put the "&tAttCustomProp&" of stack "&quote&"STEP Transcription Module"&quote&" into tValues"
         put lineOffset((char 1 to -4 of tAttCustomProp)&"|",tValues) into ot
         if ot is not 0 and "|" is in tValues then
            set the itemDel to "|"
            put item 2 of line ot of tValues into tTempValue
         else if ot is 0 and ":" is in tValues and "|" is not in tValues then
            set the itemDel to comma
            put empty into tTempValue
            repeat with x = 1 to the number of items of tValues
               put item x of tValues into tItem
               set the itemDel to ":"
               put item 2 of tItem & comma after tTempValue
               set the itemDel to comma
            end repeat
         end if
      end if
   end if
   replace comma with cr in tTempValue
   if char -1 of tTempValue = cr then delete char -1 of tTempValue
   return tTempValue
end getValuesFromAttribute

function checkWhetherAlreadyTaken pLabel
   local tList
   put "1724,1726,1728,1730" into tList
   repeat with i = 1 to 4
      if item i of tList = the id of me then next repeat
      if the label of btn id (item i of tList) of cd 1 is pLabel then 
         say "The attribute is already in use in the "&ordinal(i)& " menu. You cannot use it twice. You may enter more than one value for a same attribute; separate them by a space."
         set the label of me to empty
         return true
      end if
   end repeat
   return false
end checkWhetherAlreadyTaken

private function ordinal pNum
   local tOrds
   put "first,second,third,fourth,fifth,sixth,seventh,eighth,ninth,tenth" into tOrds
   return item pNum of tOrds
end ordinal




##TOOLTIP:
##Select an attribute or enter one by typing it in.



#####################
## Script of button "Value 3”, ID 1729 of CARD 1 of SUBSTACK TEI Encoding Cursor Palette of STACK STEP Transcription Module

on menuPick pItemName
   switch pItemName
      default
         if the label of me <> empty then send "mouseUp" to btn id 1738  of cd 1 of stack "TEI Encoding Cursor Palette"
   end switch
end menuPick

on mouseEnter
   local tLabel
   if the label of me <> empty then put the label of me into tLabel else put empty into tLabel
   set the wholeMatches to true
   if the label of btn id 1728 of cd 1 <> empty then send "menuPick"&& (the label of btn id 1728 of cd 1)&&","&tLabel to btn id 1728 of cd 1
   if tLabel <> empty  then set the label of me to tLabel
end mouseEnter

##TOOLTIP:
##Select a value or enter one by typing it in.



#####################
## Script of button "Attribute 4”, ID 1730 of CARD 1 of SUBSTACK TEI Encoding Cursor Palette of STACK STEP Transcription Module

on menuPick pItemName,pEmp
   local tTag
   if pItemName = empty then put the label of me into pItemName
   if pItemName = empty then exit menuPick
   if checkWhetherAlreadyTaken(pItemName) is true then exit menuPick
   put fld id 1053 of cd 1 of stack "TEI Encoding Cursor Palette" into tTag
   put populateValues(tTag,pItemName) into btn id 1731 of cd 1 of stack "TEI Encoding Cursor Palette"
   if pEmp is empty or pEmp is "pEmp" then set the label of btn id 1731 of cd 1 of stack "TEI Encoding Cursor Palette" to empty else set the label of btn id 1731 of cd 1 of stack "TEI Encoding Cursor Palette" to pEmp
   send "mouseUp" to btn id 1738  of cd 1 of stack "TEI Encoding Cursor Palette"
   if the height of this stack = 273 then extendStack
end menuPick

function populateValues pTag,pAttribute
   if pTag is empty then exit populateValues
   if "><" is in pTag then put char 2 to offset(">",pTag)-1 of pTag into pTag
   if space is in pTag then put char 1 to offset(space,pTag)-1 of pTag into pTag
   if char 1 of pTag is "<" and char -2 to -1 of pTag is "/>" then put char 2 to -3 of pTag into pTag
   return getValuesFromAttribute(pTag,pAttribute)
end populateValues

function getValuesFromAttribute pTag,pAttrib
   local tTagCustomProp,tAttCustomProp,tTempValue,tAttributes,ot,tValues,tItem
   put pTag&"TEI" into tTagCustomProp
   put pAttrib&"TEI" into tAttCustomProp
   replace ":" with "_" in tAttCustomProp
   put empty into tTempValue
   if tTagCustomProp is among the lines of the customKeys of stack "STEP Transcription Module" then
      do "put the "&tTagCustomProp&" of stack "&quote&"STEP Transcription Module"&quote&" into tAttributes"
      put lineOffset((char 1 to -4 of tAttCustomProp)&"|",tAttributes) into ot
      if ot is not 0 then
         set the itemDel to "|"
         put item 2 of line ot of tAttributes into tTempValue
      end if
   end if
   if tTempValue is empty then
      if tAttCustomProp is among the lines of the customKeys of stack "STEP Transcription Module" then
         do "put the "&tAttCustomProp&" of stack "&quote&"STEP Transcription Module"&quote&" into tValues"
         put lineOffset((char 1 to -4 of tAttCustomProp)&"|",tValues) into ot
         if ot is not 0 and "|" is in tValues then
            set the itemDel to "|"
            put item 2 of line ot of tValues into tTempValue
         else if ot is 0 and ":" is in tValues and "|" is not in tValues then
            set the itemDel to comma
            put empty into tTempValue
            repeat with x = 1 to the number of items of tValues
               put item x of tValues into tItem
               set the itemDel to ":"
               put item 2 of tItem & comma after tTempValue
               set the itemDel to comma
            end repeat
         end if
      end if
   end if
   replace comma with cr in tTempValue
   if char -1 of tTempValue = cr then delete char -1 of tTempValue
   return tTempValue
end getValuesFromAttribute

function checkWhetherAlreadyTaken pLabel
   local tList
   put "1724,1726,1728,1730" into tList
   repeat with i = 1 to 4
      if item i of tList = the id of me then next repeat
      if the label of btn id (item i of tList) of cd 1 is pLabel then 
         say "The attribute is already in use in the "&ordinal(i)& " menu. You cannot use it twice. You may enter more than one value for a same attribute; separate them by a space."
         set the label of me to empty
         return true
      end if
   end repeat
   return false
end checkWhetherAlreadyTaken

private function ordinal pNum
   local tOrds
   put "first,second,third,fourth,fifth,sixth,seventh,eighth,ninth,tenth" into tOrds
   return item pNum of tOrds
end ordinal



##TOOLTIP:
##Select an attribute or enter one by typing it in.



#####################
## Script of button "Value 4”, ID 1731 of CARD 1 of SUBSTACK TEI Encoding Cursor Palette of STACK STEP Transcription Module

on menuPick pItemName
   switch pItemName
      default
         if the label of me <> empty then send "mouseUp" to btn id 1738  of cd 1 of stack "TEI Encoding Cursor Palette"
   end switch
end menuPick

on mouseEnter
   local tLabel
   if the label of me <> empty then put the label of me into tLabel else put empty into tLabel
   set the wholeMatches to true
   if the label of btn id 1730 of cd 1 <> empty then send "menuPick"&& (the label of btn id 1730 of cd 1)&&","&tLabel to btn id 1730 of cd 1
   if tLabel <> empty  then set the label of me to tLabel
end mouseEnter

##TOOLTIP:
##Select a value or enter one by typing it in.



#####################
## Script of button "Close”, ID 1736 of CARD 1 of SUBSTACK TEI Encoding Cursor Palette of STACK STEP Transcription Module

on mouseUp
   local tTL
   lock screen
   put the topLeft of this stack into tTL
   set the height of this stack to 61
   set the width of this stack to 524
   set the hilite of btn id 1757 of cd 1 to true
   set the topLeft of this stack to tTL
end mouseUp

##TOOLTIP:
##Close the attribute/value section of this palette.



#####################
## Script of button "Load a//v”, ID 1738 of CARD 1 of SUBSTACK TEI Encoding Cursor Palette of STACK STEP Transcription Module

on mouseUp
   local tListOfAttVals,tAppendAttVals,tAtt,tVal,tPastList,tIconName,tIconName2,tIDNum,tFldIDs
   if fld id 1053 of cd 1 is empty then exit mouseUp
   put "1724 1725,1726 1727,1728 1729,1730 1731" into tListOfAttVals
   repeat with i = 1 to 4
      put the label of btn id (word 1 of item i of tListOfAttVals) of cd 1 into tAtt
      put the label of btn id (word 2 of item i of tListOfAttVals) of cd 1 into tVal
      if tAtt <> empty then
         if tVal is empty then put space & removeAttOddities(tAtt) & "="&quote&quote after tAppendAttVals
         else put space & removeAttOddities(tAtt) & "="&quote&removeValOddities(tVal)&quote after tAppendAttVals
      end if
   end repeat
   if tAppendAttVals is empty then 
      set the cTagAppend of this stack to empty
      put empty into fld id 1743 of cd 1 of stack "TEI Encoding Cursor Palette"
      exit mouseUp
   end if
   set the cTagAppend of stack "TEI Encoding Cursor Palette" to tAppendAttVals
   put tAppendAttVals into fld id 1743 of cd 1 of stack "TEI Encoding Cursor Palette"
   if the cKeepRecordingAttVal of stack "TEI Encoding Cursor Palette" is true then
      put the cPastListOfTagAppends of stack "TEI Encoding Cursor Palette" into tPastList
      put stripDuplicates2(tPastList) into tPastList
      if tPastList is empty then put tAppendAttVals into tPastList else put cr& tAppendAttVals after tPastList
      set the cPastListOfTagAppends of stack "TEI Encoding Cursor Palette" to tPastList
   end if
   put the cIconName of stack "TEI Encoding Cursor Palette" into tIconName
   put tIconName&&"iBeam av.png" into tIconName2
   set the icon of btn id 1057 of cd 1 to tIconName2
   set the cLoadedIconName of stack "TEI Encoding Cursor Palette" to tIconName2
   if the cTagAppend of stack "TEI Encoding Cursor Palette" <> empty and the cLoadedIconName of stack "TEI Encoding Cursor Palette" <> empty then 
      put the cLoadedIconName of stack "TEI Encoding Cursor Palette" into tIconName2
      put char 1 to offset("iBeam",tIconName2)-2 of tIconName2 into tIconName
      put tIconName into fld id 1053 of cd 1
      set the icon of btn id 1057 of cd 1 to tIconName2
      if there is an image tIconName2 of cd 1 of stack "STEP Transcription Module" then put the id of image tIconName2 of cd 1 of stack "STEP Transcription Module" into tIDNum
      put identifyWhichTranscriptionFieldToActivate(tIDNum) into tFldIDs
      repeat with j = 1 to the number of items of tFldIDs
         set the cCursorID of fld id (item j of tFldIDs) of cd 1 of stack "STEP Transcription Module" to tIDNum&cr&tIconName
      end repeat
      set the cCursorID of stack "TEI Encoding Cursor Palette" to tIDNum
   end if   
end mouseUp

function removeValOddities pCntr
   local tPunc
   put ",="&quote into tPunc
   repeat for each char tChar in tPunc
      replace tChar with empty in pCntr
   end repeat
   replace ";" with ";   " in pCntr
   replace ";   " with "; " in pCntr
   replace ":" with ":   " in pCntr
   replace ":   " with ": " in pCntr
   if "; " is in pCntr and ": " is not in pCntr then replace "; " with empty in pCntr
   if char -1 of pCntr is ";" then delete char -1 of pCntr
   replace "  " with space in pCntr
   return pCntr
end removeValOddities

function removeAttOddities pCntr
   local tPunc
   put ";,="&quote into tPunc
   repeat for each char tChar in tPunc
      replace tChar with empty in pCntr
   end repeat
   replace "  " with space in pCntr
   replace space with "-" in pCntr 
   return pCntr
end removeAttOddities

##TOOLTIP:
##Load all entered attributes and values
##within the selected encoding tag.



#####################
## Script of field "Alert”, ID 1740 of CARD 1 of SUBSTACK TEI Encoding Cursor Palette of STACK STEP Transcription Module

on mouseUp
   extendStack
end mouseUp



#####################
## Script of button "Enter Attributes”, ID 1742 of CARD 1 of SUBSTACK TEI Encoding Cursor Palette of STACK STEP Transcription Module

on menuPick pItemName
   local tTL,tAtt,tVal,ots,uts,tPastList,tListOfAttVals,tAppendAttVals
   switch pItemName
      case "Clear List of Past Attributes"
         set the cPastListOfTagAppends of stack "TEI Encoding Cursor Palette" to empty
         put "Clear List of Past Attributes" & cr & "Edit List of Past Attributes" into me
         put empty into fld id 1746 of cd 1 of  stack "TEI Encoding Cursor Palette"
         exit menuPick
         break
      case "Edit List of Past Attributes"
         put the cPastListOfTagAppends of stack "TEI Encoding Cursor Palette" into tPastList
         put stripDuplicates2(tPastList) into tPastList
         put tPastList into fld id 1746 of cd 1 of stack "TEI Encoding Cursor Palette"
         lock screen
         put the topLeft of stack "TEI Encoding Cursor Palette" into tTL
         set the width of stack "TEI Encoding Cursor Palette" to 800
         set the hilite of btn id 1757 of cd 1 to false
         set the topLeft of stack "TEI Encoding Cursor Palette" to tTL
         exit menuPick
         break
      default
         if quote is in pItemName then
            get offsets(quote,pItemName)
            if the number of items of it = 2 then
               put char 2 to (item 1 of it)-2 of pItemName into tAtt
               put char (item 1 of it)+1 to (item 2 of it)-1 of pItemName into tVal
               set the label of btn id whichAttributeMenu(tAtt) of cd 1 of stack "TEI Encoding Cursor Palette" to tAtt
               set the label of btn id (whichAttributeMenu(tAtt)+1) of cd 1 of stack "TEI Encoding Cursor Palette" to tVal
            else
               put offsets(space,pItemName) into ots
               put offsets("=",pItemName) into uts
               repeat with i = 1 to (the number of items of ots)
                  put char (item i of ots)+1 to (item i of uts)-1 of pItemName into tAtt
                  if i < (the number of items of ots) then put char (item i of uts)+2 to (item i+1 of ots)-2 of pItemName into tVal
                  else put char (item i of uts)+2 to -2 of pItemName into tVal
                  set the label of btn id whichAttributeMenu(tAtt) of cd 1 of stack "TEI Encoding Cursor Palette" to tAtt
                  set the label of btn id (whichAttributeMenu(tAtt)+1) of cd 1 of stack "TEI Encoding Cursor Palette" to tVal
               end repeat
            end if
         else
            put pItemName into tAtt
            set the label of btn id whichAttributeMenu(tAtt) of cd 1 of stack "TEI Encoding Cursor Palette" to tAtt
         end if
         break
   end switch
   put "1724 1725,1726 1727,1728 1729,1730 1731" into tListOfAttVals
   put empty into tAppendAttVals
   repeat with i = 1 to 4
      put the label of btn id (word 1 of item i of tListOfAttVals) of cd 1 into tAtt
      put the label of btn id (word 2 of item i of tListOfAttVals) of cd 1 into tVal
      if tAtt <> empty then
         if tVal is empty then put space & removeOddities(tAtt) & "="&quote&quote after tAppendAttVals
         else put space & removeOddities(tAtt) & "="&quote&removeOddities(tVal)&quote after tAppendAttVals
      end if
   end repeat
   if tAppendAttVals <> empty then send "mouseUp" to btn id 1738  of cd 1 of stack "TEI Encoding Cursor Palette"
end menuPick

on mouseEnter
   if the cPastListOfTagAppends of stack "TEI Encoding Cursor Palette" <> empty then put "Clear List of Past Attributes" & cr & "Edit List of Past Attributes" & cr & "-" & cr & stripDuplicates2(the cPastListOfTagAppends of stack "TEI Encoding Cursor Palette") into me
   else put "Clear List of Past Attributes" & cr & "Edit List of Past Attributes" into me
end mouseEnter

function whichAttributeMenu pLabel
   local tListOfAttVals
   put "1724 1725,1726 1727,1728 1729,1730 1731" into tListOfAttVals
   repeat with i = 1 to 4
      if the label of btn id (word 1 of item i of tListOfAttVals) is pLabel then return word 1 of item i of tListOfAttVals
   end repeat
   repeat with i = 1 to 4
      if the label of btn id (word 1 of item i of tListOfAttVals) is empty then return word 1 of item i of tListOfAttVals
   end repeat
   return 1724
end whichAttributeMenu

function removeOddities pCntr
   local tPunc
   put ";,="&quote into tPunc
   repeat for each char tChar in tPunc
      replace tChar with empty in pCntr
   end repeat
   return pCntr
end removeOddities


##TOOLTIP:
##Select past attributes and values.




#####################
## Script of field "Attributes with values”, ID 1743 of CARD 1 of SUBSTACK TEI Encoding Cursor Palette of STACK STEP Transcription Module

on mouseUp
   extendStack
end mouseUp



#####################
## Script of button "Clear”, ID 1744 of CARD 1 of SUBSTACK TEI Encoding Cursor Palette of STACK STEP Transcription Module

on mouseUp
   local tIconName,tIconName2,tFldIDs,tIDNum
   lock screen
   repeat with i = 1724 to 1731
      put empty into btn id i of cd 1 of stack "TEI Encoding Cursor Palette"
      set the label of btn id i of cd 1 of stack "TEI Encoding Cursor Palette" to empty
   end repeat
   set the cTagAppend of stack "TEI Encoding Cursor Palette" to empty
   set the cLoadedIconName of stack "TEI Encoding Cursor Palette" to empty
   put fld id 1053 of cd 1 of stack "TEI Encoding Cursor Palette" into tIconName
   if tIconName is not empty then
      put tIconName&&"iBeam.png" into tIconName2
      set the icon of btn id 1057 of cd 1 of stack "TEI Encoding Cursor Palette" to tIconName2
      if there is an image tIconName2 of cd 1 of stack "STEP Transcription Module" then put the id of image tIconName2 of cd 1 of stack "STEP Transcription Module" into tIDNum
      put identifyWhichTranscriptionFieldToActivate(tIDNum) into tFldIDs
      repeat with j = 1 to the number of items of tFldIDs
         set the cCursorID of fld id (item j of tFldIDs) of cd 1 of stack "STEP Transcription Module" to tIDNum&cr&tIconName
      end repeat
      set the cCursorID of stack "TEI Encoding Cursor Palette" to tIDNum
      send "mouseUp" to btn (tIconName&&"bevel button.png") of cd 1 of stack "TEI Encoding Cursor Palette"
   else
      set the icon of btn id 1057 of cd 1 of stack "TEI Encoding Cursor Palette" to 1065
      set the cCursorID of fld id 1004 of cd 1 of stack "STEP Transcription Module" to empty
      set the cCursorID of fld id 1041 of cd 1 of stack "STEP Transcription Module" to empty
      set the cCursorID of fld id 1151 of cd 1 of stack "STEP Transcription Module" to empty
   end if
   put empty into fld id 1743 of cd 1 of stack "TEI Encoding Cursor Palette"
   if the height of stack "TEI Encoding Cursor Palette" > 232 then extendStack
end mouseUp

##TOOLTIP:
##Clear all attributes and values.



#####################
## Script of button "Close List”, ID 1749 of CARD 1 of SUBSTACK TEI Encoding Cursor Palette of STACK STEP Transcription Module

on mouseUp
   local tTL
   lock screen
   put the topLeft of stack "TEI Encoding Cursor Palette" into tTL
   set the width of stack "TEI Encoding Cursor Palette" to 524
   set the topLeft of stack "TEI Encoding Cursor Palette" to tTL
   set the hilite of btn id 1757 of cd 1 to true
end mouseUp

##TOOLTIP:
##Hide this list from view.



#####################
## Script of button "Delete sel. lines”, ID 1750 of CARD 1 of SUBSTACK TEI Encoding Cursor Palette of STACK STEP Transcription Module

on mouseUp
   local tList,tListItems
   lock screen
   if the hilitedLines of fld id 1746 of cd 1 of stack "TEI Encoding Cursor Palette" = empty then exit mouseUp
   put the text of fld id 1746 of cd 1 of stack "TEI Encoding Cursor Palette" into tList
   put the hilitedLines of fld id 1746 of cd 1 of stack "TEI Encoding Cursor Palette" into tListItems
   repeat with i = (the number of items of tListItems) down to 1
      delete line (item i of tListItems) of tList
   end repeat
   put tList into fld id 1746 of cd 1 of stack "TEI Encoding Cursor Palette"
   set the cPastListOfTagAppends of stack "TEI Encoding Cursor Palette" to tList
   put tList & "-" & cr & "Clear List of Past Attributes" & cr & "Edit List of Past Attributes" into btn "Enter Attributes" of cd 1 of stack "TEI Encoding Cursor Palette"
end mouseUp

##TOOLTIP:
##Select discrete lines in the list above,
##then click this button to delete them.



#####################
## Script of button "Clear all”, ID 1751 of CARD 1 of SUBSTACK TEI Encoding Cursor Palette of STACK STEP Transcription Module

on mouseUp
   set the cPastListOfTagAppends of stack "TEI Encoding Cursor Palette" to empty
   put empty into fld id 1746 of cd 1 of stack "TEI Encoding Cursor Palette"
   put "Clear List of Past Attributes" & cr & "Edit List of Past Attributes" into btn "Enter Attributes" of cd 1 of stack "TEI Encoding Cursor Palette"
end mouseUp

##TOOLTIP:
##Delete the entire list of attributes and values.



#####################
## Script of button "Clear" of card "card id 1002”, ID 1753 of CARD 1 of SUBSTACK TEI Encoding Cursor Palette of STACK STEP Transcription Module

on mouseUp
   set the label of btn id 1724 of cd 1 of stack "TEI Encoding Cursor Palette" to empty
   set the label of btn id 1725 of cd 1 of stack "TEI Encoding Cursor Palette" to empty
   wait 1 millisecond
   send "mouseUp" to btn id 1738 of cd 1 of stack "TEI Encoding Cursor Palette"
end mouseUp

##TOOLTIP:
##Clear attribute and value on the left.

CUSTOM KEYS of button "Clear" of card "card id 1002" of stack "TEI Encoding Cursor Palette" of stack "/Users/adetienn/Documents/STEP Externals/STEP-LI 7.1.4/STEP Transcription Module.livecode" ID 1753 of CARD 1 of SUBSTACK TEI Encoding Cursor Palette of STACK STEP Transcription Module

cRect

404,95,418,109

cRectYosemite

404,95,418,109



#####################
## Script of button "Grey Stack Width Flipper”, ID 1757 of CARD 1 of SUBSTACK TEI Encoding Cursor Palette of STACK STEP Transcription Module

on mouseUp
   local tPastList
   if the hilite of me then set the rect of this stack to the topLeft of this stack, the left of this stack + the cContractedStackWidth of me, the bottom of this stack
   else 
      set the rect of this stack to the topLeft of this stack, the left of this stack + the cExpandedStackWidth of me, the bottom of this stack
      put the cPastListOfTagAppends of stack "TEI Encoding Cursor Palette" into tPastList
      put stripDuplicates2(tPastList) into tPastList
      put tPastList into fld id 1746 of cd 1 of stack "TEI Encoding Cursor Palette"
   end if
end mouseUp

on mouseDoubleUp
  mouseUp
end mouseDoubleUp

on mouseEnter
   if the width of this stack = 800 then set the toolTip of me to "Click to close the list of past attributes and values." else set the toolTip of me to "Click to open the list of past attributes and values."
end mouseEnter

##TOOLTIP:
##Click to open the list of past attributes and values.



#####################
## Script of button "List Attributes and Values”, ID 1761 of CARD 1 of SUBSTACK TEI Encoding Cursor Palette of STACK STEP Transcription Module

on mouseUp
   if the hilite of me is true then set the cKeepRecordingAttVal of stack "TEI Encoding Cursor Palette" to true
   else set the cKeepRecordingAttVal of stack "TEI Encoding Cursor Palette" to false
end mouseUp

##TOOLTIP:
##Check to add attributes/values to the menu list.
##Uncheck to stop adding new attrs/vals to that list.



#####################
#####################
## U. SUBSTACK Insert Attributes and Values of STACK STEP Transcription Module


#####################
## Script of SUBSTACK Insert Attributes and Values of STACK STEP Transcription Module


on preOpenStack
   if fld id 1004 of cd 1 <> empty then
      populateAttributes (the text of fld id 1004 of cd 1)
      repeat with i = 1017 to 1024
         set the label of btn id i of cd 1 to empty
      end repeat
   end if
   set the width of this stack to 430
end preOpenStack

on openStack
   checkLauncherWindow (the short name of this stack)
   pass openStack
end openStack

on resumeStack
   if fld id 1004 of cd 1 <> empty then
      populateAttributes (the text of fld id 1004 of cd 1)
      repeat with i = 1017 to 1024
         set the label of btn id i of cd 1 to empty
      end repeat
   end if
end resumeStack

on closeStack
   lock screen
   put empty into fld id 1004 of cd 1
   repeat with i = 1017 to 1024
      set the label of btn id i of cd 1 to empty
      put empty into btn id i of cd 1
   end repeat
end closeStack

on populateAttributes pTag
   repeat with i = 1017 to 1023 step 2
      put getAttributes(pTag) into btn id i of cd 1
   end repeat
end populateAttributes

function getAttributes pTag
   local tCustomProp,tAttributes,tTempAtt,ot
   put pTag&"TEI" into tCustomProp
   if tCustomProp is among the lines of the customKeys of stack "STEP Transcription Module" then
      do "put the "&tCustomProp&" of stack "&quote&"STEP Transcription Module"&quote&" into tAttributes"
      if tAttributes is not empty then
         if "|" is not in tAttributes and the number of items of tAttributes > 0 then
            replace comma with cr in tAttributes
            if char -1 of tAttributes = cr then delete char -1 of tAttributes
            return tAttributes
         else if "|" is in tAttributes then
            put empty into tTempAtt
            repeat with x = 1 to the number of lines of tAttributes
               put offset("|",line x of tAttributes) into ot
               put char 1 to ot-1 of line x of tAttributes & cr after tTempAtt
            end repeat
            delete char -1 of tTempAtt
            return tTempAtt
         end if
      end if
   end if
   return empty
end getAttributes

#####################
## Script of CARD 1 of SUBSTACK Insert Attributes and Values of STACK STEP Transcription Module

on extendStack
   local tTL
   lock screen
   put the topLeft of this stack into tTL
   if the height of this stack = 256 then 
      set the height of this stack to 320 
      repeat with j = 1047 to 1050
         set the bottom of control id j of cd 1 to (the bottom of control id j of cd 1)+64
      end repeat
      set the height of fld id 1044 of cd 1 to (the height of fld id 1044 of cd 1)+64
      set the top of fld id 1044 of cd 1 to -1
   else 
      set the height of this stack to 256
      repeat with j = 1047 to 1050
         set the bottom of control id j of cd 1 to (the bottom of control id j of cd 1)-64
      end repeat
      set the height of fld id 1044 of cd 1 to (the height of fld id 1044 of cd 1)-64
      set the top of fld id 1044 of cd 1 to -1
   end if
   set the topLeft of this stack to tTL
end extendStack

on say pMsg
   put pMsg into cd fld id 1040 of cd 1
   extendStack
end say

function stripDuplicates2 tListToStrip
   local tArray,tKeys
   repeat for each line tCount in tListToStrip
      put 1 into tArray[tCount]
   end repeat
   put the keys of tArray into tKeys
   sort tKeys ascending international
   return tKeys
end stripDuplicates2


#####################
## Script of field "Tag Name”, ID 1004 of CARD 1 of SUBSTACK Insert Attributes and Values of STACK STEP Transcription Module

on closeField
   populateAttributes (the text of me)
   repeat with i = 1017 to 1024
      set the label of btn id i of cd 1 to empty
   end repeat
end closeField

##TOOLTIP:
##Name of tag selected

#####################
## Script of button "Attribute 1”, ID 1017 of CARD 1 of SUBSTACK Insert Attributes and Values of STACK STEP Transcription Module

on menuPick pItemName,pEmp
   local tTag
   if pItemName = empty then put the label of me into pItemName
   if pItemName = empty then exit menuPick
   if checkWhetherAlreadyTaken(pItemName) is true then exit menuPick
   put fld id 1004 of cd 1 into tTag
   lock screen
   put populateValues(tTag,pItemName) into btn id 1018 of cd 1
   if the height of this stack = 320 then extendStack
   if pEmp is empty or pEmp is "pEmp" then set the label of btn id 1018 of cd 1 of stack "Insert Attributes and Values" to empty else set the label of btn id 1018 of cd 1 of stack "Insert Attributes and Values" to pEmp
   if pEmp is empty or pEmp is "pEmp" then set the enabled of btn "Undo" of cd 1 to false
end menuPick

function populateValues pTag,pAttribute
   if pTag is empty then exit populateValues
   if "><" is in pTag then put char 2 to offset(">",pTag)-1 of pTag into pTag
   if space is in pTag then put char 1 to offset(space,pTag)-1 of pTag into pTag
   if char 1 of pTag is "<" and char -2 to -1 of pTag is "/>" then put char 2 to -3 of pTag into pTag
   return getValuesFromAttribute(pTag,pAttribute)
end populateValues

function getValuesFromAttribute pTag,pAttrib
   local tTagCustomProp,tAttCustomProp,ot,tAttributes,tValues,tTempValue,tItem
   put pTag&"TEI" into tTagCustomProp
   put pAttrib&"TEI" into tAttCustomProp
   replace ":" with "_" in tAttCustomProp
   put empty into tTempValue
   if tTagCustomProp is among the lines of the customKeys of stack "STEP Transcription Module" then
      do "put the "&tTagCustomProp&" of stack "&quote&"STEP Transcription Module"&quote&" into tAttributes"
      put lineOffset((char 1 to -4 of tAttCustomProp)&"|",tAttributes) into ot
      if ot is not 0 then
         set the itemDel to "|"
         put item 2 of line ot of tAttributes into tTempValue
      end if
   end if
   if tTempValue is empty then
      if tAttCustomProp is among the lines of the customKeys of stack "STEP Transcription Module" then
         do "put the "&tAttCustomProp&" of stack "&quote&"STEP Transcription Module"&quote&" into tValues"
         put lineOffset((char 1 to -4 of tAttCustomProp)&"|",tValues) into ot
         if ot is not 0 and "|" is in tValues then
            set the itemDel to "|"
            put item 2 of line ot of tValues into tTempValue
         else if ot is 0 and ":" is in tValues and "|" is not in tValues then
            set the itemDel to comma
            put empty into tTempValue
            repeat with x = 1 to the number of items of tValues
               put item x of tValues into tItem
               set the itemDel to ":"
               put item 2 of tItem & comma after tTempValue
               set the itemDel to comma
            end repeat
         end if
      end if
   end if
   replace comma with cr in tTempValue
   if char -1 of tTempValue = cr then delete char -1 of tTempValue
   return tTempValue
end getValuesFromAttribute

function checkWhetherAlreadyTaken pLabel
   local tList
   put "1017,1019,1021,1023" into tList
   repeat with i = 1 to 4
      if item i of tList = the id of me then next repeat
      if the label of btn id (item i of tList) of cd 1 is pLabel then 
         say "The attribute is already in use in the "&ordinal(i)& " menu. You cannot use it twice. You may enter more than one value for a same attribute; separate them by a space."
         set the label of me to empty
         return true
      end if
   end repeat
   return false
end checkWhetherAlreadyTaken

private function ordinal pNum
   local tOrds
   put "first,second,third,fourth,fifth,sixth,seventh,eighth,ninth,tenth" into tOrds
   return item pNum of tOrds
end ordinal


##TOOLTIP:
##Select an attribute or type one.

#####################
## Script of button "Value 1”, ID 1018 of CARD 1 of SUBSTACK Insert Attributes and Values of STACK STEP Transcription Module

on menuPick pItemName
   switch pItemName
      
   end switch
end menuPick

on mouseEnter
   local tLabel
   if the label of me <> empty then put the label of me into tLabel else put empty into tLabel
   set the wholeMatches to true
   if the label of btn id 1017 of cd 1 <> empty then send "menuPick"&& (the label of btn id 1017 of cd 1)&","&tLabel to btn id 1017 of cd 1
   if tLabel <> empty  then set the label of me to tLabel
   if length(tLabel) > 21 then float tLabel
end mouseEnter

on mouseLeave
   set the vis of fld "Floater" of cd 1 to false
end mouseLeave

on float pmsg
   if pmsg is not empty then 
      if pmsg is not in fld "Floater" of cd 1 then set the vis of fld "Floater" of cd 1 to false
      put pmsg into fld "Floater" of cd 1
      set the textSize of fld "Floater" to 10
      set the height of fld "Floater" of cd 1 to (the formattedHeight of fld "Floater" of cd 1)/*-6*/
      set the dontWrap of fld "Floater" to true
      set the textAlign of fld "Floater" to "center"
      set the width of fld "Floater" of cd 1 to (the formattedWidth of fld "Floater" of cd 1)-4
      set the BottomRight of  fld "Floater" of cd 1 to the topRight of me
      set the vis of fld "Floater" of cd 1 to true
   else
      set the vis of fld "Floater" of cd 1 to false
   end if
end float

##TOOLTIP:
##Select a value or type one.

#####################
## Script of button "Attribute 2”, ID 1019 of CARD 1 of SUBSTACK Insert Attributes and Values of STACK STEP Transcription Module

on menuPick pItemName, pEmp
   local tTag
   if pItemName = empty then put the label of me into pItemName
   if pItemName = empty then exit menuPick
   if checkWhetherAlreadyTaken(pItemName) is true then exit menuPick
   put fld id 1004 of cd 1 into tTag
   lock screen
   put populateValues(tTag,pItemName) into btn id 1020 of cd 1
   if the height of this stack = 320 then extendStack
   if pEmp is empty or pEmp is "pEmp" then set the label of btn id 1020 of cd 1 of stack "Insert Attributes and Values" to empty else set the label of btn id 1020 of cd 1 of stack "Insert Attributes and Values" to pEmp
   if pEmp is empty then set the enabled of btn "Undo" of cd 1 to false
end menuPick

function populateValues pTag,pAttribute
   if pTag is empty then exit populateValues
   if "><" is in pTag then put char 2 to offset(">",pTag)-1 of pTag into pTag
   if space is in pTag then put char 1 to offset(space,pTag)-1 of pTag into pTag
   if char 1 of pTag is "<" and char -2 to -1 of pTag is "/>" then put char 2 to -3 of pTag into pTag
   return getValuesFromAttribute(pTag,pAttribute)
end populateValues

function getValuesFromAttribute pTag,pAttrib
   local tTagCustomProp,tAttCustomProp,ot,tAttributes,tValues,tTempValue,tItem
   put pTag&"TEI" into tTagCustomProp
   put pAttrib&"TEI" into tAttCustomProp
   replace ":" with "_" in tAttCustomProp
   put empty into tTempValue
   if tTagCustomProp is among the lines of the customKeys of stack "STEP Transcription Module" then
      do "put the "&tTagCustomProp&" of stack "&quote&"STEP Transcription Module"&quote&" into tAttributes"
      put lineOffset((char 1 to -4 of tAttCustomProp)&"|",tAttributes) into ot
      if ot is not 0 then
         set the itemDel to "|"
         put item 2 of line ot of tAttributes into tTempValue
      end if
   end if
   if tTempValue is empty then
      if tAttCustomProp is among the lines of the customKeys of stack "STEP Transcription Module" then
         do "put the "&tAttCustomProp&" of stack "&quote&"STEP Transcription Module"&quote&" into tValues"
         put lineOffset((char 1 to -4 of tAttCustomProp)&"|",tValues) into ot
         if ot is not 0 and "|" is in tValues then
            set the itemDel to "|"
            put item 2 of line ot of tValues into tTempValue
         else if ot is 0 and ":" is in tValues and "|" is not in tValues then
            set the itemDel to comma
            put empty into tTempValue
            repeat with x = 1 to the number of items of tValues
               put item x of tValues into tItem
               set the itemDel to ":"
               put item 2 of tItem & comma after tTempValue
               set the itemDel to comma
            end repeat
         end if
      end if
   end if
   replace comma with cr in tTempValue
   if char -1 of tTempValue = cr then delete char -1 of tTempValue
   return tTempValue
end getValuesFromAttribute

function checkWhetherAlreadyTaken pLabel
   local tList
   put "1017,1019,1021,1023" into tList
   repeat with i = 1 to 4
      if item i of tList = the id of me then next repeat
      if the label of btn id (item i of tList) of cd 1 is pLabel then 
         say "The attribute is already in use in the "&ordinal(i)& " menu. You cannot use it twice. You may enter more than one value for a same attribute; separate them by a space."
         set the label of me to empty
         return true
      end if
   end repeat
   return false
end checkWhetherAlreadyTaken

private function ordinal pNum
   local tOrds
   put "first,second,third,fourth,fifth,sixth,seventh,eighth,ninth,tenth" into tOrds
   return item pNum of tOrds
end ordinal

##TOOLTIP:
##Select an attribute or type one.

#####################
## Script of button "Value 2”, ID 1020 of CARD 1 of SUBSTACK Insert Attributes and Values of STACK STEP Transcription Module

on menuPick pItemName
   switch pItemName
      
   end switch
end menuPick

on mouseEnter
   local tLabel
   if the label of me <> empty then put the label of me into tLabel else put empty into tLabel
   set the wholeMatches to true
   if the label of btn id 1019 of cd 1 <> empty then send "menuPick"&& (the label of btn id 1019 of cd 1)&","&tLabel to btn id 1019 of cd 1
   if tLabel <> empty  then set the label of me to tLabel
   if length(tLabel) > 21 then float tLabel
end mouseEnter

on mouseLeave
   set the vis of fld "Floater" of cd 1 to false
end mouseLeave

on float pmsg
   if pmsg is not empty then 
      if pmsg is not in fld "Floater" of cd 1 then set the vis of fld "Floater" of cd 1 to false
      put pmsg into fld "Floater" of cd 1
      set the textSize of fld "Floater" to 10
      set the height of fld "Floater" of cd 1 to (the formattedHeight of fld "Floater" of cd 1)/*-6*/
      set the dontWrap of fld "Floater" to true
      set the textAlign of fld "Floater" to "center"
      set the width of fld "Floater" of cd 1 to (the formattedWidth of fld "Floater" of cd 1)-4
      set the BottomRight of  fld "Floater" of cd 1 to the topRight of me
      set the vis of fld "Floater" of cd 1 to true
   else
      set the vis of fld "Floater" of cd 1 to false
   end if
end float

##TOOLTIP:
##Select a value or type one.

#####################
## Script of button "Attribute 3”, ID 1021 of CARD 1 of SUBSTACK Insert Attributes and Values of STACK STEP Transcription Module

on menuPick pItemName,pEmp
   local tTag
   if pItemName = empty then put the label of me into pItemName
   if pItemName = empty then exit menuPick
   if checkWhetherAlreadyTaken(pItemName) is true then exit menuPick
   put fld id 1004 of cd 1 into tTag
   lock screen
   put populateValues(tTag,pItemName) into btn id 1022 of cd 1
   if the height of this stack = 320 then extendStack
   if pEmp is empty or pEmp is "pEmp" then set the label of btn id 1022 of cd 1 of stack "Insert Attributes and Values" to empty else set the label of btn id 1022 of cd 1 of stack "Insert Attributes and Values" to pEmp
   if pEmp is empty then set the enabled of btn "Undo" of cd 1 to false
end menuPick

function populateValues pTag,pAttribute
   if pTag is empty then exit populateValues
   if "><" is in pTag then put char 2 to offset(">",pTag)-1 of pTag into pTag
   if space is in pTag then put char 1 to offset(space,pTag)-1 of pTag into pTag
   if char 1 of pTag is "<" and char -2 to -1 of pTag is "/>" then put char 2 to -3 of pTag into pTag
   return getValuesFromAttribute(pTag,pAttribute)
end populateValues

function getValuesFromAttribute pTag,pAttrib
   local tTagCustomProp,tAttCustomProp,ot,tAttributes,tValues,tTempValue,tItem
   put pTag&"TEI" into tTagCustomProp
   put pAttrib&"TEI" into tAttCustomProp
   replace ":" with "_" in tAttCustomProp
   put empty into tTempValue
   if tTagCustomProp is among the lines of the customKeys of stack "STEP Transcription Module" then
      do "put the "&tTagCustomProp&" of stack "&quote&"STEP Transcription Module"&quote&" into tAttributes"
      put lineOffset((char 1 to -4 of tAttCustomProp)&"|",tAttributes) into ot
      if ot is not 0 then
         set the itemDel to "|"
         put item 2 of line ot of tAttributes into tTempValue
      end if
   end if
   if tTempValue is empty then
      if tAttCustomProp is among the lines of the customKeys of stack "STEP Transcription Module" then
         do "put the "&tAttCustomProp&" of stack "&quote&"STEP Transcription Module"&quote&" into tValues"
         put lineOffset((char 1 to -4 of tAttCustomProp)&"|",tValues) into ot
         if ot is not 0 and "|" is in tValues then
            set the itemDel to "|"
            put item 2 of line ot of tValues into tTempValue
         else if ot is 0 and ":" is in tValues and "|" is not in tValues then
            set the itemDel to comma
            put empty into tTempValue
            repeat with x = 1 to the number of items of tValues
               put item x of tValues into tItem
               set the itemDel to ":"
               put item 2 of tItem & comma after tTempValue
               set the itemDel to comma
            end repeat
         end if
      end if
   end if
   replace comma with cr in tTempValue
   if char -1 of tTempValue = cr then delete char -1 of tTempValue
   return tTempValue
end getValuesFromAttribute

function checkWhetherAlreadyTaken pLabel
   local tList
   put "1017,1019,1021,1023" into tList
   repeat with i = 1 to 4
      if item i of tList = the id of me then next repeat
      if the label of btn id (item i of tList) of cd 1 is pLabel then 
         say "The attribute is already in use in the "&ordinal(i)& " menu. You cannot use it twice. You may enter more than one value for a same attribute; separate them by a space."
         set the label of me to empty
         return true
      end if
   end repeat
   return false
end checkWhetherAlreadyTaken

private function ordinal pNum
   local tOrds
   put "first,second,third,fourth,fifth,sixth,seventh,eighth,ninth,tenth" into tOrds
   return item pNum of tOrds
end ordinal




##TOOLTIP:
##Select an attribute or type one.

#####################
## Script of button "Value 3”, ID 1022 of CARD 1 of SUBSTACK Insert Attributes and Values of STACK STEP Transcription Module

on menuPick pItemName
   switch pItemName
      
   end switch
end menuPick

on mouseEnter
   local tLabel
   if the label of me <> empty then put the label of me into tLabel else put empty into tLabel
   set the wholeMatches to true
   if the label of btn id 1021 of cd 1 <> empty then send "menuPick"&& (the label of btn id 1021 of cd 1)&","&tLabel to btn id 1021 of cd 1
   if tLabel <> empty  then set the label of me to tLabel
   if length(tLabel) > 21 then float tLabel
end mouseEnter

on mouseLeave
   set the vis of fld "Floater" of cd 1 to false
end mouseLeave

on float pmsg
   if pmsg is not empty then 
      if pmsg is not in fld "Floater" of cd 1 then set the vis of fld "Floater" of cd 1 to false
      put pmsg into fld "Floater" of cd 1
      set the textSize of fld "Floater" to 10
      set the height of fld "Floater" of cd 1 to (the formattedHeight of fld "Floater" of cd 1)-6
      set the dontWrap of fld "Floater" to true
      set the textAlign of fld "Floater" to "center"
      set the width of fld "Floater" of cd 1 to (the formattedWidth of fld "Floater" of cd 1)-4
      set the BottomRight of  fld "Floater" of cd 1 to the topRight of me
      set the vis of fld "Floater" of cd 1 to true
   else
      set the vis of fld "Floater" of cd 1 to false
   end if
end float

##TOOLTIP:
##Select a value or type one.

#####################
## Script of button "Attribute 4”, ID 1023 of CARD 1 of SUBSTACK Insert Attributes and Values of STACK STEP Transcription Module

on menuPick pItemName,pEmp
   local tTag
   if pItemName = empty then put the label of me into pItemName
   if pItemName = empty then exit menuPick
   if checkWhetherAlreadyTaken(pItemName) is true then exit menuPick
   put fld id 1004 of cd 1 into tTag
   lock screen
   put populateValues(tTag,pItemName) into btn id 1024 of cd 1
   if the height of this stack = 320 then extendStack
   if pEmp is empty or pEmp is "pEmp" then set the label of btn id 1024 of cd 1 of stack "Insert Attributes and Values" to empty else set the label of btn id 1024 of cd 1 of stack "Insert Attributes and Values" to pEmp
   if pEmp is empty then set the enabled of btn "Undo" of cd 1 to false
end menuPick

function populateValues pTag,pAttribute
   if pTag is empty then exit populateValues
   if "><" is in pTag then put char 2 to offset(">",pTag)-1 of pTag into pTag
   if space is in pTag then put char 1 to offset(space,pTag)-1 of pTag into pTag
   if char 1 of pTag is "<" and char -2 to -1 of pTag is "/>" then put char 2 to -3 of pTag into pTag
   return getValuesFromAttribute(pTag,pAttribute)
end populateValues

function getValuesFromAttribute pTag,pAttrib
   local tTagCustomProp,tAttCustomProp,ot,tAttributes,tValues,tTempValue,tItem
   put pTag&"TEI" into tTagCustomProp
   put pAttrib&"TEI" into tAttCustomProp
   replace ":" with "_" in tAttCustomProp
   put empty into tTempValue
   if tTagCustomProp is among the lines of the customKeys of stack "STEP Transcription Module" then
      do "put the "&tTagCustomProp&" of stack "&quote&"STEP Transcription Module"&quote&" into tAttributes"
      put lineOffset((char 1 to -4 of tAttCustomProp)&"|",tAttributes) into ot
      if ot is not 0 then
         set the itemDel to "|"
         put item 2 of line ot of tAttributes into tTempValue
      end if
   end if
   if tTempValue is empty then
      if tAttCustomProp is among the lines of the customKeys of stack "STEP Transcription Module" then
         do "put the "&tAttCustomProp&" of stack "&quote&"STEP Transcription Module"&quote&" into tValues"
         put lineOffset((char 1 to -4 of tAttCustomProp)&"|",tValues) into ot
         if ot is not 0 and "|" is in tValues then
            set the itemDel to "|"
            put item 2 of line ot of tValues into tTempValue
         else if ot is 0 and ":" is in tValues and "|" is not in tValues then
            set the itemDel to comma
            put empty into tTempValue
            repeat with x = 1 to the number of items of tValues
               put item x of tValues into tItem
               set the itemDel to ":"
               put item 2 of tItem & comma after tTempValue
               set the itemDel to comma
            end repeat
         end if
      end if
   end if
   replace comma with cr in tTempValue
   if char -1 of tTempValue = cr then delete char -1 of tTempValue
   return tTempValue
end getValuesFromAttribute

function checkWhetherAlreadyTaken pLabel
   local tList
   put "1017,1019,1021,1023" into tList
   repeat with i = 1 to 4
      if item i of tList = the id of me then next repeat
      if the label of btn id (item i of tList) of cd 1 is pLabel then 
         say "The attribute is already in use in the "&ordinal(i)& " menu. You cannot use it twice. You may enter more than one value for a same attribute; separate them by a space."
         set the label of me to empty
         return true
      end if
   end repeat
   return false
end checkWhetherAlreadyTaken

private function ordinal pNum
   local tOrds
   put "first,second,third,fourth,fifth,sixth,seventh,eighth,ninth,tenth" into tOrds
   return item pNum of tOrds
end ordinal



##TOOLTIP:
##Select an attribute or type one.

#####################
## Script of button "Value 4”, ID 1024 of CARD 1 of SUBSTACK Insert Attributes and Values of STACK STEP Transcription Module

on menuPick pItemName
   switch pItemName
      
   end switch
end menuPick

on mouseEnter
   local tLabel
   if the label of me <> empty then put the label of me into tLabel else put empty into tLabel
   set the wholeMatches to true
   if the label of btn id 1023 of cd 1 <> empty then send "menuPick"&& (the label of btn id 1023 of cd 1)&","&tLabel to btn id 1023 of cd 1
   if tLabel <> empty  then set the label of me to tLabel
   if length(tLabel) > 21 then float tLabel
end mouseEnter

on mouseLeave
   set the vis of fld "Floater" of cd 1 to false
end mouseLeave

on float pmsg
   if pmsg is not empty then 
      if pmsg is not in fld "Floater" of cd 1 then set the vis of fld "Floater" of cd 1 to false
      put pmsg into fld "Floater" of cd 1
      set the textSize of fld "Floater" to 10
      set the height of fld "Floater" of cd 1 to (the formattedHeight of fld "Floater" of cd 1)/*-6*/
      set the dontWrap of fld "Floater" to true
      set the textAlign of fld "Floater" to "center"
      set the width of fld "Floater" of cd 1 to (the formattedWidth of fld "Floater" of cd 1)-4
      set the BottomRight of  fld "Floater" of cd 1 to the topRight of me
      set the vis of fld "Floater" of cd 1 to true
   else
      set the vis of fld "Floater" of cd 1 to false
   end if
end float

##TOOLTIP:
##Select a value or type one.

#####################
## Script of button "Insert”, ID 1031 of CARD 1 of SUBSTACK Insert Attributes and Values of STACK STEP Transcription Module

on mouseUp
   local tVScroll,tListOfAttVals,tAppendAttVals,tAtt,tVal,tTag,tEndTag,tPastList,ut,ot,pFldID,tAng,tTop,tTagAttVAls,tText,tTagged
   put the cFieldID of stack "Insert Attributes and Values" into pFldID
   if fld id 1004 of cd 1 is empty then exit mouseUp
   put fld id pFldID of cd 1 of stack "STEP Transcription Module" into tText
   lock screen
   put the vScroll of fld id pFldID of cd 1 of stack "STEP Transcription Module" into tVScroll
   put the top of this stack into tTop
   put "1017 1018,1019 1020,1021 1022,1023 1024" into tListOfAttVals
   repeat with i = 1 to 4
      put the label of btn id (word 1 of item i of tListOfAttVals) of cd 1 into tAtt
      put the label of btn id (word 2 of item i of tListOfAttVals) of cd 1 into tVal
      if tAtt <> empty then
         if tVal is empty then put space & removeAttOddities(tAtt) & "="&quote&quote after tAppendAttVals
         else put space & removeAttOddities(tAtt) & "="&quote&removeValOddities(tVal)&quote after tAppendAttVals
      end if
   end repeat
   if tAppendAttVals is empty then exit mouseUp
   if the cKeepRecordingAttVal of stack "Insert Attributes and Values" is true then
      put the cPastListOfTagAppends of stack "Insert Attributes and Values" into tPastList
      put stripDuplicates2(tPastList) into tPastList
      if tPastList is empty then put tAppendAttVals into tPastList else put cr& tAppendAttVals after tPastList
      set the cPastListOfTagAppends of stack "Insert Attributes and Values" to tPastList
   end if
   put the cCharToCharPosition of stack "Insert Attributes and Values" into ut
   if ut is empty or pFldID is empty then exit mouseUp
   if char (item 2 of ut)-1 of fld id pFldID of cd 1 of stack "STEP Transcription Module" is "/" then put "/>" into tAng else put ">" into tAng
   set the cLastReplacedEncodedText of stack "Insert Attributes and Values" to char (item 1 of ut) to (item 2 of ut) of fld id pFldID of cd 1 of stack "STEP Transcription Module"
   set the enabled of btn "Undo" of cd 1 of stack "Insert Attributes and Values" to true
   put fld id 1004 of cd 1 & tAppendAttVals into tTagAttVAls
   put trueword 1 of tTagAttVAls into tTag
   if tAng <> "/>" and  tTag is not among the items of "p,table,row,note" then 
      put "</"&trueword 1 of tTagAttVAls & ">" into tEndTag
      put (item 2 of ut)+offset(tEndTag,tText,item 2 of ut)+length(tEndTag)-1 into ot
   else
      put (item 1 of ut) + length(tTagAttVAls)+1 into ot
   end if
   put "<" & tTagAttVAls & tAng into char (item 1 of ut) to (item 2 of ut) of fld id pFldID of cd 1 of stack "STEP Transcription Module"
   set the cNewAttValLength of stack "Insert Attributes and Values" to length("<" & tTagAttVAls & tAng)
   put fld id pFldID of cd 1 of stack "STEP Transcription Module" into tText
   put empty into fld id 1037 of cd 1 of stack "Insert Attributes and Values"
   put char (item 1 of ut) to ot of tText into tTagged
   if tTag is not among the items of "p,table,row,note" then send "colorizeJustEnteredTag tTagged,item 1 of ut,,pFldID" to cd 1 of stack "STEP Transcription Module"
   else send "colorizeOpenOnlyTag tTagged,item 1 of ut,pFldID" to cd 1 of stack "STEP Transcription Module"
   describeAlts
   select after char ot of fld id pFldID of cd 1 of stack "STEP Transcription Module"
   set the top of this stack to tTop + (the effective textHeight of fld id pFldID of cd 1 of stack "STEP Transcription Module")
   set the vScroll of fld id pFldID of cd 1 of stack "STEP Transcription Module" to tVScroll
end mouseUp

function removeValOddities pCntr
   local tPunc
   put ",="&quote into tPunc
   repeat for each char tChar in tPunc
      replace tChar with empty in pCntr
   end repeat
   replace ";" with ";   " in pCntr
   replace ";   " with "; " in pCntr
   replace ":" with ":   " in pCntr
   replace ":   " with ":" in pCntr
   if "; " is in pCntr and ": " is not in pCntr then replace "; " with empty in pCntr
   if char -1 of pCntr is ";" then delete char -1 of pCntr
   replace "  " with space in pCntr
   return pCntr
end removeValOddities

function removeAttOddities pCntr
   local tPunc
   put ";,="&quote into tPunc
   repeat for each char tChar in tPunc
      replace tChar with empty in pCntr
   end repeat
   replace "  " with space in pCntr
   replace space with "-" in pCntr 
   return pCntr
end removeAttOddities

##TOOLTIP:
##Insert all entered attributes and values within
##the selected opening tag shown at top.

#####################
## Script of button "Clear”, ID 1035 of CARD 1 of SUBSTACK Insert Attributes and Values of STACK STEP Transcription Module

on mouseUp
   lock screen
   repeat with i = 1017 to 1024
      put empty into btn id i of cd 1
      set the label of btn id i of cd 1 to empty
   end repeat
   put empty into fld id 1004 of cd 1
   put empty into fld id 1037 of cd 1
   set the cCharToCharPosition of stack "Insert Attributes and Values" to empty
   set the cFieldID of stack "Insert Attributes and Values" to empty
   set the cLastReplacedEncodedText of stack "Insert Attributes and Values" to empty
   set the enabled of btn "Undo" of cd 1 to false
   if the height of this stack = 320 then extendStack
end mouseUp

##TOOLTIP:
##Clear all attributes and values.

#####################
## Script of field "Full tag”, ID 1037 of CARD 1 of SUBSTACK Insert Attributes and Values of STACK STEP Transcription Module

on closeField
   populateAttributes (the text of me)
   repeat with i = 1017 to 1024
      set the label of btn id i of cd 1 to empty
   end repeat
end closeField

##TOOLTIP:
##Full tag content to confirm which opening tag is the target for attribute/value insertion.

#####################
## Script of button "Turn Off & Close”, ID 1038 of CARD 1 of SUBSTACK Insert Attributes and Values of STACK STEP Transcription Module

on mouseUp
   set the enabled of btn "Undo" of cd 1 to false
   set the width of this stack to 430
   send "mouseUp" to btn id 1385 of cd 1 of stack "STEP Transcription Module"
end mouseUp

##TOOLTIP:
##Turn off insertion of attributes and close palette.

#####################
## Script of field "Alert" of card id 1002 of stack "Insert Attributes and Values" of stack "/Users/adetienn/Documents/STEP Externals/STEP-LI 7.1.4/STEP Transcription Module.livecode" ID 1040 of CARD 1 of SUBSTACK Insert Attributes and Values of STACK STEP Transcription Module

on mouseUp
   extendStack
end mouseUp

#####################
## Script of button "Enter Attributes”, ID 1041 of CARD 1 of SUBSTACK Insert Attributes and Values of STACK STEP Transcription Module

on menuPick pItemName
   local tPastList,tTL,tAtt,tVal,ots,uts,tListOfAttVals,tAppendAttVals
   switch pItemName
      case "Clear List of Past Attributes"
         set the cPastListOfTagAppends of stack "Insert Attributes and Values" to empty
         put "Clear List of Past Attributes" & cr & "Edit List of Past Attributes" into me
         put empty into fld id 1044 of cd 1 of  stack "Insert Attributes and Values"
         exit menuPick
         break
      case "Edit List of Past Attributes"
         put the cPastListOfTagAppends of stack "Insert Attributes and Values" into tPastList
         put stripDuplicates2(tPastList) into tPastList
         put tPastList into fld id 1044 of cd 1 of stack "Insert Attributes and Values"
         lock screen
         put the topLeft of stack "Insert Attributes and Values" into tTL
         set the width of stack "Insert Attributes and Values" to 706
         set the hilite of btn id 1051 of cd 1 to false
         set the topLeft of stack "Insert Attributes and Values" to tTL
         exit menuPick
         break
      default
         if quote is in pItemName then
            get offsets(quote,pItemName)
            if the number of items of it = 2 then
               put char 2 to (item 1 of it)-2 of pItemName into tAtt
               put char (item 1 of it)+1 to (item 2 of it)-1 of pItemName into tVal
               set the label of btn id whichAttributeMenu(tAtt) of cd 1 of stack "Insert Attributes and Values" to tAtt
               set the label of btn id (whichAttributeMenu(tAtt)+1) of cd 1 of stack "Insert Attributes and Values" to tVal
            else
               put offsets(space,pItemName) into ots
               put offsets("=",pItemName) into uts
               repeat with i = 1 to (the number of items of ots)
                  put char (item i of ots)+1 to (item i of uts)-1 of pItemName into tAtt
                  if i < (the number of items of ots) then put char (item i of uts)+2 to (item i+1 of ots)-2 of pItemName into tVal
                  else put char (item i of uts)+2 to -2 of pItemName into tVal
                  set the label of btn id whichAttributeMenu(tAtt) of cd 1 of stack "Insert Attributes and Values" to tAtt
                  set the label of btn id (whichAttributeMenu(tAtt)+1) of cd 1 of stack "Insert Attributes and Values" to tVal
               end repeat
            end if
         else
            put pItemName into tAtt
            set the label of btn id whichAttributeMenu(tAtt) of cd 1 of stack "Insert Attributes and Values" to tAtt
         end if
         break
   end switch
   put "1017 1018,1019 1020,1021 1022,1023 1024" into tListOfAttVals
   put empty into tAppendAttVals
   repeat with i = 1 to 4
      put the label of btn id (word 1 of item i of tListOfAttVals) of cd 1 into tAtt
      put the label of btn id (word 2 of item i of tListOfAttVals) of cd 1 into tVal
      if tAtt <> empty then
         if tVal is empty then put space & removeOddities(tAtt) & "="&quote&quote after tAppendAttVals
         else put space & removeOddities(tAtt) & "="&quote&removeOddities(tVal)&quote after tAppendAttVals
      end if
   end repeat
end menuPick

on mouseEnter
   if the cPastListOfTagAppends of stack "Insert Attributes and Values" <> empty then put "Clear List of Past Attributes" & cr & "Edit List of Past Attributes" & cr & "-" & cr & stripDuplicates2(the cPastListOfTagAppends of stack "Insert Attributes and Values") into me
   else put "Clear List of Past Attributes" & cr & "Edit List of Past Attributes" into me
end mouseEnter

function whichAttributeMenu pLabel
   local tListOfAttVals
   put "1017 1018,1019 1020,1021 1022,1023 1024" into tListOfAttVals
   repeat with i = 1 to 4
      if the label of btn id (word 1 of item i of tListOfAttVals) is pLabel then return word 1 of item i of tListOfAttVals
   end repeat
   repeat with i = 1 to 4
      if the label of btn id (word 1 of item i of tListOfAttVals) is empty then return word 1 of item i of tListOfAttVals
   end repeat
   return 1017
end whichAttributeMenu

function removeOddities pCntr
   local tPunc
   put ";,="&quote into tPunc
   repeat for each char tChar in tPunc
      replace tChar with empty in pCntr
   end repeat
   return pCntr
end removeOddities


##TOOLTIP:
##Select past attributes and values.

#####################
## Script of button "Undo”, ID 1043 of CARD 1 of SUBSTACK Insert Attributes and Values of STACK STEP Transcription Module

on mouseUp
   local ut
   put the cCharToCharPosition of stack "Insert Attributes and Values" into ut
   put the cLastReplacedEncodedText of stack "Insert Attributes and Values" into char (item 1 of ut) to (item 1 of ut)+(the cNewAttValLength of stack "Insert Attributes and Values")-1 of fld id (the cFieldID of stack "Insert Attributes and Values") of cd 1 of stack "STEP Transcription Module"
   describeAlts --send "mouseUp" to btn id 1020 of cd 1 of stack "STEP Transcription Module"
   send "mouseUp"&&(the cFieldID of stack "Insert Attributes and Values") to btn "Color All Tags" of cd 1 of stack "STEP Transcription Module" 
   set the cLastReplacedEncodedText of stack "Insert Attributes and Values" to empty
   set the enabled of me to false
end mouseUp

##TOOLTIP:
##Undo last insertion.

#####################
## Script of button "Delete sel. lines”, ID 1047 of CARD 1 of SUBSTACK Insert Attributes and Values of STACK STEP Transcription Module

on mouseUp
   local tList,tListItems
   lock screen
   if the hilitedLines of fld id 1044 of cd 1 of stack "Insert Attributes and Values" = empty then exit mouseUp
   put the text of fld id 1044 of cd 1 of stack "Insert Attributes and Values" into tList
   put the hilitedLines of fld id 1044 of cd 1 of stack "Insert Attributes and Values" into tListItems
   repeat with i = (the number of items of tListItems) down to 1
      delete line (item i of tListItems) of tList
   end repeat
   put tList into fld id 1044 of cd 1 of stack "Insert Attributes and Values"
   set the cPastListOfTagAppends of stack "Insert Attributes and Values" to tList
   put "Clear List of Past Attributes" & cr & "Edit List of Past Attributes" into btn "Enter Attributes" of cd 1 of stack "Insert Attributes and Values"
end mouseUp

##TOOLTIP:
##Select discrete lines in the list above,
##then click this button to delete them.

#####################
## Script of button "Clear all”, ID 1048 of CARD 1 of SUBSTACK Insert Attributes and Values of STACK STEP Transcription Module

on mouseUp
   set the cPastListOfTagAppends of stack "Insert Attributes and Values" to empty
   put empty into fld id 1044 of cd 1 of stack "Insert Attributes and Values"
   put "Clear List of Past Attributes" & cr & "Edit List of Past Attributes" into btn "Enter Attributes" of cd 1 of stack "Insert Attributes and Values"
end mouseUp

##TOOLTIP:
##Delete the entire list of attributes and values.

C#####################
## Script of button "Close List”, ID 1049 of CARD 1 of SUBSTACK Insert Attributes and Values of STACK STEP Transcription Module

on mouseUp
   local tTL
   lock screen
   put the topLeft of stack "Insert Attributes and Values" into tTL
   set the width of stack "Insert Attributes and Values" to 430
   set the topLeft of stack "Insert Attributes and Values" to tTL
   set the hilite of btn id 1051 of cd 1 to true
end mouseUp

##TOOLTIP:
##Hide this list from view.

#####################
## Script of button "Grey Stack Width Flipper”, ID 1051 of CARD 1 of SUBSTACK Insert Attributes and Values of STACK STEP Transcription Module

on mouseUp
   local tPastList
   if the hilite of me then set the rect of this stack to the topLeft of this stack, the left of this stack + the cContractedStackWidth of me, the bottom of this stack
   else 
      set the rect of this stack to the topLeft of this stack, the left of this stack + the cExpandedStackWidth of me, the bottom of this stack
      put the cPastListOfTagAppends of stack "Insert Attributes and Values" into tPastList
      put stripDuplicates2(tPastList) into tPastList
      put tPastList into fld id 1044 of cd 1 of stack "Insert Attributes and Values"
   end if
end mouseUp

on mouseDoubleUp
  mouseUp
end mouseDoubleUp

on mouseEnter
   if the width of this stack = 706 then set the toolTip of me to "Click to close the list of past attributes and values." else set the toolTip of me to "Click to open the list of past attributes and values."
end mouseEnter

##TOOLTIP:
##Click to open the list of past attributes and values.

#####################
## Script of button "Clear”, ID 1053 of CARD 1 of SUBSTACK Insert Attributes and Values of STACK STEP Transcription Module

on mouseUp
   set the label of btn id 1017 of cd 1 of stack "Insert Attributes and Values" to empty
   set the label of btn id 1018 of cd 1 of stack "Insert Attributes and Values" to empty
end mouseUp

##TOOLTIP:
##Clear attribute and value on the left.

#####################
## Script of button "List Attributes and Values”, ID 1057 of CARD 1 of SUBSTACK Insert Attributes and Values of STACK STEP Transcription Module

on mouseUp
   if the hilite of me is true then set the cKeepRecordingAttVal of stack "Insert Attributes and Values" to true
   else set the cKeepRecordingAttVal of stack "Insert Attributes and Values" to false
end mouseUp

##TOOLTIP:
##Check to add attributes/values to the menu list.
##Uncheck to stop adding new attrs/vals to that list.


#####################
#####################
## V. SUBSTACK Download File From Server of STACK STEP Transcription Module

#####################
## Script of SUBSTACK Download File From Server of STACK STEP Transcription Module

on preOpenStack
   lock screen
   set the width of this stack to the minWidth of this stack
   put the topLeft of  stack "STEP Transcription Module" into xy
   set the topLeft of this stack to (item 1 of xy)+1,(item 2 of xy)+46
end preOpenStack

on openStack
   checkLauncherWindow (the short name of this stack)
   pass openStack
end openStack


#####################
## Script of CARD 1 of SUBSTACK Download File From Server of STACK STEP Transcription Module




#####################
## Script of button "HTTP”, ID 1004 of CARD 1 of SUBSTACK Download File From Server of STACK STEP Transcription Module

on mouseUp
   put fld id 1011 of cd 1 into tPath
   if tPath is empty then put "http://" into fld id 1011 of cd 1
   else 
      if "://" is in tPath then
         get offset("://",tPath)
         put "http://" into char 1 to it+2 of tPath
         put tPath into fld id 1011 of cd 1
      else if "://" is not in tPath then
         put "http://" before fld id 1011 of cd 1
      end if
   end if
end mouseUp

##TOOLTIP:
##Use an HTTP server address


#####################
## Script of button "HTTPS”, ID 1005 of CARD 1 of SUBSTACK Download File From Server of STACK STEP Transcription Module

on mouseUp
   put fld id 1011 of cd 1 into tPath
   if tPath is empty then put "https://" into fld id 1011 of cd 1
   else 
      if "://" is in tPath then
         get offset("://",tPath)
         put "https://" into char 1 to it+2 of tPath
         put tPath into fld id 1011 of cd 1
      else if "://" is not in tPath then
         put "https://" before fld id 1011 of cd 1
      end if
   end if
end mouseUp

##TOOLTIP:
##Use an HTTPS server address


#####################
## Script of button "FTP”, ID 1006 of CARD 1 of SUBSTACK Download File From Server of STACK STEP Transcription Module

on mouseUp
   put fld id 1011 of cd 1 into tPath
   if tPath is empty then put "ftp://" into fld id 1011 of cd 1
   else 
      if "://" is in tPath then
         get offset("://",tPath)
         put "ftp://" into char 1 to it+2 of tPath
         put tPath into fld id 1011 of cd 1
      else if "://" is not in tPath then
         put "ftp://" before fld id 1011 of cd 1
      end if
   end if
end mouseUp

##TOOLTIP:
##Use an FTP server address


#####################
## Script of button "Download”, ID 1016 of CARD 1 of SUBSTACK Download File From Server of STACK STEP Transcription Module

local newPath

on mouseUp
   local tList,tFile,ut
   get line 1 of the text of fld id 1011 of cd 1
   if it is empty or char -3 to -1 of it = "//:" then exit mouseUp
   put the cPastListOfURLs of stack "Download File From Server" into tList
   put doubleSlashes(it) into ut
   if tList is empty and ut is not among the lines of tList then put ut into tList else put cr&ut after tList
   set the cPastListOfURLs of stack "Download File From Server" to tList
   set the itemDel to "/"
   put item -1 of it into tFile
   put importedFilesFolder()&"/"&tFile into newPath
   set the cURLImportedFilePath of stack "STEP Transcription Module" to newPath
   libURLDownloadToFile it,newPath,"downloadComplete"
end mouseUp

on downloadComplete param1,param2
   local textToDecode
   set the cursor to busy
   set the itemDel to "/"
   if "error" is not in param2 then 
      answer "File "& (item -1 of param1) & " has been downloaded successfully into folder "& (item 3 to -1 of importedFilesFolder()) & "."
      close stack "Download File From Server"
      if the cDecoding of btn id 1023 of cd 1 <> empty then 
         put url ("file:"&newPath&quote) into textToDecode
         put textDecode(textToDecode,the cDecoding of btn id 1023 of cd 1) into url ("file:"&newPath&quote)
         answer "File "& (item -1 of param1) & " has been decoded successfully from "&the cDecoding of btn id 1023 of cd 1 &" and can now be imported into the Transcription field."
      end if
   else answer param2
end downloadComplete

private function getDocumentsFolderPath
   local DocumentsFolder
   if the platform = "MacOS" then
      if the platform is "MacOS" and item 1 of the systemVersion >= 10 then 
         put specialFolderPath("Documents") into DocumentsFolder
      else 
         put the defaultFolder into DocumentsFolder
      end if
   else if the platform = "Win32" then
      put specialFolderPath("Documents") into DocumentsFolder
   else if the platform = "Linux" then
      put specialFolderPath("Home") into DocumentsFolder
   end if
   if char -1 of DocumentsFolder is not "/" then put "/" after DocumentsFolder
   return DocumentsFolder
end getDocumentsFolderPath

private function importedFilesFolder
   local ot,tPath
   put the effective filename of this stack into ot
   set the defaultFolder to getDocumentsFolderPath()
   if not (there is a folder "STEP Files") then create folder "STEP Files"
   put getDocumentsFolderPath() & "STEP Files" into tPath
   set the defaultFolder to tPath
   if not (there is a folder "STEP Imported Files") then create folder "STEP Imported Files"
   set the defaultFolder to item 1 to -2 of ot
   return tPath & "/STEP Imported Files"
end importedFilesFolder

function doubleSlashes pPath
   replace "/" with "//" in pPath
   return pPath
end doubleSlashes

function singleSlashes pPath
   replace "//" with "/" in pPath
   return pPath
end singleSlashes


#####################
## Script of button "Cancel”, ID 1020 of CARD 1 of SUBSTACK Download File From Server of STACK STEP Transcription Module

on mouseUp
   repeat with i = 1004 to 1006
      set the hilite of btn id i of cd 1 to false
   end repeat
   put empty into fld id 1011 of cd 1
   close stack "Download File from Server"
end mouseUp

##TOOLTIP:
##Close this dialog without downloading anything.


#####################
## Script of button "Clear”, ID 1021 of CARD 1 of SUBSTACK Download File From Server of STACK STEP Transcription Module

on mouseUp
   repeat with i = 1004 to 1006
      set the hilite of btn id i of cd 1 to false
   end repeat
   put empty into fld id 1011 of cd 1
   put empty into fld id 1024 of cd 1
   set the cDecoding of btn id 1023 of cd 1 to empty
end mouseUp

##TOOLTIP:
##Clear the field above.


#####################
## Script of button "Enter URL”, ID 1018 of CARD 1 of SUBSTACK Download File From Server of STACK STEP Transcription Module

on menuPick pItemName
   switch pItemName
      case "Clear List of Past URLs"
         set the cPastListOfURLs of stack "Download File From Server" to empty
         put "Clear List of Past URLs" into me
         exit menuPick
         break
      default
         put pitemName into fld id 1011 of cd 1
         break
   end switch
end menuPick

on mouseEnter
   if the cPastListOfURLs of stack "Download File From Server" <> empty then
      put "Clear List of Past URLs" & cr & "-" & cr & stripDuplicates2(the cPastListOfURLs of stack "Download File From Server") into me
   else put "Clear List of Past URLs" into me
end mouseEnter

##TOOLTIP:
##Select a previously used URL.


#####################
## Script of button "Text Decoding…”, ID 1023 of CARD 1 of SUBSTACK Download File From Server of STACK STEP Transcription Module

on menuPick pItemName
   if "(" is in pItemName then put char 1 to offset("(",pItemName)-2 of pItemName into pItemName
   switch pItemName
      case "None"
         set the cEncoding of me to empty
         put empty into fld id 1024 of cd 1
         exit menuPick
         break
      default
         set the cEncoding of me to pItemName
         put pItemName into fld id 1024 of cd 1
   end switch
end menuPick

##TOOLTIP:
##Select the text-encoding format used by the sending platform or server.


#####################
#####################
## W. SUBSTACK Upload File To Server of STACK STEP Transcription Module

#####################
## Script of SUBSTACK Upload File To Server of STACK STEP Transcription Module


on preOpenStack
   local xy
   lock screen
   set the width of this stack to the minWidth of this stack
   put the topLeft of  stack "STEP Transcription Module" into xy
   set the topLeft of this stack to (item 1 of xy)+1,(item 2 of xy)+46
   put empty into fld id 1026 of cd 1
   put empty into fld id 1027 of cd 1
   put empty into fld id 1011 of cd 1
   put empty into fld id 1029 of cd 1
   select before fld id 1026 of cd 1
end preOpenStack

on openStack
   checkLauncherWindow (the short name of this stack)
   pass openStack
end openStack

on closeStack
   put empty into fld id 1026 of cd 1
   put empty into fld id 1027 of cd 1
   put empty into fld id 1011 of cd 1
   put empty into fld id 1029 of cd 1
   set the cWhichKey of fld id 1027 of cd 1 to empty
end closeStack


#####################
## Script of field "FTP field”, ID 1011 of CARD 1 of SUBSTACK Upload File To Server of STACK STEP Transcription Module

on mouseEnter
   if fld id 1011 of cd 1 <> "ftp://" then
      if "ftp://" is not in fld id 1011 of cd 1 then put "ftp://" before fld id 1011 of cd 1
   end if
end mouseEnter
   
   
on closeField
   if fld id 1011 of cd 1 <> empty and fld id 1011 of cd 1 <> "ftp://" then
      if "ftp://" is not in fld id 1011 of cd 1 then put "ftp://" before fld id 1011 of cd 1
   end if
   if the hilite of btn id 1032 of cd 1 is true and fld id 1026 of cd 1 <> empty then
      put fld id 1026 of cd 1 into tUs
      put fld id 1011 of cd 1 into tHo
      set the itemDel to "|"
      put the cUserHostPass of me into tList
      get lineOffset(tUs&"|"&tHo,tList)
      if it <> 0 then 
         put item 3 of line it of tList into fld id 1027 of cd 1
         set the cWhichKey of fld id 1027 of cd 1 to fld id 1027 of cd 1
         if the hilite of btn id 1031 is false then 
            put length(fld id 1027 of cd 1) into ut
            repeat with i = 1 to ut
               put numToNativeChar(165) into char i of fld id 1027 of cd 1
            end repeat
         end if
      end if
   end if
end closeField

on tabKey
   select the text of fld id 1027 of cd 1
end tabKey


#####################
## Script of button "Upload”, ID 1016 of CARD 1 of SUBSTACK Upload File To Server of STACK STEP Transcription Module

local FTPHOST,FTPUSER,FTPPASS,pActive

on mouseUp
   local tList,ut,tUs,tHo,tPa,tUHP
   get line 1 of the text of fld id 1011 of cd 1
   if it is empty or it is "FTP://" then exit mouseUp
   put the cPastListOfFTPs of stack "Upload File To Server" into tList
   put doubleSlashes(it) into ut
   if tList is empty and ut is not among the lines of tList then put ut into tList else put cr&ut after tList
   set the cPastListOfFTPs of stack "Upload File To Server" to tList
   upLoader
   if the hilite of btn id 1032 of cd 1 is true then
      if fld id 1026 of cd 1 <> empty and fld id 1011 of cd 1 <> empty and fld id 1011 of cd 1 <> "FTP://" and fld id 1027 of cd 1 <> empty then
         put fld id 1026 of cd 1 into tUs
         put fld id 1011 of cd 1 into tHo
         put fld id 1027 of cd 1 into tPa
         put tUs&"|"&tHo&"|"&tPa into tUHP
         put the cUserHostPass of fld id 1011 of cd 1 into tList
         if tList is empty then put tUHP into tList else put cr & tUHP after tList
         put stripDuplicates(tList) into tList
         set the cUserHostPass of fld id 1011 of cd 1 to tList
      end if
   end if
end mouseUp

on upLoader pActive
   if pActive <> "active" then put "passive" into pActive
   put fld id 1026 of cd 1 into FTPUSER
   If FTPUSER is empty then exit upLoader
   put the cWhichKey of fld id 1027 of cd 1 into FTPPASS
   If FTPPASS is empty then exit upLoader
   put fld id 1011 of cd 1 into FTPHOST
   If FTPHOST is empty then exit upLoader
   if char -1 of FTPHOST <> "/" then put "/" after FTPHOST
   # Start by getting the file to upload
   local tFileForUpload, tFileName
   answer file "Select a file to upload"
   put it into tFileForUpload
   # Get the name of the file for upload
   put the last item of tFileForUpload into tFileName
   if the cEncoding of btn id 1038 of cd 1 <> empty then put textEncode(tFileForUpload,the cEncoding of btn id 1038 of cd 1) into tFileForUpload
   set the itemdel to "/"
   put empty into fld id 1029 of cd 1
       
   # Connect and start the upload
   local tDestination
   libURLSetFTPMode pActive
   put "ftp://" & FTPUSER & ":" & FTPPASS & "@" & FTPHOST & tFileName into tDestination
   libURLSetStatusCallback "uploadProgress", the long ID of me
   libURLftpUploadFile tFileForUpload, tDestination, "uploadComplete"
   put empty into fld id 1027 of cd 1
   set the cWhichKey of fld id 1027 of cd 1 to empty
end upLoader

on uploadProgress pURL, pStatus
   put "Status Update:" && pStatus into fld id 1029 of cd 1
end uploadProgress

on uploadComplete pURL, pStatus
   set the cursor to busy
   put "Status Update:" && pStatus into fld id 1029 of cd 1
   set the itemDel to "/"
   if "error" is not in pStatus then 
      put "File "& (item -1 of pURL) & " now uploaded to “"& (item 1 to -2 of pURL) & ".”" into fld id 1029 of cd 1
   else 
      if pActive is "passive" then 
         put "An error occurred. Retrying FTP in active mode instead of passive." into fld id 1029 of cd 1
         upLoader "active"
      else
         put "An error occurred. The file may not have uploaded." into fld id 1029 of cd 1
      end if
   end if
end uploadComplete

function doubleSlashes pPath
   replace "/" with "//" in pPath
   return pPath
end doubleSlashes


##TOOLTIP:
##Click to locate and upload the file.


#####################
## Script of button "Close”, ID 1020 of CARD 1 of SUBSTACK Upload File To Server of STACK STEP Transcription Module

on mouseUp
   put empty into fld id 1011 of cd 1
   put empty into fld id 1026 of cd 1
   put empty into fld id 1027 of cd 1
   put empty into fld id 1029 of cd 1
   close stack "Upload File To Server"
end mouseUp

##TOOLTIP:
##Close this dialog.

button "Clear”, ID 1021 of CARD 1 of SUBSTACK Upload File To Server of STACK STEP Transcription Module

on mouseUp
   put empty into fld id 1011 of cd 1
   put empty into fld id 1026 of cd 1
   put empty into fld id 1027 of cd 1
   put empty into fld id 1029 of cd 1
   set the cWhichKey of fld id 1027 of cd 1 to empty
   set the cEncoding of btn id 1038 to empty
   put empty into fld id 1039 of cd 1
end mouseUp

##TOOLTIP:
##Clear all fields.


#####################
## Script of button "Enter URL”, ID 1018 of CARD 1 of SUBSTACK Upload File To Server of STACK STEP Transcription Module

on menuPick pItemName
   switch pItemName
      case "Clear List of Past FTP addresses"
         set the cPastListOfFTPs of stack "Upload File To Server" to empty
         put "Clear List of Past FTP addresses" into me
         exit menuPick
         break
      default
         put pitemName into fld id 1011 of cd 1
         break
   end switch
end menuPick

on mouseEnter
   if the cPastListOfFTPs of stack "Upload File To Server" <> empty then put "Clear List of Past FTP addresses" & cr & "-" & cr & stripDuplicates2(the cPastListOfFTPs of stack "Upload File To Server") into me
   else put "Clear List of Past FTP addresses" into me
end mouseEnter

##TOOLTIP:
##Select a previously used FTP address.


#####################
## Script of field "Username”, ID 1026 of CARD 1 of SUBSTACK Upload File To Server of STACK STEP Transcription Module


on tabKey
   select the text of fld id 1011 of cd 1
end tabKey


#####################
## Script of field "Password”, ID 1027 of CARD 1 of SUBSTACK Upload File To Server of STACK STEP Transcription Module

on keyDown whichKey
   put the cWhichKey of me into pW
   put whichKey after pW
   set the cWhichKey of me to pW
   put whichKey after me
   if not the hilite of btn id 1031 of cd 1 then
      wait 0.2 second
      put numToNativeChar(165) into char-1 of me
   end if
end keyDown

on returnInField
   exit returnInField
end returnInField

on enterInField
   exit enterInField
end enterInField

on backSpaceKey
   delete char -1 of me
   put the cWhichKey of me into pW
   delete char -1 of pW
   set the cWhichKey of me to pW
end backSpaceKey

on tabKey
   select the text of fld id 1026 of cd 1
end tabKey


#####################
## Script of field "Status”, ID 1029 of CARD 1 of SUBSTACK Upload File To Server of STACK STEP Transcription Module

on mouseUp
   put empty into me
end mouseUp

##TOOLTIP:
##Upload status


#####################
## Script of button "Text Encoding…”, ID 1038 of CARD 1 of SUBSTACK Upload File To Server of STACK STEP Transcription Module

on menuPick pItemName
   if "(" is in pItemName then put char 1 to offset("(",pItemName)-2 of pItemName into pItemName
   switch pItemName
      case "None"
         set the cEncoding of me to empty
         put empty into fld id 1039 of cd 1
         exit menuPick
         break
      default
         set the cEncoding of me to pItemName
         put pItemName into fld id 1039 of cd 1
   end switch
end menuPick

##TOOLTIP:
##Select the text-encoding expected by the receiving platform or server.


#####################
#####################
## X. SUBSTACK HTML or XHTML Viewing and Exporting of STACK STEP Transcription Module

#####################
## Script of SUBSTACK HTML or XHTML Viewing and Exporting of STACK STEP Transcription Module


on preOpenStack
   set the loc of this stack to the screenLoc
   pass preOpenStack
end preOpenStack

on openStack
   checkLauncherWindow (the short name of this stack)
   pass openStack
end openStack

on closeStack
   lock screen
   set the height of this stack to the minHeight of this stack
   set the width of this stack to the minWidth of this stack
end closeStack


#####################
## Script of CARD 1 of SUBSTACK HTML or XHTML Viewing and Exporting of STACK STEP Transcription Module




#####################
## Script of button " “, ID 1003 of CARD 1 of SUBSTACK HTML or XHTML Viewing and Exporting of STACK STEP Transcription Module

on menuPick pItemName
   local tFldID,tHTML
   if "Export" is not in pItemName then set the label of me to pItemName
   switch pItemName
      case "HTML of Core Transcription"
         sendMenuPick 1025,1
         put 1004 into tFldID
         break
      case "HTML of Indented View"
         sendMenuPick 1025,2
         put 1126 into tFldID
         break
      case "HTML of Anchored Transcription"
         sendMenuPick 1025,3
         put "1163" into tFldID
         break
      case "HTML of TEI Rendition"
         sendMenuPick 1025,4
         put 1026 into tFldID
         break
      case "HTML of Base Text for Editing"
         sendMenuPick 1025,5
         put 1029 into tFldID
         break
      case "HTML of TEI Base Description"
         sendMenuPick 1040,1
         put 1041 into tFldID
         break
      case "HTML of Indented Description View"
         sendMenuPick 1040,2
         put 1139 into tFldID
         break
      case "HTML of Tagless Base Description"
         sendMenuPick 1040,3
         put 1044 into tFldID
         break
      case "HTML of TEI Rendition Description"
         sendMenuPick 1040,4
         put 1151 into tFldID
         break
      case "HTML of Indented Rendition View"
         sendMenuPick 1040,5
         put 1154 into tFldID
         break
      case "HTML of Tagless Rendition Text"
         sendMenuPick 1040,6
         put 1157 into tFldID
         break
      case "HTML of Automatic Syntactical Descriptions"
         sendMenuPick 1063,1
         put 1017 into tFldID
         break
      case "HTML of XML Syntactical Descriptions"
         sendMenuPick 1063,2
         put 1109 into tFldID
         break
      case "HTML of Edited Syntactical Descriptions"
         sendMenuPick 1063,4
         put 1064 into tFldID
         break
      case "HTML of XML Edited Syntactical Descriptions"
         sendMenuPick 1063,5
         put 1171 into tFldID
         break
      case "HTML of Automatic Pragmatic Descriptions"
         sendMenuPick 1070,1
         put 1049 into tFldID
         break
      case "HTML of XML Pragmatic Descriptions"
         sendMenuPick 1070,2
         put 1112 into tFldID
         break
      case "HTML of Edited Pragmatic Descriptions"
         sendMenuPick 1070,4
         put 1067 into tFldID
         break
      case "HTML of XML Edited Pragmatic Descriptions"
         sendMenuPick 1070,5
         put 1174 into tFldID
         break
      case "Export HTML to an HTML file..."
         set the label of btn id 1003 of cd 1 to the cLabelTemp of btn id 1003 of cd 1
         if the cHTMLStatus of fld id 1004 of cd 1 is false then
            set the text of fld id 1004 of cd 1 to the HTMLText of fld id (the cCurrentFieldID of fld id 1004 of cd 1) of cd 1
         end if
         exporting "HTML"
         exit menuPick
         break
      case "Export XHTML to an HTML file..."
         set the label of btn id 1003 of cd 1 to the cLabelTemp of btn id 1003 of cd 1
         if the cXHTMLStatus of fld id 1004 of cd 1 is false then
            set the text of fld id 1004 of cd 1 to ConvertStyledTextToXHTML(the styledText of fld id (the cCurrentFieldID of fld id 1004 of cd 1) of cd 1)
         end if
         exporting "XHTML"
         exit menuPick
         break
   end switch
   put the HTMLText of fld id tFldID of cd 1 of stack "STEP Transcription Module" into tHTML
   replace "amp;#" with "#" in tHTML
   put removeExtraCodeUnits(tHTML) into tHTML
   set the text of fld id 1004 of cd 1 to tHTML
   set the text of fld id 1014 of cd 1 of stack "STEP Transcription Module" to tHTML
   set the cCurrentFieldID of fld id 1004 of cd 1 to tFldID
   set the cHTMLStatus of fld id 1004 of cd 1 to true
   set the cXHTMLStatus of fld id 1004 of cd 1 to false
   set the cLabelTemp of btn id 1003 of cd 1 to pItemName
   put "HTML" into fld id 1012 of cd 1
end menuPick

function gatheringContents
   return the text of fld id 1004 of cd 1
end gatheringContents

on exportData tContents,pFileType
   ask file "Type the name of file that contains the current "&pFileType&" view." with type "TEXT|HTM,HTML" titled "Type the name of the file."
   if (it is empty) or (the result is "Cancel") then exit to top
   if not(it ends with ".html") then put ".html" after it
   if pFileType is "XHTML" then put "<!DOCTYPE html PUBLIC "&quote&"-//W3C//DTD XHTML 1.0 Strict//EN"&quote&cr\ 
   &quote&"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"&quote&">" & cr before tContents
   open file it for write
   write tContents to file it
   close file it
   unlock screen
   answer "The current "&pFileType&" view was exported successfully to file “" & it & ".”"
end exportData

on exporting pHorXH
   local tContents
   answer "Confirm you want to export the current "&pHorXH&" view to an HTML file." with "Cancel" or "Export"
   if it is "Cancel" then exit to top
   set the cursor to watch
   lock screen
   put gatheringContents() into tContents
   if tContents is not empty then 
      exportData tContents,pHorXH
      unlock screen
   else
      answer "The field containing the current "&pHorXH&" view is empty; there is nothing to export."
   end if
end exporting

on mouseEnter
   if the label of btn id 1003 of cd 1 begins with "HTML of " then set the cLabelTemp of btn id 1003 of cd 1 to the label of btn id 1003 of cd 1
end mouseEnter

on sendMenuPick pBtnID,pLiNum
   local tFldList
   lock messages
   if pBtnID is 1040 then 
      send "showDescriptiveTools" to cd 1 of stack "STEP Transcription Module" 
      put "1004,1026,1029,1126,1163" into tFldList
      repeat for each item tFldID in tFldList
         hide fld id tFldID of cd 1 of stack "STEP Transcription Module"
      end repeat
      hide btn id 1025 of cd 1 of stack "STEP Transcription Module"
      hide graphic id 1920 of cd 1 of stack "STEP Transcription Module"
      show graphic id 1160 of cd 1 of stack "STEP Transcription Module"
      show graphic id 1919 of cd 1 of stack "STEP Transcription Module"
      show btn id 1040 of cd 1 of stack "STEP Transcription Module"
   else 
      send "hideDescriptiveTools" to cd 1 of stack "STEP Transcription Module"
      put "1041,1139,1044,1151,1154,1157" into tFldList
      repeat for each item tFldID in tFldList
         hide fld id tFldID of cd 1 of stack "STEP Transcription Module"
      end repeat
      show btn id 1025 of cd 1 of stack "STEP Transcription Module"
      show graphic id 1920 of cd 1 of stack "STEP Transcription Module"
      hide graphic id 1160 of cd 1 of stack "STEP Transcription Module"
      hide graphic id 1919 of cd 1 of stack "STEP Transcription Module"
      if pBtnId is among the items of "1063,1070" then 
         put "1026,1029,1126,1163" into tFldList
         repeat for each item tFldID in tFldList
            hide fld id tFldID of cd 1 of stack "STEP Transcription Module"
         end repeat
         show fld id 1004 of cd 1 of stack "STEP Transcription Module"
      end if
   end if
   --send "menuPick"&&(line pLiNum of btn id pBtnID of cd 1 of stack "STEP Transcription Module") to btn id pBtnID of cd 1 of stack "STEP Transcription Module"
   select line pLiNum of btn id pBtnID of cd 1 of stack "STEP Transcription Module"
end sendMenuPick


##TOOLTIP:
##View the HTML of any text field. Click the XHTML button at
##right to switch to XHTML. Export either view to an HTML file.


#####################
## Script of field "HTML Text”, ID 1004 of CARD 1 of SUBSTACK HTML or XHTML Viewing and Exporting of STACK STEP Transcription Module



#####################
## Script of button "XHTML”, ID 1007 of CARD 1 of SUBSTACK HTML or XHTML Viewing and Exporting of STACK STEP Transcription Module

on mouseUp
   local tFldID
   get the label of btn id 1003 of cd 1
   switch it
      case "HTML of Core Transcription"
         put 1004 into tFldID
         break
      case "HTML of Indented View"
         put 1126 into tFldID
         break
      case "HTML of TEI Rendition"
         put 1026 into tFldID
         break
      case "HTML of Base Text for Editing"
         put 1029 into tFldID
         break
      case "HTML of Anchored Transcription"
         put 1163 into tFldID
         break
      case "HTML of TEI Base Description"
         put 1041 into tFldID
         break
      case "HTML of Indented Description View"
         put 1139 into tFldID
         break
      case "HTML of Tagless Base Description"
         put 1044 into tFldID
         break
      case "HTML of TEI Rendition Description"
         put 1151 into tFldID
         break
      case "HTML of Indented Rendition View"
         put 1154 into tFldID
         break
      case "HTML of Tagless Rendition Text"
         put 1157 into tFldID
         break
      case "HTML of Automatic Syntactical Descriptions"
         put 1017 into tFldID
         break
      case "HTML of Edited Syntactical Descriptions"
         put 1064 into tFldID
         break
      case "HTML of XML Syntactical Descriptions"
         put 1109 into tFldID
         break
      case "HTML of Automatic Pragmatic Descriptions"
         put 1049 into tFldID
         break
      case "HTML of Edited Pragmatic Descriptions"
         put 1067 into tFldID
         break
      case "HTML of XML Edited Pragmatic Descriptions"
         put 1112 into tFldID
         break
   end switch
   set the text of fld id 1004 of cd 1 of stack "HTML or XHTML Viewing and Exporting" to ConvertStyledTextToXHTML(the styledText of fld id tFldID of cd 1 of stack "STEP Transcription Module")
   set the text of fld id 1014 of cd 1 of stack "STEP Transcription Module" to the text of fld id 1004 of cd 1 of stack "HTML or XHTML Viewing and Exporting"
   set the cCurrentFieldID of fld id 1004 of cd 1 to tFldID
   set the cHTMLStatus of fld id 1004 of cd 1 to false
   set the cXHTMLStatus of fld id 1004 of cd 1 to true
   put "XHTML" into fld id 1012 of cd 1
end mouseUp


##TOOLTIP:
##View the XHTML version of the same selected text.


#####################
## Script of button "Clear”, ID 1008 of CARD 1 of SUBSTACK HTML or XHTML Viewing and Exporting of STACK STEP Transcription Module

on mouseUp
   put empty into fld id 1004 of cd 1
   put empty into fld id 1014 of cd 1 of stack "STEP Transcription Module"
end mouseUp

##TOOLTIP:
##Empty the field below.


#####################
#####################
## Y. SUBSTACK Edit Unicode Characters Menu of STACK STEP Transcription Module

#####################
## Script of SUBSTACK Edit Unicode Characters Menu of STACK STEP Transcription Module


on preOpenStack
   local xy
   lock screen
   set the width of this stack to the cWidth of this stack
   put the topLeft of  stack "STEP Transcription Module" into xy
   set the topLeft of this stack to (item 1 of xy)+538,(item 2 of xy)+46
end preOpenStack

on closeStack
   set the cWidth of this stack to the width of this stack
   pass closeStack
end closeStack

on openStack
   checkLauncherWindow (the short name of this stack)
   fillFirstField
end openStack

on resumeStack
   fillFirstField
end resumeStack

on fillFirstField
   local tVisibleSubs,tHiddenSubs,tSpecCharCategories,tSCC,tSCC2,tVisibleList,tHiddenList,tHL,tAllCats
   set the cCurrentSpecialCharactersMenu of this stack to the text of btn id 1106 of cd 1 of stack "STEP Transcription Module"
   put the cVisibleSpecialCharactersSubMenus of btn id 1106 of cd 1 of stack "STEP Transcription Module" into tVisibleSubs
   put the cHiddenSpecialCharactersSubMenus of btn id 1106 of cd 1 of stack "STEP Transcription Module" into tHiddenSubs
   put the cSpecialCharacterCategories of btn id 1039 of cd 1 of stack "Add Special Character" into tSpecCharCategories
   repeat for each line tSCC in tSpecCharCategories
      put tSCC into tSCC2
      replace space with empty in tSCC2
      put "c" before tSCC2
      put "SubMenu" after tSCC2
      if tSCC2 is among the lines of tVisibleSubs then put tab & tSCC&cr after tVisibleList else if tSCC2 is among the lines of tHiddenSubs then put tab&tSCC&cr after tHiddenList
   end repeat
   if tHiddenList is empty then put tVisibleList into tAllCats else put "VISIBLE CATEGORIES" & cr & tVisibleList into tAllCats
   if tHiddenList <> empty then put cr & "HIDDEN CATEGORIES" & cr & tHiddenList after tAllCats
   if char -1 of tAllCats = cr then delete char -1 of tAllCats
   put the hilitedLine of fld id 1004 of cd 1 into tHL
   put tAllCats into fld id 1004 of cd 1
   if tHL <> empty and tHL > 0 then set the hilitedLine of fld id 1004 of cd 1 to tHL
end fillFirstField


#####################
## Script of CARD 1 of SUBSTACK Edit Unicode Characters Menu of STACK STEP Transcription Module




#####################
## Script of field "NamesOfAllSpecCharCategories”,” ID 1004 of CARD 1 of SUBSTACK Edit Unicode Characters Menu of STACK STEP Transcription Module

on mouseEnter
   set the tooltip of me to "To rearrange the order of menu entities,"&cr&"select them individually and move them up or "&cr&"down while pressing the option or command "&cr&"key and the up or down arrow key."
end mouseEnter

on mouseUp
   local tTL,tCategory,tSubMenu,tSubMenu2,tfw7,tfw10,tFldList
   if the selectedText is not empty then 
      set the enabled of btn id 1019 of cd 1 to true
      set the default of btn id 1019 of cd 1 to true
      set the enabled of btn id 1020 of cd 1 to false
      set the enabled of btn id 1021 of cd 1 to false
   else
      set the enabled of btn id 1019 of cd 1 to false
   end if
   if char 1 of the selectedText  is not tab then 
      put empty into fld id 1007 of cd 1
      put empty into fld id 1010 of cd 1
      exit mouseUp
   end if
   lock screen
   put the topLeft of this stack into tTL
   put empty into fld id 1010 of cd 1
   put trueword 1 to -1 of the selectedText into tCategory
   replace space with empty in tCategory
   put "c" before tCategory
   put "SubMenu" after tCategory
   put empty into tSubMenu2
   if tCategory is among the lines of the customKeys of btn id 1106 of cd 1 of stack "STEP Transcription Module" then
      do "put the "&tCategory& " of  btn id 1106 of cd 1 of stack "&quote&"STEP Transcription Module"&quote&" into tSubMenu"
      delete line 1 of tSubMenu
      repeat with i = 1 to the number of lines of tSubMenu
         if char 1 of line i of tSubMenu is tab and char 2 of line i of tSubMenu <> tab then 
            put segment 1 to -1 of line i of tSubMenu after tSubMenu2
            if char 1 of line i+1 of tSubMenu is tab and char 2 of line i+1 of tSubMenu is tab then put " >" after tSubMenu2
            put cr after tSubMenu2
         end if
      end repeat
      if tSubMenu2 is empty then 
         put empty into fld id 1007 of cd 1
         exit mouseUp
      else
         if char -1 of tSubMenu2 = cr then delete char -1 of tSubMenu2
         put tSubMenu2 into fld id 1007 of cd 1
      end if
   else 
      put empty into fld id 1007 of cd 1
   end if
   put the formattedWidth of fld id 1007 of cd 1into tfw7
   if tfw7 > 56 then set the width of fld id 1007 of cd 1 to (the formattedWidth of fld id 1007 of cd 1)+4 else  set the width of fld id 1007 of cd 1 to 61
   set the width of fld id 1015 of cd 1 to the width of fld id 1007 of cd 1
   set the left of fld id 1007 of cd 1 to the right of fld id 1004 of cd 1
   set the left of fld id 1015 of cd 1 to the right of fld id 1004 of cd 1
   put the formattedWidth of fld id 1010 of cd 1into tfw10
   if tfw10 > 56 then set the width of fld id 1010 of cd 1 to (the formattedWidth of fld id 1010 of cd 1)+4 else  set the width of fld id 1010 of cd 1 to 61
   set the width of fld id 1014 of cd 1 to the width of fld id 1010 of cd 1
   set the left of fld id 1010 of cd 1 to the right of fld id 1007 of cd 1
   set the left of fld id 1014 of cd 1 to the right of fld id 1007 of cd 1
   set the width of btn id 1020 of cd 1 to the width of fld id 1007 of cd 1
   set the width of btn id 1021 of cd 1 to the width of fld id 1010 of cd 1
   set the left of btn id 1020 of cd 1 to the right of btn id 1019 of cd 1
   set the left of btn id 1021 of cd 1 to the right of btn id 1020 of cd 1
   put "1003,1016,1017" into tFldList
   repeat for each item tID in tFldList
      set the width of fld id tID of cd 1 to (the right of fld id 1010 of cd 1)-6
      set the left of fld id tID of cd 1 to the left of fld id 1004 of cd 1
   end repeat
   set the right of graphic id 1023 of cd 1 to (the right of fld id 1007 of cd 1)-2
   set the right of graphic id 1024 of cd 1 to (the right of fld id 1010 of cd 1)-2
   set the width of this stack to (the right of fld id 1010 of cd 1)+6
   set the topLeft of this stack to tTL
end mouseUp

on arrowKey theKey
   local ut,tPrecedingLine,tNextLine,tCSubMenus,tVisibleMenus,tHiddenMenus,tVisibleMenus2,tHiddenMenus2,tCategoList,tStackName
   put the hilitedLine of me into ut
   if fld id 1007 of cd 1 <> empty and theKey is "right" then 
      focus on fld id 1007 of cd 1
      set the hilitedLine of fld id 1007 of cd 1 to 1
      send "selectionChanged" to fld id 1007 of cd 1
   else if theKey is in "up down" and (the optionKey is down or the commandKey is down or the shiftKey is down) then
      if theKey is "up" and ut > 1 then
         lock screen
         put line ut-1 of me into tPrecedingLine
         put line ut of me into line ut-1 of me
         put tPrecedingLine into line ut of me
         set the hilitedLine of me to ut-1
         unlock screen
      else if theKey is "down" and ut < the number of lines of me then
         put line ut+1 of me into tNextLine
         put line ut of me into line ut+1 of me
         put tNextLine into line ut of me
         set the hilitedLine of me to ut+1
         unlock screen
      end if
      put fld id 1004 of cd 1 into tCategoList
      replace tab with empty in tCategoList
      set the cSpecialCharacterCategories of btn id 1039 of cd 1 of stack "Add Special Character" to tCategoList
      repeat with i = 1 to the number of lines of tCategoList
         get line i of tCategoList
         replace space with empty in it
         put "c" before it
         put "SubMenu" after it
         put it into line i of tCSubMenus 
      end repeat
      put "STEP Transcription Module" into tStackName
      put the cVisibleSpecialCharactersSubMenus of btn id 1106 of cd 1 of stack tStackName into tVisibleMenus
      put the cHiddenSpecialCharactersSubMenus of btn id 1106 of cd 1 of stack tStackName into tHiddenMenus
      repeat for each line tSubMenu in tCSubMenus
         if tSubMenu is among the lines of tVisibleMenus then put tSubMenu & cr after tVisibleMenus2
         else if tSubMenu is among the lines of tHiddenMenus then put tSubMenu & cr after tHiddenMenus2
      end repeat
      if tVisibleMenus2 <> empty then delete char -1 of tVisibleMenus2
      if tHiddenMenus2 <> empty then delete char -1 of tHiddenMenus2
      set the cVisibleSpecialCharactersSubMenus of btn id 1106 of cd 1 of stack tStackName to tVisibleMenus2
      set the cHiddenSpecialCharactersSubMenus of btn id 1106 of cd 1 of stack tStackName to tHiddenMenus2
      populateInsertMenu
      else
      pass arrowKey
   end if
end arrowKey

on selectionChanged
   mouseUp
end selectionChanged

##TOOLTIP:
##To rearrange the order of menu entities,
##select them individually and move them up or 
##down while pressing the option or command 
##key and the up or down arrow key.


#####################
## Script of field "NamesOfLevel2Content”, ID 1007 of CARD 1 of SUBSTACK Edit Unicode Characters Menu of STACK STEP Transcription Module

local tGlyphCategories="Lowercase Accented Vowels,Uppercase Accented Vowels,Consonants,Indexical Marks,Editorial Symbols,Logical Symbols,Mathematical Symbols,Numbers,Punctuation,Special Marks,Extra Characters"
local tCGlyphCategories="cLowercaseAccentedVowels,cUppercaseAccentedVowels,cConsonants,cIndexicalMarks,cEditorialSymbols,cLogicalSymbols,cMathematicalSymbols,cNumbers,cPunctuation,cSpecialMarks,cExtraCharacters"
local tCGlyphCategoriesSubMenus="cLowercaseAccentedVowelsSubMenu,cUppercaseAccentedVowelsSubMenu,cConsonantsSubMenu,cIndexicalMarksSubMenu,cEditorialSymbolsSubMenu,cLogicalSymbolsSubMenu,cMathematicalSymbolsSubMenu,cNumbersSubMenu,cPunctuationSubMenu,cSpecialMarksSubMenu,cExtraCharactersSubMenu"

on mouseEnter
   set the tooltip of me to "To rearrange the order of submenu entities,"&cr&"select them individually and move them up or "&cr&"down while pressing the option or command "&cr&"key and the up or down arrow key."
end mouseEnter

on mouseUp
   local tTL,tCategory,tFirstLineN,tSubCategory,tSubMenu,tSubMenu2,tfw10,tFldList
   if the selectedText is not empty then 
      set the enabled of btn id 1019 of cd 1 to false
      set the enabled of btn id 1020 of cd 1 to true
      set the default of btn id 1020 of cd 1 to true
      set the enabled of btn id 1021 of cd 1 to false
   else
      set the enabled of btn id 1019 of cd 1 to true
      set the enabled of btn id 1020 of cd 1 to false
   end if
   if char -2 to -1 of the selectedText of me  is not " >" then 
      put empty into fld id 1010 of cd 1
      exit mouseUp
   end if
   lock screen
   put the topLeft of this stack into tTL
   put the hilitedLine of fld id 1004 of cd 1 into tFirstLineN
   put segment 1 to -1 of line tFirstLineN of fld id 1004 of cd 1 into tCategory
   replace space with empty in tCategory
   put "c" before tCategory
   put "SubMenu" after tCategory
   put tab&segment 1 to -2 of the selectedText of me into tSubCategory
   if tCategory is among the lines of the customKeys of btn id 1106 of cd 1 of stack "STEP Transcription Module" then
      do "put the "&tCategory& " of  btn id 1106 of cd 1 of stack "&quote&"STEP Transcription Module"&quote&" into tSubMenu"
      delete line 1 of tSubMenu
      repeat with i = 1 to the number of lines of tSubMenu
         if line i of tSubMenu begins with tSubCategory then
            repeat with j = i+1 to the number of lines of tSubMenu
               if char 1 to 2 of of line j of tSubMenu is tab&tab then 
                  put segment 1 to -1 of line j of tSubMenu & cr after tSubMenu2
               else exit repeat
            end repeat
         else next repeat
      end repeat
      if tSubMenu2 is empty then 
         put empty into fld id 1010 of cd 1
         exit mouseUp
      else
         if char -1 of tSubMenu2 = cr then delete char -1 of tSubMenu2
         put tSubMenu2 into fld id 1010 of cd 1
      end if
   else 
      put empty into fld id 1010 of cd 1
   end if
   put the formattedWidth of fld id 1010 of cd 1into tfw10
   if tfw10 > 56 then set the width of fld id 1010 of cd 1 to (the formattedWidth of fld id 1010 of cd 1)+4 else  set the width of fld id 1010 of cd 1 to 61
   set the width of fld id 1014 of cd 1 to the width of fld id 1010 of cd 1
   set the left of fld id 1010 of cd 1 to the right of fld id 1007 of cd 1
   set the left of fld id 1014 of cd 1 to the right of fld id 1007 of cd 1
   set the width of btn id 1020 of cd 1 to the width of fld id 1007 of cd 1
   set the width of btn id 1021 of cd 1 to the width of fld id 1010 of cd 1
   set the left of btn id 1020 of cd 1 to the right of btn id 1019 of cd 1
   set the left of btn id 1021 of cd 1 to the right of btn id 1020 of cd 1
   put "1003,1016,1017" into tFldList
   repeat for each item tID in tFldList
      set the width of fld id tID of cd 1 to (the right of fld id 1010 of cd 1)-6
      set the left of fld id tID of cd 1 to the left of fld id 1004 of cd 1
   end repeat
   set the right of graphic id 1023 of cd 1 to (the right of fld id 1007 of cd 1)-2
   set the right of graphic id 1024 of cd 1 to (the right of fld id 1010 of cd 1)-2
   set the width of this stack to (the right of fld id 1010 of cd 1)+6
   set the topLeft of this stack to tTL
end mouseUp

on arrowKey theKey
   local ut,tPrecedingLine,tNextLine,pCategory,pcCategory,pFld7,tRevisedCategorySubMenu
   put the hilitedLine of me into ut
   if fld id 1010 of cd 1 <> empty and theKey is "right" then 
      focus on fld id 1010 of cd 1
      set the hilitedLine of fld id 1010 of cd 1 to 1
      send "mouseUp" to fld id 1010 of cd 1
   else if theKey is "left" then
      focus on fld id 1004 of cd 1
      get the hilitedLine of fld id 1004 of cd 1
      if it < the number of lines of fld id 1004 then add 1 to it else subtract 1 from it
      set the hilitedLine of fld id 1004 of cd 1 to it
      send "selectionChanged" to fld id 1004 of cd 1
   else if theKey is in "up down" and (the optionKey is down or the commandKey is down or the shiftKey is down) then
      if theKey is "up" and ut > 1 then
         lock screen
         put line ut-1 of me into tPrecedingLine
         put line ut of me into line ut-1 of me
         put tPrecedingLine into line ut of me
         set the hilitedLine of me to ut-1
         unlock screen
      else if theKey is "down" and ut < the number of lines of me then
         put line ut+1 of me into tNextLine
         put line ut of me into line ut+1 of me
         put tNextLine into line ut of me
         set the hilitedLine of me to ut+1
         unlock screen
      end if
      put fld id 1007 of cd 1 into pFld7
      put segment 1 to -1 of line (the hilitedLine of fld id 1004 of cd 1) of fld id 1004 of cd 1 into pCategory
      if pCategory is not empty then
         put item itemOffset(pCategory,tGlyphCategories) of tCGlyphCategoriesSubMenus into pcCategory
         put recomposeSubCategories(pFld7,pCategory,pcCategory) into tRevisedCategorySubMenu
         set the pcCategory of btn id 1106  of cd 1 of stack "STEP Transcription Module" to tRevisedCategorySubMenu
      end if
      populateInsertMenu
   else pass arrowKey
end arrowKey

on selectionChanged
   mouseUp
end selectionChanged

function recomposeSubCategories pFld7,pCategory,pcCategory
   local tSubMenuEntities,tSubCategory,tRecomposedMenu,tSubMenu
   put pCategory & cr into tRecomposedMenu
   do "put the "&pcCategory& " of btn id 1106 of cd 1 of stack "&quote&"STEP Transcription Module"&quote&" into tSubMenuEntities"
   set the wholematches to true
   repeat with c = 1 to the number of lines of pFld7
      if char -2 to -1 of line c of pFld7 is " >" then
         put empty into tSubMenu
         put tab&char 1 to -3 of line c of pFld7 into tSubCategory
         put tSubCategory&cr after tRecomposedMenu
         repeat with i = 1 to the number of lines of tSubMenuEntities
            if line i of tSubMenuEntities is tSubCategory then
               repeat with j = i+1 to the number of lines of tSubMenuEntities
                  if char 1 to 2 of of line j of tSubMenuEntities is tab&tab then 
                     put line j of tSubMenuEntities & cr after tSubMenu
                  else exit repeat
               end repeat
               exit repeat
            else next repeat
         end repeat
         put tSubMenu after tRecomposedMenu
      else
         put tab&line c of pFld7 & cr after tRecomposedMenu
      end if
   end repeat
   delete char -1 of tRecomposedMenu
   return tRecomposedMenu
end recomposeSubCategories

##TOOLTIP:
##To rearrange the order of submenu entities,
##select them individually and move them up or 
##down while pressing the option or command 
##key and the up or down arrow key.


#####################
## Script of field "NamesOfLevel3Content”, ID 1010 of CARD 1 of SUBSTACK Edit Unicode Characters Menu of STACK STEP Transcription Module

on mouseUp
   if the hilitedLine of me is not empty then
      set the enabled of btn id 1019 of cd 1 to false
      set the enabled of btn id 1020 of cd 1 to false
      set the enabled of btn id 1021 of cd 1 to true
      set the default of btn id 1021 of cd 1 to true
   else
      set the enabled of btn id 1020 of cd 1 to true
      set the enabled of btn id 1021 of cd 1 to false
   end if
end mouseUp

on mouseEnter
   set the tooltip of me to "To rearrange the order of sub-submenu entities,"&cr&"select them individually and move them up or "&cr&"down while pressing the option or command "&cr&"key and the up or down arrow key."
end mouseEnter

on arrowKey theKey
   local ut,tPrecedingLine,tNextLine,tCategory,tSubCategory,tCustomCharCat,tCustomSubMenu,tStackName,tCurrentChars,tSubList,tAllCustomKeys
   put the hilitedLine of me into ut
   if fld id 1007 of cd 1 <> empty and theKey is "left" then 
      focus on fld id 1007 of cd 1
      get the hilitedLine of fld id 1007 of cd 1
      if it < the number of lines of fld id 1007 then add 1 to it else subtract 1 from it
      set the hilitedLine of fld id 1007 of cd 1 to it
      send "selectionChanged" to fld id 1007 of cd 1
   else if theKey is in "up down" and (the optionKey is down or the commandKey is down or the shiftKey is down) then
      if theKey is "up" and ut > 1 then
         lock screen
         put line ut-1 of me into tPrecedingLine
         put line ut of me into line ut-1 of me
         put tPrecedingLine into line ut of me
         set the hilitedLine of me to ut-1
         unlock screen
      else if theKey is "down" and ut < the number of lines of me then
         put line ut+1 of me into tNextLine
         put line ut of me into line ut+1 of me
         put tNextLine into line ut of me
         set the hilitedLine of me to ut+1
         unlock screen
      end if
      put segment 1 to -1 of line (the hilitedLine of fld id 1004 of cd 1) of fld id 1004 of cd 1  into tCategory
      put segment 1 to -2 of line (the hilitedLine of fld id 1007 of cd 1) of fld id 1007 of cd 1 into tSubCategory
      put fld id 1010 of cd 1 into tSubList
      replace space with empty in tCategory
      put "c"&tCategory into tCustomCharCat
      put tCustomCharCat & "SubMenu" into tCustomSubMenu
      put "STEP Transcription Module" into tStackName
      put the customKeys of btn id 1106 of cd 1 of of stack tStackName into tAllCustomKeys
      if tCustomSubMenu is among the lines of tAllCustomKeys then
         do "put the "&tCustomSubMenu&" of btn id 1106 of cd 1 of stack tStackName into tCurrentChars"
         set the wholematches to true
         put lineOffset(tab&tSubCategory,tCurrentChars) into ut
         if ut <> 0 then
            repeat with c = ut+1 to the number of lines of tCurrentChars
               if not(line c of tCurrentChars begins with tab&tab) then 
                  put c-1 into c
                  exit repeat
               end if
            end repeat
            put tSubList into line ut+1 to c of tCurrentChars
            repeat with f = ut+1 to c
               put tab&tab before line f of tCurrentChars
            end repeat
            do "set the "&tCustomSubMenu&" of btn id 1106 of cd 1 of stack tStackName to tCurrentChars"
         end if
      end if
      populateInsertMenu
   else
      pass arrowKey
   end if
end arrowKey


##TOOLTIP:
##To rearrange the order of sub-submenu entities,
##select them individually and move them up or 
##down while pressing the option or command 
##key and the up or down arrow key.


#####################
## Script of field "Field”, ID 1016 of CARD 1 of SUBSTACK Edit Unicode Characters Menu of STACK STEP Transcription Module

on linkClicked
    modeless stack "Add Special Character"
end linkClicked


#####################
## Script of button "Delete Category”, ID 1019 of CARD 1 of SUBSTACK Edit Unicode Characters Menu of STACK STEP Transcription Module

on mouseUp
   local tCategory,tCategory2,tSpecCharCategories,tCustomCharCat,tCustomSubMenu,tStackName,tVisibleMenus,tHiddenMenus,tAllCustomKeys
   put trueword 1 to -1 of line (the hilitedLine of fld id 1004 of cd 1) of fld id 1004 of cd 1 into tCategory
   if tCategory is "VISIBLE CATEGORIES" or tCategory is "HIDDEN CATEGORIES" or tCategory is empty then exit mouseUp
   answer "Confirm you want to delete the selected special character category, “"&tCategory&".” Do realize that this action cannot be undone automatically (except by using the "&\
   "default-restoring Reset button). Consider simply hiding that category instead using the command “Add or Manage Unicode Characters.”" with "Delete" or "Cancel"
   if it is "Cancel" then exit mouseUp
   lock screen
   put tCategory into tCategory2
   put the cSpecialCharacterCategories of btn id 1039 of cd 1 of stack "Add Special Character" into tSpecCharCategories
   if tCategory is among the lines of tSpecCharCategories then
      set the wholematches to true
      delete line lineOffset(tCategory,tSpecCharCategories) of tSpecCharCategories
      sort tSpecCharCategories ascending international
      set the cSpecialCharacterCategories of btn id 1039 of cd 1 of stack "Add Special Character" to tSpecCharCategories
   end if
   replace space with empty in tCategory2
   put "c"&tCategory2 into tCustomCharCat
   put tCustomCharCat & "SubMenu" into tCustomSubMenu
   put "STEP Transcription Module" into tStackName
   put the cVisibleSpecialCharactersSubMenus of btn id 1106 of cd 1 of stack tStackName into tVisibleMenus
   put the cHiddenSpecialCharactersSubMenus of btn id 1106 of cd 1 of stack tStackName into tHiddenMenus
   do "set the "&tCustomCharCat&" of btn id 1106 of cd 1 of stack tStackName to empty"
   put the customKeys of btn id 1106 of cd 1 of of stack tStackName into tAllCustomKeys
   if tCustomSubMenu is among the lines of tAllCustomKeys then
      set the wholematches to true
      delete line lineOffset(tCustomSubMenu,tAllCustomKeys) of tAllCustomKeys
      sort tAllCustomKeys ascending international
      set the customKeys of btn id 1106 of cd 1 of of stack tStackName to tAllCustomKeys
   end if
   if tCustomCharCat is among the lines of tAllCustomKeys then
      set the wholematches to true
      delete line lineOffset(tCustomCharCat,tAllCustomKeys) of tAllCustomKeys
      sort tAllCustomKeys ascending international
      set the customKeys of btn id 1106 of cd 1 of of stack tStackName to tAllCustomKeys
   end if
   if tCustomSubMenu is among the lines of tVisibleMenus then
      delete line lineOffset(tCustomSubMenu,tVisibleMenus) of tVisibleMenus
      --sort tVisibleMenus ascending international
      set the cVisibleSpecialCharactersSubMenus of btn id 1106 of cd 1 of of stack tStackName to tVisibleMenus
   else
      if tCustomSubMenu is among the lines of tHiddenMenus then
         delete line lineOffset(tCustomSubMenu,tHiddenMenus) of tHiddenMenus
         --sort tHiddenMenus ascending international
         set the cHiddenSpecialCharactersSubMenus of btn id 1106 of cd 1 of stack tStackName to tHiddenMenus
      end if
   end if      
   delete line (the hilitedLine of fld id 1004 of cd 1) of fld id 1004 of cd 1
   populateInsertMenu
   answer "All menu data related to special character category “"&tCategory&"” have been deleted from STEP Transcriptor."
end mouseUp


#####################
## Script of button "Delete Level 2 Entity”, ID 1020 of CARD 1 of SUBSTACK Edit Unicode Characters Menu of STACK STEP Transcription Module

on mouseUp
   local tCategory,tCategory2,tSpecCharCategories,ut,tCustomCharCat,tCustomSubMenu,tStackName,tVisibleMenus,tHiddenMenus,tAllCustomKeys,tSubContent,tSubCategory,tCurrentChars,tSubMenuCharsList
   put trueword 1 to -1 of line (the hilitedLine of fld id 1004 of cd 1) of fld id 1004 of cd 1 into tCategory
   put line (the hilitedLine of fld id 1007 of cd 1) of fld id 1007 of cd 1 into tSubContent
   if char -2 to -1 of tSubContent is " >" then put char 1 to -3 of tSubContent into tSubCategory else put empty into tSubCategory
   if tSubCategory <> empty then
      answer "Confirm you want to delete the selected subcategory “"&tSubCategory&"” in special character category “"&tCategory&".”" with "Delete" or "Cancel"
      if it is "Cancel" then exit mouseUp
      lock screen
      put tCategory into tCategory2
      put the cSpecialCharacterCategories of btn id 1039 of cd 1 of stack "Add Special Character" into tSpecCharCategories
      replace space with empty in tCategory2
      put "c"&tCategory2 into tCustomCharCat
      put tCustomCharCat & "SubMenu" into tCustomSubMenu
      put "STEP Transcription Module" into tStackName
      put the customKeys of btn id 1106 of cd 1 of of stack tStackName into tAllCustomKeys
      if tCustomSubMenu is among the lines of tAllCustomKeys then
         do "put the "&tCustomSubMenu&" of btn id 1106 of cd 1 of stack tStackName into tCurrentChars"
         set the wholematches to true
         put lineOffset(tab&tSubCategory,tCurrentChars) into ut
         if ut <> 0 then
            repeat with c = ut+1 to the number of lines of tCurrentChars
               if not(line c of tCurrentChars begins with tab&tab) then 
                  put c-1 into c
                  exit repeat
               end if
               put char 3 of line c of tCurrentChars & cr after tSubMenuCharsList
            end repeat
            delete line ut to c of tCurrentChars
            do "set the "&tCustomSubMenu&" of btn id 1106 of cd 1 of stack tStackName to tCurrentChars"
         end if
         if tSubMenuCharsList <> empty then
            do "put the "&tCustomCharCat&" of btn id 1106 of cd 1 of stack tStackName into tCurrentChars"
            repeat for each line tChar in tSubMenuCharsList
               put lineOffset(tChar&"|",tCurrentChars) into ut
               delete line ut of tCurrentChars
            end repeat
            do "set the "&tCustomCharCat&" of btn id 1106 of cd 1 of stack tStackName to tCurrentChars"
         end if
      end if
      delete line (the hilitedLine of fld id 1007 of cd 1) of fld id 1007 of cd 1
      put empty into fld id 1010 of cd 1
      populateInsertMenu
      answer "All menu data related to subcategory “"&tSubCategory&"” in special character category “"&tCategory&"” have been deleted from STEP Transcriptor."
   else
      answer "Confirm you want to delete the selected entity “"&tSubContent&"” in special character category “"&tCategory&".”" with "Delete" or "Cancel"
      if it is "Cancel" then exit mouseUp
      lock screen
      put tCategory into tCategory2
      put the cSpecialCharacterCategories of btn id 1039 of cd 1 of stack "Add Special Character" into tSpecCharCategories
      replace space with empty in tCategory2
      put "c"&tCategory2 into tCustomCharCat
      put tCustomCharCat & "SubMenu" into tCustomSubMenu
      put "STEP Transcription Module" into tStackName
      put the customKeys of btn id 1106 of cd 1 of of stack tStackName into tAllCustomKeys
      if tCustomCharCat is among the lines of tAllCustomKeys then
         do "put the "&tCustomCharCat&" of btn id 1106 of cd 1 of stack tStackName into tCurrentChars"
         put lineOffset(tSubContent&"|",tCurrentChars) into ut
         if ut <> 0 then
            delete line ut of tCurrentChars
            do "set the "&tCustomCharCat&" of btn id 1106 of cd 1 of stack tStackName to tCurrentChars"
         end if
      end if
      if tCustomSubMenu is among the lines of tAllCustomKeys then
         do "put the "&tCustomSubMenu&" of btn id 1106 of cd 1 of stack tStackName into tCurrentChars"
         set the wholematches to true
         put lineOffset(tab&tSubContent,tCurrentChars) into ut
         if ut <> 0 then
            delete line ut of tCurrentChars
            do "set the "&tCustomSubMenu&" of btn id 1106 of cd 1 of stack tStackName to tCurrentChars"
         end if
      end if
      delete line (the hilitedLine of fld id 1007 of cd 1) of fld id 1007 of cd 1
      populateInsertMenu
      answer "All menu data related to entity “"&tSubContent&"” in special character category “"&tCategory&"” have been deleted from STEP Transcriptor."
   end if
end mouseUp


#####################
## Script of button "Delete Level 3 Entity”, ID 1021 of CARD 1 of SUBSTACK Edit Unicode Characters Menu of STACK STEP Transcription Module

on mouseUp
   local tCategory,tCategory2,tSpecCharCategories,tCustomCharCat,tCustomSubMenu,tStackName,tVisibleMenus,tHiddenMenus,tAllCustomKeys,tSubContent,tSubCategory,tCurrentChars
   put trueword 1 to -1 of line (the hilitedLine of fld id 1004 of cd 1) of fld id 1004 of cd 1 into tCategory
   put char 1 to -3 of line (the hilitedLine of fld id 1007 of cd 1) of fld id 1007 of cd 1 into tSubCategory
   put line (the hilitedLine of fld id 1010 of cd 1) of fld id 1010 of cd 1 into tSubContent
   answer "Confirm you want to delete the selected entity “"&tSubContent&"” in subcategory “"&tSubCategory&"” of special character category “"&tCategory&".”" with "Delete" or "Cancel"
   if it is "Cancel" then exit mouseUp
   lock screen
   put tCategory into tCategory2
   put the cSpecialCharacterCategories of btn id 1039 of cd 1 of stack "Add Special Character" into tSpecCharCategories
   replace space with empty in tCategory2
   put "c"&tCategory2 into tCustomCharCat
   put tCustomCharCat & "SubMenu" into tCustomSubMenu
   put "STEP Transcription Module" into tStackName
   put the customKeys of btn id 1106 of cd 1 of of stack tStackName into tAllCustomKeys
   if tCustomCharCat is among the lines of tAllCustomKeys then
      do "put the "&tCustomCharCat&" of btn id 1106 of cd 1 of stack tStackName into tCurrentChars"
      put lineOffset(tSubContent&"|",tCurrentChars) into ut
      if ut <> 0 then
         delete line ut of tCurrentChars
         do "set the "&tCustomCharCat&" of btn id 1106 of cd 1 of stack tStackName to tCurrentChars"
      end if
   end if
   if tCustomSubMenu is among the lines of tAllCustomKeys then
      do "put the "&tCustomSubMenu&" of btn id 1106 of cd 1 of stack tStackName into tCurrentChars"
      set the wholematches to true
      put lineOffset(tab&tab&tSubContent,tCurrentChars) into ut
      if ut <> 0 then
         delete line ut of tCurrentChars
         do "set the "&tCustomSubMenu&" of btn id 1106 of cd 1 of stack tStackName to tCurrentChars"
      end if
   end if
   delete line (the hilitedLine of fld id 1010 of cd 1) of fld id 1010 of cd 1
   answer "All menu data related to entity “"&tSubContent&"” in subcategory “"&tSubCategory&"” of special character category “"&tCategory&"” have been deleted from STEP Transcriptor."
end mouseUp


#####################
## Script of button "Reset”, ID 1025 of CARD 1 of SUBSTACK Edit Unicode Characters Menu of STACK STEP Transcription Module

on mouseUp
   local tStackName
   answer "Confirm you want to restore STEP Transcriptor’s default special characters menu under “Insert.” Doing so will undo all additions and deletions you may have made." with "Reset" or "Cancel"
   if it is "Cancel" then exit mouseUp
   lock screen
   put "STEP Transcription Module" into tStackName
   set the cVisibleSpecialCharactersSubMenus of btn id 1106 of cd 1 of stack tStackName to the cDefaultSpecialCharactersSubMenus of btn id 1106 of cd 1 of stack tStackName
   set the cSpecialCharacterCategories of btn id 1039 of cd 1 of stack "Add Special Character" to the cDefaultSpecialCharacterCategories of btn id 1039 of cd 1 of stack "Add Special Character"
   
   set the cLowercaseAccentedVowels of btn id 1106 of cd 1 of stack tStackName to the cDefaultLowercaseAccentedVowels of btn id 1106 of cd 1 of stack tStackName
   set the cUppercaseAccentedVowels of btn id 1106 of cd 1 of stack tStackName to the cDefaultUppercaseAccentedVowels of btn id 1106 of cd 1 of stack tStackName
   set the cConsonants of btn id 1106 of cd 1 of stack tStackName to the cDefaultConsonants of btn id 1106 of cd 1 of stack tStackName
   set the cNumbers of btn id 1106 of cd 1 of stack tStackName to the cDefaultNumbers of btn id 1106 of cd 1 of stack tStackName
   set the cExtraCharacters of btn id 1106 of cd 1 of stack tStackName to the cDefaultExtraCharacters of btn id 1106 of cd 1 of stack tStackName
   set the cPunctuation of btn id 1106 of cd 1 of stack tStackName to the cDefaultPunctuation of btn id 1106 of cd 1 of stack tStackName
   set the cEditorialSymbols of btn id 1106 of cd 1 of stack tStackName to the cDefaultEditorialSymbols of btn id 1106 of cd 1 of stack tStackName
   set the cLogicalSymbols of btn id 1106 of cd 1 of stack tStackName to the cDefaultLogicalSymbols of btn id 1106 of cd 1 of stack tStackName
   set the cMathematicalSymbols of btn id 1106 of cd 1 of stack tStackName to the cDefaultMathematicalSymbols of btn id 1106 of cd 1 of stack tStackName
   set the cIndexicalMarks of btn id 1106 of cd 1 of stack tStackName to the cDefaultIndexicalMarks of btn id 1106 of cd 1 of stack tStackName
   set the cSpecialMarks of btn id 1106 of cd 1 of stack tStackName to the cDefaultSpecialMarks of btn id 1106 of cd 1 of stack tStackName
   
   set the cLowercaseAccentedVowelsSubMenu of btn id 1106 of cd 1 of stack tStackName to the cDefaultLowercaseAccentedVowelsSubMenu of btn id 1106 of cd 1 of stack tStackName
   set the cUppercaseAccentedVowelsSubMenu of btn id 1106 of cd 1 of stack tStackName to the cDefaultUppercaseAccentedVowelsSubMenu of btn id 1106 of cd 1 of stack tStackName
   set the cConsonantsSubMenu of btn id 1106 of cd 1 of stack tStackName to the cDefaultConsonantsSubMenu of btn id 1106 of cd 1 of stack tStackName
   set the cNumbersSubMenu of btn id 1106 of cd 1 of stack tStackName to the cDefaultNumbersSubMenu of btn id 1106 of cd 1 of stack tStackName
   set the cExtraCharactersSubMenu of btn id 1106 of cd 1 of stack tStackName to the cDefaultExtraCharactersSubMenu of btn id 1106 of cd 1 of stack tStackName
   set the cPunctuationSubMenu of btn id 1106 of cd 1 of stack tStackName to the cDefaultPunctuationSubMenu of btn id 1106 of cd 1 of stack tStackName
   set the cEditorialSymbolsSubMenu of btn id 1106 of cd 1 of stack tStackName to the cDefaultEditorialSymbolsSubMenu of btn id 1106 of cd 1 of stack tStackName
   set the cLogicalSymbolsSubMenu of btn id 1106 of cd 1 of stack tStackName to the cDefaultLogicalSymbolsSubMenu of btn id 1106 of cd 1 of stack tStackName
   set the cMathematicalSymbolsSubMenu of btn id 1106 of cd 1 of stack tStackName to the cDefaultMathematicalSymbolsSubMenu of btn id 1106 of cd 1 of stack tStackName
   set the cIndexicalMarksSubMenu of btn id 1106 of cd 1 of stack tStackName to the cDefaultIndexicalMarksSubMenu of btn id 1106 of cd 1 of stack tStackName
   set the cSpecialMarksSubMenu of btn id 1106 of cd 1 of stack tStackName to the cDefaultSpecialMarksSubMenu of btn id 1106 of cd 1 of stack tStackName
   
   send "mouseEnter" to btn id 1106 of cd 1 of stack tStackName
   set the cHiddenSpecialCharactersSubMenus of btn id 1106 of cd 1 of stack tStackName to empty
   
   fillFirstField
   populateInsertMenu
   answer "STEP Transcriptor’s default special characters menu “Insert” has been restored."
end mouseUp

##TOOLTIP:
##Reset the “Insert Special Characters” menu button to its default content


#####################
#####################
## Z. SUBSTACK STEP Web Browser of STACK STEP Transcription Module

#####################
## Script of SUBSTACK STEP Web Browser of STACK STEP Transcription Module


on openStack
   lock screen
   set the loc of this stack to the screenLoc
   --checkLauncherWindow (the short name of this stack)
   if there is no widget "STEP Browser" then
      create widget "STEP Browser" as "com.livecode.widget.browser"
      set the rect of widget "STEP Browser" of cd 1 to 0,24,(the width of this stack),(the height of this stack-24)
      set the script of widget "STEP Browser" of cd 1 to the cScriptOfBrowserWidget of this stack
      set the userAgent of widget "STEP Browser" of cd 1 to "STEPTools/2.5 STEPTranscriptor/2.6.1"
      repeat with i = 1 to the number of controls of cd 1 of this stack
         set the lockloc of control i of cd 1 of this stack to true
         set the cRect of control i of cd 1 of this stack to the rect of control i of cd 1 of this stack
         set the cRectYosemite of control i of cd 1 of this stack to the rect of control i of cd 1 of this stack
      end repeat
   end if
   pass openStack
end openStack

on closeStack
   set the cCurrentVisitedURL of this stack to empty
   set the cVisitedURLs of this stack to empty
   put empty into fld id 1003 of cd 1
   put empty into fld id 1009 of cd 1
   set the htmlText of widget "STEP Browser" of cd 1 to empty
end closeStack

function stripDuplicates2 tListToStrip
   local tKeys,tCount,tArray
   repeat for each line tCount in tListToStrip
      put 1 into tArray[tCount]
   end repeat
   put the keys of tArray into tKeys
   sort tKeys ascending international
   return tKeys
end stripDuplicates2

#####################
## Script of CARD 1 of SUBSTACK STEP Web Browser of STACK STEP Transcription Module

on resizeStack
   set the rect of widget "STEP Browser" of cd 1 to 0,24,(the width of this stack),(the height of this stack-24)
   pass resizeStack
end resizeStack



#####################
## Script of field "URL Field”, ID 1003 of CARD 1 of SUBSTACK STEP Web Browser of STACK STEP Transcription Module

on tabKey
   if the text of fld id 1003 of cd 1 <> empty then
      get the text of fld id 1003 of cd 1
      if not (it begins with "http://") and not (it begins with "https://") and not (it begins with "file://") then 
         put "http://" before it
         put it into fld id 1003 of cd 1
      end if
      set the URL of widget "STEP Browser" of cd 1 to it
   else
      put "http://www.tei-c.org/oxgarage/" into fld id 1003 of cd 1
      set the URL of widget "STEP Browser" of cd 1 to fld id 1003 of cd 1
   end if
end tabKey

on returnInField
   tabKey
end returnInField

on enterInField
   tabKey
end enterInField



#####################
## Script of field "URL Label”, ID 1006 of CARD 1 of SUBSTACK STEP Web Browser of STACK STEP Transcription Module

on tabKey
   if the text of fld id 1003 of cd 1 <> empty then
      get the text of fld id 1003 of cd 1
      if not (it begins with "http://") or not (it begins with "https://") or not (it begins with "file://") then 
         put "http://" before it
         put it into fld id 1003 of cd 1
      end if
      set the URL of widget "STEP Browser" of cd 1 to it
   end if
end tabKey

on returnInField
   tabKey
end returnInField

on enterInField
   tabKey
end enterInField


#####################
## Script of button "Show HTML”, ID 1012 of CARD 1 of SUBSTACK STEP Web Browser of STACK STEP Transcription Module

on mouseUp
   if fld id 1003 of cd 1 <> empty and the URL of widget "STEP Browser" of cd 1 <> empty and not the visible of fld id 1009 of cd 1 then
      put the htmlText of widget "STEP Browser" of cd 1 into fld id 1009 of cd 1
      hide widget "STEP Browser" of cd 1
      show fld id 1009 of cd 1
      set the label of me to "Hide HTML"
      set the toolTip of me to "Click to close the HTML field."
   else if the visible of fld id 1009 of cd 1 then
      hide fld id 1009 of cd 1
      show widget "STEP Browser" of cd 1
      put empty into fld id 1009 of cd 1
      set the label of me to "Show HTML"
      set the toolTip of me to "Reveal the HTML of the current web page."
   end if
end mouseUp

##TOOLTIP:
##Reveal the HTML of the current web page.


#####################
## Script of button "List of URLs”, ID 1013 of CARD 1 of SUBSTACK STEP Web Browser of STACK STEP Transcription Module

on menuPick pItemName
   local tList
   switch pItemName
      case "Clear List of URLs"
         set the cPastListOfURLs of stack "STEP Web Browser" to empty
         put "Clear List of URLs"& cr &"Edit List of URLs..."  into me
         exit menuPick
         break
      case "Edit List of URLs..."
         set the cHolder of stack "List Editor" to "URL|1013"
         put the cPastListOfURLs of stack "STEP Web Browser" into tList
         filter tList without empty
         put tList into fld id 1003 of cd 1 of stack "List Editor"
         set the title of stack "List Editor" to "List Editor - List of URLs"
         palette stack "List Editor"
         exit menuPick
         break
      default
         if the optionKey is up then
            put pItemName into fld id 1003 of cd 1 of stack "STEP Web Browser"
            send "tabKey" to fld id 1003 of cd 1
         else if the optionKey is down then
            put the cPastListOfURLs of stack "STEP Web Browser" into tList
            delete line lineOffset(pItemName,tList) of tList
            set the cPastListOfURLs of stack "STEP Web Browser" to tList
         end if
         break
   end switch
end menuPick

on mouseEnter
   local tList,tSeparatorList,tC,tListTemp
   if the cPastListOfURLs of stack "STEP Web Browser" <> empty then 
      put  the cPastListOfURLs of stack "STEP Web Browser" into tList
      repeat with i = 1 to the number of lines of tList
         if line i of tList is "-" then put i&comma after tSeparatorList
      end repeat
      if tSeparatorList <> empty then
         put i + 1 after tSeparatorList
         put 1 into tC
         repeat with j = 1 to the number of items of tSeparatorList
            put line tC to (item j of tSeparatorList)-1 of tList into tListTemp
            put stripDuplicates2(tListTemp) into line tC to (item j of tSeparatorList)-1 of tList
            put (item j of tSeparatorList)+1 into tC
         end repeat
      else
         put stripDuplicates2(tList) into tList
      end if
      put doubleSlashes(tList) & cr & "-" & cr & "Clear List of URLs"& cr &"Edit List of URLs..." into me
   else put "Clear List of URLs"& cr & "Edit List of URLs..."  into me
end mouseEnter

function doubleSlashes pList
   replace "/" with "//" in pList
   return pList
end doubleSlashes

##TOOLTIP:
##Select a past URL to access it in the browser.
##Option(Alt)-click a URL to delete it in the menu.


#####################
## Script of button "Add URL”, ID 1014 of CARD 1 of SUBSTACK STEP Web Browser of STACK STEP Transcription Module

on mouseUp
   local tUrl,tList,tSeparatorList,tC,tListTemp
   if fld id 1003 of cd 1 <> empty then
      put fld id 1003 of cd 1 into tUrl
      put the  cPastListOfURLs of stack "STEP Web Browser" into tList
      if tList is empty then put tURL after tList else put cr&tUrl after tList
      repeat with i = 1 to the number of lines of tList
         if line i of tList is "-" then put i&comma after tSeparatorList
      end repeat
      if tSeparatorList <> empty then
         put i + 1 after tSeparatorList
         put 1 into tC
         repeat with j = 1 to the number of items of tSeparatorList
            put line tC to (item j of tSeparatorList)-1 of tList into tListTemp
            put stripDuplicates2(tListTemp) into line tC to (item j of tSeparatorList)-1 of tList
            put (item j of tSeparatorList)+1 into tC
         end repeat
      else
         put stripDuplicates2(tList) into tList
      end if
      set the cPastListOfURLs of stack "STEP Web Browser" to tList
   end if
end mouseUp

##TOOLTIP:
##Add URL to list in adjacent pull-down menu.

CUSTOM KEYS of button "Add URL" of card id 1002 of stack "STEP Web Browser" of stack "/Users/adetienn/Documents/STEP Externals/STEP-LI 7.1.4/STEP Transcription Module.livecode" ID 1014 of CARD 1 of SUBSTACK STEP Web Browser of STACK STEP Transcription Module

cRect

941,0,965,24

cRectYosemite

941,0,965,24



#####################
## Script of button "Return to previous URL”, ID 1020 of CARD 1 of SUBSTACK STEP Web Browser of STACK STEP Transcription Module

on mouseUp
   local tVisitedURLs,tNumber
   put the cVisitedURLs of this stack into tVisitedURLs
   put the cCurrentVisitedURL of this stack into tNumber
   if tNumber is empty or tNumber < 2 then exit mouseUp
   put line tNumber-1 of  tVisitedUrls into fld id 1003 of cd 1 of this stack
   send "tabKey" to fld id 1003 of cd 1 of this stack
   set the cCurrentVisitedURL of this stack to (tNumber-1)
end mouseUp

##TOOLTIP:
##Return to previous URL


#####################
## Script of button "Move to next URL”, ID 1021 of CARD 1 of SUBSTACK STEP Web Browser of STACK STEP Transcription Module

on mouseUp
   local tVisitedURLs,tNumber
   put the cVisitedURLs of this stack into tVisitedURLs
   put the cCurrentVisitedURL of this stack into tNumber
   if tNumber = the number of lines of tVisitedURLs then exit mouseUp
   put line tNumber+1 of  tVisitedUrls into fld id 1003 of cd 1 of this stack
   send "tabKey" to fld id 1003 of cd 1 of this stack
   set the cCurrentVisitedURL of this stack to (tNumber+1)
end mouseUp


##TOOLTIP:
##Move forward to next URL.


#####################
## Script of widget "STEP Browser”, ID 1026 of CARD 1 of SUBSTACK STEP Web Browser of STACK STEP Transcription Module

on browserDocumentLoadBegin pUrl
   if IsThereOddUrls(pUrl) is false then
      put pUrl into fld id 1003 of cd 1 of stack "STEP Web Browser"
      local tVisitedURLs,tNumber
      put the cVisitedURLs of this stack into tVisitedURLs
      put the cCurrentVisitedURL of this stack into tNumber
      if tNumber is empty then put the number of lines of tVisitedURLs into tNumber
      if tVisitedURLs is empty then 
         put pUrl into tVisitedURLs
         set the cCurrentVisitedURL of this stack to (tNumber+1)
      else 
         if line tNumber of tVisitedURLs <> pUrl then
            put cr & pUrl after line tNumber of tVisitedURLs
            set the cCurrentVisitedURL of this stack to (tNumber+1)
         end if
      end if
      set the cVisitedURLs of this stack to tVisitedURLs
   end if
end browserDocumentLoadBegin

on browserDocumentLoadComplete pUrl
   if IsThereOddUrls(pUrl) is false then
      put pUrl into fld id 1003 of cd 1 of stack "STEP Web Browser"
   end if
end browserDocumentLoadComplete

on browserDocumentLoadFailed pUrl,pError
   if IsThereOddUrls(pUrl) is false then put pUrl into fld id 1003 of cd 1 of stack "STEP Web Browser"
   if pError <> empty and not(pError contains "NSURLErrorDomain error -999") then answer pError as sheet
end browserDocumentLoadFailed

on browserFrameDocumentLoadBegin pUrl
   if IsThereOddUrls(pUrl) is false then put pUrl into fld id 1003 of cd 1 of stack "STEP Web Browser"
end browserFrameDocumentLoadBegin

on browserFrameDocumentLoadComplete pUrl
   if IsThereOddUrls(pUrl) is false then put pUrl into fld id 1003 of cd 1 of stack "STEP Web Browser"
end browserFrameDocumentLoadComplete

on browserNavigateBegin pUrl
   if IsThereOddUrls(pUrl) is false then put pUrl into fld id 1003 of cd 1 of stack "STEP Web Browser"
end browserNavigateBegin

on browserNavigateComplete pUrl
   if IsThereOddUrls(pUrl) is false then put pUrl into fld id 1003 of cd 1 of stack "STEP Web Browser"
end browserNavigateComplete

on browserNavigateFailed pUrl,pError
   if IsThereOddUrls(pUrl) is false then put pUrl into fld id 1003 of cd 1 of stack "STEP Web Browser"
   if pError <> empty and not(pError contains "NSURLErrorDomain error -999") then answer pError as sheet
end browserNavigateFailed

on browserUnhandledLoadRequest pUrl
   if pUrl <> empty then answer "This browser was unable to handle the load request from "&pUrl&"." as sheet
end browserUnhandledLoadRequest

function IsThereOddUrls pUrl
   local tOdds
   put ".google,.twitter,blank,.facebook,.rfihub,.doubleclick,.addthis,.betrad,.2mdn" into tOdds
   repeat for each item tItem in tOdds
      if tItem is in pUrl then 
         return true
         exit repeat
      else next repeat
   end repeat
   return false
end IsThereOddUrls


#####################
## Script of button "Create snapshot”, ID 1027 of CARD 1 of SUBSTACK STEP Web Browser of STACK STEP Transcription Module

on mouseUp
   local tFile,tFolderPath,tFileName,tFiletype,tFiletype2
   put the cCurrentImageFolder of btn id 1030 of cd 1 into tFolderPath
   if tFolderPath is empty then 
      send "mouseUp" to btn id 1030 of cd 1
      exit mouseUp
   end if
   put the cCurrentFileName of btn id 1032 of cd 1 into tFileName
   if tFileName is empty then 
      send "mouseUp" to btn id 1032 of cd 1
      exit mouseUp
   end if
   put the cImageFormat of btn id 1028 of cd 1 into tFileType
   if tFileType is empty then 
      answer "Please choose an image file format in the pull-down menu at left."
      exit mouseUp
   end if
   if tFileType is "paint (PBM)" then 
      put ".pbm" into tFileType2
      put "paint" into tFileType
   else if tFileType is "JPEG" then put ".jpg" into tFileType2
   else if tFileType is "GIF" then put ".gif" into tFileType2
   else if tFileType is "PNG" then put ".png" into tFileType2
   put tFolderPath&"/"&tFileName &tFileType2 into tFile
   if there is a file tFile then
      answer "Replace current content of file “"&tFileName&"” with the snapshot you are about to take?" with "Cancel" or "Replace" as sheet
      if it is "Cancel" then exit mouseUp
   end if
   if tFileType is "paint" then export snapshot to file tFile as paint
   else if tFileType is "JPEG" then export snapshot to file tFile as JPEG
   else if tFileType is "GIF" then export snapshot to file tFile as GIF
   else if tFileType is "PNG" then export snapshot to file tFile as PNG
end mouseUp

##TOOLTIP:
##Click this button then drag a square around the part of the
##browser image (e.g., a rendered formula or equation) you want.
##The resulting image will be placed in the predesignated file.


#####################
## Script of button "Set folder…”, ID 1030 of CARD 1 of SUBSTACK STEP Web Browser of STACK STEP Transcription Module

on mouseUp
   local tFolderPath
   put the cCurrentImageFolder of me into tFolderPath
   if tFolderPath <> empty then answer folder "Please choose a folder:" with tFolderPath else answer folder "Please choose a folder:"
   if it <> empty then
      set the cCurrentImageFolder of me to it
   end if
end mouseUp

on mouseEnter
   local tFolderPath
   put the cCurrentImageFolder of me into tFolderPath
   if tFolderPath <> empty then
      set the itemDel to "/"
      set the tooltip of me to "Set the folder where the snapshots need to be exported to."&cr& "Current folder: /" & item -3 to -1 of tFolderPath
   end if
end mouseEnter

##TOOLTIP:
##Set the folder where the snapshots need to be exported to.
##Current folder: /STEP Externals/STEP-LI 7.1.4/STEP Browser Snapshots


#####################
## Script of button "Set filename…”, ID 1032 of CARD 1 of SUBSTACK STEP Web Browser of STACK STEP Transcription Module

on mouseUp
   ask "Type the name of the file for the new snapshot (no need to add a filetype such as “.png”"
   if it is not empty then set the cCurrentFileName of me to it
end mouseUp

on mouseEnter
   local tFilename
   put the cCurrentFileName of me into tFilename
   if tFilename <> empty then
      set the itemDel to "/"
      set the tooltip of me to "Set the filename for the new snapshot."&cr& "Current filename: " & tFilename
   end if
end mouseEnter

##TOOLTIP:
##Set the filename for the new snapshot.
##Current filename: OldPeirce


#####################
## Script of button "Image format”, ID 1028 of CARD 1 of SUBSTACK STEP Web Browser of STACK STEP Transcription Module

on menuPick pItemName
   local tList
   switch pItemName
      default
         set the cImageFormat of me to pItemName
         set the label of me to pItemName
   end switch
end menuPick

##TOOLTIP:
##Select the desired image file format for the snapshot.


#####################
#####################
## AA. SUBSTACK Find of STACK STEP Transcription Module

#####################
## Script of SUBSTACK Find of STACK STEP Transcription Module


on openStack
   checkLauncherWindow (the short name of this stack)
end openStack

on closeStack
   put empty into fld id 1004 of cd 1
end closeStack

on preOpenStack
   set the loc of this stack to the screenLoc
end preOpenStack


#####################
## Script of CARD 1 of SUBSTACK Find of STACK STEP Transcription Module

on openCard
   get the WholeOrPartial of this stack
   if it is "Whole" then 
      hiliteRadio 1018,true 
      hiliteRadio 1019,false 
   else  if it is "Partial" then 
      hiliteRadio 1019,true
      hiliteRadio 1018,false
   else 
      hiliteRadio 1018,false
      hiliteRadio 1019,false
   end if
   get the FirstOrAll of this stack
   if it is "First" then 
      hiliteRadio 1021,true
      hiliteRadio 1022,false
   else if it is "All" then
      hiliteRadio 1022,true
      hiliteRadio 1021,false
   else 
      hiliteRadio 1021,false
      hiliteRadio 1022,false
   end if
   get the MatchCase of this stack
   if it is "true" then hiliteRadio 1005,true else hiliteRadio 1005,false
   get the WhichFieldID of this stack
   if it is "1004" then hiliteRadio 1024,true
   else if it is "1026" then hiliteRadio 1025,true
   else if it is "1029" then hiliteRadio 1026,true
   else if it is "1126" then hiliteRadio 1027,true
   else if it is "1041" then hiliteRadio 1028,true
   else if it is "1151" then hiliteRadio 1029,true
   else if it is "1004,1026,1029,1126,1041,1151" then hiliteRadio 1030,true
   if it is not "1004" then hiliteRadio 1008,false
   else if it is not "1026" then hiliteRadio 1025,false
   else if it is not "1029" then hiliteRadio 1026,false
   else if it is not "1126" then hiliteRadio 1027,false
   else if it is not "1041" then hiliteRadio 1028,false
   else if it is not "1151" then hiliteRadio 1029,false
   else if it is not "1004,1026,1029,1126,1041,1151" then hiliteRadio 1030,false
   put the TextToFind of this stack into fld id 1004 of cd 1 of this stack
end openCard
   
on hiliteRadio tIdNum,tValue
   set the hilite of button id tIdNum of cd 1 of this stack to tValue
end hiliteRadio



field "Text To Find" of card id 1002 of stack "Find" of stack "/Users/adetienn/Documents/STEP Externals/STEP-LI 7.1.4/STEP Transcription Module.livecode" ID 1004 of CARD 1 of SUBSTACK Find of STACK STEP Transcription Module

on keyDown theKey
   if theKey is cr or theKey is tab then exit keyDown else pass keyDown
end keyDown

on enterInField
   send "mouseUp" to btn id 1009 of cd 1
end enterInField

on returnInField
   send "mouseUp" to btn id 1009 of cd 1
end returnInField


#####################
## Script of button "Cancel”, ID 1008 of CARD 1 of SUBSTACK Find of STACK STEP Transcription Module

on mouseUp
   set the dialogData to "Cancel"
   put empty into fld id 1004 of cd 1
   close stack "Find"
end mouseUp


#####################
## Script of button "Find”, ID 1009 of CARD 1 of SUBSTACK Find of STACK STEP Transcription Module

on mouseUp
   if fld id 1004 of cd 1 of this stack is empty then exit mouseUp
   set the TextToFind of this stack to line 1 of fld id 1004 of cd 1 of this stack
   if the hilite of btn id 1018 then set the WholeOrPartial of this stack to "Whole" else if the hilite of btn id 1019 then set the WholeOrPartial of this stack to "Partial"
   if the hilite of btn id 1021 then set the FirstOrAll of this stack to "First" else if the hilite of btn id 1022 then set the FirstOrAll of this stack to "All"
   if the hilite of btn id 1005 then set the MatchCase of this stack to "true" else set the MatchCase of this stack to "false"
   if the hilite of btn id 1024 then set the WhichFieldID of this stack to "1004" 
   else if the hilite of btn id 1025 then set the WhichFieldID of this stack to "1026"
   else if the hilite of btn id 1026 then set the WhichFieldID of this stack to "1029"
   else if the hilite of btn id 1027 then set the WhichFieldID of this stack to "1126"
   else if the hilite of btn id 1028 then set the WhichFieldID of this stack to "1041"
   else if the hilite of btn id 1029 then set the WhichFieldID of this stack to "1151"
   else if the hilite of btn id 1030 then set the WhichFieldID of this stack to "1004,1026,1029,1126,1041,1151"
   set the dialogData to the TextToFind of this stack & cr & the WholeOrPartial of this stack & cr & the FirstOrAll of this stack & cr & the MatchCase of this stack & cr & the WhichFieldID of this stack
   close stack "Find"
end mouseUp


#####################
#####################
## BB. SUBSTACK Found Strings of STACK STEP Transcription Module

#####################
## Script of SUBSTACK Found Strings of STACK STEP Transcription Module


on openStack
   checkLauncherWindow (the short name of this stack)
end openStack

on preOpenStack
   set the bottomright of this stack to the the bottomright of stack "STEP Transcription Module"
   setField
end preOpenStack

on closeStack
   if the cContent of stack "Found Strings" is "Misspellings" then
      set the backgroundColor of trueword 1 to -1 of fld id 1004 of cd 1 of stack "STEP Transcription Module" to empty
   end if
end closeStack

private command setField
   lock screen
   if the cContent of stack "Found Strings" is "Found Strings" then 
      set the HTMLText of fld id 1005 of cd 1 of stack "Found Strings" to the foundStrings of stack "Found Strings"
      set the title of stack "Found Strings" to "Found Strings"
      set the enabled of btn id 1014 of cd 1 of stack "Found Strings" to false
      hide btn id 1011 of cd 1 of stack "Found Strings"
      hide btn id 1014 of cd 1 of stack "Found Strings"
      show btn id 1015 of cd 1 of stack "Found Strings"
   else  if the cContent of stack "Found Strings" is "Bad Tags" then 
      set the text of fld id 1005 of cd 1 of stack "Found Strings" to the cBadTags of stack "Found Strings"
      set the title of stack "Found Strings" to "Potentially Problematic Tags"
      set the enabled of btn id 1014 of cd 1 of stack "Found Strings" to false
      hide btn id 1011 of cd 1 of stack "Found Strings"
      hide btn id 1014 of cd 1 of stack "Found Strings"
      show btn id 1015 of cd 1 of stack "Found Strings"
   else  if the cContent of stack "Found Strings" is "Misspellings" then 
      set the text of fld id 1005 of cd 1 of stack "Found Strings" to the cMisspellings of stack "Found Strings"
      set the title of stack "Found Strings" to "Potential Misspellings - "&the cLanguage of stack "Found Strings"
      set the enabled of btn id 1014 of cd 1 of stack "Found Strings" to true
      show btn id 1011 of cd 1 of stack "Found Strings"
      show btn id 1014 of cd 1 of stack "Found Strings"
      hide btn id 1015 of cd 1 of stack "Found Strings"
      set the tooltip of  btn id 1014 of cd 1 of stack "Found Strings" to "Add selected entry to STEP’s custom dictionary."&cr&"OPTION/ALT-click this button to edit that dictionary."
      set the label of  btn id 1014 of cd 1 of stack "Found Strings" to "Learn spelling"
   end if
end setField


#####################
## Script of CARD 1 of SUBSTACK Found Strings of STACK STEP Transcription Module




#####################
## Script of field "Found Strings”, ID 1005 of CARD 1 of SUBSTACK Found Strings of STACK STEP Transcription Module

on mouseEnter
   if the cContent of stack "Found Strings" is "Misspellings" then
      set the toolTip of me to "Re-click misspellings that occur more than once to move to"&cr&"the next one. Shift-click to move back to the previous one."
   else set the toolTip of me to empty
end mouseEnter
   
on mouseUp
   local tClickedText,tStackName,tTextLength,tFldID,ut,tLineNum,tSoughtIn,tSta,tSto,tBT,tBC,tItem,ot
   put the clickText into tClickedText
   set the cVScroll of me to the vScroll of me
   put "STEP Transcription Module" into tStackName
   if the cContent of stack "Found Strings" is "Found Strings" then
      replace " ..." with empty in tClickedText
      put length(the tStringFound of this stack) into tTextLength
      put item 1  of line (word 2 of the clickLine) of the FoundLocations of this stack into tFldID
      put item 2 of line (word 2 of the clickLine) of the FoundLocations of this stack into ut
      lock screen
      lock messages
      go to cd 1 of stack tStackName
      showIndexField tFldID
      set the vScroll of fld id tFldID of cd 1 of stack tStackName to 0
      put the lineIndex of char ut of fld id tFldID of cd 1 of stack tStackName into tLineNum
      select before line tLineNum of fld id tFldID of cd 1 of stack tStackName
      get the vscroll of fld id tFldID of cd 1 of stack tStackName
      set the vscroll of fld id tFldID of cd 1 of stack tStackName to (it + 280)
      select char ut to ut+tTextLength-1 of fld id tFldID of cd 1 of stack tStackName
      unlock screen
   else if the cContent of stack "Found Strings" is "Bad Tags" then
      put line (word 2 of the clickLine) of the cBadTags of this stack into tBT
      put line (word 2 of the clickLine) of the cBadChunks of this stack into tBC
      if char 1 of tBT <> "<" and char 1 to 2 of tBT <> quote&"<" then exit mouseUp
      put item 1 of tBC into tSta
      put item 2 of tBC into tSto
      lock screen
      lock messages
      go to cd 1 of stack tStackName
      showIndexField 1004
      set the vScroll of fld id 1004 of cd 1 of stack tStackName to 0
      put the lineIndex of char tSta of fld id 1004 of cd 1 of stack tStackName into tLineNum
      select before line tLineNum of fld id 1004 of cd 1 of stack tStackName
      get the vscroll of fld id 1004 of cd 1 of stack tStackName
      set the vscroll of fld id 1004 of cd 1 of stack tStackName to (it + 280)
      unlock screen
      select char tSta to tSto of fld id 1004 of cd 1 of stack tStackName
   else if the cContent of stack "Found Strings" is "Misspellings" then
      put line (word 2 of the clickLine) of the cMisspellings of stack "Found Strings" into tBT
      put line (word 2 of the clickLine) of the cMisspellingsChunks of stack "Found Strings" into tBC
      put the number of items of tBC into ot
      if ot > 1 then
         if the cBT of me is not tBT then
            set the cBT of me to tBT
            set the cBC of me to 1
         else if the cBT of me is tBT then
            if the shiftKey is up then set the cBC of me to (the cBC of me)+1 else if the shiftKey is down then set the cBC of me to (the cBC of me)-1
            if the cBC of me > ot then set the cBC of me to 1 else if the cBC of me = 0 then set the cBC of me to ot
         end if
      else if ot = 1 then 
         set the cBC of me to 1
      end if
      lock screen
      lock messages
      go to cd 1 of stack tStackName
      showIndexField 1004
      set the vScroll of fld id 1004 of cd 1 of stack tStackName to 0
      set the backgroundColor of trueword 1 to -1 of fld id 1004 of cd 1 of stack tStackName to empty
      select after trueword (item (the cBC of me) of tBC) of fld id 1004 of cd 1 of stack tStackName
      get the vscroll of fld id 1004 of cd 1 of stack tStackName
      if it > the height of fld id 1004 of cd 1 of stack tStackName then add 280 to it
      set the vscroll of fld id 1004 of cd 1 of stack tStackName to it --(it + 280)
      repeat for each item tItem in tBC
         set the backgroundColor of trueword tItem of fld id 1004 of cd 1 of stack tStackName to "red"
      end repeat
      set the vScroll of me to the cVScroll of me
      unlock screen
   end if
end mouseUp

on showIndexField tFldID
   local tStackName,tFldList,tFontCommandList
   if the lockscreen is false then set the lockscreen to true
   put "STEP Transcription Module" into tStackName
   if not the visible of fld id tFldID of cd 1 of stack tStackName then 
      if tFldID is among the items of "1004,1026,1029,1126" then
         if the visible of btn id 1040 of cd 1 of stack tStackName then
            put "1041,1139,1044,1151,1154,1157" into tFldList
            repeat for each item tFldID in tFldList
               hide fld id tFldID of cd 1 of stack tStackName
            end repeat
            show btn id 1025 of cd 1 of stack tStackName
            hide graphic id 1160 of cd 1 of stack tStackName
            hide graphic id 1919 of cd 1 of stack tStackName
            show graphic id 1920 of cd 1 of stack tStackName
            hide btn id 1040 of cd 1 of stack tStackName
            hideDescriptiveTools
            set the menuHistory of btn id 1025 of cd 1 of stack tStackName to the cLastTabOfMe of btn id 1025 of cd 1 of stack tStackName
            put "3,4,6,7,9,10" into tFontCommandList
            repeat for each item tItem in tFontCommandList
               if char 1 of line tItem of btn "Font" of group "STEP Menu 1" of cd 1 of stack tStackName is "(" 
               then delete char 1 of  line  tItem of btn "Font" of group "STEP Menu 1" of cd 1 of stack tStackName
            end repeat
         end if
         if tFldID is 1004 then
            show fld id 1004 of cd 1 of stack tStackName
            hide fld id 1026 of cd 1 of stack tStackName
            hide fld id 1029 of cd 1 of stack tStackName
            hide fld id 1126 of cd 1 of stack tStackName
            hide fld id 1163 of cd 1 of stack tStackName
            set the cLastTabOfMe of btn id 1025 of cd 1 of stack tStackName to 1
            select line 1 of btn id 1025 of cd 1 of stack tStackName
         else  if tFldID is 1126 then
            hide fld id 1004 of cd 1 of stack tStackName
            hide fld id 1026 of cd 1 of stack tStackName
            hide fld id 1029 of cd 1 of stack tStackName
            show fld id 1126 of cd 1 of stack tStackName
            hide fld id 1163 of cd 1 of stack tStackName
            set the cLastTabOfMe of btn id 1025 of cd 1 of stack tStackName to 2
            select line 2 of btn id 1025 of cd 1 of stack tStackName
         else  if tFldID is 1026 then
            hide fld id 1004 of cd 1 of stack tStackName
            show fld id 1026 of cd 1 of stack tStackName
            hide fld id 1029 of cd 1 of stack tStackName
            hide fld id 1126 of cd 1 of stack tStackName
            hide fld id 1163 of cd 1 of stack tStackName
            set the cLastTabOfMe of btn id 1025 of cd 1 of stack tStackName to 4
            select line 4 of btn id 1025 of cd 1 of stack tStackName
         else  if tFldID is 1029 then
            hide fld id 1004 of cd 1 of stack tStackName
            hide fld id 1026 of cd 1 of stack tStackName
            show fld id 1029 of cd 1 of stack tStackName
            hide fld id 1126 of cd 1 of stack tStackName
            hide fld id 1163 of cd 1 of stack tStackName
            set the cLastTabOfMe of btn id 1025 of cd 1 of stack tStackName to 5
            select line 5 of btn id 1025 of cd 1 of stack tStackName
         end if
         put "1004,1026,1029,1126,1163" into tFldList
         repeat for each item tFldID in tFldList
            set the cVisibleStatus of fld id tFldID of cd 1 of stack tStackName to the visible of fld id tFldID of cd 1 of stack tStackName
         end repeat
         
      else if tFldID is among the items of "1041,1151" then
         if the visible of btn id 1025 of cd 1 of stack tStackName then
            put "1004,1026,1029,1126,1163" into tFldList
            repeat for each item tFldID in tFldList
               hide fld id tFldID of cd 1 of stack tStackName
            end repeat
            uncolorBGLines
            hide btn id 1025 of cd 1 of stack tStackName
            hide graphic id 1920 of cd 1 of stack tStackName
            showDescriptiveTools
            show graphic id 1160 of cd 1 of stack tStackName
            show graphic id 1919 of cd 1 of stack tStackName
            show btn id 1040 of cd 1 of stack tStackName
            set the menuHistory of btn id 1040 of cd 1 of stack tStackName to the cLastTabOfMe of btn id 1040 of cd 1 of stack tStackName
            put "3,4,6,7,9,10" into tFontCommandList
            repeat for each item tItem in tFontCommandList
               if char 1 of line tItem of btn "Font" of group "STEP Menu 1" of cd 1 of stack tStackName <> "(" 
               then put "(" before line  tItem of btn "Font" of group "STEP Menu 1" of cd 1 of stack tStackName
            end repeat
         end if
         if tFldID is 1041 then
            show fld id 1041 of cd 1 of stack tStackName
            set the cLastTabOfMe of btn id 1040 of cd 1 of stack tStackName to 1
            hide fld id 1044 of cd 1 of stack tStackName
            hide fld id 1139 of cd 1 of stack tStackName
            hide fld id 1151 of cd 1 of stack tStackName
            hide fld id 1154 of cd 1 of stack tStackName
            hide fld id 1157 of cd 1 of stack tStackName
            select line 1 of btn id 1040 of cd 1 of stack tStackName
            set the cFldID of stack "Automatic Tagging" to 1041
         else  if tFldID is 1151 then
            hide fld id 1041 of cd 1 of stack tStackName
            hide fld id 1044 of cd 1 of stack tStackName
            hide fld id 1139 of cd 1 of stack tStackName
            show fld id 1151 of cd 1 of stack tStackName
            hide fld id 1154 of cd 1 of stack tStackName
            hide fld id 1157 of cd 1 of stack tStackName
            set the cFldID of stack "Automatic Tagging" to 1151
            set the cLastTabOfMe of btn id 1040 of cd 1 of stack tStackName to 4
            select line 4 of btn id 1040 of cd 1 of stack tStackName
         end if
         put "1041,1139,1044,1151,1154,1157" into tFldList
         repeat for each item tFldID in tFldList
            set the cVisibleStatus of fld id tFldID of cd 1 of stack tStackName to the visible of fld id tFldID of cd 1 of stack tStackName
         end repeat
      end if
   end if
end showIndexField
      
on showDescriptiveTools
   local tControls,tStackName
   --lock screen
   put "STEP Transcription Module" into tStackName
   put "1054,1120,1130,1895,1921,1924,1925,1926,1927,1928,1929" into tControls
   repeat for each item tCon in tControls
      show control id tCon of cd 1 of stack tStackName
   end repeat
   set the cTranscriptiveTag of fld id 1010 of cd 1 of stack tStackName to fld id 1010 of cd 1 of stack tStackName
   set the text of fld id 1010 of cd 1 of stack tStackName to the cDescriptiveTag of fld id 1010 of cd 1 of stack tStackName
   set the title of stack tStackName to "STEP Descriptor"
end showDescriptiveTools

on hideDescriptiveTools
   local tControls,tStackName
   --lock screen
   put "STEP Transcription Module" into tStackName
   put "1054,1120,1130,1895,1921,1924,1925,1926,1927,1928,1929" into tControls
   repeat for each item tCon in tControls
      hide control id tCon of cd 1 of stack tStackName
   end repeat
   set the cDescriptiveTag of fld id 1010 of cd 1 of stack tStackName to fld id 1010 of cd 1 of stack tStackName
   set the text of fld id 1010 of cd 1 of stack tStackName to the cTranscriptiveTag of fld id 1010 of cd 1 of stack tStackName
   set the title of stack tStackName to "STEP Transcriptor"
end hideDescriptiveTools

on uncolorBGLines
   --lock screen
   local tFldIDs,tStackName
   put "STEP Transcription Module" into tStackName
   put "1017,1064,1109,1171,1049,1067,1112,1174" into tFldIDs
   repeat for each item tID in tFldIDs
      set the backgroundcolor of line 1 to -1 of fld id tID of cd 1 of stack tStackName to empty
   end repeat
end uncolorBGLines



#####################
## Script of button "Sort”, ID 1012 of CARD 1 of SUBSTACK Found Strings of STACK STEP Transcription Module

on menuPick pItemName
   if the cContent of stack "Found Strings" is "Found Strings" then
      local tStrs,tStrs2,tLocs,tLocs2,tLocs3,tSta1s,tSto1s,tR1,tR2,tR3,tL,tLNum
      set the label of me to "Sort"
      put the FoundStrings of stack "Found Strings" into tStrs
      put the FoundLocations of stack "Found Strings" into tLocs
      replace comma with "|" in tLocs
      put empty into tLocs2
      put empty into tStrs2
      repeat with i = 1 to the number of lines of tStrs
         put "|" & line i of tLocs after line i of tStrs
      end repeat
      set the itemdel to "|"
      if (pItemName contains "alphabetically") then 
         sort lines of tStrs ascending international by item 1 of each
      else if (pItemName contains "by text location") then
         sort lines of tStrs numeric by item 3 of each
         sort lines of tStrs numeric by item 2 of each
      end if
      repeat for each line i in tStrs
         put item 1 of i into line (the number of lines of tStrs2)+1 of tStrs2
         put item 2 of i & comma & item 3 of i into line (the number of lines of tLocs2)+1 of tLocs2
      end repeat
      set the itemDel to comma
      set the FoundStrings of stack "Found Strings" to tStrs2
      set the FoundLocations of stack "Found Strings" to tLocs2
      set the htmltext of fld id 1005 of cd 1 of stack "Found Strings" to tStrs2
   else  if the cContent of stack "Found Strings" is "Bad Tags" then
      set the label of me to "Sort"
      put the cBadTags of fld id 1005 of cd 1 of stack "Found Strings" into tStrs
      put the cBadChunks of fld id 1005 of cd 1 of stack "Found Strings" into tLocs
      put offsets(cr&cr&"<",tStrs) into tSta1s
      put offsets(">"&cr&cr,tStrs) into tSto1s
      repeat with i = 1 to the number of items of tSta1s
         put char (item i of tSta1s)+2 to (item i of tSto1s) of tStrs into tR1
         put the number of lines of tR1 into tL
         put lineOffset(line 1 of tR1,tStrs) into tLNum
         put line tLNum to (tLNum + tL-1) of tLocs into tLocs3
         replace comma with "|" in tLocs3
         put empty into tLocs2
         put empty into tR2
         repeat with m = 1 to the number of lines of tR1
            put "|" & line m of tLocs3 after line m of tR1
         end repeat
         set the itemdel to "|"
         if (pItemName contains "alphabetically") then 
            sort lines of tR1 ascending international by item 1 of each
         else if (pItemName contains "by text location") then
            sort lines of tR1 numeric by item 2 of each
         end if
         repeat for each line j in tR1
            put item 1 of j into line (the number of lines of tR2)+1 of tR2
            put item 2 of j & comma & item 3 of j into line (the number of lines of tLocs2)+1 of tLocs2
         end repeat
         put tR2 into line tLNum to (tLNum + tL-1) of tStrs
         put tLocs2 into line tLNum to (tLNum + tL-1) of tLocs
      end repeat
      set the itemDel to comma
      set the cBadTags of fld id 1005 of stack "Found Strings" to tStrs
      set the cBadChunks of fld id 1005 of stack "Found Strings" to tLocs
      put tStrs into fld id 1005 of  stack "Found Strings"
   else  if the cContent of stack "Found Strings" is "Misspellings" then
      set the label of me to "Sort"
      put the cMisspellings of stack "Found Strings" into tStrs
      put the cMisspellingsChunks of stack "Found Strings" into tLocs
      replace comma with "|" in tLocs
      put empty into tLocs2
      put empty into tStrs2
      repeat with i = 1 to the number of lines of tStrs
         put "|" & line i of tLocs after line i of tStrs
      end repeat
      set the itemdel to "|"
      if (pItemName contains "alphabetically") then 
         sort lines of tStrs ascending international by item 1 of each
      else if (pItemName contains "by text location") then
         sort lines of tStrs numeric by item 2 of each
      end if
      repeat for each line i in tStrs
         put item 1 of i into line (the number of lines of tStrs2)+1 of tStrs2
         put item 2 to -1 of i into line (the number of lines of tLocs2)+1 of tLocs2
      end repeat
      replace "|" with comma in tLocs2
      set the itemDel to comma
      set the cMisspellings of stack "Found Strings" to tStrs2
      set the cMisspellingsChunks of stack "Found Strings" to tLocs2
      put tStrs2 into fld id 1005 of cd 1 of stack "Found Strings"
   end if
end menuPick

##TOOLTIP:
##Sort content alphabetically
##or by location in text fields.


#####################
## Script of button "Print”, ID 1008 of CARD 1 of SUBSTACK Found Strings of STACK STEP Transcription Module

on mouseUp
   if field id 1005 of cd 1 is empty then 
      answer "The field is empty. There is nothing to print." as sheet
      exit mouseUp
   end if
   if the cContent of stack "Found Strings" is "Found Strings" then 
      answer "Confirm you want to print the full list of found strings." with "Cancel" or "Print"
      if it is "Cancel" then exit mouseUp
      revPrintText field id 1005,"LIST OF FOUND STRINGS"&cr,the time && the date&cr
   else if the cContent of stack "Found Strings" is "Bad Tags" then 
      answer "Confirm you want to print the full list of possibly bad tags." with "Cancel" or "Print"
      if it is "Cancel" then exit mouseUp
      revPrintText field id 1005,"LIST OF BAD TAGS"&cr,the time && the date&cr
   else if the cContent of stack "Found Strings" is "Misspellings" then 
      answer "Confirm you want to print the full list of potential misspellings." with "Cancel" or "Print"
      if it is "Cancel" then exit mouseUp
      revPrintText field id 1005,"LIST OF POTENTIAL MISSPELLINGS"&cr,the time && the date&cr
   end if
end mouseUp

##TOOLTIP:
##Print the content of the field.


#####################
## Script of button "Click A Line”, ID 1009 of CARD 1 of SUBSTACK Found Strings of STACK STEP Transcription Module

on mouseUp
   if fld id 1005 of cd 1 is empty then exit mouseUp
   answer "Click on any line to view it in the corresponding field of STEP Transcriptor."
end mouseUp

##TOOLTIP:
##Clicking a line selects and displays its content
##in its corresponding STEP Transcriptor text.


#####################
## Script of button "Clear Field”, ID 1010 of CARD 1 of SUBSTACK Found Strings of STACK STEP Transcription Module

on mouseUp
   if fld id 1005 of cd 1 of this stack is empty then exit mouseUp
   if the cContent of stack "Found Strings" is "Found Strings" then 
      answer "Confirm you want to delete all the found entries." with "No" or "OK"
      if it is "OK" then
         put empty into fld id 1005 of cd 1 of this stack
         set the FoundStrings of this stack to empty
         set the FoundLocations of this stack to empty
         set the tStringFound of this stack to empty
      end if
   else if the cContent of stack "Found Strings" is "Bad Tags" then 
      answer "Confirm you want to delete the entire list of problematic tags." with "No" or "OK"
      if it is "OK" then
         put empty into fld id 1005 of cd 1 of this stack
         set the cBadChunks of this stack to empty
         set the cBadTags of this stack to empty
         set the cContent of this stack to empty
      end if
   else if the cContent of stack "Found Strings" is "Misspellings" then 
      answer "Confirm you want to delete the entire list of potential misspellings." with "No" or "OK"
      if it is "OK" then
         put empty into fld id 1005 of cd 1 of this stack
         set the cMisspellingsChunks of this stack to empty
         set the cMisspellings of this stack to empty
         set the cContent of this stack to empty
         set the backgroundColor of trueword 1 to -1 of fld id 1004 of cd 1 of stack "STEP Transcription Module" to empty
      end if
   end if
end mouseUp

##TOOLTIP:
##Empty the field above.


#####################
## Script of button "Close”, ID 1011 of CARD 1 of SUBSTACK Found Strings of STACK STEP Transcription Module

on mouseUp
   if the cContent of stack "Found Strings" is "Misspellings" then
      set the backgroundColor of trueword 1 to -1 of fld id 1004 of cd 1 of stack "STEP Transcription Module" to empty
   end if
   close stack "Found Strings"
end mouseUp


#####################
## Script of button "Learn”, ID 1014 of CARD 1 of SUBSTACK Found Strings of STACK STEP Transcription Module

on mouseUp
   local tSkips,tCustDicts,tCustDico,tItem,tLangCust
   put "English|uWordsToSkipReSpelling|EnglishCustomDictionary,French|uMotsAEviterReOrthographe|FrenchCustomDictionary" into tCustDicts
   get the cLanguage of stack "Found Strings"
   repeat with i = 1 to the number of items of tCustDicts
      put item i of tCustDicts into tItem
      set the itemDel to "|"
      if it is item 1 of tItem then 
         put item 2 of tItem into tCustDico
         put item 3 of tItem into tLangCust
         set the itemDel to comma
         exit repeat
      end if
      set the itemDel to comma
   end repeat
   if the optionKey is up then
      if (fld id 1005 of cd 1 of this stack is empty) or (the cContent of stack "Found Strings" <> "Misspellings") or (the hilitedLines of fld id 1005 of cd 1 of this stack is 0) or (the hilitedLines of fld id 1005 of cd 1 of this stack is empty) then exit mouseUp
      put the tCustDico of cd 1 of stack "STEP Transcription Module" into tSkips
      put cr&trueword 1 of line (item 1 of the hilitedLines of fld id 1005 of cd 1 of this stack)  of fld id 1005 of cd 1 of this stack after tSkips
      sort lines of tSkips ascending international
      set the tCustDico of cd 1 of stack "STEP Transcription Module" to tSkips
      put " << ADDED TO CUSTOM "&toUpper(it)&" DICTIONARY" after line (item 1 of the hilitedLines of fld id 1005 of cd 1 of this stack)  of fld id 1005 of cd 1
      do "storeCustom"&it&"Dictionary"
   else
      set the cHolder of stack "List Editor" to tLangCust
      put the tCustDico of cd 1 of stack "STEP Transcription Module" into fld id 1003 of cd 1 of stack "List Editor"
      set the title of stack "List Editor" to "List Editor -"&&it&&"Custom Dict."
      modeless stack "List Editor"
   end if
end mouseUp

on mouseWithin
   if the optionKey is down then 
      set the tooltip of me to "Call up a window where you can edit the custom dictionary."
      set the label of me to "Edit cust. dict." 
   else 
      set the tooltip of me to "Add selected entry to STEP’s custom dictionary."&cr&"OPTION/ALT-click this button to edit that dictionary."
      set the label of me to "Learn spelling"
   end if
end mouseWithin

##TOOLTIP:
##Add selected entry to STEP’s custom dictionary.
##OPTION/ALT-click this button to edit that dictionary.


#####################
## Script of button "Close”, ID 1015 of CARD 1 of SUBSTACK Found Strings of STACK STEP Transcription Module

on mouseUp
   if the cContent of stack "Found Strings" is "Misspellings" then
      set the backgroundColor of trueword 1 to -1 of fld id 1004 of cd 1 of stack "STEP Transcription Module" to empty
   end if
   close stack "Found Strings"
end mouseUp

#####################
#####################
## CC. SUBSTACK Replace of STACK STEP Transcription Module

#####################
## Script of SUBSTACK Replace of STACK STEP Transcription Module


on openStack
   lock screen
   put empty into fld id 1010 of cd 1
    set the hilite of btn id 1024 of cd 1 to true
   set the hilite of btn id 1025 of cd 1 to false
   if the selectedText of fld id 1004 of cd 1 of stack "STEP Transcription Module" is empty then set the hilite of btn id 1026 of cd 1 to false else set the hilite of btn id 1026 of cd 1 to true
   set the hilite of btn id 1017 of cd 1 to false
   set the hilite of btn id 1022 of cd 1 to false
   set the hilite of btn id 1021 of cd 1 to true
   checkLauncherWindow (the short name of this stack)
   unlock screen
end openStack

on preOpenStack
   set the loc of this stack to the screenloc
   get the cVisibleField of this stack
   if it is 1004 then set the label of btn id 1029 of cd 1 of stack "Replace" to "Transcription"
   else if it is 1026 then set the label of btn id 1029 of cd 1 of stack "Replace" to "Rendered Transcription"
   else if it is 1029 then set the label of btn id 1029 of cd 1 of stack "Replace" to "Base Text for Editing"
   else if it is 1041 then set the label of btn id 1029 of cd 1 of stack "Replace" to "Base Description"
   else if it is 1151 then set the label of btn id 1029 of cd 1 of stack "Replace" to "Rendered Description"
   else set the label of btn id 1029 of cd 1 of stack "Replace" to "Transcription"
end preOpenStack

on resumeStack
   get the cVisibleField of this stack
   if it is 1004 then set the label of btn id 1029 of cd 1 of stack "Replace" to "Transcription"
   else if it is 1026 then set the label of btn id 1029 of cd 1 of stack "Replace" to "Rendered Transcription"
   else if it is 1029 then set the label of btn id 1029 of cd 1 of stack "Replace" to "Base Text for Editing"
   else if it is 1041 then set the label of btn id 1029 of cd 1 of stack "Replace" to "Base Description"
   else if it is 1151 then set the label of btn id 1029 of cd 1 of stack "Replace" to "Rendered Description"
   else set the label of btn id 1029 of cd 1 of stack "Replace" to "Transcription"
end resumeStack

on closeStack
   put empty into fld id 1008 of cd 1
   put empty into fld id 1010 of cd 1
   put empty into fld id 1031 of cd 1
   put empty into fld id 1032 of cd 1
   pass closeStack
end closeStack


#####################
## Script of CARD 1 of SUBSTACK Replace of STACK STEP Transcription Module

on enterKey
   send "mouseUp" to btn id 1019 of cd 1 of this stack
end enterKey



#####################
## Script of field "ReplaceWith”, ID 1010 of CARD 1 of SUBSTACK Replace of STACK STEP Transcription Module

on tabKey
   select text of fld id 1008 of cd 1
end tabKey

on returnInField
   select text of fld id 1008 of cd 1
end returnInField

on enterInField
   send "mouseUp" to btn id 1019 of cd 1
end enterInField


#####################
## Script of button "Cancel”, ID 1018 of CARD 1 of SUBSTACK Replace of STACK STEP Transcription Module

on mouseUp
   put empty into fld id 1008 of cd 1
   put empty into fld id 1010 of cd 1
   put empty into fld id 1031 of cd 1
   put empty into fld id 1032 of cd 1
   close stack "Replace"
end mouseUp


#####################
## Script of button "Replace”, ID 1019 of CARD 1 of SUBSTACK Replace of STACK STEP Transcription Module

on mouseUp
   lock screen
   local tStringToReplace,tReplacement,tAll,tSelect,tCaseSensitive,tExactly,tIDNum,tStackName,tHText,tContent,tSelChunk,tVScroll,tListOffsets,tLong,e,f
   if fld id 1008 of cd 1 of stack "Replace" is empty then exit mouseUp
   put line 1 of fld id 1008 of cd 1 of stack "Replace" into tStringToReplace
   put line 1 of fld id 1010 of cd 1 of stack "Replace" into tReplacement
   put the hilite of btn id 1024 of cd 1 of stack "Replace" into tAll
   if the hilite of btn id 1026 of cd 1 of stack "Replace" is true then
      put empty into tAll
      put "yes" into tSelect
   else put "no" into tSelect
   put the hilite of btn id 1017 of cd 1 of stack "Replace" into tCaseSensitive
   put the hilite of btn id 1022 of cd 1 of stack "Replace" into tExactly
   get the label of btn id 1029 of cd 1 of stack "Replace"
   if it is "Transcription" then put "1004" into tIDNum
   else if it is "Rendered Transcription" then put "1026" into tIDNum
   else if it is "Base Text for Editing" then put "1029" into tIDNum
   else if it is "Base Description" then put "1041" into tIDNum
   else if it is "Rendered Description" then put "1151" into tIDNum
   put "STEP Transcription Module" into tStackName
   put the vScroll of fld id tIDNum of cd 1 of stack tStackName into tVScroll
   if tReplacement is empty then answer"Confirm you want to delete the string “"&tStringToReplace&"” since the second field is empty." with "Yes" or "Abort" as sheet
   if it is "Abort" then exit mouseUp
   if tSelect is "yes" then
      put the cSelectedChunk of  fld id tIDNum of cd 1 of stack tStackName into tSelChunk
      if (tSelChunk is empty) or (segment 4 of tSelChunk <  segment 2 of tSelChunk) then 
         answer "First select the portion of the text in the “"&it&"” field where replacement will take place." as sheet
         exit mouseUp
      else 
         if tStringToReplace is not in char (segment 2 of tSelChunk) to (segment 4 of tSelChunk) of fld id tIDNum of cd 1 of stack tStackName then
            answer "The selection does not contain the string “"&tStringToReplace&".”" as sheet
            exit mouseUp
         else if tAll is true and tExactly is false then
            set the caseSensitive to tCaseSensitive
            replace tStringToReplace with tReplacement in char (segment 2 of tSelChunk) to (segment 4 of tSelChunk) of fld id tIDNum of cd 1 of stack tStackName preserving styles
         else
            put char (segment 2 of tSelChunk) to (segment 4 of tSelChunk) of fld id tIDNum of cd 1 of stack tStackName into tContent
            put fullReplace(tContent,tStringToReplace,tReplacement,tExactly,tAll,tCaseSensitive) into char (segment 2 of tSelChunk) to (segment 4 of tSelChunk) of fld id tIDNum of cd 1 of stack tStackName
         end if
      end if
   else
      if tIDNum is not "1004" then
         if tAll is true and tExactly is false then
            set the caseSensitive to tCaseSensitive
            replace tStringToReplace with tReplacement in fld id tIDNum of cd 1 of stack tStackName preserving styles
         else
            put fld id tIDNum  of cd 1 of stack tStackName into tContent
            put fullReplace(tContent,tStringToReplace,tReplacement,tExactly,tAll,tCaseSensitive) into fld id tIDNum of cd 1 of stack tStackName
         end if
      else
         put the HTMLText of fld id 1004 of cd 1 of stack tStackName into tHText
         set the caseSensitive to tCaseSensitive
         set the wholeMatches to tExactly
         put empty into tListOffsets
         if tAll is true then
            if tExactly is false then
               replace tStringToReplace with tReplacement in fld id 1004 of cd 1 of stack tStackName preserving styles
            else
               put the HTMLText of fld id 1008 of cd 1 of stack "Replace" into fld id 1031 of cd 1 of stack "Replace"
               put char offset("<p>",fld id 1031 of cd 1 of stack "Replace")+3 to offset("</p>",fld id 1031 of cd 1 of stack "Replace")-1 of fld id 1031 of cd 1 of stack "Replace" into tStringToReplace
               put the HTMLText of fld id 1010 of cd 1 of stack "Replace" into fld id 1032 of cd 1 of stack "Replace"
               put char offset("<p>",fld id 1032 of cd 1 of stack "Replace")+3 to offset("</p>",fld id 1032 of cd 1 of stack "Replace")-1 of fld id 1032 of cd 1 of stack "Replace" into tReplacement
               put allOffsets(tStringToReplace,tHText,tCaseSensitive,tExactly) into tListOffsets
               if tListOffsets is empty or tListOffsets is 0 then exit mouseUp
               put length(tStringToReplace)-1 into tLong
               repeat with e = (the number of items of tListOffsets) down to 1
                  if char -1 of e = 5 then set cursor to busy
                  put item e of tListOffsets into f
                  put tReplacement into char f to f+tLong of tHText
               end repeat
               set the HTMLText of fld id 1004 of cd 1 of stack tStackName to tHText
            end if
         else
            put the HTMLText of fld id 1008 of cd 1 of stack "Replace" into fld id 1031 of cd 1 of stack "Replace"
            put char offset("<p>",fld id 1031 of cd 1 of stack "Replace")+3 to offset("</p>",fld id 1031 of cd 1 of stack "Replace")-1 of fld id 1031 of cd 1 of stack "Replace" into tStringToReplace
            put the HTMLText of fld id 1010 of cd 1 of stack "Replace" into fld id 1032 of cd 1 of stack "Replace"
            put char offset("<p>",fld id 1032 of cd 1 of stack "Replace")+3 to offset("</p>",fld id 1032 of cd 1 of stack "Replace")-1 of fld id 1032 of cd 1 of stack "Replace" into tReplacement
            put offset(tStringToReplace,tHText) into tListOffsets
            if tListOffsets is empty or tListOffsets is 0 then exit mouseUp
            put length(tStringToReplace)-1 into tLong
            put tReplacement into char (item 1 of tListOffsets) to (item 1 of tListOffsets)+tLong of tHText            
            set the HTMLText of fld id 1004 of cd 1 of stack tStackName to tHText
         end if
      end if
   end if
   close stack "Replace"
   set the vScroll of fld id tIDNum of cd 1 of stack tStackName to tVScroll
   unlock screen
end mouseUp

function allOffsets str,ctr,pCaseSense,pExact
   local mosList,startPoint,ofs
   put "" into mosList
   put 0 into startPoint
   set the caseSensitive to pCaseSense
   set the wholeMatches to pExact
   repeat
      put offset(str,ctr,startPoint) into ofs
      if ofs = 0 then exit repeat
      add ofs to startPoint
      put startPoint & comma after mosList
   end repeat
   if char -1 of mosList = comma then delete char -1 of mosList
   if mosList = "" then return 0
   return mosList
end allOffsets



#####################
## Script of button "In selected lines”, ID 1026 of CARD 1 of SUBSTACK Replace of STACK STEP Transcription Module

on mouseUp
   local tSelChunk
   if the hilited of me is true then
      get the cVisibleField of this stack
      if it is empty then get 1004
      put the cSelectedChunk of fld id it of cd 1 of stack "STEP Transcription Module" into tSelChunk
      if (tSelChunk is empty) or (segment 4 of tSelChunk <  segment 2 of tSelChunk) then 
         answer "There is no text selected in the "&fieldName(it)&" field. Go back and select?" with "No" or "Yes" as sheet
         if it is "No" then
            set the hilited of me to false
            exit mouseUp
         else if it is "Yes" then
            set the hilited of me to false
            close stack "Replace"
         end if
      end if
   end if
end mouseUp

function fieldName pID
   if pID is 1004 then return "Transcription"
   else if pID is 1026 then return "Rendered Transcription"
   else if pID is 1029 then return "Base Text for Editing"
   else if pID is 1041 then return "Base Description"
   else if pID is 1151 then return "Rendered Description"
   else return "Transcription"
end fieldName


#####################
## Script of button "Which Field”, ID 1029 of CARD 1 of SUBSTACK Replace of STACK STEP Transcription Module

on menuPick pItemName
   switch pItemName
     set the label of me to pItemName 
   end switch
end menuPick



#####################
#####################
## DD. SUBSTACK Customize Pagebreak Self-Closing Tag of STACK STEP Transcription Module

#####################
## Script of SUBSTACK Customize Pagebreak Self-Closing Tag of STACK STEP Transcription Module


on preOpenStack
   set the loc of this stack to the screenLoc
end preOpenStack

on openStack
   checkLauncherWindow (the short name of this stack)
   if the hilite of btn "Example" of cd 1 of this stack is true then send "mouseUp" to btn "Example" of cd 1 of this stack
   select before fld id 1016 of cd 1
   pass openStack
end openStack

on closeStack
   local tList
   lock screen
   repeat with x = 1016 to 1023
      put empty into fld id x of cd 1
   end repeat
   repeat with x = 1055 to 1057
      set the hilited of btn id x of cd 1 of this stack to false
      set the cHilited of btn id x of cd 1 of this stack to false
   end repeat
   put "1024,1037,1040,1042,1044,1053" into tList
   repeat for each item tMenuBtn in tList
      set the label of btn id tMenuBtn of cd 1 to "none"
   end repeat
   repeat with x = 1025 to 1027
      set the label of btn id x of cd 1 to "Integers only"
   end repeat
   put empty into fld id 1034 of cd 1
end closeStack


#####################
## Script of CARD 1 of SUBSTACK Customize Pagebreak Self-Closing Tag of STACK STEP Transcription Module

function removeSpacing pText
   replace space with empty in pText
   return pText
end removeSpacing

on openCard
   if fld id 1206 of cd 1 of stack "STEP Transcription Module" <> empty
   then put the text of fld id 1206 of cd 1 of stack "STEP Transcription Module" into fld id 1016 of cd 1 of this stack
   if fld id 1207 of cd 1 of stack "STEP Transcription Module" <> empty
   then put the text of fld id 1207 of cd 1 of stack "STEP Transcription Module" into fld id 1017 of cd 1 of this stack
   if fld id 1209 of cd 1 of stack "STEP Transcription Module" <> empty
   then put the text of fld id 1209 of cd 1 of stack "STEP Transcription Module" into fld id 1022 of cd 1 of this stack
   if fld id 1211 of cd 1 of stack "STEP Transcription Module" <> empty
   then put the text of fld id 1211 of cd 1 of stack "STEP Transcription Module" into fld id 1023 of cd 1 of this stack
   if fld id 1208 of cd 1 of stack "STEP Transcription Module" <> empty
   then set the label of btn id 1045 of this stack to convertLeafAbbr(fld id 1208 of cd 1 of stack "STEP Transcription Module")
end openCard

function convertLeafAbbr pAbbr
   if pAbbr = "p" then return "page (p)"
   else if pAbbr = "sh" then return "sheet (sh)"
   else if pAbbr = "lf" then return "leaf (lf)"
   else if pAbbr = "f" then return "feuille (f)"
   else if pAbbr = "fo" then return "folio (fo)"
   else if pAbbr = "fac" then return "facsimile (fac)"
end convertLeafAbbr



#####################
## Script of button "Place Menu”, ID 1024 of CARD 1 of SUBSTACK Customize Pagebreak Self-Closing Tag of STACK STEP Transcription Module

on menuPick pItemName
   local tList
   switch pItemName
      case "Edit list..."
         set the cHolder of stack "List Editor" to the id of btn "Place Menu" of cd 1 of this stack
         put the text of me into tList
         filter tList without empty
         put line 3 to -3 of tList into fld id 1003 of cd 1 of stack "List Editor"
         set the title of stack "List Editor" to "List Editor - Pb Place menu"
         palette stack "List Editor"
         set the label of me to the cLabel of me
         break
      default
         set the label of me to pItemName
   end switch
end menuPick

on mouseEnter
   set the cLabel of me to the label of me
end mouseEnter

##TOOLTIP:
##Optional


#####################
## Script of button "Record <pb/> format”, ID 1033 of CARD 1 of SUBSTACK Customize Pagebreak Self-Closing Tag of STACK STEP Transcription Module

on mouseUp pClickNum,pAlert
   local tList,tProp,tNAtt,tLeafType,tHistory,tNewFormat
   lock screen
   if the hilite of btn "Example" of cd 1 of this stack <> true then 
      repeat with x = 1016 to 1023
         put "c"&removeSpacing(the short name of fld id x of cd 1 of this stack) into tProp
         set the tProp of this stack to the text of fld id x of cd 1 of this stack
      end repeat
      put "1024,1025,1026,1027,1037,1040,1042,1044,1045,1053" into tList
      repeat for each item tMenuBtn in tList
         put "c"&removeSpacing(the short name of btn id tMenuBtn of cd 1 of this stack) into tProp
         if the label of btn id tMenuBtn of cd 1 of this stack is not empty and the label of btn id tMenuBtn of cd 1 of this stack is not the short name of btn id tMenuBtn of cd 1 of this stack then
            set the tProp of this stack to the label of btn id tMenuBtn of cd 1 of this stack
         else 
            if tMenuBtn is not among the items of "1025,1026,1027" then set the tProp of this stack to "none" else set the tProp of this stack to "Integers only"
         end if
      end repeat
      if the cTranscInitNum of this stack is not empty then put the cTranscInitNum of this stack into tNAtt
      else
         if the cArchiveInitNum of this stack is not empty then
            put the cArchiveInitNum of this stack into tNAtt
            set the cTranscInitNum of this stack to tNAtt
            put tNatt into fld id 1022 of cd 1 of this stack
         else
            if the cAuthorInitNum of this stack is not empty then
               put the cAuthorInitNum of this stack into tNAtt
               set the cTranscInitNum of this stack to tNAtt
               put tNatt into fld id 1022 of cd 1 of this stack
            end if
         end if
      end if
      put the cLeafType of this stack into tLeafType
      if tLeafType is empty then 
         answer "Leaf type is missing. Please supply it." as sheet
         exit to top
      end if
      if tNAtt is empty then 
         answer "Initial  "&(segment 1 of tLeafType)&" number is missing at all levels. Please supply it." as sheet
         exit to top
      end if
      if the cTranscLastNum of this stack is empty then      
         if the cArchiveLastNum of this stack is not empty then
            set the cTranscLastNum of this stack to the cArchiveLastNum of this stack
            put the cArchiveLastNum of this stack into fld id 1023 of cd 1 of this stack
         else
            if the cAuthorLastNum of this stack is not empty then
               set the cTranscLastNum of this stack to the cAuthorLasttNum of this stack
               put the cAuthorLasttNum of this stack into fld id 1023 of cd 1 of this stack
            end if
         end if
      end if
      put manufacturePbTag() into fld id 1034 of cd 1 of stack "Customize Pagebreak Self-Closing Tag"
      if pAlert is not true and "<pb " is in fld id 1034 of cd 1 of stack "Customize Pagebreak Self-Closing Tag" then 
         put fld id 1034 of cd 1 of stack "Customize Pagebreak Self-Closing Tag" into tNewFormat
         set the cPageBreakFormat of fld id 1004 of stack "STEP Transcription Module" to tNewFormat &convertIDnumberToAttribute()
         put the cPagebreakHistory of stack "STEP Transcription Module" into tHistory
         if tHistory <> empty and char -1 of tHistory <> cr then put cr after tHistory
         put tNewFormat & addAllPageBreakInfo() & cr after tHistory
         put stripDuplicates2(tHistory) into tHistory
         set the cPagebreakHistory of stack "STEP Transcription Module" to tHistory
         if line 3 of fld id 1004 of cd 1 of stack "STEP Transcription Module" is "</body>" or "<pb n=" is not in fld id 1004 of cd 1 of stack "STEP Transcription Module" then
            if line 1 of fld id 1004 of cd 1 of stack "STEP Transcription Module" begins with "<body>" then put cr&tNewFormat after char 6 of fld id 1004 of cd 1 of stack "STEP Transcription Module"
            else if line 1 of fld id 1004 of cd 1 of stack "STEP Transcription Module" begins with "<p" then put tNewFormat & cr before char 1 of fld id 1004 of cd 1 of stack "STEP Transcription Module"
            else if fld id 1004 of cd 1 of stack "STEP Transcription Module" is empty then put "<body>" & cr & tNewFormat & cr & "<p></p>"&cr&"</body>" into fld id 1004 of cd 1 of stack "STEP Transcription Module"
            send "mouseUp 1004" to btn "Color all tags" of cd 1 of stack "STEP Transcription Module"
         end if
         put the cTranscInitNum of stack "Customize Pagebreak Self-Closing Tag" into fld id 1209 of cd 1 of stack "STEP Transcription Module"
         put the cTranscLastNum of stack "Customize Pagebreak Self-Closing Tag" into fld id 1211 of cd 1 of stack "STEP Transcription Module"
         put trueword -1 of the cLeafType of of stack "Customize Pagebreak Self-Closing Tag" into fld id 1240 of cd 1 of stack "STEP Transcription Module"
         set the cLeafType of fld id 1004 of cd 1 of stack "STEP Transcription Module" to trueword -1 of the cLeafType of stack "Customize Pagebreak Self-Closing Tag"
      end if
   else
      repeat with x = 1016 to 1023
         put "c"&removeSpacing(the short name of fld id x of cd 1 of this stack)&"Example2" into tProp
         set the tProp of this stack to the text of fld id x of cd 1 of this stack
      end repeat
      put "1024,1025,1026,1027,1037,1040,1042,1044,1045,1053" into tList
      repeat for each item tMenuBtn in tList
         put "c"&removeSpacing(the short name of btn id tMenuBtn of cd 1 of this stack)&"Example2" into tProp
         if the label of btn id tMenuBtn of cd 1 of this stack is not empty and the label of btn id tMenuBtn of cd 1 of this stack is not the short name of btn id tMenuBtn of cd 1 of this stack then
            set the tProp of this stack to the label of btn id tMenuBtn of cd 1 of this stack
         else 
            if tMenuBtn is not among the items of "1025,1026,1027" then set the tProp of this stack to "none" else set the tProp of this stack to "Integers only"
         end if
      end repeat
      if the cTranscInitNumExample2 of this stack is not empty then put the cTranscInitNumExample2 of this stack into tNAtt
      else
         if the cArchiveInitNumExample2 of this stack is not empty then
            put the cArchiveInitNumExample2 of this stack into tNAtt
            set the cTranscInitNumExample2 of this stack to tNAtt
            put tNatt into fld id 1022 of cd 1 of this stack
         else
            if the cAuthorInitNumExample2 of this stack is not empty then
               put the cAuthorInitNumExample2 of this stack into tNAtt
               set the cTranscInitNumExample2 of this stack to tNAtt
               put tNatt into fld id 1022 of cd 1 of this stack
            end if
         end if
      end if
      put the cLeafTypeExample2 of this stack into tLeafType
      if tLeafType is empty then 
         answer "Leaf type is missing. Please supply it." as sheet
         exit to top
      end if
      if tNAtt is empty then 
         answer "Initial  "&(segment 1 of tLeafType)&" number is missing at all levels. Please supply it." as sheet
         exit to top
      end if
      if the cTranscLastNumExample2 of this stack is empty then      
         if the cArchiveLastNumExample2 of this stack is not empty then
            set the cTranscLastNumExample2 of this stack to the cArchiveLastNumExample2 of this stack
            put the cArchiveLastNumExample2 of this stack into fld id 1023 of cd 1 of this stack
         else
            if the cAuthorLastNumExample2 of this stack is not empty then
               set the cTranscLastNumExample2 of this stack to the cAuthorLasttNumExample2 of this stack
               put the cAuthorLasttNumExample2 of this stack into fld id 1023 of cd 1 of this stack
            end if
         end if
      end if
      put manufacturePbTagExample2() into fld id 1034 of cd 1 of this stack
   end if
end mouseUp

function manufacturePbTag
   local tStart,tXMLID,tNAttrib,tColorAtt,tTypeAtt,tStyleAtt,tMediumAtt,tPlaceAtt,tfacsAtt
   put "<pb " into tStart
   put prepareXMLID() into tXMLID
   put line 2 of tXMLID into tNAttrib
   put line 1 of tXMLID into tXMLID
   put "n="&quote&tNAttrib&quote && "xml:id="&quote&tXMLID&quote after tStart
   if the cColorMenu of this stack <> empty  and the cColorMenu of this stack <> "none" then put " color="&quote&the cColorMenu of this stack&quote into tColorAtt
   if the cBreaktype of this stack <> empty  and the cBreaktype of this stack <> "none" then put " type="&quote&the cBreaktype of this stack&quote into tTypeAtt
   if the cStyleMenu of this stack <> empty  and the cStyleMenu of this stack <> "none" then put " style="&quote&the cStyleMenu of this stack&quote into tStyleAtt
   if the cMediumMenu of this stack <> empty  and the cMediumMenu of this stack <> "none" then put " medium="&quote&the cMediumMenu of this stack&quote into tMediumAtt
   if the cPlaceMenu of this stack <> empty  and the cPlaceMenu of this stack <> "none" then put " place="&quote&the cPlaceMenu of this stack&quote into tPlaceAtt
   if the cfacs of this stack <> empty  and the cfacs of this stack <> "none" then put " facs="&quote&the cfacs of this stack&quote into tfacsAtt
   put prepareOtherPageNumbers()&tPlaceAtt&tStyleAtt&tTypeAtt&tMediumAtt&tColorAtt&tfacsAtt&"/>" after tStart
   return tStart
end manufacturePbTag

function manufacturePbTagExample2
   local tStart,tXMLID,tNAttrib,tColorAtt,tTypeAtt,tStyleAtt,tMediumAtt,tPlaceAtt,tfacsAtt
   put "<pb " into tStart
   put prepareXMLIDExample2() into tXMLID
   put line 2 of tXMLID into tNAttrib
   put line 1 of tXMLID into tXMLID
   put "n="&quote&tNAttrib&quote && "xml:id="&quote&tXMLID&quote after tStart
   if the cColorMenuExample2 of this stack <> empty  and the cColorMenuExample2 of this stack <> "none" then put " color="&quote&the cColorMenuExample2 of this stack&quote into tColorAtt
   if the cBreaktypeExample2 of this stack <> empty  and the cBreaktypeExample2 of this stack <> "none" then put " type="&quote&the cBreaktypeExample2 of this stack&quote into tTypeAtt
   if the cStyleMenuExample2 of this stack <> empty  and the cStyleMenuExample2 of this stack <> "none" then put " style="&quote&the cStyleMenuExample2 of this stack&quote into tStyleAtt
   if the cMediumMenuExample2 of this stack <> empty  and the cMediumMenuExample2 of this stack <> "none" then put " medium="&quote&the cMediumMenuExample2 of this stack&quote into tMediumAtt
   if the cPlaceMenuExample2 of this stack <> empty  and the cPlaceMenuExample2 of this stack <> "none" then put " place="&quote&the cPlaceMenuExample2 of this stack&quote into tPlaceAtt
   if the cfacsExample2 of this stack <> empty  and the cfacsExample2 of this stack <> "none" then put " facs="&quote&the cfacsExample2 of this stack&quote into tfacsAtt
   put prepareOtherPageNumbersExample2()&tPlaceAtt&tStyleAtt&tTypeAtt&tMediumAtt&tColorAtt&tfacsAtt&"/>" after tStart
   return tStart
end manufacturePbTagExample2

function prepareXMLID
   local tDocAbbr,tAuxAbbr,tLeafType,tLeafAbbr,tInitNum,tTranscInitNum
   put the cDocAbbr of this stack into tDocAbbr
   if tDocAbbr is empty then 
      answer "Document abbreviation is missing. Please supply it." as sheet
      exit to top
   end if
   put the cAuxAbbr of this stack into tAuxAbbr
   put the cLeafType of this stack into tLeafType
   if tLeafType is empty then 
      answer "Leaf type is missing. Please supply it." as sheet
      exit to top
   end if
   put the cTranscInitNum of this stack into tTranscInitNum
   if tTranscInitNum is empty then 
      answer "Initial transcription "&segment 1 of tLeafType&" number is missing. Please supply it." as sheet
      exit to top
   end if
   if the hilite of btn id 1055 of cd 1 of this stack then put the cAuthorInitNum of this stack into tInitNum
   else if the hilite of btn id 1056 of cd 1 of this stack then put the cArchiveInitNum of this stack into tInitNum
   else if the hilite of btn id 1057 of cd 1 of this stack then put the cTranscInitNum of this stack into tInitNum
   if tInitNum is empty then
      answer "Click one the three “? xml:id” radio buttons to indicate which number should be used in the xml:id attribute." as sheet
      exit to top
   end if
   put char offset("(",tLeafType)+1 to offset(")",tLeafType)-1 of tLeafType into tLeafAbbr
   return tDocAbbr&tAuxAbbr&"-"&tLeafAbbr&tInitNum & cr & tLeafAbbr&tTranscInitNum
end prepareXMLID

function prepareXMLIDExample2
   local tDocAbbr,tAuxAbbr,tLeafType,tLeafAbbr,tTranscInitNum,tInitNum
   put the cDocAbbrExample2 of this stack into tDocAbbr
   if tDocAbbr is empty then 
      answer "Document abbreviation is missing. Please supply it." as sheet
      exit to top
   end if
   put the cAuxAbbrExample2 of this stack into tAuxAbbr
   put the cLeafTypeExample2 of this stack into tLeafType
   if tLeafType is empty then 
      answer "Leaf type is missing. Please supply it." as sheet
      exit to top
   end if
   put the cTranscInitNumExample2 of this stack into tTranscInitNum
   if tTranscInitNum is empty then 
      answer "Initial transcription "&segment 1 of tLeafType&" number is missing. Please supply it." as sheet
      exit to top
   end if
   if the hilited of btn id 1055 of cd 1 of this stack is true then put the cAuthorInitNumExample2 of this stack into tInitNum
   else if the hilited of btn id 1056 of cd 1 of this stack is true then put the cArchiveInitNumExample2 of this stack into tInitNum
   else if the hilited of btn id 1057 of cd 1 of this stack is true then put the cTranscInitNumExample2 of this stack into tInitNum
   if tInitNum is empty then
      answer "Click one the three “? xml:id” radio buttons to indicate which number should be used in the xml:id attribute." as sheet
      exit to top
   end if
   put char offset("(",tLeafType)+1 to offset(")",tLeafType)-1 of tLeafType into tLeafAbbr
   return tDocAbbr&tAuxAbbr&"-"&tLeafAbbr&tInitNum & cr & tLeafAbbr&tTranscInitNum
end prepareXMLIDExample2

function prepareOtherPageNumbers
   local tEdAttrib,tRendAttrib
   if the cArchiveInitNum of this stack <> empty then
      put " ed="&quote&the cArchiveInitNum of this stack&quote into tEdAttrib
   end if
   if the cAuthorInitNum of this stack <> empty then
      put " rend="&quote&the cAuthorInitNum of this stack&quote into tRendAttrib
   end if
   return tEdAttrib&tRendAttrib
end prepareOtherPageNumbers

function prepareOtherPageNumbersExample2
   local tEdAttrib,tRendAttrib
   if the cArchiveInitNumExample2 of this stack <> empty then
      put " ed="&quote&the cArchiveInitNumExample2 of this stack&quote into tEdAttrib
   end if
   if the cAuthorInitNumExample2 of this stack <> empty then
      put " rend="&quote&the cAuthorInitNumExample2 of this stack&quote into tRendAttrib
   end if
   return tEdAttrib&tRendAttrib
end prepareOtherPageNumbersExample2

function convertIDnumberToAttribute
   local tl1,tL2,tRV
   put "1055,1056,1057" into tL1
   put "rend,ed,n" into tL2
   put empty into tRV
   repeat with x = 1055 to 1057
      if the hilited of btn id x of cd 1 of this stack then
         if x = 1056 then put noteRectoVerso() into tRV else put empty into tRV
          return "|"&item (x-1054) of tL2 & tRV
         exit repeat
      end if
   end repeat
   return empty
end convertIDnumberToAttribute

function addAllPageBreakInfo
   local tl1,tL2,tRV,tPBDisplayable,tDocAbbr,tAuxAbbr,tLeafType,tLeafAbbr,tTranscInitNum,tInitNum,tColorAtt,tTypeAtt,tStyleAtt,tMediumAtt,tPlaceAtt,tfacsAtt
   local tTranscPageMenu,tTranscLastNum,tAuthorPageMenu,tAuthorInitNum,tAuthorLastNum,tArchivePageMenu,tArchiveInitNum,tArchiveLastNum,
   put "1055,1056,1057" into tL1
   put "rend,ed,n" into tL2
   put empty into tRV
   repeat with x = 1055 to 1057
      if the hilited of btn id x of cd 1 of this stack then
         put "|"&item (x-1054) of tL2 into tPBDisplayable
         exit repeat
      end if
   end repeat
   if the hilited of btn id 1060 of cd 1 of this stack is true then put "|"&"r/v" into tRV else put "|" into tRV
   put "|"&fld id 1016 of cd 1 of stack "Customize Pagebreak Self-Closing Tag" into tDocAbbr
   put "|"&fld id 1017 of cd 1 of stack "Customize Pagebreak Self-Closing Tag" of this stack into tAuxAbbr
   put "|"&the label of btn id 1045 of cd 1 of stack "Customize Pagebreak Self-Closing Tag" into tLeafType
   put "|"&the label of btn id 1040 of cd 1 of stack "Customize Pagebreak Self-Closing Tag" into tTypeAtt
   put "|"&the label of btn id 1024 of cd 1 of stack "Customize Pagebreak Self-Closing Tag" into tPlaceAtt
   put "|"&the label of btn id 1053 of cd 1 of stack "Customize Pagebreak Self-Closing Tag" into tfacsAtt
   put "|"&the label of btn id 1037 of cd 1 of stack "Customize Pagebreak Self-Closing Tag" into tStyleAtt
   put "|"&the label of btn id 1042 of cd 1 of stack "Customize Pagebreak Self-Closing Tag" into tMediumAtt
   put "|"&the label of btn id 1044 of cd 1 of stack "Customize Pagebreak Self-Closing Tag" into tColorAtt
   put "|"& the label of btn id 1026 of cd 1 of stack "Customize Pagebreak Self-Closing Tag" into tAuthorPageMenu
   put "|"& fld id 1018 of cd 1 of stack "Customize Pagebreak Self-Closing Tag" into tAuthorInitNum
   put "|"& fld id 1019 of cd 1 of stack "Customize Pagebreak Self-Closing Tag" into tAuthorLastNum
   put "|"& the label of btn id 1025 of cd 1 of stack "Customize Pagebreak Self-Closing Tag" into tArchivePageMenu
   put "|"& fld id 1020 of cd 1 of stack "Customize Pagebreak Self-Closing Tag" into tArchiveInitNum
   put "|"& fld id 1021 of cd 1 of stack "Customize Pagebreak Self-Closing Tag" into tArchiveLastNum
   put "|"& the label of btn id 1027 of cd 1 of stack "Customize Pagebreak Self-Closing Tag" into tTranscPageMenu
   put "|"& fld id 1022 of cd 1 of stack "Customize Pagebreak Self-Closing Tag" into tTranscInitNum
   put "|"& fld id 1023 of cd 1 of stack "Customize Pagebreak Self-Closing Tag" into tTranscLastNum
   --put "|"&char offset("(",tLeafType)+1 to offset(")",tLeafType)-1 of tLeafType into tLeafAbbr
   if the hilite of btn id 1055 of cd 1 of this stack then put the cAuthorInitNum of this stack into tInitNum
   else if the hilite of btn id 1056 of cd 1 of this stack then put the cArchiveInitNum of this stack into tInitNum
   else if the hilite of btn id 1057 of cd 1 of this stack then put the cTranscInitNum of this stack into tInitNum
   put "|"&tInitNum into tInitNum
   return tPBDisplayable&tRV&tDocAbbr&tAuxAbbr&tLeafType&tTypeAtt&tPlaceAtt&tfacsAtt&tStyleAtt&tMediumAtt&tColorAtt&tAuthorPageMenu&\
   tAuthorInitNum&tAuthorLastNum&tArchivePageMenu&tArchiveInitNum&tArchiveLastNum&tTranscPageMenu&tTranscInitNum&tTranscLastNum&tInitNum
end addAllPageBreakInfo

function noteRectoVerso
   if the hilited of btn id 1060 of cd 1 of this stack is true then
      if the hilited of btn "Example" is true then set the cRectoVersoExample2 of this stack to true else set the cRectoVerso of this stack to true
      return "|"&"r/v"
   else
      if the hilited of btn "Example" is true then set the cRectoVersoExample2 of this stack to false else set the cRectoVerso of this stack to false
      return empty
   end if
end noteRectoVerso


##TOOLTIP:
##Click to form the <pb/> tag on the basis of provided information


#####################
## Script of field "Field”, ID 1034 of CARD 1 of SUBSTACK Customize Pagebreak Self-Closing Tag of STACK STEP Transcription Module

on tabKey
   select the text of fld id 1016 of cd 1 of this stack
end tabKey


#####################
## Script of button "Example”, ID 1035 of CARD 1 of SUBSTACK Customize Pagebreak Self-Closing Tag of STACK STEP Transcription Module

on mouseDoubleUp
   mouseUp
end mouseDoubleUp

on mouseUp
   set the hilite of me to not the hilite of me
   if the hilited of me is true then 
      showExample
   else 
      hideExample
   end if
end mouseUp

on showExample
   lock screen
   local tProp,tList
   repeat with x = 1055 to 1057
      set the cHilited of btn id x of cd 1 of this stack to the hilited of btn id x of cd 1 of this stack
   end repeat
   set the cRectoVerso of this stack to the hilited of btn id 1060 of cd 1 of this stack
   repeat with x = 1016 to 1023
      put "c"&removeSpacing(the short name of fld id x of cd 1 of this stack) into tProp
      set the tProp of this stack to the text of fld id x of cd 1 of this stack
   end repeat
   put "1024,1025,1026,1027,1037,1040,1042,1044,1045,1053" into tList
   repeat for each item tMenuBtn in tList
      put "c"&removeSpacing(the short name of btn id tMenuBtn of cd 1 of this stack) into tProp
      if the label of btn id tMenuBtn of cd 1 of this stack is not empty and the label of btn id tMenuBtn of cd 1 of this stack is not the short name of btn id tMenuBtn of cd 1 of this stack then
         set the tProp of this stack to the label of btn id tMenuBtn of cd 1 of this stack
      else 
         if tMenuBtn is not among the items of "1025,1026,1027" then set the tProp of this stack to "none" else set the tProp of this stack to "Integers only"
      end if
   end repeat
   set the cFormatFieldTemp of this stack to fld id 1034 of cd 1 of this stack
   repeat with x = 1016 to 1023
      put "c"&removeSpacing(the short name of fld id x of cd 1 of this stack)&"Example" into tProp
      put the tProp of this stack into fld id x of cd 1 of this stack
   end repeat
   set the hilited of btn id 1060 of cd 1 of this stack to false
   put "1024,1025,1026,1027,1037,1040,1042,1044,1045,1053" into tList
   repeat for each item tMenuBtn in tList
      put "c"&removeSpacing(the short name of btn id tMenuBtn of cd 1 of this stack)&"Example" into tProp
      if the label of btn id tMenuBtn of cd 1 of this stack is not empty and the label of btn id tMenuBtn of cd 1 of this stack is not the short name of btn id tMenuBtn of cd 1 of this stack then
         set the label of btn id tMenuBtn of cd 1 of this stack to the tProp of this stack
      end if
   end repeat
   set the hilited of btn id 1055 of cd 1 of this stack to false
   set the hilited of btn id 1056 of cd 1 of this stack to false
   set the hilited of btn id 1057 of cd 1 of this stack to true
   put "<pb n="&quote&"sh1"&quote&" xml:id="&quote&"LL1a-sh1"&quote&" ed="&quote&"A"&quote&" rend="&quote&"1"&quote&\
   " place="&quote&"top-right-corner"&quote&" style="&quote&"slanted-line-delimited"&quote&" type="&quote&"orphan-sheet"&quote&\
   " medium="&quote&"crayon"&quote&" color="&quote&"blue"&quote&"/>" into fld id 1034 of cd 1 of this stack
   show fld id 1051 of cd 1 of this stack
end showExample

on hideExample
   lock screen
   local tProp,tList
   repeat with x = 1016 to 1023
      put "c"&removeSpacing(the short name of fld id x of cd 1 of this stack) into tProp
      put the tProp of this stack into fld id x of cd 1 of this stack
   end repeat
   repeat with x = 1055 to 1057
      set the hilited of btn id x of cd 1 of this stack to the cHilited of btn id x of cd 1 of this stack
   end repeat
   set the hilited of btn id 1060 of cd 1 of this stack to the cRectoVerso of this stack
   put "1024,1025,1026,1027,1037,1040,1042,1044,1045,1053" into tList
   repeat for each item tMenuBtn in tList
      put "c"&removeSpacing(the short name of btn id tMenuBtn of cd 1 of this stack) into tProp
      if tProp is empty then
         if tMenuBtn is not among the items of "1025,1026,1027" then 
            set the tProp of this stack to "none" 
         else set the tProp of this stack to "Integers only"
      else
         set the label of btn id tMenuBtn of cd 1 of this stack to the tProp of this stack
      end if
   end repeat
   put the cFormatFieldTemp of this stack into fld id 1034 of cd 1 of this stack
   hide fld id 1051 of cd 1 of this stack
end hideExample


##TOOLTIP:
##Click to fill all controls with a comprehensive example (open to experiment).
##Click again to restore controls to their previous state.


#####################
## Script of button "Style Menu”, ID 1037 of CARD 1 of SUBSTACK Customize Pagebreak Self-Closing Tag of STACK STEP Transcription Module

on menuPick pItemName
   local tList
   switch pItemName
      case "Edit list..."
         set the cHolder of stack "List Editor" to the id of btn "Style Menu" of cd 1 of this stack
         put the text of me into tList
         filter tList without empty
         put line 3 to -3 of tList into fld id 1003 of cd 1 of stack "List Editor"
         set the title of stack "List Editor" to "List Editor - Pb style menu"
         palette stack "List Editor"
         set the label of me to the cLabel of me
         break
      default
         set the label of me to pItemName
   end switch
end menuPick

on mouseEnter
   set the cLabel of me to the label of me
end mouseEnter

##TOOLTIP:
##Optional


#####################
## Script of button "Break type”, ID 1040 of CARD 1 of SUBSTACK Customize Pagebreak Self-Closing Tag of STACK STEP Transcription Module

on menuPick pItemName
   local tList
   switch pItemName
      case "Edit list..."
         set the cHolder of stack "List Editor" to the id of btn "Break type" of cd 1 of this stack
         put the text of me into tList
         filter tList without empty
         put line 3 to -3 of tList into fld id 1003 of cd 1 of stack "List Editor"
         set the title of stack "List Editor" to "List Editor - Pb type"
         palette stack "List Editor"
         set the label of me to the cLabel of me
         break
      default
         set the label of me to pItemName
   end switch
end menuPick

on mouseEnter
   set the cLabel of me to the label of me
end mouseEnter

##TOOLTIP:
##Optional


#####################
## Script of button "Medium Menu”, ID 1042 of CARD 1 of SUBSTACK Customize Pagebreak Self-Closing Tag of STACK STEP Transcription Module

on menuPick pItemName
   local tList
   switch pItemName
      case "Edit list..."
         set the cHolder of stack "List Editor" to the id of btn "Medium Menu" of cd 1 of this stack
         put the text of me into tList
         filter tList without empty
         set the title of stack "List Editor" to "List Editor - Pb medium menu"
         put line 3 to -3 of tList into fld id 1003 of cd 1 of stack "List Editor"
         palette stack "List Editor"
         set the label of me to the cLabel of me
         break
      default
         set the label of me to pItemName
   end switch
end menuPick

on mouseEnter
   set the cLabel of me to the label of me
end mouseEnter

##TOOLTIP:
##Optional


#####################
## Script of button "Color Menu" of card id 1002 of stack "Customize Pagebreak Self-Closing Tag" of stack "/Users/adetienn/Documents/STEP Externals/STEP-LI 7.1.4/STEP Transcription Module.livecode" ID 1044 of CARD 1 of SUBSTACK Customize Pagebreak Self-Closing Tag of STACK STEP Transcription Module

on menuPick pItemName
   local tList
   switch pItemName
      case "Edit list..."
         set the cHolder of stack "List Editor" to the id of btn "Color Menu" of cd 1 of this stack
         put the text of me into tList
         filter tList without empty
         put line 3 to -3 of tList into fld id 1003 of cd 1 of stack "List Editor"
         set the title of stack "List Editor" to "List Editor - Pb color menu"
         palette stack "List Editor"
         set the label of me to the cLabel of me
         break
      default
         set the label of me to pItemName
   end switch
end menuPick

on mouseEnter
   set the cLabel of me to the label of me
end mouseEnter

##TOOLTIP:
##Optional (NB: "color" is not a recognized TEI attribute)


#####################
## Script of button "Leaf type”, ID 1045 of CARD 1 of SUBSTACK Customize Pagebreak Self-Closing Tag of STACK STEP Transcription Module

on menuPick pItemName
   local tList
   switch pItemName
      case "Edit list..."
         set the cHolder of stack "List Editor" to the id of btn "Leaf type" of cd 1 of this stack
         put the text of me into tList
         filter tList without empty
         put line 1 to -3 of tList into fld id 1003 of cd 1 of stack "List Editor"
         set the title of stack "List Editor" to "List Editor - Leaf type"
         palette stack "List Editor"
         set the label of me to the cLabel of me
         break
      default
         set the label of me to pItemName
   end switch
end menuPick

on mouseEnter
   set the cLabel of me to the label of me
end mouseEnter


#####################
## Script of button "Close”, ID 1049 of CARD 1 of SUBSTACK Customize Pagebreak Self-Closing Tag of STACK STEP Transcription Module

on mouseUp
   close this stack
end mouseUp

##TOOLTIP:
##Close dialog.


#####################
## Script of button "Clear All”, ID 1050 of CARD 1 of SUBSTACK Customize Pagebreak Self-Closing Tag of STACK STEP Transcription Module

on mouseUp
   local tList,tProp
   lock screen
   repeat with x = 1016 to 1023
      put empty into fld id x of cd 1 of this stack
   end repeat
   put "1024,1037,1040,1042,1044,1053" into tList
   repeat for each item tMenuBtn in tList
      set the label of btn id tMenuBtn of cd 1 of this stack to "none"
   end repeat
   repeat with x = 1055 to 1057
      set the hilited of btn id x of cd 1 of this stack to false
      set the cHilited of btn id x of cd 1 of this stack to false
   end repeat
   set the hilited of btn id 1060 of cd 1 of this stack to false
   set the cRectoVerso of this stack to false
   repeat with x = 1025 to 1027
      set the label of btn id x of cd 1 of this stack to "Integers only"
   end repeat
   put empty into fld id 1034 of cd 1 of this stack
   if the hilite of btn "Example" <> true then
      repeat with x = 1016 to 1023
         put "c"&removeSpacing(the short name of fld id x of cd 1 of this stack) into tProp
         set the tProp of this stack to empty
      end repeat
      put "1024,1025,1026,1027,1037,1040,1042,1044,1045,1053" into tList
      repeat for each item tMenuBtn in tList
         put "c"&removeSpacing(the short name of btn id tMenuBtn of cd 1 of this stack) into tProp
         set the tProp of this stack to empty
      end repeat
   end if
end mouseUp

##TOOLTIP:
##Empty all fields and clear menus of current information.


#####################
## Script of button "facs”, ID 1053 of CARD 1 of SUBSTACK Customize Pagebreak Self-Closing Tag of STACK STEP Transcription Module

on menuPick pItemName
   local tList
   switch pItemName
      case "Edit list..."
         set the cHolder of stack "List Editor" to the id of btn "facs" of cd 1 of this stack
         put the text of me into tList
         filter tList without empty
         put line 3 to -3 of tList into fld id 1003 of cd 1 of stack "List Editor"
         set the title of stack "List Editor" to "List Editor - Facsimile menu"
         palette stack "List Editor"
         set the label of me to the cLabel of me
         break
      default
         set the label of me to pItemName
   end switch
end menuPick

on mouseEnter
   set the cLabel of me to the label of me
end mouseEnter


#####################
## Script of button "Pagebreak format history…”, ID 1054 of CARD 1 of SUBSTACK Customize Pagebreak Self-Closing Tag of STACK STEP Transcription Module

on mouseUp
   local tList,tList2
   put the cPagebreakHistory of stack "STEP Transcription Module" into tList
   set the itemDel to "|"
   repeat for each line tLine in tList
      if item 3 of tLine <> empty and item 2 of tLine <> empty then put item 1 to 3 of tLine&cr after tList2
      else if item 3 of tLine is empty and item 2 of tLine <> empty then  put item 1 to 2 of tLine&cr after tList2
      else if item 2 of tLine is empty then  put item 1 of tLine&cr after tList2
   end repeat
   delete char -1 of tList2
   put tList2 into fld id 1003 of cd 1 of stack "Pagebreak Format History"
   modeless stack "Pagebreak Format History"
end mouseUp

##TOOLTIP:
##Show editable field with previously recorded <pb/> formats.


#####################
## Script of button "? xml:id”, ID 1055 of CARD 1 of SUBSTACK Customize Pagebreak Self-Closing Tag of STACK STEP Transcription Module

on mouseUp
    set the cPageNumberDisplay of stack "Customize Pagebreak Self-Closing Tag" to "Authorial"
end mouseUp

##TOOLTIP:
##Choose this one for use in xml:id attribute.


#####################
## Script of button "? xml:id”, ID 1056 of CARD 1 of SUBSTACK Customize Pagebreak Self-Closing Tag of STACK STEP Transcription Module

on mouseUp
    set the cPageNumberDisplay of stack "Customize Pagebreak Self-Closing Tag" to "Archival"
end mouseUp

##TOOLTIP:
##Choose this one for use in xml:id attribute.


#####################
## Script of button "? xml:id”, ID 1057 of CARD 1 of SUBSTACK Customize Pagebreak Self-Closing Tag of STACK STEP Transcription Module

on mouseUp
    set the cPageNumberDisplay of stack "Customize Pagebreak Self-Closing Tag" to "Transcriptional"
end mouseUp

##TOOLTIP:
##Choose this one for use in xml:id attribute.


#####################
## Script of button "Clear current format”, ID 1059 of CARD 1 of SUBSTACK Customize Pagebreak Self-Closing Tag of STACK STEP Transcription Module

on mouseUp
   set the cPageBreakFormat of fld id 1004 of stack "STEP Transcription Module" to empty
   answer "The pagebreak format is no longer set." as sheet
end mouseUp

on mouseEnter
   get the cPageBreakFormat of fld id 1004 of stack "STEP Transcription Module"
   if it <> empty then
      set the tooltip of me to "Click to reset the currently active <pb/> format to empty."&cr&"   Current format:"&cr&it
   else
      set the tooltip of me to "Click to reset the currently active <pb/> format to empty."&cr&"   (None is currently active)."
   end if   
end mouseEnter

##TOOLTIP:
##Click to reset the currently active <pb/> format to empty.
##   (None is currently active).


#####################
## Script of button "rectoVerso”, ID 1060 of CARD 1 of SUBSTACK Customize Pagebreak Self-Closing Tag of STACK STEP Transcription Module


##TOOLTIP:
##Check button if page numbers have been
##fmarked recto or verso throughout.


#####################
#####################
## EE. SUBSTACK List Editor of STACK STEP Transcription Module

#####################
## Script of SUBSTACK List Editor of STACK STEP Transcription Module


on openStack
   checkLauncherWindow (the short name of this stack)
end openStack

on closeStack
   close this stack
   set the title of stack "List Editor" to "List Editor"
end closeStack


#####################
## Script of CARD 1 of SUBSTACK List Editor of STACK STEP Transcription Module

on openCard
   lock screen
   repeat with i = 1 to the number of controls of cd 1 of this stack
      set the lockloc of control i of cd 1 of this stack to true
      set the rect of control i of cd 1 of this stack to the crect of control i of cd 1 of this stack
   end repeat
   set the width of this stack to the minWidth of this stack
   set the height of this stack to the minHeight of this stack
end openCard



#####################
## Script of button "Delete selected lines”, ID 1006 of CARD 1 of SUBSTACK List Editor of STACK STEP Transcription Module

on mouseUp
   lock screen
   local tList
   put the hilitedLines of fld id 1003 of cd 1 of this stack into tList
   if tList <> empty and tList <> 0 then
      repeat with i = the number of items of tList down to 1
         delete line (item i of tList) of fld id 1003 of cd 1 of this stack
      end repeat
      if the cHolder of this stack <> 1024 then sort lines of fld id 1003 of cd 1 of this stack ascending international
   end if
end mouseUp

##TOOLTIP:
##1. Lock the field first. 2. Select any line(s). 
##3. Click this button to delete them.


#####################
## Script of button "Edit”, ID 1008 of CARD 1 of SUBSTACK List Editor of STACK STEP Transcription Module

on mouseUp
   set the lockText of fld id 1003 of cd 1 of this stack to false
   set the nonContiguousHilites of fld id 1003 of cd 1 of this stack to false
   set the multipleHilites of fld id 1003 of cd 1 of this stack to false
   set the toggleHilites of fld id 1003 of cd 1 of this stack to false
   set the listBehavior of fld id 1003 of cd 1 of this stack to false
   set the label of btn "LockUnlock" of cd 1 of this stack to "Lock"
   answer "Type new lines directly into the unlockedfield. When done, click “Save.”"
end mouseUp

##TOOLTIP:
##Click to unlock the field and edit its content.


#####################
## Script of button "Save”, ID 1009 of CARD 1 of SUBSTACK List Editor of STACK STEP Transcription Module

on mouseUp
   local tList,ut
   set the lockText of fld id 1003 of cd 1 of this stack to true
   set the nonContiguousHilites of fld id 1003 of cd 1 of this stack to true
   set the multipleHilites of fld id 1003 of cd 1 of this stack to true
   set the toggleHilites of fld id 1003 of cd 1 of this stack to true
   set the listBehavior of fld id 1003 of cd 1 of this stack to true
   put the text of fld id 1003 of cd 1 of this stack into tList
   filter tList without empty
   if "page (p)" is in tList or "sheet (sh)" is in tList then
      repeat with i = 1 to the number of lines of tList
         if " (" is not in line i of tList then
            answer "Line "&i&" in the list does not include an abbreviation for “"&segment 1 of line i of tList&"” between parentheses. Please remedy this."
            put 1 into ut
            exit repeat
         end if
      end repeat
      if ut is 1 then exit mouseUp
   end if
   if the cHolder of this stack is "URL|1013" then
      put tList into fld id 1003 of cd 1 of this stack
      set the cPastListOfURLs of stack "STEP Web Browser" to tList
      exit mouseUp
   end if
   if the cHolder of this stack is "FrenchCustomDictionary" then
      put tList into fld id 1003 of cd 1 of this stack
      set the uMotsAEviterReOrthographe of card 1 of stack "STEP Transcription Module" to tList
      storeCustomFrenchDictionary
      exit mouseUp
   end if
   if the cHolder of this stack is "EnglishCustomDictionary" then
      put tList into fld id 1003 of cd 1 of this stack
      set the uWordsToSkipReSpelling of card 1 of stack "STEP Transcription Module" to tList
      storeCustomEnglishDictionary
      exit mouseUp
   end if
   if the cHolder of this stack <> 1024 then sort tList ascending international
   put tList into fld id 1003 of cd 1 of this stack
   if the cHolder of this stack <> 1045 then put tList into line 3 to -3 of btn id (the cHolder of stack "List Editor") of cd 1 of stack "Customize Pagebreak Self-Closing Tag"
   else put tList into line 1 to -3 of btn id 1045 of cd 1 of stack "Customize Pagebreak Self-Closing Tag"
   answer "The menu list has been updated."
end mouseUp

##TOOLTIP:
##Click to save the new list and update the corresponding menu.


#####################
## Script of button "LockUnlock”, ID 1010 of CARD 1 of SUBSTACK List Editor of STACK STEP Transcription Module

on mouseUp
   get the lockText of fld id 1003 of cd 1 of this stack
   if it is true then 
      set the lockText of fld id 1003 of cd 1 of this stack to false
      set the nonContiguousHilites of fld id 1003 of cd 1 of this stack to false
      set the multipleHilites of fld id 1003 of cd 1 of this stack to false
      set the toggleHilites of fld id 1003 of cd 1 of this stack to false
      set the listBehavior of fld id 1003 of cd 1 of this stack to false
      set the label of me to "Lock"
      set the toolTip of me to "Click to lock the field (useful to delete lines)."
   else 
      set the lockText of fld id 1003 of cd 1 of this stack to true 
      set the nonContiguousHilites of fld id 1003 of cd 1 of this stack to true
      set the multipleHilites of fld id 1003 of cd 1 of this stack to true
      set the toggleHilites of fld id 1003 of cd 1 of this stack to true
      set the listBehavior of fld id 1003 of cd 1 of this stack to true
      set the label of me to "Unlock"
      set the toolTip of me to "Click to unlock the field (necessary to add new lines)."
   end if
end mouseUp

##TOOLTIP:
##Click to lock the field (useful to delete lines).

#####################
#####################
## FF. SUBSTACK Pagebreak Format History of STACK STEP Transcription Module

#####################
## Script of SUBSTACK Pagebreak Format History of STACK STEP Transcription Module


on openStack
   checkLauncherWindow (the short name of this stack)
end openStack

on closeStack
   set the hilitedLines of fld id 1003 of cd 1 of this stack to 0
   close stack "Pagebreak Format History"
end closeStack

on resumeStack
   local tList,tList2
   put the cPagebreakHistory of stack "STEP Transcription Module" into tList
   set the itemDel to "|"
   repeat for each line tLine in tList
      if item 3 of tLine <> empty and item 2 of tLine <> empty then put item 1 to 3 of tLine&cr after tList2
      else if item 3 of tLine is empty and item 2 of tLine <> empty then  put item 1 to 2 of tLine&cr after tList2
      else if item 2 of tLine is empty then  put item 1 of tLine&cr after tList2
   end repeat
   delete char -1 of tList2
   put tList2 into fld id 1003 of cd 1 of stack "Pagebreak Format History"
end resumeStack


#####################
## Script of CARD 1 of SUBSTACK Pagebreak Format History of STACK STEP Transcription Module

on openCard
   lock screen
   set the width of this stack to the minWidth of this stack
   set the height of this stack to the minHeight of this stack
end openCard



#####################
## Script of button "Delete selected lines”, ID 1006 of CARD 1 of SUBSTACK Pagebreak Format History of STACK STEP Transcription Module

on mouseUp
   lock screen
   local tList,tList2
   put the hilitedLines of fld id 1003 of cd 1 of this stack into tList
   put the cPagebreakHistory of stack "STEP Transcription Module" into tList2
   if tList <> empty and tList <> 0 then
      repeat with i = the number of items of tList down to 1
         delete line (item i of tList) of fld id 1003 of cd 1 of this stack
         delete line (item i of tList) of tList2
      end repeat
      sort lines of fld id 1003 of cd 1 of this stack ascending international
      sort lines of tList2 ascending international
      set the cPagebreakHistory of stack "STEP Transcription Module" to tList2
      set the hilitedLines of fld id 1003 of cd 1 of this stack to 0
   end if
end mouseUp

##TOOLTIP:
##1. Lock the field first. 2. Select any line(s). 
##3. Click this button to delete them.


#####################
## Script of button "Edit”, ID 1008 of CARD 1 of SUBSTACK Pagebreak Format History of STACK STEP Transcription Module

on mouseUp
   set the lockText of fld id 1003 of cd 1 of this stack to false
   set the nonContiguousHilites of fld id 1003 of cd 1 of this stack to false
   set the multipleHilites of fld id 1003 of cd 1 of this stack to false
   set the toggleHilites of fld id 1003 of cd 1 of this stack to false
   set the listBehavior of fld id 1003 of cd 1 of this stack to false
   set the label of btn "LockUnlock" of cd 1 of this stack to "Lock"
   answer "Type new lines directly into the unlocked field. When done, click “Save.”"
end mouseUp

##TOOLTIP:
##Legacy button. Do not edit the content of entries.
##Use the Customize Pagebreak dialog instead.


#####################
## Script of button "Save”, ID 1009 of CARD 1 of SUBSTACK Pagebreak Format History of STACK STEP Transcription Module

on mouseUp
   lock screen
   local tList,tList2,ut
   set the lockText of fld id 1003 of cd 1 of this stack to true
   set the nonContiguousHilites of fld id 1003 of cd 1 of this stack to true
   set the multipleHilites of fld id 1003 of cd 1 of this stack to true
   set the toggleHilites of fld id 1003 of cd 1 of this stack to true
   set the listBehavior of fld id 1003 of cd 1 of this stack to true
   put the text of fld id 1003 of cd 1 of this stack into tList
   filter tList without empty
   sort tList ascending international
   put tList into fld id 1003 of cd 1 of this stack
   put the cPagebreakHistory of stack "STEP Transcription Module" into tList2
   set the itemDel to "|"
   repeat with x = the number of lines of tList2 down to 1
      put lineOffset(item 1 to 3 of line x of tList2,tList) into ut
      if ut <> 0 then next repeat
      if ut = 0 then put lineOffset(item 1 to 2 of line x of tList2,tList) into ut
      if ut = 0 then put lineOffset(item 1 of line x of tList2,tList) into ut
      if ut = 0 then delete line x of tList2
   end repeat
   sort tList2 ascending international
   set the cPagebreakHistory of stack "STEP Transcription Module" to tList2
   if tList is empty then set the cPageBreakFormat of fld id 1004 of stack "STEP Transcription Module" to empty
   answer "The pagebreak format history list has been updated." as sheet
end mouseUp

##TOOLTIP:
##Click to save the new list and update the corresponding record.


#####################
## Script of button "LockUnlock”, ID 1010 of CARD 1 of SUBSTACK Pagebreak Format History of STACK STEP Transcription Module

on mouseUp
   get the lockText of fld id 1003 of cd 1 of this stack
   if it is true then 
      set the lockText of fld id 1003 of cd 1 of this stack to false
      set the nonContiguousHilites of fld id 1003 of cd 1 of this stack to false
      set the multipleHilites of fld id 1003 of cd 1 of this stack to false
      set the toggleHilites of fld id 1003 of cd 1 of this stack to false
      set the listBehavior of fld id 1003 of cd 1 of this stack to false
      set the label of me to "Lock"
      set the toolTip of me to "Click to lock the field (useful to delete lines)."
   else 
      set the lockText of fld id 1003 of cd 1 of this stack to true 
      set the nonContiguousHilites of fld id 1003 of cd 1 of this stack to true
      set the multipleHilites of fld id 1003 of cd 1 of this stack to true
      set the toggleHilites of fld id 1003 of cd 1 of this stack to true
      set the listBehavior of fld id 1003 of cd 1 of this stack to true
      set the label of me to "Unlock"
      set the toolTip of me to "Click to unlock the field (necessary to add new lines)."
   end if
end mouseUp

##TOOLTIP:
##Click to unlock the field (necessary to add new lines).


#####################
## Script of button "Select <pb/> format”, ID 1013 of CARD 1 of SUBSTACK Pagebreak Format History of STACK STEP Transcription Module

on mouseUp
   local tList,tList2
   lock screen
   put the hilitedLines of fld id 1003 of cd 1 of this stack into tList
   set the hilitedLines of fld id 1003 of cd 1 of this stack to item 1 of tList
   if tList <> empty and tList <> 0 then
      --analyzeFormat (line (item 1 of tList) of fld id 1003 of cd 1 of this stack)
      put the cPagebreakHistory of stack "STEP Transcription Module" into tList2
      analyzeFullFormat (line (item 1 of tList) of tList2)
      set the cPageBreakFormat of fld id 1004 of cd 1 of stack "STEP Transcription Module" to line (item 1 of tList) of fld id 1003 of cd 1 of this stack
      answer "PB format has now been updated to “"&line (item 1 of tList) of fld id 1003 of cd 1 of this stack&".”" as sheet
      set the hilitedLines of fld id 1003 of cd 1 of this stack to 0
   end if
end mouseUp

on analyzeFullFormat pFormat
   if pFormat is empty then exit to top
   local ot,ut,yt,txmlidval,tAttribs,tAtt,tVal,tLeafTypes,tInitNum,tLt,tDocAbbr,txmlid2InitNum,kt,tLeafType,tplace,tmedium,tcolor,ttype,tstyle,tfacs,tTypeLeaf,tRectoverso
   set the itemDel to "|"
   put item 1 of pFormat into fld id 1034 of cd 1 of stack "Customize Pagebreak Self-Closing Tag"
   if item 3 of pFormat is "r/v" then set the hilited of btn id 1060 of cd 1 of stack "Customize Pagebreak Self-Closing Tag" to true
   else set the hilited of btn id 1060 of cd 1 of stack "Customize Pagebreak Self-Closing Tag" to false
   put item 4 of pFormat into fld id 1016 of cd 1 of stack "Customize Pagebreak Self-Closing Tag"
   put item 5 of pFormat into fld id 1017 of cd 1 of stack "Customize Pagebreak Self-Closing Tag"
   set the label of btn id 1045 of cd 1 of stack "Customize Pagebreak Self-Closing Tag" to item 6 of pFormat
   set the label of btn id 1040 of cd 1 of stack "Customize Pagebreak Self-Closing Tag" to item 7 of pFormat
   set the label of btn id 1024 of cd 1 of stack "Customize Pagebreak Self-Closing Tag" to item 8 of pFormat
   set the label of btn id 1053 of cd 1 of stack "Customize Pagebreak Self-Closing Tag" to item 9 of pFormat
   set the label of btn id 1037 of cd 1 of stack "Customize Pagebreak Self-Closing Tag" to item 10 of pFormat
   set the label of btn id 1042 of cd 1 of stack "Customize Pagebreak Self-Closing Tag" to item 11 of pFormat
   set the label of btn id 1044 of cd 1 of stack "Customize Pagebreak Self-Closing Tag" to item 12 of pFormat
   set the label of btn id 1026 of cd 1 of stack "Customize Pagebreak Self-Closing Tag" to item 13 of pFormat
   set the label of btn id 1025 of cd 1 of stack "Customize Pagebreak Self-Closing Tag" to item 16 of pFormat
   set the label of btn id 1027 of cd 1 of stack "Customize Pagebreak Self-Closing Tag" to item 19 of pFormat
   put item 14 of pFormat into fld id 1018 of cd 1 of stack "Customize Pagebreak Self-Closing Tag"
   put item 15 of pFormat into fld id 1019 of cd 1 of stack "Customize Pagebreak Self-Closing Tag"
   put item 17 of pFormat into fld id 1020 of cd 1 of stack "Customize Pagebreak Self-Closing Tag"
   put item 18 of pFormat into fld id 1021 of cd 1 of stack "Customize Pagebreak Self-Closing Tag"
   put item 20 of pFormat into fld id 1022 of cd 1 of stack "Customize Pagebreak Self-Closing Tag"
   put item 21 of pFormat into fld id 1023 of cd 1 of stack "Customize Pagebreak Self-Closing Tag"
   converttAttribToIDnumber (item 2 of pFormat &"|"& item 22 of pFormat)
end analyzeFullFormat


on converttAttribToIDnumber tL
   set the itemDel to "|"
   local tL1,tL2,tL3
   put "1055|1056|1057" into tL1
   put "1018|1020|1022" into tL3
   put "rend|ed|n" into tL2
   repeat with x = 1 to 3
      if item x of tL2 is item 1 of tL then 
         set the hilited of btn id (item x of tL1) of cd 1 of stack "Customize Pagebreak Self-Closing Tag" to true
         put item 2 of tL into fld id (item x of tL3)  of cd 1 of stack "Customize Pagebreak Self-Closing Tag"
      else 
         set the hilited of btn id (item x of tL1) of cd 1 of stack "Customize Pagebreak Self-Closing Tag" to false
      end if
   end repeat
   return empty
end converttAttribToIDnumber


##TOOLTIP:
##1. Lock the field first. 2. Select one line. 
##3. Click here to make it the current <pb/> format.

#####################
#####################
## GG. SUBSTACK Special Font Characters of STACK STEP Transcription Module

#####################
## Script of SUBSTACK Special Font Characters of STACK STEP Transcription Module


on preOpenStack
   local xy
   put the topLeft of  stack "STEP Transcription Module" into xy
   set the topLeft of this stack to (item 1 of xy)+432,(item 2 of xy)+46
   put the SpecialFontCharacterList of stack "STEP Transcription Module" into fld id 1020 of cd 1 of this stack
   set the label of btn id 1030 of cd 1 of this stack to line 1 of btn id 1030 of cd 1 of this stack
   set the label of btn id 1011 of cd 1 of this stack to empty
   set the menuHistory of btn id 1011 of cd 1 of this stack to empty
end preOpenStack

on openStack
   checkLauncherWindow (the short name of this stack)
   pass openStack
end openStack

on closeStack
   local tFlds
   lock screen
   put empty into fld id 1005 of cd 1 of stack "Special Font Characters"
   put empty into fld id 1016 of cd 1 of stack "Special Font Characters"
   put empty into fld id 1019 of cd 1 of stack "Special Font Characters"
   put empty into fld id 1020 of cd 1 of stack "Special Font Characters"
   put empty into fld id 1028 of cd 1 of stack "Special Font Characters"
   set the label of btn id 1011 of cd 1 of stack "Special Font Characters" to empty
   set the label of btn id 1030 of cd 1 of stack "Special Font Characters" to "Glyph sets"
   hide fld id 1028 of cd 1 of stack "Special Font Characters"
end closeStack



#####################
## Script of CARD 1 of SUBSTACK Special Font Characters of STACK STEP Transcription Module

on openCard
   local theListOfAllFonts,tListOfFilterKeys
   put the SpecialFontCharacterList of stack "STEP Transcription Module" into fld id 1020 of cd 1 of this stack
   put the fontnames into theListOfAllFonts
   sort theListOfAllFonts
   put "(*,-bold*,*italic*,*Ital*,*SemiExt*,condensed*,*black*,*light*,*Std*,*SmBd*,*Med*,*Cond*,*Narrow*,*-ExtB,*Ex tB,*SemiCond,*SemiExt" into tListOfFilterKeys
   repeat for each item tItem in tListOfFilterKeys
      filter theListOfAllFonts without tItem
   end repeat
   set the uIndexFonts of btn "Font Menu" of cd 1 to theListOfAllFonts
   set the text of btn "Font Menu" of cd 1 to theListOfAllFonts
end openCard



#####################
## Script of field "Character”, ID 1005 of CARD 1 of SUBSTACK Special Font Characters of STACK STEP Transcription Module

on keyDown theKey
   lock screen
   put theKey into me
   select after me
end keyDown


#####################
## Script of button "Text Height”, ID 1008 of CARD 1 of SUBSTACK Special Font Characters of STACK STEP Transcription Module

on mouseWithin
   local tMiddle
   get item 2 of the mouseLoc
   put ((the top of me)+(the bottom of me))/2 into tMiddle
   if it > tMiddle then 
      set the toolTip of me to "Decrease glyph size and height."
      set the icon of me to 4101 
   else 
      set the toolTip of me to "Increase glyph size and height."
      set the icon of me to 4102
   end if
end mouseWithin

on mouseLeave
   set the icon of me to 4100
end mouseLeave

on mouseUp
   if the icon of me is 4101 then decreaseValue else increaseValue
end mouseUp

on mouseStillDown
   if the icon of me is 4101 then decreaseValue else increaseValue
end mouseStillDown

on decreaseValue
   set the icon of me to 4101
   get the textSize of fld id 1005 of cd 1
   if it > 9 then set the textSize of fld id 1005 of cd 1 to it-1
   set the icon of me to 4100
end decreaseValue

on increaseValue
   set the icon of me to 4102
   get the textSize of fld id 1005 of cd 1
   if it < 60 then set the textSize of fld id 1005 of cd 1 to it+1
   set the icon of me to 4100
end increaseValue

##TOOLTIP:
##Increase glyph size and height.


#####################
## Script of button "Font Menu”, ID 1011 of CARD 1 of SUBSTACK Special Font Characters of STACK STEP Transcription Module

on mouseEnter
   lock screen
   local tListOfFilterKeys
   put the label of me into fld "TempFontName" of cd 1 of this stack
   show fld "TempFontName" of cd 1 of this stack
   select after char -1 of fld "TempFontName" of cd 1 of this stack
   set the tooltip of fld "TempFontName" of cd 1 of this stack to "Choose a font that best displays the selected glyph"&cr&"(e.g., the Assyrian font to display cuneiform glyphs)."
   if fld "TempFontName" of cd 1 of this stack <> empty then set the menuHistory of me to lineOffset(the text of fld "TempFontName" of cd 1 of this stack,the text of me)
end mouseEnter

on menuPick pItemName
   lock screen
   if fld "TempFontName" of cd 1 of this stack <> empty then set the menuHistory of me to lineOffset(the text of fld "TempFontName" of cd 1 of this stack,the text of me)
   hide fld "TempFontName" of cd 1 of this stack
   switch pItemName
      case pItemName
         set the label of me to pItemName
         put pItemName into fld "TempFontName" of cd 1 of this stack
         set the textFont of fld id 1005 of cd 1 to pItemName
         set the uSelectedFont of btn "Font Menu" of cd 1 to pItemName
         --if pItemName is not among the items of "PMath09" then set the textFont of me to pItemName else set the textfont of me to "Lucida Sans Regular"
         break
   end switch
end menuPick


##TOOLTIP:
##Type in or choose a font that best displays the selected glyph.


#####################
## Script of field "Field”, ID 1016 of CARD 1 of SUBSTACK Special Font Characters of STACK STEP Transcription Module


on returnInField
   exit returnInField
end returnInField

on enterInField
   exit enterInField
end enterInField


#####################
## Script of field "Field”, ID 1019 of CARD 1 of SUBSTACK Special Font Characters of STACK STEP Transcription Module

on keyDown theKey
   if theKey is among the chars of "&  ;,.'“”‘”«»" then beep
   else pass keyDown
end keyDown

on returnInField
   exit returnInField
end returnInField

on enterInField
   exit enterInField
end enterInField


#####################
## Script of field "List of special characters”, ID 1020 of CARD 1 of SUBSTACK Special Font Characters of STACK STEP Transcription Module

on mouseUp
   lock screen
   if the optionKey is down then
      set the hilitedLines of me to 0
      exit mouseUp
   end if
   local tL
   put the value of the clickLine into tL
   if tL <> empty then
      set the itemDel to "|"
      put item 1 of tL into fld id 1016 of cd 1 of this stack
      put item 2 of tL into fld id 1019 of cd 1 of this stack
      put item 4 of tL into fld id 1005 of cd 1 of this stack
      set the label of btn id 1011 of cd 1 of this stack to item 3 of tL
      select the text of fld id 1005 of cd 1of this stack
      send "menuPick" && (the label of btn id 1011 of cd 1 of this stack) to btn id 1011 of cd 1 of this stack
      select empty
   end if
end mouseUp

##TOOLTIP:
##Click a line to display its content above. Reclick it to deselect it.
##Option/Alt-click to deselect all lines.


#####################
## Script of button "Record new special character”, ID 1024 of CARD 1 of SUBSTACK Special Font Characters of STACK STEP Transcription Module

on mouseUp
   lock screen
   local tCharName,tAbbrev,tGlyph,tFontName,tList,tList2,tKeyList
   put fld id 1016 of cd 1 of this stack into tCharName
   if tCharName is empty then exit mouseUp
   put fld id 1019 of cd 1 of this stack into tAbbrev
   if tAbbrev is empty then exit mouseUp
   put fld id 1005 of cd 1 of this stack into tGlyph
   if tGlyph is empty then exit mouseUp
   put the label of btn id 1011 of cd 1 of this stack into tFontName
   if tFontName is empty then exit mouseUp
   put tCharName&"|"&tAbbrev&"|"&tFontName&"|"&tGlyph into line (the number of lines of fld id 1020 of cd 1 of this stack) + 1 of fld id 1020 of cd 1 of this stack
   put fld id 1020 of cd 1 of this stack into tList
   put stripDuplicates2(tList) into tList
   put tList into fld id 1020 of cd 1 of this stack
   put the customKeys of fld id 1020 of cd 1 of this stack into tKeyList
   filter tKeyList without "cRect*"
   filter tKeyList without "cellFormatting"
   repeat for each line tKey in tKeyList
      put line 2 to -1 of the tKey of fld id 1020 of cd 1 of this stack & cr after tList2
   end repeat
   put tList after tList2
   filter tList2 without empty
   if char -1 of tList2 is cr then delete char -1 of tList2
   put stripDuplicates2(tList2) into tList2
   if tList2 <> empty then set the SpecialFontCharacterList of stack "STEP Transcription Module" to tList2
end mouseUp


#####################
## Script of button "Delete selected lines”, ID 1025 of CARD 1 of SUBSTACK Special Font Characters of STACK STEP Transcription Module

on mouseUp
   lock screen
   local ut,tList
   put the hilitedLines of fld id 1020 of cd 1 of this stack into ut
   if ut is empty or ut is 0 then exit mouseUp
   repeat with i = the number of items of ut down to 1
      delete line (item i of ut) of fld id 1020 of cd 1 of this stack
   end repeat
   put fld id 1020 of cd 1 of this stack into tList
   put stripDuplicates2(tList) into tList
   put tList into fld id 1020 of cd 1 of this stack
   set the SpecialFontCharacterList of stack "STEP Transcription Module" to tList
end mouseUp


#####################
## Script of button "Close”, ID 1026 of CARD 1 of SUBSTACK Special Font Characters of STACK STEP Transcription Module

on mouseUp
   close stack "Special Font Characters"
end mouseUp


#####################
## Script of button "Insert selected character”, ID 1027 of CARD 1 of SUBSTACK Special Font Characters of STACK STEP Transcription Module

on mouseUp
   lock screen
   local ut,tChosenChar,tIDNum,tChunk,tSta,tTL
   set the itemDel to comma
   put the hilitedLine of fld id 1020 of cd 1 of this stack into ut
   if ut is empty or ut is 0 then exit mouseUp
   put the cFldToReturnTo of cd 1 of stack "STEP Transcription Module" into tIDNum
   if (tIDNum is not empty) and ((the cFldToReturnTo of cd 1 of stack "STEP Transcription Module" is empty) or (tIDNum is not among the items of "1004,1041"))  then 
      answer "First make sure the pointer is in the Transcription field or the TEI Base Description field." as sheet
      exit mouseUp
   end if
   put line (item 1 of ut) of fld id 1020 of cd 1 of this stack into tChosenChar
   put the cSelectedChunk of fld id tIDNum of cd 1 of stack "STEP Transcription Module" into tChunk
   if tChunk is empty then exit mouseUp
   put word 2 of tChunk into tSta
   set the itemDel to "|"
   put item 2 of tChosenChar before char tSta of fld id tIDNum of cd 1 of stack "STEP Transcription Module"
   select after char tSta+length(item 2 of tChosenChar)-1 of fld id tIDNum of cd 1 of stack "STEP Transcription Module"
   set the cSelectedChunk of fld id tIDNum of cd 1 of stack "STEP Transcription Module" to the selectedChunk
end mouseUp

--tCharName&"|"&tAbbrev&"|"&tFontName&"|"&tGlyph

##TOOLTIP:
##Insert character at the insertion point in
##the Transcription field (click there first).


#####################
## Script of field "TempFontName”, ID 1028 of CARD 1 of SUBSTACK Special Font Characters of STACK STEP Transcription Module

on keyUp theKey
   lock screen
   local ut,tL,tLab,ot,theListOfAllFonts,tW
   put the text of btn id 1011 of cd 1 of this stack into theListOfAllFonts
   put segment 4 of the selectedChunk of me into tW
   delete char tW+1 to -1 of me
   put length(the text of me) into tL
   put char 1 to -1 of the text of me into tLab
   put offset(cr&tLab,theListOfAllFonts) into ut
   if ut <> 0 then
      put the number of lines of char 1 to ut+1 of theListOfAllFonts into ot
      put char tL+1 to -1 of line ot of theListOfAllFonts after tLab
      set the text of me to tLab
      set the foregroundColor of char tL+1 to -1 of me to "#ABB1BA"
      select after char tL of me
      pass keyUp
   end if
end keyUp
 
on arrowKey theKey
   if theKey is "right" then 
      set the foregroundColor of char 1 to -1 of me to "black"
      select after char -1 of me
      set the label of btn id 1011 of cd 1 of this stack to the text of me
      send "menuPick "& the text of me to btn id 1011 of cd 1 of this stack
      hide me
      if fld "TempFontName" of cd 1 of this stack <> empty then set the menuHistory of btn id 1011 of cd 1 of this stack to lineOffset(the text of fld "TempFontName" of cd 1 of this stack,the text of btn id 1011 of cd 1 of this stack)
   end if
   pass arrowKey
end arrowKey

on tabKey
   set the foregroundColor of char 1 to -1 of me to "black"
   select after char -1 of me
   set the label of btn id 1011 of cd 1 of this stack to the text of me
   send "menuPick "& the text of me to btn id 1011 of cd 1 of this stack
   hide me
   if fld "TempFontName" of cd 1 of this stack <> empty then set the menuHistory of btn id 1011 of cd 1 of this stack to lineOffset(the text of fld "TempFontName" of cd 1 of this stack,the text of btn id 1011 of cd 1 of this stack)
end tabKey

on deleteKey
   pass deleteKey
end deleteKey

on returnInField
   exit returnInField
end returnInField

on enterInField
   exit enterInField
end enterInField

##TOOLTIP:
##Choose a font that best displays the selected glyph
##(e.g., the Assyrian font to display cuneiform glyphs).


#####################
## Script of button "New glyph set…”, ID 1029 of CARD 1 of SUBSTACK Special Font Characters of STACK STEP Transcription Module

on mouseUp
   lock screen
   local tList,tList2,tKeyList,tKey
   if fld id 1020 of cd 1 of this stack is empty then exit mouseUp
   ask "Type a telling but unique name for the new glyph set."
   if it <> empty and the result <> "Cancel" then
      put fld id 1020 of cd 1 of this stack into tList
      put it&cr before tList
      put "c" before it
      replace space with empty in it
      set the it of fld id 1020 of cd 1 of this stack to tList
   end if
   put the customKeys of fld id 1020 of cd 1 of this stack into tKeyList
   filter tKeyList without "cRect*"
   filter tKeyList without "cellFormatting"
   repeat for each line tKey in tKeyList
      put line 1 of the tKey of fld id 1020 of cd 1 of this stack & cr after tList2
   end repeat
   delete char -1 of tList2
   if tList2 <> empty then 
      sort tList2 international ascending
      set the text of btn id 1030 of cd 1 to "Content of All Glyph Sets" & cr & "-" & cr & tList2
   end if
end mouseUp

##Archive the set shown below in a distinct retrievable set.


#####################
## Script of button "Glyph sets”, ID 1030 of CARD 1 of SUBSTACK Special Font Characters of STACK STEP Transcription Module

on menuPick pItemName
   local tList
   if pItemName <> "Glyph sets" and pItemName <> empty  and pItemName <> "Content of All Glyph Sets" then
      put "c" before pItemName
      replace space with empty in pItemName
      put the pItemName of fld id 1020 of cd 1 of this stack into tList
      put line 2 to -1 of tList into fld id 1020 of cd 1 of this stack
   else if pItemName is "Content of All Glyph Sets" then
      put the SpecialFontCharacterList of stack "STEP Transcription Module" into fld id 1020 of cd 1 of this stack
   end if
end menuPick

##TOOLTIP:
##Select a glyph set and display it below.


#####################
## Script of button "Clear”, ID 1034 of CARD 1 of SUBSTACK Special Font Characters of STACK STEP Transcription Module

on mouseUp
   put empty into fld id 1005 of cd 1 of stack "Special Font Characters"
   put empty into fld id 1016 of cd 1 of stack "Special Font Characters"
   put empty into fld id 1019 of cd 1 of stack "Special Font Characters"
   put empty into fld id 1020 of cd 1 of stack "Special Font Characters"
   set the label of btn id 1030 of cd 1 of stack "Special Font Characters" to "Glyph sets"
   hide fld id 1028 of cd 1 of stack "Special Font Characters"
end mouseUp

##TOOLTIP:
##Empty all fields (without losing information).


#####################
## Script of button "Set maintenance”, ID 1036 of CARD 1 of SUBSTACK Special Font Characters of STACK STEP Transcription Module

on menuPick pItemName
   local tList,tSet,tSet2,tKeyList,tList2,tSet2Bis
   switch pItemName
      case "Update set"
         lock screen
         if fld id 1020 of cd 1 of this stack is empty then exit menuPick
         put the label of btn id 1030 of cd 1 of this stack into tSet
         put tSet into tSet2
         if tSet <> "Glyph sets" and tSet <> empty then
            put "c" before tSet
            replace space with empty in tSet
            put the tSet of fld id 1020 of cd 1 of this stack into tList
            put fld id 1020 of cd 1 of this stack into line 2 to -1 of tList
            if line 1 of tList is not tSet2 then put tSet2 into line 1 of tList
            set the tSet of fld id 1020 of cd 1 of this stack to tList
            put the customKeys of fld id 1020 of cd 1 of this stack into tKeyList
            filter tKeyList without "cRect*"
            filter tKeyList without "cellFormatting"
            repeat for each line tKey in tKeyList
               put line 2 to -1 of the tKey of fld id 1020 of cd 1 of this stack & cr after tList2
            end repeat
            put line 2 to -1 of tList after tList2
            filter tList2 without empty
            if char -1 of tList2 is cr then delete char -1 of tList2
            put stripDuplicates2(tList2) into tList2
            set the SpecialFontCharacterList of stack "STEP Transcription Module" to tList2
            answer "Glyph set “"&tSet2&"” has been updated." as sheet
         end if
         exit menuPick
         break
      case "Rename set..."
         set the label of me to pItemName
         put the label of btn id 1030 of cd 1 of this stack into tSet
         if tSet <> "Glyph sets" and tSet <> empty then
            ask "Type a new name to replace “"&tSet&"”" as sheet
            if the result is "Cancel" or it <> empty then exit menuPick
            put it into tSet2
            put tSet2 into tSet2Bis
            put "c" before tSet2
            replace space with empty in tSet2
            put "c" before tSet
            replace space with empty in tSet
            put the customKeys of fld id 1020 of cd 1 of this stack into tKeyList
            put the tSet of fld id 1020 of cd 1 of this stack into tList
            set the wholematches to true
            delete line lineOffset(tSet,tKeyList) of tKeyList
            put cr & tSet2 after line -1 of tKeyList
            filter tKeyList without empty
            if char -1 of tKeyList is cr then delete char -1 of tKeyList
            put stripDuplicates2(tKeyList) into tKeyList
            set  the customKeys of fld id 1020 of cd 1 of this stack to tKeyList
            put tSet2Bis into line 1 of tList
            set the tSet2 of fld id 1020 of cd 1 of this stack to tList
            answer "Glyph set has been renamed as  “"&tSet2Bis&".”" as sheet
         end if
         break
      case "Delete set..."
         lock screen
         set the label of me to pItemName
         if fld id 1020 of cd 1 of this stack is empty then exit menuPick
         put the label of btn id 1030 of cd 1 of this stack into tSet
         put tSet into tSet2
         if tSet <> "Glyph sets" and tSet <> empty then
            answer "Confirm you want to delete glyph set “"&tSet&".”" with "Cancel" or "Delete" as sheet
            if it <> "Delete" then exit menuPick
            put "c" before tSet
            replace space with empty in tSet
            --put empty into fld id 1020 of cd 1 of this stack
            put the customKeys of fld id 1020 of cd 1 of this stack into tKeyList
            set the wholematches to true
            delete line lineOffset(tSet,tKeyList) of tKeyList
            set  the customKeys of fld id 1020 of cd 1 of this stack to tKeyList
            filter tKeyList without "cRect*"
            filter tKeyList without "cellFormatting"
            repeat for each line tKey in tKeyList
               put line 1 of the tKey of fld id 1020 of cd 1 of this stack & cr after tList2
            end repeat
            delete char -1 of tList2
            if tList2 <> empty then sort tList2 international ascending
            set the text of btn id 1030 of cd 1 to tList2
            put empty into tList2
            repeat for each line tKey in tKeyList
               put line 2 to -1 of the tKey of fld id 1020 of cd 1 of this stack & cr after tList2
            end repeat
            filter tList2 without empty
            if char -1 of tList2 is cr then delete char -1 of tList2
            put stripDuplicates2(tList2) into tList2
            set the SpecialFontCharacterList of stack "STEP Transcription Module" to tList2
            answer "Glyph set “"&tSet2&"” has been deleted." as sheet
         end if
         break
   end switch
   put the customKeys of fld id 1020 of cd 1 of this stack into tKeyList
   filter tKeyList without "cRect*"
   filter tKeyList without "cellFormatting"
   put empty into tList2
   repeat for each line tKey in tKeyList
      put line 1 of the tKey of fld id 1020 of cd 1 of this stack & cr after tList2
   end repeat
   delete char -1 of tList2
   if tList2 <> empty then 
      sort tList2 international ascending
      set the text of btn id 1030 of cd 1 to "Content of All Glyph Sets" & cr & "-" & cr & tList2
   end if
end menuPick

##TOOLTIP:
##Update, rename, or delete the current glyph set.

#####################
#####################
## HH. SUBSTACK TEI Tag Custom Colors of STACK STEP Transcription Module

#####################
## Script of SUBSTACK TEI Tag Custom Colors of STACK STEP Transcription Module


on preOpenStack
   set the loc of this stack to the screenLoc
end preOpenStack

on openStack
   checkLauncherWindow (the short name of this stack)
   pass openStack
end openStack

on closeStack
   createFullListOfTagColorAssignments
end closeStack

on createFullListOfTagColorAssignments
   put the customKeys of this stack into tAllCustoms
   put empty into tTagColorSet
   put empty into tGeneralColor
   put empty into tAttributeColor
   put empty into tValueColor
   put empty into tCategory
   repeat with x = 1 to the number of lines of tAllCustoms
      if line x of tAllCustoms is "cSpecificTagColors" then
         put the cSpecificTagColors of this stack into tSpecs
         set the itemDel to "|"
         repeat with y = 1 to the number of lines of tSpecs
            if item 3 of line y of tSpecs is not empty then put item 3 of line y of tSpecs into tCol else put item 2 of line y of tSpecs into tCol
            put item 1 of line y of tSpecs&comma before tCol
            put tCol&cr after tTagColorSet
         end repeat
      else if line x of tAllCustoms is "cGeneralColor" then
         put the cGeneralColor of this stack into tSpecs
         set the itemDel to "|"
         if item 2 of line 2 of tSpecs is not empty  then 
            put item 2 of line 2 of tSpecs into tGeneralColor 
         else put item 2 of line 1 of tSpecs into tGeneralColor
      else if line x of tAllCustoms is "cAttributeColor" then
         put the cAttributeColor of this stack into tSpecs
         set the itemDel to "|"
         if item 2 of line 2 of tSpecs is not empty  then
            put item 2 of line 2 of tSpecs into tAttributeColor
         else put item 2 of line 1 of tSpecs into tAttributeColor
      else if line x of tAllCustoms is "cValueColor" then
         put the cValueColor of this stack into tSpecs
         set the itemDel to "|"
         if item 2 of line 2 of tSpecs is not empty  then
            put item 2 of line 2 of tSpecs into tValueColor 
         else put item 2 of line 1 of tSpecs into tValueColor
      else
         put line x of tAllCustoms into tCust
         do "put the "&tCust&" of this stack into tCategory"
         set the itemDel to "|"
         if item 2 of line 2 of tCategory is not empty  then
            put item 2 of line 2 of tCategory into tCol 
         else put item 2 of line 1 of tCategory into tCol
         put line 3 to -1 of tCategory into tTags
         repeat for each line tTag in tTags
            if cr&tTag&comma is not in tTagColorSet then put tTag&comma&tCol&cr after tTagColorSet
         end repeat
      end if
   end repeat
   set the cGeneralColor of cd 1 of stack "STEP Transcription Module" to tGeneralColor
   set the cAttributeColor of cd 1 of stack "STEP Transcription Module" to tAttributeColor
   set the cValueColor of cd 1 of stack "STEP Transcription Module" to tValueColor
   set the cTagColorSet of cd 1 of stack "STEP Transcription Module" to tTagColorSet
end createFullListOfTagColorAssignments



#####################
## Script of CARD 1 of SUBSTACK TEI Tag Custom Colors of STACK STEP Transcription Module


on openCard
   put "STEP Transcription Module" into tStackName
   put the customKeys of stack tStackName into tCustoms
   filter tCustoms with "*TEI"
   replace "TEI" with empty in tCustoms
   sort lines of tCustoms ascending international
   filter tCustoms without "*_*"
   put tCustoms into btn id 1009 of cd 1
   put btn id 1008 of cd 1 into btn id 1020 of cd 1
   put the cSpecificTagColors of this stack into tSpecific
   set the itemDel to "|"
   put empty into tSpec
   repeat with x = 1 to the number of lines of tSpecific
      put item 1 of line x of tSpecific into line x of tSpec
   end repeat
   put tSpec into btn id 1008 of cd 1
   set the label of btn id 1008 to space
   set the opaque of graphic id 1012 of cd 1 to false
   set the backgroundColor of graphic id 1012 of cd 1 to empty
   set the opaque of graphic id 1016 of cd 1 to false
   set the backgroundColor of graphic id 1016 of cd 1 to empty
   set the label of btn id 1022 to space
   set the opaque of graphic id 1025 of cd 1 to false
   set the backgroundColor of graphic id 1025 of cd 1 to empty
   set the opaque of graphic id 1028 of cd 1 to false
   set the backgroundColor of graphic id 1028 of cd 1 to empty
   set the opaque of graphic id 1048 of cd 1 to true
   set the backgroundColor of graphic id 1048 of cd 1 to getDefaultColor(cAttributeColor)
   set the opaque of graphic id 1076 of cd 1 to true
   set the backgroundColor of graphic id 1076 of cd 1 to getDefaultColor(cGeneralColor)
   put getCustomColor(cAttributeColor) into ut
   if ut is not empty then
      set the opaque of graphic id 1051 of cd 1 to true
      set the backgroundColor of graphic id 1051 of cd 1 to ut
   else 
      set the backgroundColor of graphic id 1051 of cd 1 to empty
      set the opaque of graphic id 1051 of cd 1 to false
   end if
   set the opaque of graphic id 1055 of cd 1 to true
   set the backgroundColor of graphic id 1055 of cd 1 to getDefaultColor(cValueColor)
   put getCustomColor(cValueColor) into ut
   if ut is not empty then
      set the opaque of graphic id 1058 of cd 1 to true
      set the backgroundColor of graphic id 1058 of cd 1 to ut
   else 
      set the backgroundColor of graphic id 1058 of cd 1 to empty
      set the opaque of graphic id 1058 of cd 1 to false
   end if
   put the customKeys of this stack into tCustoms
   filter tCustoms with "*Category"
   replace "Category" with empty in tCustoms
   replace "_" with space in tCustoms
   repeat with x = 1 to the number of lines of tCustoms
      delete char 1 of line x of tCustoms
   end repeat
   sort lines of tCustoms ascending international
   put tCustoms into btn id 1022 of cd 1
   put empty into fld id 1032 of cd 1
   colorFldTest
end openCard

function getDefaultColor pCust
   do "put the "&pCust&" of this stack into pCustom"
   get lineOffset("defaultColor|",pCustom)
   if it <> 0 then
      set the itemDel to "|"
      return item 2 of line it of pCustom
   else return empty
end getDefaultColor

function getCustomColor pCust
   do "put the "&pCust&" of this stack into pCustom"
   get lineOffset("customColor|",pCustom)
   if it <> 0 then
      set the itemDel to "|"
      return item 2 of line it of pCustom
   else return empty
end getCustomColor

on colorFldTest pID
   if the backgroundColor of graphic id 1051 of cd 1 is not empty then set the textColor of char 6 to 14 of fld "Test" of cd 1 to the backgroundColor of graphic id 1051 of cd 1
   else set the textColor of char 6 to 14 of fld "Test" of cd 1 to the backgroundColor of graphic id 1048 of cd 1
   if the backgroundColor of graphic id 1058 of cd 1 is not empty then set the textColor of char 17 to 21 of fld "Test" of cd 1 to the backgroundColor of graphic id 1058 of cd 1
   else set the textColor of char 17 to 21 of fld "Test" of cd 1 to the backgroundColor of graphic id 1055 of cd 1
   put "1,2,3,4,23,28,29,30,31,32,33" into tCharList
   repeat for each item tChar in tCharList
      if pID is an integer then set the textColor of char tChar of fld "Test" of cd 1 to the backgroundColor of graphic id pID of cd 1 else set the textColor of char tChar of fld "Test" of cd 1 to checkForCustomOrDefaultColor()
   end repeat
end colorFldTest

function checkForCustomOrDefaultColor
   put "1028,1016,1025,1012,1079,1076" into tCustomOrDefaultGraphicIDs
   repeat with x = 1 to 6
      if the backgroundColor of graphic id (item x of  tCustomOrDefaultGraphicIDs) of cd 1 is not empty then return the backgroundColor of graphic id (item x of  tCustomOrDefaultGraphicIDs) of cd 1
   end repeat
   return "black"
end checkForCustomOrDefaultColor


graphic "Rectangle" of card id 1002 of stack "TEI Tag Custom Colors" of stack "/Users/adetienn/Documents/STEP Externals/STEP-LI 7.1.4/STEP Transcription Module.livecode" ID 1068 of CARD 1 of SUBSTACK TEI Tag Custom Colors of STACK STEP Transcription Module



#####################
## Script of button "SpecificList”, ID 1008 of CARD 1 of SUBSTACK TEI Tag Custom Colors of STACK STEP Transcription Module

on menuPick pItemName
   if pItemName is "none" then
      set the label of me to space
      set the opaque of graphic id 1012 of cd 1 to false
      set the backgroundColor of graphic id 1012 of cd 1 to empty
      set the opaque of graphic id 1016 of cd 1 to false
      set the backgroundColor of graphic id 1016 of cd 1 to empty
      colorFldTest
      exit menuPick
   end if
   set the label of me to pItemName
   put the cSpecificTagColors of this stack into tSpecific
   get line lineOffset(pItemName&"|",tSpecific) of tSpecific
   set the itemDel to "|"
   set the backgroundColor of graphic id 1012 of cd 1 to (item 2 of it)
   if item 2 of it is not empty then set the opaque of graphic id 1012 of cd 1 to true else set the opaque of graphic id 1012 of cd 1 to false
   colorFldTest 1012
   if item 3 of it is not empty then
      set the opaque of graphic id 1016 of cd 1 to true
      set the backgroundColor of graphic id 1016 of cd 1 to (item 3 of it)
      colorFldTest 1016
   else 
      set the backgroundColor of graphic id 1016 of cd 1 to empty
      set the opaque of graphic id 1016 of cd 1 to false
   end if
end menuPick

on mouseEnter
  if line 1 of me is not "none" then put "none" & cr & "-" & cr  before me
end mouseEnter

##TOOLTIP:
##Select a tag to see its default and custom colors.
##NB: if a specific tag is also listed within a category,
##its specific color prevails over the category color.


#####################
## Script of button "Add tag to specific list”, ID 1009 of CARD 1 of SUBSTACK TEI Tag Custom Colors of STACK STEP Transcription Module

on menuPick pItemName
   put the cSpecificTagColors of this stack into tSpecific
   if cr & pItemName & "|" is not in tSpecific then 
      put cr & pItemName & "|" after tSpecific
      sort tSpecific ascending international 
      filter tSpecific without empty
      if char -1 of tSpecific is cr then delete char -1 of tSpecific
      set the cSpecificTagColors of this stack to tSpecific
      set the itemDel to "|"
      put empty into tSpec
      repeat with x = 1 to the number of lines of tSpecific
         put item 1 of line x of tSpecific into line x of tSpec
      end repeat
      put tSpec into btn id 1008 of cd 1
       put tSpec into btn id 1020 of cd 1
   end if
end menuPick

##TOOLTIP:
##Simply selecting a tag will add it to the menu above.


#####################
## Script of button "SpecificCustomColor”, ID 1015 of CARD 1 of SUBSTACK TEI Tag Custom Colors of STACK STEP Transcription Module

local lBgColor,lBgBlack,bli

on mouseUp
   put empty into tCol
   if the opaque of graphic id 1012 of cd 1 is false and lBgColor is not empty then put lBgColor into tCol
   else if the opaque of graphic id 1012 of cd 1 is true then put the backgroundColor of graphic id 1012 of cd 1 into tCol
   answer color with tCol--(the backgroundColor of graphic id tIDC of cd 1)
   if the result is "Cancel" then 
      set  the backgroundColor of graphic id 1016 of cd 1 to lBgColor
      colorFldTest 1016
      if lBgColor is the backgroundColor of this stack or lBgColor is empty then 
         set the opaque of graphic id 1016 of cd 1 to false
         colorFldTest 1012
         exit mouseUp
      end if
   end if
   set  the backgroundColor of graphic id 1016 of cd 1 to it
   if the backgroundColor of graphic id 1016 of cd 1 is black then put 0 into lBgBlack
   colorFldTest 1016
   if it is empty or it is the backgroundColor of this stack then 
      set the opaque of graphic id 1016 of cd 1 to false 
      colorFldTest 1012
   else set the opaque of graphic id 1016 of cd 1 to true
   put the label of btn id 1008 of cd 1 into pItemName
   put the cSpecificTagColors of this stack into tSpecific
   put lineOffset(pItemName&"|",tSpecific) into ut
   set the itemDel to "|"
   put it into item 3 of line ut of tSpecific
   set the cSpecificTagColors of this stack to tSpecific
end mouseUp

on mouseDown
   if the opaque of graphic id 1016 is false then
      set the opaque of graphic id 1016 of cd 1 to true
      put  the backgroundColor of graphic id 1016 of cd 1 into lBgColor
      set  the backgroundColor of graphic id 1016 of cd 1 to black
      put 1 into lBgBlack
   else 
      put  the backgroundColor of graphic id 1016 of cd 1 into lBgColor
      put "bli" into bli
   end if
end mouseDown

on mouseLeave
   if the backgroundColor of graphic id 1016 of cd 1 is black and lBgBlack is 1 and lBgColor is empty then
      set  the backgroundColor of graphic id 1016 of cd 1 to empty
      set the opaque of graphic id 1016 of cd 1 to false
      put 0 into lBgBlack
   end if
end mouseLeave


#####################
## Script of graphic "Custom Specific Tag Color”, ID 1016 of CARD 1 of SUBSTACK TEI Tag Custom Colors of STACK STEP Transcription Module

local lBgColor,lBgBlack

on mouseUp
   put empty into tCol
   if the opaque of graphic id 1012 of cd 1 is false and lBgColor is not empty then put lBgColor into tCol
   else if the opaque of graphic id 1012 of cd 1 is true then put the backgroundColor of graphic id 1012 of cd 1 into tCol
   answer color with tCol
   if the result is "Cancel" then 
      set  the backgroundColor of graphic id 1016 of cd 1 to lBgColor
      colorFldTest 1016
      if lBgColor is the backgroundColor of this stack or lBgColor is empty then 
         set the opaque of graphic id 1016 of cd 1 to false
         colorFldTest 1012
         exit mouseUp
      end if
   end if
   set  the backgroundColor of graphic id 1016 of cd 1 to it
   if the backgroundColor of graphic id 1016 of cd 1 is black then put 0 into lBgBlack
   colorFldTest 1016
   if it is empty or it is the backgroundColor of this stack then 
      set the opaque of graphic id 1016 of cd 1 to false 
      colorFldTest 1012
   else set the opaque of graphic id 1016 of cd 1 to true
   put the label of btn id 1008 of cd 1 into pItemName
   put the cSpecificTagColors of this stack into tSpecific
   put lineOffset(pItemName&"|",tSpecific) into ut
   set the itemDel to "|"
   put it into item 3 of line ut of tSpecific
   set the cSpecificTagColors of this stack to tSpecific
end mouseUp

on mouseDown
   set the opaque of graphic id 1016 of cd 1 to true
   put  the backgroundColor of graphic id 1016 of cd 1 into lBgColor
   set  the backgroundColor of graphic id 1016 of cd 1 to black
   put 1 into lBgBlack
end mouseDown

on mouseLeave
   if the backgroundColor of graphic id 1016 of cd 1 is black and lBgBlack is 1 then
      set  the backgroundColor of graphic id 1016 of cd 1 to empty
      set the opaque of graphic id 1016 of cd 1 to false
      put 0 into lBgBlack
   end if
end mouseLeave


#####################
## Script of button "Clear”, ID 1018 of CARD 1 of SUBSTACK TEI Tag Custom Colors of STACK STEP Transcription Module

on mouseUp
   put the label of btn id 1008 of cd 1 into pItemName
   if the backgroundColor of graphic id 1016 of cd 1 is not empty and ((pItemName is space) or (pItemName is empty)) then       
      set the opaque of graphic id 1016 of cd 1 to false
      set  the backgroundColor of graphic id 1016 of cd 1 to empty
      colorFldTest
      exit mouseUp
   end if
   if the backgroundColor of graphic id 1016 of cd 1 is empty then       
      set the opaque of graphic id 1016 of cd 1 to false
      colorFldTest 1012
      exit mouseUp
   end if
   if pItemName is space or pItemName is empty then exit mouseUp
   put the cSpecificTagColors of this stack into tSpecific
   put lineOffset(pItemName&"|",tSpecific) into ut
   set the itemDel to "|"
   put empty into item 3 of line ut of tSpecific
   set the cSpecificTagColors of this stack to tSpecific
   set the opaque of graphic id 1016 of cd 1 to false
   set  the backgroundColor of graphic id 1016 of cd 1 to empty
   colorFldTest 1012
end mouseUp

##TOOLTIP:
##Delete custom color and restore default


#####################
## Script of button "Delete tag from specific list”, ID 1020 of CARD 1 of SUBSTACK TEI Tag Custom Colors of STACK STEP Transcription Module

on menuPick pItemName
   set the wholeMatches to true
   delete line lineOffset(pItemName,btn id 1008 of cd 1) of btn id 1008 of cd 1
   if the label of btn id 1008 of cd 1 is pItemName then set the label of btn id 1008 of cd 1 to space
   delete line lineOffset(pItemName,btn id 1020 of cd 1) of btn id 1020 of cd 1
   if the label of btn id 1020 of cd 1 is pItemName then set the label of btn id 1020 of cd 1 to space
   put the cSpecificTagColors of this stack into tSpecific
   set the wholeMatches to false
   delete line lineOffset(pItemName&"|",tSpecific) of tSpecific
   set the cSpecificTagColors of this stack to tSpecific
   set the label of btn id 1009 to space
   colorFldTest
end menuPick

##TOOLTIP:
##Simply selecting a tag will delete it from the menu above.


#####################
## Script of button "Tag Categories”, ID 1022 of CARD 1 of SUBSTACK TEI Tag Custom Colors of STACK STEP Transcription Module

on menuPick pItemName
   if pItemName is "none" then
      set the label of me to space
      set the opaque of graphic id 1025 of cd 1 to false
      set the backgroundColor of graphic id 1025 of cd 1 to empty
      set the opaque of graphic id 1028 of cd 1 to false
      set the backgroundColor of graphic id 1028 of cd 1 to empty
      put empty into fld id 1032 of cd 1
      colorFldTest
      exit menuPick
   end if
   set the label of me to pItemName
   replace space with "_" in pItemName
   put "c"&pItemName&"Category" into tCust
   do "put line 3 to -1 of the "&tCust&" of this stack into fld id 1032 of cd 1"
   set the backgroundColor of graphic id 1025 of cd 1 to getDefaultColor(tCust)
   if the backgroundColor of graphic id 1025 of cd 1 is not empty then set the opaque of graphic id 1025 of cd 1 to true else set the opaque of graphic id 1025 of cd 1 to false
   colorFldTest 1025
   put getCustomColor(tCust) into ut
   if ut is not empty then
      set the opaque of graphic id 1028 of cd 1 to true
      set the backgroundColor of graphic id 1028 of cd 1 to ut
      colorFldTest 1028
   else 
      set the backgroundColor of graphic id 1028 of cd 1 to empty
      set the opaque of graphic id 1028 of cd 1 to false
   end if
end menuPick

on mouseEnter
   if line 1 of me is not "none" then put "none" & cr & "-" & cr  before me 
end mouseEnter

##TOOLTIP:
##Choose a category of tags and assign a same color to all its tags. 


#####################
## Script of button "SpecificCustomCategoryColor”, ID 1027 of CARD 1 of SUBSTACK TEI Tag Custom Colors of STACK STEP Transcription Module

local lBgColor,lBgBlack

on mouseUp
   put the label of btn id 1022 of cd 1 into pItemName
   if pItemName is space or pItemName is empty then exit mouseUp
   put empty into tCol
   if the backgroundColor of graphic id 1025 of cd 1 is empty and lBgColor is not empty then put lBgColor into tCol
   else if the backgroundColor of graphic id 1025 of cd 1 is not empty then put the backgroundColor of graphic id 1025 of cd 1 into tCol
   answer color with tCol --(the backGroundcolor of graphic id 1025 of cd 1)
   if the result is "Cancel" then 
      set  the backGroundcolor of graphic id 1028 of cd 1 to lBgColor
      colorFldTest 1028
      if lBgColor is the backgroundColor of this stack or lBgColor is empty then 
         set the opaque of graphic id 1028 of cd 1 to false
         colorFldTest 1025
         exit mouseUp
      end if
   end if
   set  the backGroundcolor of graphic id 1028 of cd 1 to it
   if the backgroundColor of graphic id 1028 of cd 1 is black then put 0 into lBgBlack
   colorFldTest 1028
   if it is empty or it is the backgroundColor of this stack then 
      set the opaque of graphic id 1028 of cd 1 to false 
      colorFldTest 1025
   else set the opaque of graphic id 1028 of cd 1 to true
   replace space with "_" in pItemName
   put empty into tCustContent
   put "c"&pItemName&"Category" into tCust
   do "put the "&tCust&" of this stack into tCustContent"
   put lineOffset("customColor|",tCustContent) into ut
   if ut <> 0 then
      set the itemDel to "|"
      put it into item 2 of line ut of tCustContent
      do "set the "&tCust&" of this stack to tCustContent"
   end if
end mouseUp

on mouseDown
   set the opaque of graphic id 1028 of cd 1 to true
   put  the backgroundColor of graphic id 1028 of cd 1 into lBgColor
   set  the backgroundColor of graphic id 1028 of cd 1 to black
   put 1 into lBgBlack
end mouseDown

on mouseLeave
   if the backgroundColor of graphic id 1028 of cd 1 is black and lBgBlack is 1 then
      set  the backgroundColor of graphic id 1028 of cd 1 to empty
      set the opaque of graphic id 1028 of cd 1 to false
      put 0 into lBgBlack
   end if
end mouseLeave


#####################
## Script of graphic "Custom Category Color”, ID 1028 of CARD 1 of SUBSTACK TEI Tag Custom Colors of STACK STEP Transcription Module

local lBgColor,lBgBlack

on mouseUp
   put the label of btn id 1022 of cd 1 into pItemName
   if pItemName is space or pItemName is empty then exit mouseUp
   put empty into tCol
   if the opaque of graphic id 1025 of cd 1 is false and lBgColor is not empty then put lBgColor into tCol
   else if the opaque of graphic id 1025 of cd 1 is true then put the backgroundColor of graphic id 1025 of cd 1 into tCol
   answer color with tCol 
   --answer color with (the backGroundcolor of graphic id 1025 of cd 1)
   if the result is "Cancel" then 
      set  the backGroundcolor of graphic id 1028 of cd 1 to lBgColor
      colorFldTest 1028
      if lBgColor is the backgroundColor of this stack or lBgColor is empty then 
         set the opaque of graphic id 1028 of cd 1 to false
         colorFldTest 1025
         exit mouseUp
      end if
   end if
   set  the backGroundcolor of graphic id 1028 of cd 1 to it
   if the backgroundColor of graphic id 1028 of cd 1 is black then put 0 into lBgBlack
   colorFldTest 1028
   if it is empty or it is the backgroundColor of this stack then 
      set the opaque of graphic id 1028 of cd 1 to false 
      colorFldTest 1025
   else set the opaque of graphic id 1028 of cd 1 to true
   replace space with "_" in pItemName
   put empty into tCustContent
   put "c"&pItemName&"Category" into tCust
   do "put the "&tCust&" of this stack into tCustContent"
   put lineOffset("customColor|",tCustContent) into ut
   if ut <> 0 then
      set the itemDel to "|"
      put it into item 2 of line ut of tCustContent
      do "set the "&tCust&" of this stack to tCustContent"
   end if
end mouseUp

on mouseDown
   set the opaque of graphic id 1028 of cd 1 to true
   put  the backgroundColor of graphic id 1028 of cd 1 into lBgColor
   set  the backgroundColor of graphic id 1028 of cd 1 to black
   put 1 into lBgBlack
end mouseDown

on mouseLeave
   if the backgroundColor of graphic id 1028 of cd 1 is black and lBgBlack is 1 then
      set  the backgroundColor of graphic id 1028 of cd 1 to empty
      set the opaque of graphic id 1028 of cd 1 to false
      put 0 into lBgBlack
   end if
end mouseLeave


#####################
## Script of button "Clear”, ID 1029 of CARD 1 of SUBSTACK TEI Tag Custom Colors of STACK STEP Transcription Module

on mouseUp
   put the label of btn id 1022 of cd 1 into pItemName
   if the backgroundColor of graphic id 1028 of cd 1 is not empty and ((pItemName is space) or (pItemName is empty)) then       
      set the opaque of graphic id 1028 of cd 1 to false
      set  the backgroundColor of graphic id 1028 of cd 1 to empty
      colorFldTest
      exit mouseUp
   end if
   if the backgroundColor of graphic id 1028 of cd 1 is empty then        
      set the opaque of graphic id 1028 of cd 1 to false
      colorFldTest 1025
      exit mouseUp
   end if
   if pItemName is space or pItemName is empty then exit mouseUp
   replace space with "_" in pItemName
   put empty into tCustContent
   put "c"&pItemName&"Category" into tCust
   do "put the "&tCust&" of this stack into tCustContent"
   get lineOffset("customColor|",tCustContent)
   if it <> 0 then
      set the itemDel to "|"
      put empty into item 2 of line it of tCustContent
      do "set the "&tCust&" of this stack to tCustContent"
   end if
   set the opaque of graphic id 1028 of cd 1 to false
   set  the backgroundColor of graphic id 1028 of cd 1 to empty
   colorFldTest 1025
end mouseUp


##TOOLTIP:
##Delete custom color and restore default


#####################
## Script of button "Add”, ID 1038 of CARD 1 of SUBSTACK TEI Tag Custom Colors of STACK STEP Transcription Module

on mouseUp
   local tCategory,tCatList,tWN,tCustoms,tNewCust
   if fld id 1037 of cd 1 is empty then exit mouseUp
   put fld id 1037 of cd 1 into tCategory
   put btn id 1022 of cd 1 into tCatList
   if "none"&cr is in tCatList then delete line 1 to 2 of tCatList
   if tCategory is not among the lines of tCatList then
      put cr & tCategory after tCatList
      sort tCatList international
      put tCatList into btn id 1022 of cd 1
      set the label of btn id 1022 of cd 1 to tCategory
      set the opaque of graphic id 1025 to false
      set the backgroundColor of graphic id 1025 to empty
      set the opaque of graphic id 1028 to false
      set the backgroundColor of graphic id 1028 to empty
      put the number of words of tCategory into tWN
      repeat with c = 1 to tWN
         put toUpper(char 1 of word c of tCategory) into char 1 of word c of tCategory
      end repeat
      replace space with "_" in tCategory
      put "c"&tCategory&"Category" into tNewCust
      put the customKeys of this stack into tCustoms
      if tNewCust is not among the lines of tCustoms then
         put cr & tNewCust after tCustoms
         set the customKeys of this stack to tCustoms
      end if
   end if
end mouseUp

##TOOLTIP:
##Add category


#####################
## Script of button "Delete”, ID 1039 of CARD 1 of SUBSTACK TEI Tag Custom Colors of STACK STEP Transcription Module

on mouseUp
   local tCategory,tCatList,tWN,tCustoms,tNewCust,ot
   if fld id 1037 of cd 1 is empty then exit mouseUp
   answer "Confirm you want to delete tag category “"&(fld id 1037 of cd 1)&"” from the list in the menu (along with the tags associated with it."&\
   " (This operation does not delete them from STEP Transcriptor itself.)" with "Cancel" or "Delete" as sheet
   if it is "Cancel" then exit mouseUp
   put fld id 1037 of cd 1 into tCategory
   put btn id 1022 of cd 1 into tCatList
   --if "none"&cr is in tCatList then delete line 1 to 2 of tCatList
   set the wholeMatches to true
   put lineOffset(tCategory,tCatList) into ot
   if ot = 0 then 
      answer "Category “"&tCategory&"” was not found in the menu." as sheet
      exit mouseUp
   end if
   delete line ot of tCatList
   put tCatList into btn id 1022 of cd 1
   if the label of btn id 1022 of cd 1 is tCategory then 
      set the label of btn id 1022 of cd 1 to space
      set the opaque of graphic id 1025 to false
      set the backgroundColor of graphic id 1025 to empty
      set the opaque of graphic id 1028 to false
      set the backgroundColor of graphic id 1028 to empty
   end if
   put the number of words of tCategory into tWN
   repeat with c = 1 to tWN
      put toUpper(char 1 of word c of tCategory) into char 1 of word c of tCategory
   end repeat
   replace space with "_" in tCategory
   put "c"&tCategory&"Category" into tNewCust
   put the customKeys of this stack into tCustoms
   set the wholeMatches to true
   delete line lineOffset(tNewCust,tCustoms) of tCustoms
   set the customKeys of this stack to tCustoms
end mouseUp

##TOOLTIP:
##Delete category


#####################
## Script of button "Reset all to default”, ID 1041 of CARD 1 of SUBSTACK TEI Tag Custom Colors of STACK STEP Transcription Module

on mouseUp
   put the customKeys of this stack into tAllCustoms
   put empty into tCustContent
   repeat with x = 1 to the number of lines of tAllCustoms
      if line x of tAllCustoms is "cSpecificTagColors" then
         put the cSpecificTagColors of this stack into tSpecs
         set the itemDel to "|"
         repeat with y = 1 to the number of lines of tSpecs
            put empty into item 3 of line y of tSpecs
         end repeat
         set the itemDel to comma
         set the cSpecificTagColors of this stack to tSpecs
      else
         put line x of tAllCustoms into tCust
         do "put the "&tCust&" of this stack into tCustContent"
         set the itemDel to "|"
         put empty into item 2 of line 2 of tCustContent
         set the itemDel to comma
         do "set the "&tCust&" of this stack to tCustContent"
      end if
   end repeat
   put "1016,1028,1051,1058,1079" into tCustomGraphicList
   repeat for each item tGraphID in tCustomGraphicList
      set the opaque of graphic id tGraphID of cd 1 to false
      set the backgroundColor of graphic id tGraphID of cd 1 to empty
   end repeat
end mouseUp

##TOOLTIP:
##Reset all tags and tag categories to
##their default color if they had one.


#####################
## Script of button "Close”, ID 1042 of CARD 1 of SUBSTACK TEI Tag Custom Colors of STACK STEP Transcription Module

on mouseUp
   close stack "TEI Tag Custom Colors"
   send mouseUp to btn "Color all tags" of cd 1 of stack "STEP Transcription Module"
end mouseUp


#####################
## Script of button "SpecificCustomAttributeColor”, ID 1050 of CARD 1 of SUBSTACK TEI Tag Custom Colors of STACK STEP Transcription Module

local lBgColor,lBgBlack

on mouseUp
   put empty into tCol
   if the backgroundColor of graphic id 1048 of cd 1 is empty and lBgColor is not empty then put lBgColor into tCol
   else if the backgroundColor of graphic id 1048 of cd 1 is not empty then put the backgroundColor of graphic id 1048 of cd 1 into tCol
   answer color with tCol --(the backGroundcolor of graphic id tIDC of cd 1)
   if the result is "Cancel" then 
      set  the backGroundcolor of graphic id 1051 of cd 1 to lBgColor
      colorFldTest 1051
      if lBgColor is the backgroundColor of this stack or lBgColor is empty then 
         set the opaque of graphic id 1051 of cd 1 to false
         colorFldTest checkForCustomOrDefaultColor()
         exit mouseUp
      end if
   end if
   set  the backGroundcolor of graphic id 1051 of cd 1 to it
   if the backgroundColor of graphic id 1051 of cd 1 is black then put 0 into lBgBlack
   colorFldTest checkForCustomOrDefaultColor()
   if it is empty or it is the backgroundColor of this stack then 
      set the opaque of graphic id 1051 of cd 1 to false 
      colorFldTest checkForCustomOrDefaultColor()
   else set the opaque of graphic id 1051 of cd 1 to true
   put the cAttributeColor of this stack into tAC
   set the itemDel to "|"
   put it into item 2 of line 2 of tAC
   set the cAttributeColor of this stack to tAC
end mouseUp

on mouseDown
   set the opaque of graphic id 1051 of cd 1 to true
   put  the backGroundcolor of graphic id 1051 of cd 1 into lBgColor
   set  the backGroundcolor of graphic id 1051 of cd 1 to black
   put 1 into lBgBlack
end mouseDown

on mouseLeave
   if the backgroundColor of graphic id 1051 of cd 1 is black and lBgBlack is 1 then
      set  the backgroundColor of graphic id 1051 of cd 1 to empty
      set the opaque of graphic id 1051 of cd 1 to false
      put 0 into lBgBlack
   end if
end mouseLeave


#####################
## Script of graphic "Custom Attribute Color”, ID 1051 of CARD 1 of SUBSTACK TEI Tag Custom Colors of STACK STEP Transcription Module

local lBgColor,lBgBlack

on mouseUp
   put empty into tCol
   if the opaque of graphic id 1048 of cd 1 is false and lBgColor is not empty then put lBgColor into tCol
   else if the opaque of graphic id 1048 of cd 1 is true then put the backgroundColor of graphic id 1048 of cd 1 into tCol
   answer color with tCol
   if the result is "Cancel" then 
      set  the backGroundcolor of graphic id 1051 of cd 1 to lBgColor
      colorFldTest 1051
      if lBgColor is the backgroundColor of this stack or lBgColor is empty then 
         set the opaque of graphic id 1051 of cd 1 to false
         colorFldTest checkForCustomOrDefaultColor()
         exit mouseUp
      end if
   end if
   set  the backGroundcolor of graphic id 1051 of cd 1 to it
   if the backgroundColor of graphic id 1051 of cd 1 is black then put 0 into lBgBlack
   colorFldTest checkForCustomOrDefaultColor()
   if it is empty or it is the backgroundColor of this stack then 
      set the opaque of graphic id 1051 of cd 1 to false 
      colorFldTest checkForCustomOrDefaultColor()
   else set the opaque of graphic id 1051 of cd 1 to true
   put the cAttributeColor of this stack into tAC
   set the itemDel to "|"
   put it into item 2 of line 2 of tAC
   set the cAttributeColor of this stack to tAC
end mouseUp

on mouseDown
   set the opaque of graphic id 1051 of cd 1 to true
   put  the backGroundcolor of graphic id 1051 of cd 1 into lBgColor
   set  the backGroundcolor of graphic id 1051 of cd 1 to black
   put 1 into lBgBlack
end mouseDown

on mouseLeave
   if the backgroundColor of graphic id 1051 of cd 1 is black and lBgBlack is 1 then
      set  the backgroundColor of graphic id 1051 of cd 1 to empty
      set the opaque of graphic id 1051 of cd 1 to false
      put 0 into lBgBlack
   end if
end mouseLeave


#####################
## Script of button "Clear”, ID 1052 of CARD 1 of SUBSTACK TEI Tag Custom Colors of STACK STEP Transcription Module

on mouseUp
   if the backgroundColor of graphic id 1051 of cd 1 is empty then        
      set the opaque of graphic id 1051 of cd 1 to false
      colorFldTest
      exit mouseUp
   end if
   put the cAttributeColor of this stack into tAC
   set the itemDel to "|"
   put empty into item 2 of line 2 of tAC
   set the cAttributeColor of this stack to tAC
   set the opaque of graphic id 1051 of cd 1 to false
   set  the backgroundColor of graphic id 1051 of cd 1 to empty
   colorFldTest
end mouseUp

##TOOLTIP:
##Delete custom color and restore default


#####################
## Script of button "SpecificCustomValueColor”, ID 1057 of CARD 1 of SUBSTACK TEI Tag Custom Colors of STACK STEP Transcription Module

local lBgColor,lBgBlack

on mouseUp
   put empty into tCol
   if the backgroundColor of graphic id 1055 of cd 1 is empty and lBgColor is not empty then put lBgColor into tCol
   else if the backgroundColor of graphic id 1055 of cd 1 is not empty then put the backgroundColor of graphic id 1055 of cd 1 into tCol
   answer color with tCol ---(the backGroundcolor of graphic id 1055 of cd 1)
   if the result is "Cancel" then 
      set  the backGroundcolor of graphic id 1058 of cd 1 to lBgColor
      colorFldTest 1058
      if lBgColor is the backgroundColor of this stack or lBgColor is empty then 
         set the opaque of graphic id 1058 of cd 1 to false
         colorFldTest checkForCustomOrDefaultColor()
         exit mouseUp
      end if
   end if
   set  the backGroundcolor of graphic id 1058 of cd 1 to it
   if the backgroundColor of graphic id 1058 of cd 1 is black then put 0 into lBgBlack
   colorFldTest checkForCustomOrDefaultColor()
   if it is empty or it is the backgroundColor of this stack then 
      set the opaque of graphic id 1058 of cd 1 to false 
      colorFldTest checkForCustomOrDefaultColor()
   else set the opaque of graphic id 1058 of cd 1 to true
   put the cValueColor of this stack into tVC
   set the itemDel to "|"
   put it into item 2 of line 2 of tVC
   set the cValueColor of this stack to tVC
end mouseUp

on mouseDown
   set the opaque of graphic id 1058 of cd 1 to true
   put  the backGroundcolor of graphic id 1058 of cd 1 into lBgColor
   set  the backGroundcolor of graphic id 1058 of cd 1 to black
   put 1 into lBgBlack
end mouseDown

on mouseLeave
   if the backgroundColor of graphic id 1058 of cd 1 is black and lBgBlack is 1 then
      set  the backgroundColor of graphic id 1058 of cd 1 to empty
      set the opaque of graphic id 1058 of cd 1 to false
      put 0 into lBgBlack
   end if
end mouseLeave


#####################
## Script of graphic "Custom Value Color”, ID 1058 of CARD 1 of SUBSTACK TEI Tag Custom Colors of STACK STEP Transcription Module

local lBgColor,lBgBlack

on mouseUp
   put empty into tCol
   if the opaque of graphic id 1055 of cd 1 is false and lBgColor is not empty then put lBgColor into tCol
   else if the opaque of graphic id 1055 of cd 1 is true then put the backgroundColor of graphic id 1055 of cd 1 into tCol
   answer color with tCol
   if the result is "Cancel" then 
      set  the backGroundcolor of graphic id 1058 of cd 1 to lBgColor
      colorFldTest 1058
      if lBgColor is the backgroundColor of this stack or lBgColor is empty then 
         set the opaque of graphic id 1058 of cd 1 to false
         colorFldTest checkForCustomOrDefaultColor()
         exit mouseUp
      end if
   end if
   set  the backGroundcolor of graphic id 1058 of cd 1 to it
   if the backgroundColor of graphic id 1058 of cd 1 is black then put 0 into lBgBlack
   colorFldTest checkForCustomOrDefaultColor()
   if it is empty or it is the backgroundColor of this stack then 
      set the opaque of graphic id 1058 of cd 1 to false 
      colorFldTest checkForCustomOrDefaultColor()
   else set the opaque of graphic id 1058 of cd 1 to true
   put the cValueColor of this stack into tVC
   set the itemDel to "|"
   put it into item 2 of line 2 of tVC
   set the cValueColor of this stack to tVC
end mouseUp

on mouseDown
   set the opaque of graphic id 1058 of cd 1 to true
   put  the backGroundcolor of graphic id 1058 of cd 1 into lBgColor
   set  the backGroundcolor of graphic id 1058 of cd 1 to black
   put 1 into lBgBlack
end mouseDown

on mouseLeave
   if the backgroundColor of graphic id 1058 of cd 1 is black and lBgBlack is 1 then
      set  the backgroundColor of graphic id 1058 of cd 1 to empty
      set the opaque of graphic id 1058 of cd 1 to false
      put 0 into lBgBlack
   end if
end mouseLeave


#####################
## Script of button "Clear”, ID 1059 of CARD 1 of SUBSTACK TEI Tag Custom Colors of STACK STEP Transcription Module

on mouseUp
   if the backgroundColor of graphic id 1058 of cd 1 is empty then 
      set the opaque of graphic id 1058 of cd 1 to false
      colorFldTest
      exit mouseUp
   end if
   put the cValueColor of this stack into tVC
   set the itemDel to "|"
   put empty into item 2 of line 2 of tVC
   set the cValueColor of this stack to tVC
   set the opaque of graphic id 1058 of cd 1 to false
   set  the backgroundColor of graphic id 1058 of cd 1 to empty
   colorFldTest
end mouseUp

##TOOLTIP:
##Delete custom color and restore default


#####################
## Script of button "Record edited list”, ID 1064 of CARD 1 of SUBSTACK TEI Tag Custom Colors of STACK STEP Transcription Module

on mouseUp
   local tCategory,tCategory1,tTagList,tWN,tCustTags,tCustTags2,tCust
   put the label of btn id 1022 of cd 1 into tCategory
   put tCategory into tCategory1
   put fld id 1032 of cd 1 into tTagList
   put empty into tCustTags
   filter tTagList without empty
   put stripDuplicates2(tTagList) into tTagList
   if tCategory is empty or tCategory is space then exit mouseUp
   put the number of words of tCategory into tWN
   repeat with c = 1 to tWN
      put toUpper(char 1 of word c tCategory) into char 1 of word c tCategory
   end repeat
   replace space with "_" in tCategory
   put "c"&tCategory&"Category" into tCust
   do "put the "&tCust&" of this stack into tCustTags"
   if "Color" is in line 2 of tCustTags then put line 3 to -1 of tCustTags into tCustTags2 else put tCustTags into tCustTags2
   if tCustTags2 is not empty and tCustTags2 is not cr and tTagList is empty then
      answer "Confirm you want to empty the list of tags under category “"&tCategory1&".”" with "Cancel" or "Clear All Tags" as sheet
      if it is "Cancel" then 
         put tCustTags2 into fld id 1032 of cd 1
         exit mouseUp
      end if
   end if
   put "defaultColor|"&cr & "customColor|" & cr & tTagList into tCustTags
   do "set the "&tCust&" of this stack to tCustTags"
end mouseUp

##TOOLTIP:
##Record changes made to the current category’s list of tags.


#####################
## Script of button "GeneralCustomColor”, ID 1078 of CARD 1 of SUBSTACK TEI Tag Custom Colors of STACK STEP Transcription Module

local lBgColor,lBgBlack

on mouseUp
   put empty into tCol
   if the backgroundColor of graphic id 1076 of cd 1 is empty and lBgColor is not empty then put lBgColor into tCol
   else if the backgroundColor of graphic id 1076 of cd 1 is not empty then put the backgroundColor of graphic id 1076 of cd 1 into tCol
   answer color with tCol --(the backgroundColor of graphic id tIDC of cd 1)
   if the result is "Cancel" then 
      set  the backgroundColor of graphic id 1079 of cd 1 to lBgColor
      colorFldTest 1079
      if lBgColor is the backgroundColor of this stack or lBgColor is empty then 
         set the opaque of graphic id 1079 of cd 1 to false
         colorFldTest 1076
         exit mouseUp
      end if
   end if
   set  the backgroundColor of graphic id 1079 of cd 1 to it
   if the backgroundColor of graphic id 1079 of cd 1 is black then put 0 into lBgBlack
   colorFldTest checkForCustomOrDefaultColor()
   if it is empty or it is the backgroundColor of this stack then 
      set the opaque of graphic id 1079 of cd 1 to false 
      colorFldTest checkForCustomOrDefaultColor()
   else set the opaque of graphic id 1079 of cd 1 to true
   put the cGeneralColor of this stack into tGC
   set the itemDel to "|"
   put it into item 2 of line 2 of tGC
   set the cGeneralColor of this stack to tGC
end mouseUp

on mouseDown
   set the opaque of graphic id 1079 of cd 1 to true
   put  the backgroundColor of graphic id 1079 of cd 1 into lBgColor
   set  the backgroundColor of graphic id 1079 of cd 1 to black
   put 1 into lBgBlack
end mouseDown

on mouseLeave
   if the backgroundColor of graphic id 1079 of cd 1 is black and lBgBlack is 1 then
      set  the backgroundColor of graphic id 1079 of cd 1 to empty
      set the opaque of graphic id 1079 of cd 1 to false
      put 0 into lBgBlack
   end if
end mouseLeave


#####################
## Script of graphic "Custom General Tag Color”, ID 1079 of CARD 1 of SUBSTACK TEI Tag Custom Colors of STACK STEP Transcription Module

local lBgColor,lBgBlack

on mouseUp
   put empty into tCol
   if the opaque of graphic id 1076 of cd 1 is false and lBgColor is not empty then put lBgColor into tCol
   else if the opaque of graphic id 1076 of cd 1 is true then put the backgroundColor of graphic id 1076 of cd 1 into tCol
   answer color with tCol
   if the result is "Cancel" then 
      set  the backgroundColor of graphic id 1079 of cd 1 to lBgColor
      colorFldTest 1079
      if lBgColor is the backgroundColor of this stack or lBgColor is empty then 
         set the opaque of graphic id 1079 of cd 1 to false
         colorFldTest 1076
         exit mouseUp
      end if
   end if
   set  the backgroundColor of graphic id 1079 of cd 1 to it
   if the backgroundColor of graphic id 1079 of cd 1 is black then put 0 into lBgBlack
   colorFldTest checkForCustomOrDefaultColor()
   if it is empty or it is the backgroundColor of this stack then 
      set the opaque of graphic id 1079 of cd 1 to false 
      colorFldTest checkForCustomOrDefaultColor()
   else set the opaque of graphic id 1079 of cd 1 to true
   put the cGeneralColor of this stack into tGC
   set the itemDel to "|"
   put it into item 2 of line 2 of tGC
   set the cGeneralColor of this stack to tGC
end mouseUp

on mouseDown
   set the opaque of graphic id 1079 of cd 1 to true
   put  the backgroundColor of graphic id 1079 of cd 1 into lBgColor
   set  the backgroundColor of graphic id 1079 of cd 1 to black
   put 1 into lBgBlack
end mouseDown

on mouseLeave
   if the backgroundColor of graphic id 1079 of cd 1 is black and lBgBlack is 1 then
      set  the backgroundColor of graphic id 1079 of cd 1 to empty
      set the opaque of graphic id 1079 of cd 1 to false
      put 0 into lBgBlack
   end if
end mouseLeave


#####################
## Script of button "Clear”, ID 1080 of CARD 1 of SUBSTACK TEI Tag Custom Colors of STACK STEP Transcription Module

on mouseUp
   if the backgroundColor of graphic id 1079 of cd 1 is empty then        
      set the opaque of graphic id 1079 of cd 1 to false
      colorFldTest
      exit mouseUp
   end if
   put the cGeneralColor of this stack into tGC
   set the itemDel to "|"
   put empty into item 2 of line 2 of tGC
   set the cGeneralColor of this stack to tGC
   set the opaque of graphic id 1079 of cd 1 to false
   set  the backgroundColor of graphic id 1079 of cd 1 to empty
   colorFldTest
end mouseUp

##TOOLTIP:
##Delete custom color and restore default


#####################
#####################
## HH. SUBSTACK STEP Corpus Directory Viewer of STACK STEP Transcription Module

#####################
## Script of SUBSTACK STEP Corpus Directory Viewer of STACK STEP Transcription Module


on preOpenStack
   set the loc of this stack to the screenLoc
   set the width of this stack to the minWidth of this stack
   set the height of this stack to the minHeight of this stack
   repeat with i = 1 to the number of controls of cd 1         
      set the lockloc of control i of cd 1 to true
      set the rect of control i of cd 1 to the cRect of control i of cd 1
   end repeat
end preOpenStack
   
   
on openStack
   checkLauncherWindow (the short name of this stack)
end openStack

on closeStack
   close this stack
end closeStack



#####################
## Script of CARD 1 of SUBSTACK STEP Corpus Directory Viewer of STACK STEP Transcription Module

on preopencard
   put empty into field "Folder"
   put empty into field "Directory"
end preopencard


# Returns a list of files in a given folder, using recursion to
# include files in subfolders if desired.

function listFiles pFolder, pRecurse
   local tTotalFiles, tCurrentFiles, tFolders
   set the defaultFolder to pFolder
   put filteredFiles() into tCurrentFiles
   if not pRecurse then return tCurrentFiles
   if tCurrentFiles is not empty then
      put tCurrentFiles & return after tTotalFiles
   end if
   put filteredFolders() into tFolders   
   repeat for each line tFolder in tFolders
      put listFiles((pFolder & slash & tFolder), pRecurse) into tCurrentFiles
      if tCurrentFiles is not empty then
         put tCurrentFiles & return after tTotalFiles
      end if
   end repeat
   delete the last char of tTotalFiles
   return tTotalFiles
end listFiles

# Returns a list of files with the full paths
function listFilesWithPaths pFolder, pRecurse
   local tTotalFiles, tCurrentFiles, tFolders
   set the defaultFolder to pFolder
   put filteredFilesWithPaths() into tCurrentFiles
   if not pRecurse then return tCurrentFiles
   if tCurrentFiles is not empty then
      put tCurrentFiles & return after tTotalFiles#
   end if
   put filteredFolders() into tFolders
   repeat for each line tFolder in tFolders
      put listFilesWithPaths((pFolder & slash & tFolder), pRecurse) into tCurrentFiles
      if tCurrentFiles is not empty then 
         put tCurrentFiles & return after tTotalFiles
      end if
   end repeat
   delete the last char of tTotalFiles
   return tTotalFiles
end listFilesWithPaths

# Filters the strings "." and ".." from a list
function filterDots pList
   local tList
   put pList into tList
   filter tList without "."
   filter tList without ".."
   filter tList without ".DS_Store"
   filter tList without "._thumb"
   return tList
end filterDots

# Returns a filtered list of files in the current directory
function filteredFiles
   return filterDots(the files)
end filteredFiles

# Returns a filtered list of folders in the current directory
function filteredFolders
   return filterDots(the folders)
end filteredFolders

# Returns a list of files in the current directory including
# each file's full path.
function filteredFilesWithPaths
   local tFiles, tFilesWithPaths
   put filteredFiles() into tFiles
   repeat for each line tFile in tFiles
      put the defaultFolder & slash & tFile & return after tFilesWithPaths
   end repeat
   delete the last char of tFilesWithPaths
   return tFilesWithPaths
end filteredFilesWithPaths

function listFolders pFolder, pRecurse
   local tTotalFolders, tCurrentFolders, tFolders
   set the defaultFolder to pFolder
   put filteredFolders() into tCurrentFolders
   if not pRecurse then return tCurrentFolders
   if tCurrentFolders is not empty then
      put tCurrentFolders & return after tTotalFolders
   end if
   put filteredFolders() into tFolders   
   repeat for each line tFolder in tFolders
      put listFolders((pFolder & slash & tFolder), pRecurse) into tCurrentFolders
      if tCurrentFolders is not empty then
         put tCurrentFolders & return after tTotalFolders
      end if
   end repeat
   delete the last char of tTotalFolders
   return tTotalFolders
end listFolders

function listFoldersWithPaths pFolder, pRecurse
   local tTotalFolders, tCurrentFolders, tFolders
   set the defaultFolder to pFolder
   put filteredFoldersWithPaths() into tCurrentFolders
   if not pRecurse then return tCurrentFolders
   if tCurrentFolders is not empty then
      put tCurrentFolders & return after tTotalFolders#
   end if
   put filteredFolders() into tFolders
   repeat for each line tFolder in tFolders
      put listFoldersWithPaths((pFolder & slash & tFolder), pRecurse) into tCurrentFolders
      if tCurrentFolders is not empty then 
         put tCurrentFolders & return after tTotalFolders
      end if
   end repeat
   delete the last char of tTotalFolders
   return tTotalFolders
end listFoldersWithPaths

function filteredFoldersWithPaths
   local tFolders, tFoldersWithPaths
   put filteredFolders() into tFolders
   repeat for each line tFolder in tFolders
      put the defaultFolder & slash & tFolder & return after tFoldersWithPaths
   end repeat
   delete the last char of tFoldersWithPaths
   return tFoldersWithPaths
end filteredFoldersWithPaths

function stripDuplicates2 tListToStrip
   local tKeys,tCount,tArray
   repeat for each line tCount in tListToStrip
      put 1 into tArray[tCount]
   end repeat
   put the keys of tArray into tKeys
   sort tKeys ascending international
   return tKeys
end stripDuplicates2

on listFoldersAndFiles
   lock screen
   local tFolder, tFileList,tFullList1,tFullList2
   put field "Folder" into tFolder
   put stripDuplicates2(filterDots(listFolders(tFolder, true))) into tFullList1
   put stripDuplicates2(filterDots(listFiles(tFolder, true))) into tFullList2
   filter tFullList1 without empty
   filter tFullList2 without empty
   if tFullList1 <> empty then 
      put tFullList1 into field "Directory"
      if tFullList2 <> empty then 
         put cr&tFullList2 after field "Directory"
      end if
   else  if tFullList2 <> empty then put tFullList2 into field "Directory"
end listFoldersAndFiles

on listFoldersAndFilesWithPaths
   lock screen
   local tFolder, tFileList,tFullList
   put field "Folder" into tFolder
   put listFoldersWithPaths(tFolder, true) into tFullList
   put cr&listFilesWithPaths(tFolder, true) after tFullList
   filter tFullList without "."
   filter tFullList without ".."
   filter tFullList without empty
   put stripDuplicates2(tFullList) into tFullList
   put tFullList into field "Directory"
end listFoldersAndFilesWithPaths

on listAllFoldersWithPaths
   lock screen
   local tFolder, tFileList
   put field "Folder" into tFolder
   put listFoldersWithPaths(tFolder, true) into field "Directory"
end listAllFoldersWithPaths

on listAllFolders
   lock screen
   local tFolder, tFileList
   put field "Folder" into tFolder
   put listFolders(tFolder, true) into field "Directory"
end listAllFolders

on listAllFiles
   lock screen
   local tFolder, tFileList
   put field "Folder" into tFolder
   put listFiles(tFolder, true) into field "Directory"
end listAllFiles

on listAllFilesWIthPaths
   lock screen
   local tFolder, tFileList
   put field "Folder" into tFolder
   put listFilesWithPaths(tFolder, true) into field "Directory"
end listAllFilesWIthPaths




#####################
## Script of field "Folder”, ID 1003 of CARD 1 of SUBSTACK STEP Corpus Directory Viewer of STACK STEP Transcription Module

on mouseUp
   local tChunk,tItemNum
   put the clickChunk into tChunk
   set the itemDel to slash
   put the number of items of char 1 to (word 4 of tChunk) of fld "Folder" of cd 1 into tItemNum
   put item 1 to tItemNum of fld "Folder" of cd 1 into fld "Folder" of cd 1
   set the cListingType of fld id 1005 of cd 1 of this stack to "FoldersAndFilesWithPaths"
   listAllFoldersWithPaths
end mouseUp


#####################
## Script of button "Choose folder”, ID 1004 of CARD 1 of SUBSTACK STEP Corpus Directory Viewer of STACK STEP Transcription Module

on mouseUp
   local tFolder
   answer folder "Please choose the folder you want to work with"
   put it into tFolder
   if there is a folder tFolder then 
      put tFolder into field "Folder" of cd 1 of this stack
      listAllFoldersWithPaths
   end if
end mouseUp


#####################
## Script of field "Directory”, ID 1005 of CARD 1 of SUBSTACK STEP Corpus Directory Viewer of STACK STEP Transcription Module

on mouseUp
   local tPath
   put the value of the clickLine into tPath
   if there is a folder tPath then put tPath into fld "Folder" of cd 1 of this stack
   else 
      set the itemDel to slash
      put item 1 to -2 of tPath into tPath
      if there is a folder tPath then put tPath into fld "Folder" of cd 1 of this stack
   end if
end mouseUp

on mouseDoubleUp
   local tFilePath,tBegPath,tFileType,tFullPath,tSegs
   put the value of the clickLine into tFilePath
   put "doc docx odt jpeg jpg step png png_thumb pdf xcf rtf txt htm html xml xls xlsx icns zip svg js ttf scss livecode nib plist rev ppt pptx" into tSegs
   put fld id 1003 of cd 1 of this stack into tBegPath
   set the itemDel to slash
   switch the cListingType of fld id 1005 of cd 1 of this stack
      case "FoldersWithPaths"
         if there is a folder tFilePath then 
            put tFilePath into fld "Folder" of cd 1 of this stack
            set the cListingType of fld id 1005 of cd 1 of this stack to "FoldersAndFilesWithPaths"
            listFoldersAndFilesWithPaths
         end if
         break
      case  "FoldersOnly"
         put tBegPath&slash&tFilePath into tFullPath
         if there is a folder tFullPath then 
            put tFullPath into fld "Folder" of cd 1 of this stack
            set the cListingType of fld id 1005 of cd 1 of this stack to "FoldersAndFilesOnly"
            listFoldersAndFiles
         end if
         break
      case "FilesOnly"
         get offset(".",item -1 of tFilePath)
         if it <> 0 then
            put char it+1 to -1 of item -1 of tFilePath into tFileType
            if tFileType is among the segments of tSegs then 
               put tBegPath&slash&tFilePath into tFullPath
               launch document tFullPath
               if the result <> empty then answer  translateResult(the result) as sheet
            end if
         end if
         break
      case  "FoldersAndFilesOnly"
         get offset(".",item -1 of tFilePath)
         if it <> 0 then
            put char it+1 to -1 of item -1 of tFilePath into tFileType
            if tFileType is among the segments of tSegs then 
               put tBegPath&slash&tFilePath into tFullPath
               launch document tFullPath
               if the result <> empty then
                  answer  translateResult(the result) as sheet
               end if
            else 
               get 0
            end if
         else
            put tBegPath&slash&tFilePath into tFullPath
            if there is a folder tFullPath then 
               put  tFullPath into fld "Folder" of cd 1 of this stack
               set the cListingType of fld id 1005 of cd 1 of this stack to "FoldersAndFilesWithPaths"
               listFoldersAndFilesWithPaths
            end if
         end if
         break
      case "FilesWithPaths"
         get offset(".",item -1 of tFilePath)
         if it <> 0 then
            put char it+1 to -1 of item -1 of tFilePath into tFileType
            if tFileType is among the segments of tSegs then 
               launch document tFilePath
               if the result <> empty then answer  translateResult(the result) as sheet
            end if
         end if
         break
      case "FoldersAndFilesWithPaths"
         get offset(".",item -1 of tFilePath)
         if it <> 0 then
            put char it+1 to -1 of item -1 of tFilePath into tFileType
            if tFileType is among the segments of tSegs then 
               launch document tFilePath
               if the result <> empty then 
                  answer  translateResult(the result) as sheet
               end if
            else 
               get 0
            end if
         else
            if there is a folder tFilePath then 
               put  tFilePath into fld "Folder" of cd 1 of this stack
               set the cListingType of fld id 1005 of cd 1 of this stack to "FoldersAndFilesWithPaths"
               listFoldersAndFilesWithPaths
            end if
         end if
         break
   end switch
end mouseDoubleUp

function translateResult pResult
   if pResult is empty then return empty
   switch pResult
      case "can't open file"
         return "The file was not found or was not accessible."
         break
      case "no association"
         return "No application was found to open the document."
         break
      case "request failed"
         return "An attempt was made to launch the appropriate application but it was unable to fulfill the request."
         break
      case "no memory"
         return "The system ran out of resources or memory while the application was trying to fulfill the request."
         break
   end switch
end translateResult

##TOOLTIP:
##Click a line to open the corresponding folder or file.


#####################
## Script of button "List Files”, ID 1007 of CARD 1 of SUBSTACK STEP Corpus Directory Viewer of STACK STEP Transcription Module

on mouseUp
   set the cListingType of fld id 1005 of cd 1 of this stack to "FilesOnly"
   listAllFiles
end mouseUp



#####################
## Script of button "List Files with Paths”, ID 1008 of CARD 1 of SUBSTACK STEP Corpus Directory Viewer of STACK STEP Transcription Module

on mouseUp
   set the cListingType of fld id 1005 of cd 1 of this stack to "FilesWithPaths"
   listAllFilesWIthPaths
end mouseUp


#####################
## Script of button "List Folders”, ID 1010 of CARD 1 of SUBSTACK STEP Corpus Directory Viewer of STACK STEP Transcription Module

on mouseUp
   set the cListingType of fld id 1005 of cd 1 of this stack to "FoldersOnly"
   listAllFolders
end mouseUp


#####################
## Script of button "List Folders with Paths”, ID 1011 of CARD 1 of SUBSTACK STEP Corpus Directory Viewer of STACK STEP Transcription Module

on mouseUp
   set the cListingType of fld id 1005 of cd 1 of this stack to "FoldersWithPaths"
   listAllFoldersWithPaths
end mouseUp


#####################
## Script of button "List Folders and Files with Paths”, ID 1012 of CARD 1 of SUBSTACK STEP Corpus Directory Viewer of STACK STEP Transcription Module

on mouseUp
   set the cListingType of fld id 1005 of cd 1 of this stack to "FoldersAndFilesWithPaths"
   listFoldersAndFilesWithPaths
end mouseUp


#####################
## Script of button "List Folders and Files”, ID 1013 of CARD 1 of SUBSTACK STEP Corpus Directory Viewer of STACK STEP Transcription Module

on mouseUp
   set the cListingType of fld id 1005 of cd 1 of this stack to "FoldersAndFileOnly"
   listFoldersAndFiles
end mouseUp


#####################
## Script of button "Tree view”, ID 1014 of CARD 1 of SUBSTACK STEP Corpus Directory Viewer of STACK STEP Transcription Module

on mouseUp
   local tPathList
   if "Path" is in the cListingType of fld id 1005 of cd 1 of this stack then
      put  fld id 1005 of cd 1 of this stack into tPathList
      send "buildArrayOfGivenPaths tPathList" to cd 1 of stack "Directory Tree View"
      modeless stack "Directory Tree View"
   end if
end mouseUp

##TOOLTIP:
##See a tree view of the corpus directory.


#####################
#####################
## II. SUBSTACK Directory Tree View of STACK STEP Transcription Module

#####################
## Script of SUBSTACK Directory Tree View of STACK STEP Transcription Module


on preOpenStack
   set the loc of this stack to the screenLoc
end preOpenStack

on openStack
   put empty into fld id 1005 of cd 1 of this stack
   checkLauncherWindow (the short name of this stack)
end openStack

on closeStack
   put empty into fld id 1005 of cd 1 of this stack
   close stack "Directory Tree View"
end closeStack


#####################
## Script of CARD 1 of SUBSTACK Directory Tree View of STACK STEP Transcription Module


on buildArrayOfGivenPaths pPathList
   local tF,tBracketList,tPathArray,tSegs,tFileType
   put CleanseNonPrintingCharacters(pPathList) into pPathList
   put "doc docx odt jpeg jpg step png png_thumb pdf xcf rtf txt htm html xml xls xlsx icns zip svg js ttf scss livecode nib plist rev ppt pptx" into tSegs
   repeat with j = 1 to 30
      do "local tF"&j
   end repeat
   set the itemDel to slash
   repeat for each line k in pPathList
      put empty into tBracketList
      repeat with i = 1 to (the number of items of k)-1
         if item i of k is empty then next repeat
         put "["&quote&numberFolder(item i of k) & quote&"]" into tF
         do "put tF into tF"&i-1
         do "put tF"&i-1 & " after tBracketList"
      end repeat
      get offset(".",item -1 of k)
      if it <> 0 then
         put char it+1 to -1 of item -1 of k into tFileType
         if tFileType is among the segments of tSegs then 
            do "put item -1 of k & cr after tPathArray"&tBracketList&"["&quote&"Files"&quote&"]"
         end if
         get 0
      else       
         put "["&quote&numberFolder(item i+1 of k,item i of k) & quote& "]" into tF
         do "put tF into tF"&i
         do "put tF"&i & " after tBracketList"
         do "put empty into tPathArray"&tBracketList
      end if
   end repeat
   set the arrayData of widget id 1003 of cd 1 of stack "Directory Tree View" to tPathArray
end buildArrayOfGivenPaths


function numberFolder pNode,pNodePrev
   if char -1 of pNode is space then delete char -1 of pNode
   if pNodePrev <> "Back" then
      if pNode is "Transcriptions" then return "1. "&pNode
      else if pNode is "Editing" then return "2. "&pNode
      else if pNode is "Annotations" then return "3. "&pNode
      else   if pNode is "Apparatus" then return "4. "&pNode
   end if
   return pNode
end numberFolder

private function CleanseNonPrintingCharacters pStr
   repeat for each item theNum in "0,1,2,3,4,5,6,7,8"
      replace numToNativeChar(theNum) with empty in pStr
   end repeat
   return pStr
end CleanseNonPrintingCharacters



#####################
## Script of widget "Corpus Tree View”, ID 1003 of CARD 1 of SUBSTACK Directory Tree View of STACK STEP Transcription Module

-- Sent when a leaf node of the tree view is double-clicked
-- pPathToNode is a comma-delimited list of keys in the underlying array
on actionDoubleClick pPathToNode
   
end actionDoubleClick

-- Sent when the inspect icon is clicked in read only mode
-- pPathToNode is a comma-delimited list of keys in the underlying array
on actionInspect pPathToNode
   local tFilePath1,tList,tData
   replace comma with slash in pPathToNode
   set the itemDel to slash
   if item -1 of pPathToNode is "Files" then delete item -1 of pPathToNode
   put slash before pPathToNode
   if char -1 of pPathToNode <> slash then put slash after pPathToNode
   put files(unNumberFolder(pPathToNode)) into tList
   if line 1 of tList is ".DS_Store" then delete line 1 of tList
   put tList into fld id 1005 of cd 1 of stack "Directory Tree View"
end actionInspect

function unNumberFolder pNode
   set the itemDel to slash
   get item -2 of pNode
   if it is "1. Transcriptions" then put "Transcriptions" into item -2 of pNode
   else if it is "2. Editing" then put "Editing" into item -2 of pNode
   else if it is "3. Annotations" then put "Annotations" into item -2 of pNode
   else   if it is "4. Apparatus" then put "Apparatus" into item -2 of pNode
   return pNode
end unNumberFolder

-- Sent when an element is hilited
-- Use the hilitedElement property to get a comma-delimited list of
-- keys in the underlying array
on hiliteChanged
   local tElement
   put the hilitedElement of the target into tElement
end hiliteChanged


#####################
## Script of button "Display directory…”, ID 1004 of CARD 1 of SUBSTACK Directory Tree View of STACK STEP Transcription Module

on mouseUp
   local  tFilePath,tCorporaList,tCorpus,tCorpusMainFolders,tMainFolder,tMainFolderSubFolders,tSubFolder,tSubsubFolders,tFileList
   local tSubsubFolder,tSubsubsubFolders,tFile,tSubsubsubFolderFiles,tSubsubsubFolder,tTreeArray,tCorpora,tSub1Folder,tSub2Folder,tSub3Folder,tSub4Folder,tSub5Folder
   local tSubsubFolders2,tSubsubFolders3,tSubsubFolders4,tSubsubFolders5,tSubFiles1,tFilePath2,tFilePath3,tFilePath4,tFilePath5,tFilePath6,tFilePath7,tFilePath8,tFilePath9
   local tSub1Files,tSub2Files,tSub3Files,tSub4Files,tSub5Files,tSub6Files,tSubsubFolders6
   put empty into fld id 1005 of cd 1 of this stack
   answer folder "Locate the folder that contains all your corpora."
   if the result is "Cancel" or it is empty then exit mouseUp
   set the cMainCorporaAddress of this stack to it
   put it into tFilePath
   set the itemDel to slash
   put last item of tFilePath into tCorpora
   put empty into tTreeArray[tCorpora]
   put folders(tFilePath) into tCorporaList
   put files(tFilePath) into tSubFiles1
   if tSubFiles1 <> empty and tSubFiles1 <> ".DS_Store" and char 1 of  tSubFiles1 <> "." then 
      put tCorpora && "Files" into tSub1Files
      if line 1 of tSubFiles1 is ".DS_Store" then delete line 1 of tSubFiles1
      if line 1 of tSubFiles1 <> empty then put tSubFiles1 into tTreeArray[tCorpora][tSub1Files]
   end if
   repeat for each line tCorpus in tCorporaList
      if tCorpus is ".." then next repeat
      put empty into tTreeArray[tCorpora][tCorpus]
      put tFilePath&slash&tCorpus into tFilePath2
      put folders(tFilePath2) into tCorpusMainFolders
      put files(tFilePath2) into tSubFiles1
      if tSubFiles1 <> empty and tSubFiles1 <> ".DS_Store" and char 1 of  tSubFiles1 <> "." then 
         put tCorpus && "Files" into tSub1Files
         if line 1 of tSubFiles1 is ".DS_Store" then delete line 1 of tSubFiles1
         if line 1 of tSubFiles1 <> empty then put tSubFiles1 into tTreeArray[tCorpora][tCorpus][tSub1Files]
      end if
      repeat for each line tMainFolder in tCorpusMainFolders
         if tMainFolder is ".." then next repeat
         put tFilePath2&slash&tMainFolder into tFilePath3
         put empty into tTreeArray[tCorpora][tCorpus][tMainFolder]
         put folders(tFilePath3) into tMainFolderSubFolders
         put files(tFilePath3) into tSubFiles1
         if tSubFiles1 <> empty and tSubFiles1 <> ".DS_Store" and char 1 of  tSubFiles1 <> "." then 
            put tMainFolder && "Files" into tSub1Files
            put tSubFiles1 into tTreeArray[tCorpora][tCorpus][tMainFolder][tSub1Files]
         end if
         if tMainFolderSubFolders is empty then next repeat
         repeat for each line tSub1Folder in tMainFolderSubFolders
            if tSub1Folder is ".." then next repeat
            put tFilePath3&slash&tSub1Folder into tFilePath4
            put empty into tTreeArray[tCorpora][tCorpus][tMainFolder][tSub1Folder]
            put folders(tFilePath4) into tSubsubFolders
            if tSubsubFolders is empty or tSubsubFolders is ".." or files(tFilePath4) <> empty then 
               put files(tFilePath4) into tSubFiles1
               if line 1 of tSubFiles1 is ".DS_Store" then delete line 1 of tSubFiles1
               if tSubFiles1 <> empty then 
                  if "-" is in last item of tFilePath4 then put char 1 to offset("-",last item of tFilePath4)-1 of last item of tFilePath4 && "Files" into tSub1Files
                  else put last item of tFilePath4 && "Files" into tSub1Files
                  put tSubFiles1 into tTreeArray[tCorpora][tCorpus][tMainFolder][tSub1Folder][tSub1Files]
               end if
               if tSubsubFolders is ".." then 
                  next repeat
               end if
            end if
            if tSubsubFolders <> ".." then
               repeat for each line tSub2Folder in tSubsubFolders
                  if tSub2Folder is ".." then next repeat
                  put tFilePath4&slash&tSub2Folder into tFilePath5
                  put empty into tTreeArray[tCorpora][tCorpus][tMainFolder][tSub1Folder][tSub2Folder]
                  put folders(tFilePath5) into tSubsubFolders2
                  if tSubsubFolders2 is empty or tSubsubFolders2 is ".." or files(tFilePath5) <> empty then 
                     put files(tFilePath5) into tSubFiles1
                     if line 1 of tSubFiles1 is ".DS_Store" then delete line 1 of tSubFiles1
                     if tSubFiles1 <> empty then 
                        if "-" is in last item of tFilePath5 then put char 1 to offset("-",last item of tFilePath5)-1 of last item of tFilePath5 && "Files" into tSub2Files
                        else put last item of tFilePath5 && "Files" into tSub2Files
                        put tSubFiles1 into tTreeArray[tCorpora][tCorpus][tMainFolder][tSub1Folder][tSub2Folder][tSub2Files]
                     end if
                     if tSubsubFolders2 is ".." then 
                        next repeat
                     end if
                  end if
                  if tSubsubFolders2 <> ".." then
                     repeat for each line tSub3Folder in tSubsubFolders2
                        if tSub3Folder is ".." then next repeat
                        put tFilePath5&slash&tSub3Folder into tFilePath6
                        put empty into tTreeArray[tCorpora][tCorpus][tMainFolder][tSub1Folder][tSub2Folder][tSub3Folder]
                        put folders(tFilePath6) into tSubsubFolders3
                        if tSubsubFolders3 is empty or tSubsubFolders3 is ".." or files(tFilePath6) <> empty then 
                           put files(tFilePath6) into tSubFiles1
                           if line 1 of tSubFiles1 is ".DS_Store" then delete line 1 of tSubFiles1
                           if tSubFiles1 <> empty then 
                              if "-" is in last item of tFilePath6 then put char 1 to offset("-",last item of tFilePath6)-1 of last item of tFilePath6 && "Files" into tSub3Files
                              else put last item of tFilePath6 && "Files" into tSub3Files
                              put tSubFiles1 into tTreeArray[tCorpora][tCorpus][tMainFolder][tSub1Folder][tSub2Folder][tSub3Folder][tSub3Files]
                           end if
                           if tSubsubFolders3 is ".." then 
                              next repeat
                           end if
                        end if
                        if tSubsubFolders3 <> ".." then
                           repeat for each line tSub4Folder in tSubsubFolders3
                              if tSub4Folder is ".." then next repeat
                              put tFilePath6&slash&tSub4Folder into tFilePath7
                              put empty into tTreeArray[tCorpora][tCorpus][tMainFolder][tSub1Folder][tSub2Folder][tSub3Folder][tSub4Folder]
                              put folders(tFilePath7) into tSubsubFolders4
                              if tSubsubFolders4 is empty or tSubsubFolders4 is ".." or files(tFilePath7) <> empty then 
                                 put files(tFilePath7) into tSubFiles1
                                 if line 1 of tSubFiles1 is ".DS_Store" then delete line 1 of tSubFiles1
                                 if tSubFiles1 <> empty then 
                                    if "-" is in last item of tFilePath7 then put char 1 to offset("-",last item of tFilePath7)-1 of last item of tFilePath7 && "Files" into tSub4Files
                                    else put last item of tFilePath7 && "Files" into tSub4Files
                                    put tSubFiles1 into tTreeArray[tCorpora][tCorpus][tMainFolder][tSub1Folder][tSub2Folder][tSub3Folder][tSub4Folder][tSub4Files]
                                 end if
                                 if tSubsubFolders4 is ".." then 
                                    next repeat
                                 end if
                              end if
                              if tSubsubFolders4 <> ".." then
                                 repeat for each line tSub5Folder in tSubsubFolders4
                                    if tSub5Folder is ".." then next repeat
                                    put tFilePath7&slash&tSub5Folder into tFilePath8
                                    put empty into tTreeArray[tCorpora][tCorpus][tMainFolder][tSub1Folder][tSub2Folder][tSub3Folder][tSub4Folder][tSub5Folder]
                                    put folders(tFilePath8) into tSubsubFolders5
                                    if tSubsubFolders5 is empty or tSubsubFolders5 is ".." or files(tFilePath8) <> empty then 
                                       put files(tFilePath8) into tSubFiles1
                                       if line 1 of tSubFiles1 is ".DS_Store" then delete line 1 of tSubFiles1
                                       if tSubFiles1 <> empty then 
                                          if "-" is in last item of tFilePath8 then put char 1 to offset("-",last item of tFilePath8)-1 of last item of tFilePath8 && "Files" into tSub5Files
                                          else put last item of tFilePath8 && "Files" into tSub5Files
                                          put tSubFiles1 into tTreeArray[tCorpora][tCorpus][tMainFolder][tSub1Folder][tSub2Folder][tSub3Folder][tSub4Folder][tSub5Folder][tSub5Files]
                                       end if
                                       if tSubsubFolders5 is ".." then 
                                          next repeat
                                       end if
                                    end if
                                    if tSubsubFolders5 <> ".." then
                                       repeat for each line tSub6Folder in tSubsubFolders5
                                          if tSub6Folder is ".." then next repeat
                                          put tFilePath8&slash&tSub6Folder into tFilePath9
                                          put empty into tTreeArray[tCorpora][tCorpus][tMainFolder][tSub1Folder][tSub2Folder][tSub3Folder][tSub4Folder][tSub5Folder][tSub6Folder]
                                          put folders(tFilePath9) into tSubsubFolders6
                                          if tSubsubFolders6 is empty or tSubsubFolders6 is ".." or files(tFilePath9) <> empty then 
                                             put files(tFilePath9) into tSubFiles1
                                             if line 1 of tSubFiles1 is ".DS_Store" then delete line 1 of tSubFiles1
                                             if tSubFiles1 <> empty  then 
                                                if "-" is in last item of tFilePath9 then put char 1 to offset("-",last item of tFilePath9)-1 of last item of tFilePath9 && "Files" into tSub6Files
                                                else put last item of tFilePath9 && "Files" into tSub6Files
                                                put tSubFiles1 into tTreeArray[tCorpora][tCorpus][tMainFolder][tSub1Folder][tSub2Folder][tSub3Folder][tSub4Folder][tSub5Folder][tSub5Folder][tSub6Files]
                                             end if
                                             next repeat
                                          end if
                                       end repeat
                                    end if
                                 end repeat
                              end if
                           end repeat
                        end if
                     end repeat
                  end if
               end repeat
            end if
         end repeat
      end repeat
   end repeat
   set the arrayData of widget id 1003 of cd 1 of this stack to tTreeArray
end mouseUp

function numberFolder pNode
   if pNode is "Transcriptions" then return "1. "&pNode
   if pNode is "Editing" then return "2. "&pNode
   if pNode is "Annotations" then return "3. "&pNode
   if pNode is "Apparatus" then return "4. "&pNode
end numberFolder


##TOOLTIP:
##Click this button to display a new directory.


#####################
## Script of button "Refresh”, ID 1025 of CARD 1 of SUBSTACK Directory Tree View of STACK STEP Transcription Module

on mouseUp
   local  tFilePath,tCorporaList,tCorpus,tCorpusMainFolders,tMainFolder,tMainFolderSubFolders,tSubFolder,tSubsubFolders,tFileList
   local tSubsubFolder,tSubsubsubFolders,tFile,tSubsubsubFolderFiles,tSubsubsubFolder,tTreeArray,tCorpora,tSub1Folder,tSub2Folder,tSub3Folder,tSub4Folder,tSub5Folder
   local tSubsubFolders2,tSubsubFolders3,tSubsubFolders4,tSubsubFolders5,tSubFiles1,tFilePath2,tFilePath3,tFilePath4,tFilePath5,tFilePath6,tFilePath7,tFilePath8,tFilePath9
   local tSub1Files,tSub2Files,tSub3Files,tSub4Files,tSub5Files,tSub6Files,tSubsubFolders6
   put empty into fld id 1005 of cd 1 of this stack
   if the cMainCorporaAddress of this stack is empty then
      answer folder "Locate the folder that contains all your corpora."
      if the result is "Cancel" or it is empty then exit mouseUp
      set the cMainCorporaAddress of this stack to it
   end if
   get the cMainCorporaAddress of this stack
   put folders(the cMainCorporaAddress of this stack) into tCorporaList
   set the itemDel to slash
   if tCorporaList is empty or tCorporaList is ".." or tCorporaList is ".."&cr&"OK" then
      answer folder "The folder at "&(item -3 to -1 of it)&" does not exist or is empty. Locate the folder that contains all your corpora."
      if the result is "Cancel" or it is empty then exit mouseUp
      set the cMainCorporaAddress of this stack to it
   end if
   put the cMainCorporaAddress of this stack into tFilePath
   put last item of tFilePath into tCorpora
   put empty into tTreeArray[tCorpora]
   put folders(tFilePath) into tCorporaList
   put files(tFilePath) into tSubFiles1
   if tSubFiles1 <> empty and tSubFiles1 <> ".DS_Store" and char 1 of  tSubFiles1 <> "." then 
      put tCorpora && "Files" into tSub1Files
      if line 1 of tSubFiles1 is ".DS_Store" then delete line 1 of tSubFiles1
      if line 1 of tSubFiles1 <> empty then put tSubFiles1 into tTreeArray[tCorpora][tSub1Files]
   end if
   repeat for each line tCorpus in tCorporaList
      if tCorpus is ".." then next repeat
      put empty into tTreeArray[tCorpora][tCorpus]
      put tFilePath&slash&tCorpus into tFilePath2
      put folders(tFilePath2) into tCorpusMainFolders
      put files(tFilePath2) into tSubFiles1
      if tSubFiles1 <> empty and tSubFiles1 <> ".DS_Store" and char 1 of  tSubFiles1 <> "." then 
         put tCorpus && "Files" into tSub1Files
         if line 1 of tSubFiles1 is ".DS_Store" then delete line 1 of tSubFiles1
         if line 1 of tSubFiles1 <> empty then put tSubFiles1 into tTreeArray[tCorpora][tCorpus][tSub1Files]
      end if
      repeat for each line tMainFolder in tCorpusMainFolders
         if tMainFolder is ".." then next repeat
         put tFilePath2&slash&tMainFolder into tFilePath3
         put empty into tTreeArray[tCorpora][tCorpus][tMainFolder]
         put folders(tFilePath3) into tMainFolderSubFolders
         put files(tFilePath3) into tSubFiles1
         if tSubFiles1 <> empty and tSubFiles1 <> ".DS_Store" and char 1 of  tSubFiles1 <> "." then 
            put tMainFolder && "Files" into tSub1Files
            put tSubFiles1 into tTreeArray[tCorpora][tCorpus][tMainFolder][tSub1Files]
         end if
         if tMainFolderSubFolders is empty then next repeat
         repeat for each line tSub1Folder in tMainFolderSubFolders
            if tSub1Folder is ".." then next repeat
            put tFilePath3&slash&tSub1Folder into tFilePath4
            put empty into tTreeArray[tCorpora][tCorpus][tMainFolder][tSub1Folder]
            put folders(tFilePath4) into tSubsubFolders
            if tSubsubFolders is empty or tSubsubFolders is ".." or files(tFilePath4) <> empty then 
               put files(tFilePath4) into tSubFiles1
               if line 1 of tSubFiles1 is ".DS_Store" then delete line 1 of tSubFiles1
               if tSubFiles1 <> empty then 
                  if "-" is in last item of tFilePath4 then put char 1 to offset("-",last item of tFilePath4)-1 of last item of tFilePath4 && "Files" into tSub1Files
                  else put last item of tFilePath4 && "Files" into tSub1Files
                  put tSubFiles1 into tTreeArray[tCorpora][tCorpus][tMainFolder][tSub1Folder][tSub1Files]
               end if
               if tSubsubFolders is ".." then 
                  next repeat
               end if
            end if
            if tSubsubFolders <> ".." then
               repeat for each line tSub2Folder in tSubsubFolders
                  if tSub2Folder is ".." then next repeat
                  put tFilePath4&slash&tSub2Folder into tFilePath5
                  put empty into tTreeArray[tCorpora][tCorpus][tMainFolder][tSub1Folder][tSub2Folder]
                  put folders(tFilePath5) into tSubsubFolders2
                  if tSubsubFolders2 is empty or tSubsubFolders2 is ".." or files(tFilePath5) <> empty then 
                     put files(tFilePath5) into tSubFiles1
                     if line 1 of tSubFiles1 is ".DS_Store" then delete line 1 of tSubFiles1
                     if tSubFiles1 <> empty then 
                        if "-" is in last item of tFilePath5 then put char 1 to offset("-",last item of tFilePath5)-1 of last item of tFilePath5 && "Files" into tSub2Files
                        else put last item of tFilePath5 && "Files" into tSub2Files
                        put tSubFiles1 into tTreeArray[tCorpora][tCorpus][tMainFolder][tSub1Folder][tSub2Folder][tSub2Files]
                     end if
                     if tSubsubFolders2 is ".." then 
                        next repeat
                     end if
                  end if
                  if tSubsubFolders2 <> ".." then
                     repeat for each line tSub3Folder in tSubsubFolders2
                        if tSub3Folder is ".." then next repeat
                        put tFilePath5&slash&tSub3Folder into tFilePath6
                        put empty into tTreeArray[tCorpora][tCorpus][tMainFolder][tSub1Folder][tSub2Folder][tSub3Folder]
                        put folders(tFilePath6) into tSubsubFolders3
                        if tSubsubFolders3 is empty or tSubsubFolders3 is ".." or files(tFilePath6) <> empty then 
                           put files(tFilePath6) into tSubFiles1
                           if line 1 of tSubFiles1 is ".DS_Store" then delete line 1 of tSubFiles1
                           if tSubFiles1 <> empty then 
                              if "-" is in last item of tFilePath6 then put char 1 to offset("-",last item of tFilePath6)-1 of last item of tFilePath6 && "Files" into tSub3Files
                              else put last item of tFilePath6 && "Files" into tSub3Files
                              put tSubFiles1 into tTreeArray[tCorpora][tCorpus][tMainFolder][tSub1Folder][tSub2Folder][tSub3Folder][tSub3Files]
                           end if
                           if tSubsubFolders3 is ".." then 
                              next repeat
                           end if
                        end if
                        if tSubsubFolders3 <> ".." then
                           repeat for each line tSub4Folder in tSubsubFolders3
                              if tSub4Folder is ".." then next repeat
                              put tFilePath6&slash&tSub4Folder into tFilePath7
                              put empty into tTreeArray[tCorpora][tCorpus][tMainFolder][tSub1Folder][tSub2Folder][tSub3Folder][tSub4Folder]
                              put folders(tFilePath7) into tSubsubFolders4
                              if tSubsubFolders4 is empty or tSubsubFolders4 is ".." or files(tFilePath7) <> empty then 
                                 put files(tFilePath7) into tSubFiles1
                                 if line 1 of tSubFiles1 is ".DS_Store" then delete line 1 of tSubFiles1
                                 if tSubFiles1 <> empty then 
                                    if "-" is in last item of tFilePath7 then put char 1 to offset("-",last item of tFilePath7)-1 of last item of tFilePath7 && "Files" into tSub4Files
                                    else put last item of tFilePath7 && "Files" into tSub4Files
                                    put tSubFiles1 into tTreeArray[tCorpora][tCorpus][tMainFolder][tSub1Folder][tSub2Folder][tSub3Folder][tSub4Folder][tSub4Files]
                                 end if
                                 if tSubsubFolders4 is ".." then 
                                    next repeat
                                 end if
                              end if
                              if tSubsubFolders4 <> ".." then
                                 repeat for each line tSub5Folder in tSubsubFolders4
                                    if tSub5Folder is ".." then next repeat
                                    put tFilePath7&slash&tSub5Folder into tFilePath8
                                    put empty into tTreeArray[tCorpora][tCorpus][tMainFolder][tSub1Folder][tSub2Folder][tSub3Folder][tSub4Folder][tSub5Folder]
                                    put folders(tFilePath8) into tSubsubFolders5
                                    if tSubsubFolders5 is empty or tSubsubFolders5 is ".." or files(tFilePath8) <> empty then 
                                       put files(tFilePath8) into tSubFiles1
                                       if line 1 of tSubFiles1 is ".DS_Store" then delete line 1 of tSubFiles1
                                       if tSubFiles1 <> empty then 
                                          if "-" is in last item of tFilePath8 then put char 1 to offset("-",last item of tFilePath8)-1 of last item of tFilePath8 && "Files" into tSub5Files
                                          else put last item of tFilePath8 && "Files" into tSub5Files
                                          put tSubFiles1 into tTreeArray[tCorpora][tCorpus][tMainFolder][tSub1Folder][tSub2Folder][tSub3Folder][tSub4Folder][tSub5Folder][tSub5Files]
                                       end if
                                       if tSubsubFolders5 is ".." then 
                                          next repeat
                                       end if
                                    end if
                                    if tSubsubFolders5 <> ".." then
                                       repeat for each line tSub6Folder in tSubsubFolders5
                                          if tSub6Folder is ".." then next repeat
                                          put tFilePath8&slash&tSub6Folder into tFilePath9
                                          put empty into tTreeArray[tCorpora][tCorpus][tMainFolder][tSub1Folder][tSub2Folder][tSub3Folder][tSub4Folder][tSub5Folder][tSub6Folder]
                                          put folders(tFilePath9) into tSubsubFolders6
                                          if tSubsubFolders6 is empty or tSubsubFolders6 is ".." or files(tFilePath9) <> empty then 
                                             put files(tFilePath9) into tSubFiles1
                                             if line 1 of tSubFiles1 is ".DS_Store" then delete line 1 of tSubFiles1
                                             if tSubFiles1 <> empty  then 
                                                if "-" is in last item of tFilePath9 then put char 1 to offset("-",last item of tFilePath9)-1 of last item of tFilePath9 && "Files" into tSub6Files
                                                else put last item of tFilePath9 && "Files" into tSub6Files
                                                put tSubFiles1 into tTreeArray[tCorpora][tCorpus][tMainFolder][tSub1Folder][tSub2Folder][tSub3Folder][tSub4Folder][tSub5Folder][tSub5Folder][tSub6Files]
                                             end if
                                             next repeat
                                          end if
                                       end repeat
                                    end if
                                 end repeat
                              end if
                           end repeat
                        end if
                     end repeat
                  end if
               end repeat
            end if
         end repeat
      end repeat
   end repeat
   set the arrayData of widget id 1003 of cd 1 of this stack to tTreeArray
end mouseUp

##TOOLTIP:
##Click to update current directory view.
